,Unnamed: 0,Unnamed: 0.1,Email_ID,Unnamed: 0.1.1,author,content,content_url,date,dtype,id,subject
0,0,0,1.0,221.0,lburgazz...@apache.org,"repository camel updated branch ref /heads/master 55a61ed20 d72696455 headerselectorproducer support supplier header key default value project commit tree diff branch ref /heads/master commit d7269645508cfd36b716547dab2f2da3ebe364ae parent 55a61ed author lburgazzoli <lburgazzoli@gmail.com> authored fri apr committer lburgazzoli <lburgazzoli@gmail.com> committed fri apr .../java/org/apache/camel/impl/headerselectorproducer.java file changed insertion deletion diff --git /camel-core/src/main/java/org/apache/camel/impl/headerselectorproducer.java b /camel-core/src/main/java/org/apache/camel/impl/headerselectorproducer.java index f91f032 ..7d4b11e /camel-core/src/main/java/org/apache/camel/impl/headerselectorproducer.java b /camel-core/src/main/java/org/apache/camel/impl/headerselectorproducer.java public class headerselectorproducer extends baseselectorproducer public headerselectorproducer (endpoint endpoint supplier <string> headersupplier (endpoint, headersupplier null null public headerselectorproducer (endpoint endpoint string header (endpoint, header null null public class headerselectorproducer extends baseselectorproducer (endpoint, header defaultheadervalue null public headerselectorproducer (endpoint endpoint string header supplier <string> defaultheadervaluesupplier (endpoint, header defaultheadervaluesupplier null public headerselectorproducer (endpoint endpoint supplier <string> headersupplier supplier <string> defaultheadervaluesupplier (endpoint, headersupplier defaultheadervaluesupplier null public class headerselectorproducer extends baseselectorproducer @override protected processor getprocessor (exchange exchange throw exception string header headersupplier .get(); string action exchange .getin().getheader(headersupplier.get(), string .class); string action exchange .getin().getheader(header, string .class); (action null action defaultheadervaluesupplier .get();",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C9d2d740f77794180b53412948340828f%40git.apache.org%3E,2017-04-14 10:42:39,commits,221.0,camel git commit headerselectorproducer support supplier header key default value
1,1,1,2.0,322.0,davscl...@apache.org,repository camel updated branch ref /heads/master d72696455 6b42a3534 rename catalog runtimecatalog avoid clash package name camel -catalog. project commit tree diff branch ref /heads/master commit 6b42a3534120f58180e6194e6bf4f1a284707abc parent c66be7a author claus ibsen <davsclaus@apache.org> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr platform /camel-catalog/pom.xml file changed insertion deletion diff --git /platforms/camel-catalog/pom.xml b /platforms/camel-catalog/pom.xml index 2be82e0 ..6c71fcb /platforms/camel-catalog/pom.xml b /platforms/camel-catalog/pom.xml <executions> <execution> <id>copy-resources</id> <phase>process-sources</phase> <phase>generate-sources</phase> <goals> <goal>copy-resources</goal> </goals> <overwrite>true</overwrite> <resources> <resource> <directory>../../camel-core/src/main/java/org/apache/camel/catalog</directory> <directory>../../camel-core/src/main/java/org/apache/camel/runtimecatalog</directory> following file maintained camel -core copied <includes> <include>abstractcamelcatalog.java</include> </execution> </executions> </plugin> rename runtimecatalog catalog package name use <plugin> <groupid>com.google.code.maven-replacer-plugin</groupid> <artifactid>replacer</artifactid> <version>1.5.3</version> <executions> <execution> <phase>process-sources</phase> <goals> <goal>replace</goal> </goals> </execution> </executions> <configuration> <includes> <include>${basedir}/src/main/java/org/apache/camel/catalog/abstractcamelcatalog.java</include> <include>${basedir}/src/main/java/org/apache/camel/catalog/cataloghelper.java</include> <include>${basedir}/src/main/java/org/apache/camel/catalog/collectionstringbuffer.java</include> <include>${basedir}/src/main/java/org/apache/camel/catalog/endpointvalidationresult.java</include> <include>${basedir}/src/main/java/org/apache/camel/catalog/jsonschemahelper.java</include> <include>${basedir}/src/main/java/org/apache/camel/catalog/jsonschemaresolver.java</include> <include>${basedir}/src/main/java/org/apache/camel/catalog/languagevalidationresult.java</include> <include>${basedir}/src/main/java/org/apache/camel/catalog/simplevalidationresult.java</include> <include>${basedir}/src/main/java/org/apache/camel/catalog/suggestionstrategy.java</include> <include>${basedir}/src/main/java/org/apache/camel/catalog/timepatternconverter.java</include> <include>${basedir}/src/main/java/org/apache/camel/catalog/unsafeuricharactersencoder.java</include> <include>${basedir}/src/main/java/org/apache/camel/catalog/urisupport.java</include> </includes> <replacements> <replacement> <token>org.apache.camel.runtimecatalog</token> <value>org.apache.camel.catalog</value> </replacement> </replacements> </configuration> </plugin> generate include component catalog <plugin>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cde5de0a2e2ca40e6bcaa03835723a40e%40git.apache.org%3E,2017-04-14 10:52:55,commits,322.0,camel git commit rename catalog runtimecatalog avoid clash package name camel -catalog.
2,2,2,3.0,323.0,davscl...@apache.org,"diff --git /camel-core/src/test/java/org/apache/camel/runtimecatalog/abstractcamelcatalogtest.java b /camel-core/src/test/java/org/apache/camel/runtimecatalog/abstractcamelcatalogtest.java new file mode index ..309fb8e /dev/null b /camel-core/src/test/java/org/apache/camel/runtimecatalog/abstractcamelcatalogtest.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.runtimecatalog; +import java .net.urisyntaxexception; +import java .util.hashmap; +import java .util.map; +import org .junit.before; +import org .junit.test; +import static org .easymock.easymock.expect; +import static org .easymock.easymock.mock; +import static org .easymock.easymock.replay; +import static org .junit.assert.assertequals; +public class abstractcamelcatalogtest abstractcamelcatalog catalog new abstractcamelcatalog jsonschemaresolver resolver @before public void setupmockcatalog resolver mock (jsonschemaresolver.class); catalog .setjsonschemaresolver(resolver); @test public void shouldconstructendpointuris throw urisyntaxexception expect (resolver.getcomponentjsonschema(""comp"")).andreturn(""{\n""// \""component\"": {\n""// \""syntax\"": \""comp:param1:param2\""\n""// }\n""// replay (resolver); final map <string, string property new hashmap property .put(""param1"", ""value1""); property .put(""param2"", ""value2""); property .put(""param3"", ""value3""); final string endpointuri catalog .doasendpointuri(""comp"", property false assertequals (""comp:value1:value2?param3=value3"", endpointuri @test public void shouldconstructendpointuriswithpropertyplaceholders throw urisyntaxexception expect (resolver.getcomponentjsonschema(""comp"")).andreturn(""{\n""// \""component\"": {\n""// \""syntax\"": \""comp:param1:param2\""\n""// }\n""// replay (resolver); final map <string, string property new hashmap property .put(""param1"", ""{{prop1}}""); property .put(""param2"", ""{{prop2}}""); property .put(""param3"", ""{{prop3}}""); final string endpointuri catalog .doasendpointuri(""comp"", property false assertequals (""comp:{{prop1}}:{{prop2}}?param3={{prop3}}"", endpointuri @test public void shouldconstructendpointuriswhenvaluescontaintokens throw urisyntaxexception expect (resolver.getcomponentjsonschema(""comp"")).andreturn(""{\n""// \""component\"": {\n""// \""syntax\"": \""comp:param1:param2\""\n""// }\n""// replay (resolver); final map <string, string property new hashmap property .put(""param1"", ""{value1}""); property .put(""param2"", ""/value2/""); property .put(""param3"", ""/value3/{param}""); final string endpointuri catalog .doasendpointuri(""comp"", property false assertequals (""comp:{value1}:/value2/?param3=/value3/{param}"", endpointuri diff --git /camel-core/src/test/java/org/apache/camel/runtimecatalog/runtimecamelcatalogtest.java b /camel-core/src/test/java/org/apache/camel/runtimecatalog/runtimecamelcatalogtest.java new file mode index ..dfdd5c5 /dev/null b /camel-core/src/test/java/org/apache/camel/runtimecatalog/runtimecamelcatalogtest.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.runtimecatalog; +import java .util.hashmap; +import java .util.map; +import org .apache.camel.impl.defaultcamelcontext; +import org .junit.beforeclass; +import org .junit.test; +import org .slf4j.logger; +import org .slf4j.loggerfactory; +import static org .junit.assert.assertequals; +import static org .junit.assert.assertfalse; +import static org .junit.assert.assertnotnull; +import static org .junit.assert.asserttrue; +public class runtimecamelcatalogtest static runtimecamelcatalog catalog private static final logger log loggerfactory .getlogger(runtimecamelcatalogtest.class); @beforeclass public static void createcamelcatalog catalog new defaultruntimecamelcatalog (new defaultcamelcontext @test public void testfromcamelcontext throw exception string schema new defaultcamelcontext ().getruntimecamelcatalog().modeljsonschema(""choice""); assertnotnull (schema); @test public void testjsonschema throw exception string schema catalog .modeljsonschema(""aggregate""); assertnotnull (schema); let make possible find bean /method using name schema catalog .modeljsonschema(""method""); assertnotnull (schema); schema catalog .modeljsonschema(""bean""); assertnotnull (schema); @test public void testasendpointurimapfile throw exception map <string, string map new hashmap <string, string map .put(""directoryname"", ""src/data/inbox""); map .put(""noop"", ""true""); map .put(""delay"", string uri catalog .asendpointuri(""file"", map true assertequals (""file:src/data/inbox?delay=5000&noop=true"", uri string uri2 catalog .asendpointurixml(""file"", map true assertequals (""file:src/data/inbox?delay=5000&amp;noop=true"", uri2 @test public void testasendpointuritimer throw exception map <string, string map new hashmap <string, string map .put(""timername"", ""foo""); map .put(""period"", string uri catalog .asendpointuri(""timer"", map true assertequals (""timer:foo?period=5000"", uri @test public void testasendpointuripropertiesplaceholders throw exception map <string, string map new hashmap <string, string map .put(""timername"", ""foo""); map .put(""period"", ""{{howoften}}""); map .put(""repeatcount"", string uri catalog .asendpointuri(""timer"", map true assertequals (""timer:foo?period=%7b%7bhowoften%7d%7d&repeatcount=5"", uri uri catalog .asendpointuri(""timer"", map false assertequals (""timer:foo?period={{howoften}}&repeatcount=5"", uri @test public void testasendpointuribeanlookup throw exception map <string, string map new hashmap <string, string map .put(""resourceuri"", ""foo.xslt""); map .put(""converter"", ""#myconverter""); string uri catalog .asendpointuri(""xslt"", map true assertequals (""xslt:foo.xslt?converter=%23myconverter"", uri uri catalog .asendpointuri(""xslt"", map false assertequals (""xslt:foo.xslt?converter=#myconverter"", uri @test public void testendpointpropertiesplaceholders throw exception map <string, string map catalog .endpointproperties(""timer:foo?period={{howoften}}&repeatcount=5""); assertnotnull (map); assertequals map .size()); assertequals (""foo"", map .get(""timername"")); assertequals (""{{howoften}}"", map .get(""period"")); assertequals map .get(""repeatcount"")); @test public void testasendpointurilog throw exception map <string, string map new hashmap <string, string map .put(""loggername"", ""foo""); map .put(""loggerlevel"", ""warn""); map .put(""multiline"", ""true""); map .put(""showall"", ""true""); map .put(""showbody"", ""false""); map .put(""showbodytype"", ""false""); map .put(""showexchangepattern"", ""false""); map .put(""style"", ""tab""); assertequals (""log:foo?loggerlevel=warn&multiline=true&showall=true&style=tab"", catalog .asendpointuri(""log"", map false @test public void testasendpointurilogshort throw exception map <string, string map new hashmap <string, string map .put(""loggername"", ""foo""); map .put(""loggerlevel"", ""debug""); assertequals (""log:foo?loggerlevel=debug"", catalog .asendpointuri(""log"", map false @test public void testasendpointuriwithplaceholder throw exception map <string, string map new hashmap <string, string map .put(""name"", ""foo""); map .put(""blockwhenfull"", ""{{block}}""); assertequals (""seda:foo?blockwhenfull={{block}}"", catalog .asendpointuri(""seda"", map false @test public void testendpointpropertiessedarequired throw exception map <string, string map catalog .endpointproperties(""seda:foo""); assertnotnull (map); assertequals map .size()); assertequals (""foo"", map .get(""name"")); map catalog .endpointproperties(""seda:foo?blockwhenfull=true""); assertnotnull (map); assertequals map .size()); assertequals (""foo"", map .get(""name"")); assertequals (""true"", map .get(""blockwhenfull"")); @test public void validateproperties throw exception valid endpointvalidationresult result catalog .validateendpointproperties(""log:mylog""); asserttrue (result.issuccess()); unknown result catalog .validateendpointproperties(""log:mylog?level=warn&foo=bar""); assertfalse (result.issuccess()); asserttrue (result.getunknown().contains(""foo"")); assertequals result .getnumberoferrors()); enum result catalog .validateendpointproperties(""seda:foo?waitfortasktocomplete=blah""); assertfalse (result.issuccess()); assertequals (""blah"", result .getinvalidenum().get(""waitfortasktocomplete"")); assertequals result .getnumberoferrors()); reference okay result catalog .validateendpointproperties(""seda:foo?queue=#queue""); asserttrue (result.issuccess()); assertequals result .getnumberoferrors()); unknown component result catalog .validateendpointproperties(""foo:bar?me=you""); assertfalse (result.issuccess()); asserttrue (result.getunknowncomponent().equals(""foo"")); assertequals result .getnumberoferrors()); invalid boolean default value result catalog .validateendpointproperties(""log:output?showall=ggg""); assertfalse (result.issuccess()); assertequals (""ggg"", result .getinvalidboolean().get(""showall"")); assertequals result .getnumberoferrors()); dataset result catalog .validateendpointproperties(""dataset:foo?minrate=50""); asserttrue (result.issuccess()); time pattern result catalog .validateendpointproperties(""timer://foo?fixedrate=true&delay=0&period=2s""); asserttrue (result.issuccess()); reference lookup result catalog .validateendpointproperties(""timer://foo?fixedrate=#fixed&delay=#mydelay""); asserttrue (result.issuccess()); optional consumer prefix result catalog .validateendpointproperties(""file:inbox?consumer.delay=5000&consumer.greedy=true""); asserttrue (result.issuccess()); optional without consumer prefix result catalog .validateendpointproperties(""file:inbox?delay=5000&greedy=true""); asserttrue (result.issuccess()); mixed optional without consumer prefix result catalog .validateendpointproperties(""file:inbox?delay=5000&consumer.greedy=true""); asserttrue (result.issuccess()); prefix result catalog .validateendpointproperties(""file:inbox?delay=5000&scheduler.foo=123&scheduler.bar=456""); asserttrue (result.issuccess()); stub result catalog .validateendpointproperties(""stub:foo?me=123&you=456""); asserttrue (result.issuccess()); lenient result catalog .validateendpointproperties(""dataformat:string:marshal?foo=bar""); asserttrue (result.issuccess()); lenient result catalog .validateendpointproperties(""dataformat:string:marshal?foo=bar"", true assertfalse (result.issuccess()); asserttrue (result.getunknown().contains(""foo"")); data format result catalog .validateendpointproperties(""dataformat:string:marshal?charset=utf-8"", true asserttrue (result.issuccess()); incapable parse result catalog .validateendpointproperties(""{{getftpurl}}?recursive=true""); assertfalse (result.issuccess()); asserttrue (result.getincapable() null @test public void validatepropertiessummary throw exception endpointvalidationresult result catalog .validateendpointproperties(""yammer:messages?blah=yada&accesstoken=aaa&consumerkey=&usejson=no&initialdelay=five&pollstrategy=mystrategy""); assertfalse (result.issuccess()); string reason result .summaryerrormessage(true); log .info(reason); result catalog .validateendpointproperties(""jms:unknown:myqueue""); assertfalse (result.issuccess()); reason result .summaryerrormessage(false); log .info(reason); @test public void validatetimepattern throw exception asserttrue (catalog.validatetimepattern(""0"")); asserttrue (catalog.validatetimepattern(""500"")); asserttrue (catalog.validatetimepattern(""10000"")); asserttrue (catalog.validatetimepattern(""5s"")); asserttrue (catalog.validatetimepattern(""5sec"")); asserttrue (catalog.validatetimepattern(""5secs"")); asserttrue (catalog.validatetimepattern(""3m"")); asserttrue (catalog.validatetimepattern(""3min"")); asserttrue (catalog.validatetimepattern(""3minutes"")); asserttrue (catalog.validatetimepattern(""5m15s"")); asserttrue (catalog.validatetimepattern(""1h"")); asserttrue (catalog.validatetimepattern(""1hour"")); asserttrue (catalog.validatetimepattern(""2hours"")); assertfalse (catalog.validatetimepattern(""bla"")); assertfalse (catalog.validatetimepattern(""2year"")); assertfalse (catalog.validatetimepattern(""60darn"")); @test public void testendpointcomponentname throw exception string name catalog .endpointcomponentname(""jms:queue:foo""); assertequals (""jms"", name @test public void testsimpleexpression throw exception simplevalidationresult result catalog .validatesimpleexpression(null, ""${body}""); asserttrue (result.issuccess()); assertequals (""${body}"", result .getsimple()); result catalog .validatesimpleexpression(null, ""${body""); assertfalse (result.issuccess()); assertequals (""${body"", result .getsimple()); log .info(result.geterror()); asserttrue (result.geterror().startswith(""expected symbol functionend eol location assertequals (""expected symbol functionend eol result .getshorterror()); assertequals result .getindex()); @test public void testsimplepredicate throw exception simplevalidationresult result catalog .validatesimplepredicate(null, ""${body} 'abc'""); asserttrue (result.issuccess()); assertequals (""${body} 'abc'"", result .getsimple()); result catalog .validatesimplepredicate(null, ""${body} ${header.size""); assertfalse (result.issuccess()); assertequals (""${body} ${header.size"", result .getsimple()); log .info(result.geterror()); asserttrue (result.geterror().startswith(""expected symbol functionend eol location assertequals (""expected symbol functionend eol result .getshorterror()); assertequals result .getindex()); @test public void testsimplepredicateplaceholder throw exception simplevalidationresult result catalog .validatesimplepredicate(null, ""${body} contains '{{danger}}'""); asserttrue (result.issuccess()); assertequals (""${body} contains '{{danger}}'"", result .getsimple()); result catalog .validatesimplepredicate(null, ""${bdy} contains '{{danger}}'""); assertfalse (result.issuccess()); assertequals (""${bdy} contains '{{danger}}'"", result .getsimple()); log .info(result.geterror()); asserttrue (result.geterror().startswith(""unknown function bdy location asserttrue (result.geterror().contains(""'{{danger}}'"")); assertequals (""unknown function bdy result .getshorterror()); assertequals result .getindex()); @test public void testvalidatelanguage throw exception languagevalidationresult result catalog .validatelanguageexpression(null, ""simple"", ""${body}""); asserttrue (result.issuccess()); assertequals (""${body}"", result .gettext()); result catalog .validatelanguageexpression(null, ""header"", ""foo""); asserttrue (result.issuccess()); assertequals (""foo"", result .gettext()); result catalog .validatelanguagepredicate(null, ""simple"", ""${body} asserttrue (result.issuccess()); assertequals (""${body} result .gettext()); result catalog .validatelanguagepredicate(null, ""header"", ""bar""); asserttrue (result.issuccess()); assertequals (""bar"", result .gettext()); result catalog .validatelanguagepredicate(null, ""foobar"", ""bar""); assertfalse (result.issuccess()); assertequals (""unknown language foobar result .geterror()); @test public void testvalidateendpointconsumeronly throw exception string uri ""file:inbox?buffersize=4096&readlock=changed&delete=true""; endpointvalidationresult result catalog .validateendpointproperties(uri, false true false asserttrue (result.issuccess()); uri ""file:inbox?buffersize=4096&readlock=changed&delete=true&fileexist=append""; result catalog .validateendpointproperties(uri, false true false assertfalse (result.issuccess()); assertequals (""fileexist"", result .getnotconsumeronly().iterator().next()); @test public void testvalidateendpointproduceronly throw exception string uri ""file:outbox?buffersize=4096&fileexist=append""; endpointvalidationresult result catalog .validateendpointproperties(uri, false false true asserttrue (result.issuccess()); uri ""file:outbox?buffersize=4096&fileexist=append&delete=true""; result catalog .validateendpointproperties(uri, false false true assertfalse (result.issuccess()); assertequals (""delete"", result .getnotproduceronly().iterator().next());",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C9e3f964e77d045cf840b002cc3565efe%40git.apache.org%3E,2017-04-14 10:52:56,commits,323.0,camel git commit rename catalog runtimecatalog avoid clash package name camel -catalog.
3,3,3,4.0,324.0,davscl...@apache.org,"diff --git /camel-core/src/main/java/org/apache/camel/runtimecatalog/jsonschemahelper.java b /camel-core/src/main/java/org/apache/camel/runtimecatalog/jsonschemahelper.java new file mode index ..1e69269 /dev/null b /camel-core/src/main/java/org/apache/camel/runtimecatalog/jsonschemahelper.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.runtimecatalog; +import java .util.arraylist; +import java .util.linkedhashmap; +import java .util.linkedhashset; +import java .util.list; +import java .util.map; +import java .util.set; +import java .util.regex.matcher; +import java .util.regex.pattern; +public final class jsonschemahelper text enum boolean integer number private static final pattern pattern pattern .compile(""\""(.+?)\""|\\[(.+)\\]|(true|false)|(-?\\d+\\.?\\d*)""); private static final string quot ""&quot;""; private jsonschemahelper par json schema split list row row contains key value pair metadata @param group group parse <tt>component</tt>, <tt>componentproperties</tt>, <tt>properties</tt>. @param json json @return list row row set key value pair metadata public static list <map<string, string parsejsonschema (string group string json boolean parseproperties list <map<string, string answer new arraylist <map<string, string (json null return answer boolean found false parse line line string line json .split(""\n""); (string line line need find group first (!found) string line .trim(); found .startswith(""\"""" group .endswith(""{""); continue stop end group (line.equals("" line .equals("" break need safe encode parse line line line .replaceall(""\""\\\\\""\"""", quot map <string, string row new linkedhashmap <string, string matcher matcher pattern .matcher(line); string key (parseproperties) parsing property first key given name first parsed token value name key ""name""; else key null (matcher.find()) (key null key matcher .group(1); else string value matcher .group(1); (value null text based value value .trim(); decode value value .replaceall(quot, value decodejson (value); (value null text maybe enum value matcher .group(2); (value null enum strip trim space comma value value .replaceall(""\"""", value value .replaceall("", value value .trim(); (value null text maybe boolean value matcher .group(3); (value null text maybe integer value matcher .group(4); (value null row .put(key, value reset key null (!row.isempty()) answer .add(row); return answer private static string decodejson (string value json encodes need decode back (""\\\\"".equals(value)) value return value public static boolean iscomponentlenientproperties (list<map<string, string row (map<string, string row row (row.containskey(""lenientproperties"")) return ""true"".equals(row.get(""lenientproperties"")); return false public static boolean iscomponentconsumeronly (list<map<string, string row (map<string, string row row (row.containskey(""consumeronly"")) return ""true"".equals(row.get(""consumeronly"")); return false public static boolean iscomponentproduceronly (list<map<string, string row (map<string, string row row (row.containskey(""produceronly"")) return ""true"".equals(row.get(""produceronly"")); return false public static boolean ispropertyconsumeronly (list<map<string, string row string name (map<string, string row row string label null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""label"")) label row .get(""label""); (found) return label null label .contains(""consumer""); return false public static boolean ispropertyproduceronly (list<map<string, string row string name (map<string, string row row string label null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""label"")) label row .get(""label""); (found) return label null label .contains(""producer""); return false public static boolean ispropertyrequired (list<map<string, string row string name (map<string, string row row boolean required false boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""required"")) required ""true"".equals(row.get(""required"")); (found) return required return false public static string getpropertykind (list<map<string, string row string name (map<string, string row row string kind null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""kind"")) kind row .get(""kind""); (found) return kind return null public static boolean ispropertyboolean (list<map<string, string row string name (map<string, string row row string type null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""type"")) type row .get(""type""); (found) return ""boolean"".equals(type); return false public static boolean ispropertyinteger (list<map<string, string row string name (map<string, string row row string type null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""type"")) type row .get(""type""); (found) return ""integer"".equals(type); return false public static boolean ispropertynumber (list<map<string, string row string name (map<string, string row row string type null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""type"")) type row .get(""type""); (found) return ""number"".equals(type); return false public static boolean ispropertyobject (list<map<string, string row string name (map<string, string row row string type null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""type"")) type row .get(""type""); (found) return ""object"".equals(type); return false public static string getpropertydefaultvalue (list<map<string, string row string name (map<string, string row row string defaultvalue null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""defaultvalue"")) defaultvalue row .get(""defaultvalue""); (found) return defaultvalue return null public static string stripoptionalprefixfromname (list<map<string, string row string name (map<string, string row row string optionalprefix null boolean found false (row.containskey(""optionalprefix"")) optionalprefix row .get(""optionalprefix""); (row.containskey(""name"")) (optionalprefix null name .startswith(optionalprefix)) name name .substring(optionalprefix.length()); try return stripoptionalprefixfromname (rows, name else found name .equals(row.get(""name"")); (found) return name return name public static string getpropertyenum (list<map<string, string row string name (map<string, string row row string enums null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""enum"")) enums row .get(""enum""); (found) return enums return null public static string getpropertyprefix (list<map<string, string row string name (map<string, string row row string prefix null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""prefix"")) prefix row .get(""prefix""); (found) return prefix return null public static boolean ispropertymultivalue (list<map<string, string row string name (map<string, string row row boolean multivalue false boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""multivalue"")) multivalue ""true"".equals(row.get(""multivalue"")); (found) return multivalue return false public static string getpropertynamefromnamewithprefix (list<map<string, string row string name (map<string, string row row string propertyname null boolean found false (row.containskey(""name"")) propertyname row .get(""name""); (row.containskey(""prefix"")) string preifx row .get(""prefix""); found name .startswith(preifx); (found) return propertyname return null public static map <string, string getrow (list<map<string, string row string key (map<string, string row row (key.equals(row.get(""name""))) return row return null public static set <string> getnames (list<map<string, string row set <string> answer new linkedhashset <string>(); (map<string, string row row (row.containskey(""name"")) answer .add(row.get(""name"")); return answer diff --git /camel-core/src/main/java/org/apache/camel/runtimecatalog/jsonschemaresolver.java b /camel-core/src/main/java/org/apache/camel/runtimecatalog/jsonschemaresolver.java new file mode index ..dbd6f45 /dev/null b /camel-core/src/main/java/org/apache/camel/runtimecatalog/jsonschemaresolver.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.runtimecatalog; pluggable resolver load json schema file component data format language etc +public interface jsonschemaresolver return component information json format @param name component name @return component detail json string getcomponentjsonschema (string name return data format information json format @param name data format name @return data format detail json string getdataformatjsonschema (string name return language information json format @param name language name @return language detail json string getlanguagejsonschema (string name return (miscellaneous) information json format @param name (miscellaneous) name @return (miscellaneous) detail json string getotherjsonschema (string name return model information json format @param name model name @return model detail json string getmodeljsonschema (string name diff --git /camel-core/src/main/java/org/apache/camel/runtimecatalog/languagevalidationresult.java b /camel-core/src/main/java/org/apache/camel/runtimecatalog/languagevalidationresult.java new file mode index ..dbb5525 /dev/null b /camel-core/src/main/java/org/apache/camel/runtimecatalog/languagevalidationresult.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.runtimecatalog; +import java .io.serializable; validation result parsing language expression predicate +public class languagevalidationresult implement serializable private final string text private string error private string shorterror private int index public languagevalidationresult (string text .text text public string gettext return text public boolean issuccess return error null public void seterror (string error .error error public string geterror return error public string getshorterror return shorterror public void setshorterror (string shorterror .shorterror shorterror public int getindex return index public void setindex (int index .index index diff --git /camel-core/src/main/java/org/apache/camel/runtimecatalog/runtimecamelcatalog.java b /camel-core/src/main/java/org/apache/camel/runtimecatalog/runtimecamelcatalog.java new file mode index ..86c4b53 /dev/null b /camel-core/src/main/java/org/apache/camel/runtimecatalog/runtimecamelcatalog.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.runtimecatalog; +import java .net.urisyntaxexception; +import java .util.map; +import org .apache.camel.staticservice; runtime based camelcatalog included camel -core provided limit camelcatalog capability +public interface runtimecamelcatalog extends staticservice return component information json format @param name component name @return component detail json string componentjsonschema (string name return data format information json format @param name data format name @return data format detail json string dataformatjsonschema (string name return language information json format @param name language name @return language detail json string languagejsonschema (string name return model information json format @param name model name @return model detail json string modeljsonschema (string name par endpoint uri construct key /value property option @param uri endpoint uri @return property key value pair endpoint option map <string, string endpointproperties (string uri throw urisyntaxexception par endpoint uri construct key /value property lenient property (eg custom option <p/> example using http component provide query parameter endpoint uri @param uri endpoint uri @return property key value pair lenient property map <string, string endpointlenientproperties (string uri throw urisyntaxexception validates pattern whether valid time pattern @param pattern pattern 5 5sec 4min 4m30s 1h etc @return <tt>true</tt> valid <tt>false</tt> invalid boolean validatetimepattern (string pattern validates property given scheme component endpoint @param scheme endpoint scheme @param property endpoint property @return validation result endpointvalidationresult validateproperties (string scheme map <string, string property par validates endpoint uri construct key /value property option @param uri endpoint uri @return validation result endpointvalidationresult validateendpointproperties (string uri par validates endpoint uri construct key /value property option <p/> option ignorelenientproperties used ignore component us lenient property true uri validation stricter would fail property part component uri using lenient property example using http component provide query parameter endpoint uri @param uri endpoint uri @param ignorelenientproperties whether ignore component us lenient property @return validation result endpointvalidationresult validateendpointproperties (string uri boolean ignorelenientproperties par validates endpoint uri construct key /value property option <p/> option ignorelenientproperties used ignore component us lenient property true uri validation stricter would fail property part component uri using lenient property example using http component provide query parameter endpoint uri @param uri endpoint uri @param ignorelenientproperties whether ignore component us lenient property @param consumeronly whether endpoint used consumer @param produceronly whether endpoint used producer @return validation result endpointvalidationresult validateendpointproperties (string uri boolean ignorelenientproperties boolean consumeronly boolean produceronly par validates simple expression <p/> <b>important:</b> requires <tt>camel-core</tt> classpath @param simple simple expression @return validation result @deprecated use {@link #validatesimpleexpression(classloader, string @deprecated simplevalidationresult validatesimpleexpression (string simple par validates simple expression <p/> <b>important:</b> requires <tt>camel-core</tt> classpath @param classloader custom classloader use loading language classpath <tt>null</tt> using default classloader @param simple simple expression @return validation result simplevalidationresult validatesimpleexpression (classloader classloader string simple par validates simple predicate <p/> <b>important:</b> requires <tt>camel-core</tt> classpath @param simple simple predicate @return validation result @deprecated use {@link #validatesimplepredicate(classloader, string @deprecated simplevalidationresult validatesimplepredicate (string simple par validates simple predicate <p/> <b>important:</b> requires <tt>camel-core</tt> classpath @param classloader custom classloader use loading language classpath <tt>null</tt> using default classloader @param simple simple predicate @return validation result simplevalidationresult validatesimplepredicate (classloader classloader string simple par validates language predicate <p/> <b>important:</b> requires <tt>camel-core</tt> language dependency classpath @param classloader custom classloader use loading language classpath <tt>null</tt> using default classloader @param language name language @param text predicate text @return validation result languagevalidationresult validatelanguagepredicate (classloader classloader string language string text par validates language expression <p/> <b>important:</b> requires <tt>camel-core</tt> language dependency classpath @param classloader custom classloader use loading language classpath <tt>null</tt> using default classloader @param language name language @param text expression text @return validation result languagevalidationresult validatelanguageexpression (classloader classloader string language string text return component name given endpoint uri @param uri endpoint uri @return component name (aka scheme <tt>null</tt> possible determine string endpointcomponentname (string uri creates endpoint uri java style information property @param scheme endpoint schema @param property property key value pair @param encode whether url encode returned uri @return constructed endpoint uri @throws java .net.urisyntaxexception thrown encoding error string asendpointuri (string scheme map <string, string property boolean encode throw urisyntaxexception creates endpoint uri xml style (eg escape &ampl;) information property @param scheme endpoint schema @param property property key value pair @param encode whether url encode returned uri @return constructed endpoint uri @throws java .net.urisyntaxexception thrown encoding error string asendpointurixml (string scheme map <string, string property boolean encode throw urisyntaxexception diff --git /camel-core/src/main/java/org/apache/camel/runtimecatalog/simplevalidationresult.java b /camel-core/src/main/java/org/apache/camel/runtimecatalog/simplevalidationresult.java new file mode index ..1b8dd0e /dev/null b /camel-core/src/main/java/org/apache/camel/runtimecatalog/simplevalidationresult.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.runtimecatalog; backwards compatible favor using {@link languagevalidationresult instead +public class simplevalidationresult extends languagevalidationresult public simplevalidationresult (string text super (text); public string getsimple return gettext diff --git /camel-core/src/main/java/org/apache/camel/runtimecatalog/suggestionstrategy.java b /camel-core/src/main/java/org/apache/camel/runtimecatalog/suggestionstrategy.java new file mode index ..e29afc6 /dev/null b /camel-core/src/main/java/org/apache/camel/runtimecatalog/suggestionstrategy.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.runtimecatalog; +import java .util.set; strategy provide suggestion unknown endpoint option +public interface suggestionstrategy provides list valid option name mean function @param name valid name @param unknownoption unknown option name @return list suggested name (did mean string suggestendpointoptions (set<string> name string unknownoption diff --git /camel-core/src/main/java/org/apache/camel/runtimecatalog/timepatternconverter.java b /camel-core/src/main/java/org/apache/camel/runtimecatalog/timepatternconverter.java new file mode index ..ed5585c /dev/null b /camel-core/src/main/java/org/apache/camel/runtimecatalog/timepatternconverter.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.runtimecatalog; +import java .util.regex.matcher; +import java .util.regex.pattern; class copy camel -core use independent validate uris time pattern +public final class timepatternconverter private static final pattern numbers_only_string_pattern pattern .compile(""^[-]?(\\d)+$"", pattern .case_insensitive); private static final pattern hour_regex_pattern pattern .compile(""((\\d)*(\\d))h(our(s)?)?"", pattern .case_insensitive); private static final pattern minutes_regex_pattern pattern .compile(""((\\d)*(\\d))m(in(ute(s)?)?)?"", pattern .case_insensitive); private static final pattern seconds_regex_pattern pattern .compile(""((\\d)*(\\d))s(ec(ond)?(s)?)?"", pattern .case_insensitive); utility class public constructor private timepatternconverter public static long tomilliseconds (string source throw illegalargumentexception long millisecond boolean foundflag false checkcorrectnessofpattern (source); matcher matcher matcher creatematcher (numbers_only_string_pattern, source (matcher.find()) note also used regular numeric string string long converter used string millisecond long .valueof(source); else matcher creatematcher (hour_regex_pattern, source (matcher.find()) millisecond millisecond long .valueof(matcher.group(1))); foundflag true matcher creatematcher (minutes_regex_pattern, source (matcher.find()) long minute long .valueof(matcher.group(1)); ((minutes foundflag throw new illegalargumentexception (""minutes contain valid value source foundflag true millisecond millisecond minute matcher creatematcher (seconds_regex_pattern, source (matcher.find()) long second long .valueof(matcher.group(1)); ((seconds foundflag throw new illegalargumentexception (""seconds contain valid value source foundflag true millisecond millisecond second pattern matched initiating fallback check conversion (if required source point may contain illegal value special character (!foundflag) millisecond long .valueof(source); return millisecond private static void checkcorrectnessofpattern (string source //replace number matcher matcher creatematcher (numbers_only_string_pattern, source string replacesource matcher .replacefirst(""""); //replace hour string matcher creatematcher (hour_regex_pattern, replacesource (matcher.find() matcher .find()) throw new illegalargumentexception (""hours specified source replacesource matcher .replacefirst(""""); //replace minute matcher creatematcher (minutes_regex_pattern, replacesource (matcher.find() matcher .find()) throw new illegalargumentexception (""minutes specified source replacesource matcher .replacefirst(""""); //replace second matcher creatematcher (seconds_regex_pattern, replacesource (matcher.find() matcher .find()) throw new illegalargumentexception (""seconds specified source replacesource matcher .replacefirst(""""); (replacesource.length() throw new illegalargumentexception (""illegal character source private static matcher creatematcher (pattern pattern string source return pattern .matcher(source); diff --git /camel-core/src/main/java/org/apache/camel/runtimecatalog/urisupport.java b /camel-core/src/main/java/org/apache/camel/runtimecatalog/urisupport.java new file mode index /dev/null b /camel-core/src/main/java/org/apache/camel/runtimecatalog/urisupport.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.runtimecatalog; +import java .io.unsupportedencodingexception; +import java .net.uri; +import java .net.urisyntaxexception; +import java .net.urldecoder; +import java .net.urlencoder; +import java .util.arraylist; +import java .util.iterator; +import java .util.linkedhashmap; +import java .util.list; +import java .util.map; copied org .apache.camel.util.urisupport +public final class urisupport public static final string raw_token_start ""raw(""; public static final string raw_token_end private static final string charset ""utf-8""; private urisupport helper class normalizes uri unsafe character encoded @param uri input uri @return uri instance @throws urisyntaxexception thrown syntax error input uri public static uri normalizeuri (string uri throw urisyntaxexception return new uri (unsafeuricharactersencoder.encode(uri, true public static map <string, object extractproperties (map<string, object property string optionprefix map <string, object rc new linkedhashmap <string, object >(properties.size()); (iterator<map.entry<string, object property .entryset().iterator(); .hasnext();) map .entry<string, object entry .next(); string name entry .getkey(); (name.startswith(optionprefix)) object value property .get(name); name name .substring(optionprefix.length()); rc .put(name, value .remove(); return rc strip query parameter uri @param uri uri @return uri without query parameter public static string stripquery (string uri int idx uri .indexof('?'); (idx uri uri .substring(0, idx return uri par query parameter uri (eg query part @param uri uri @return parameter empty map parameter (eg never null @throws urisyntaxexception thrown uri invalid syntax public static map <string, object parseparameters (uri uri throw urisyntaxexception string query uri .getquery(); (query null string schemespecificpart uri .getschemespecificpart(); int idx schemespecificpart .indexof('?'); (idx return empty map return new linkedhashmap <string, object else query schemespecificpart .substring(idx else query stripprefix (query, return parsequery (query); strip prefix value <p/> return value -is starting prefix @param value value @param prefix prefix remove value @return value without prefix public static string stripprefix (string value string prefix (value null value .startswith(prefix)) return value .substring(prefix.length()); return value par query part uri (eg parameter <p/> uri parameter default uri encoded however define parameter value syntax <tt>key=raw(value)</tt> tell camel encode value use value (eg key =value) value <b>not</b> encoded @param uri uri @return parameter empty map parameter (eg never null @throws urisyntaxexception thrown uri invalid syntax @see #raw_token_start @see #raw_token_end public static map <string, object parsequery (string uri throw urisyntaxexception return parsequery (uri, false par query part uri (eg parameter <p/> uri parameter default uri encoded however define parameter value syntax <tt>key=raw(value)</tt> tell camel encode value use value (eg key =value) value <b>not</b> encoded @param uri uri @param useraw whether force using raw value @return parameter empty map parameter (eg never null @throws urisyntaxexception thrown uri invalid syntax @see #raw_token_start @see #raw_token_end public static map <string, object parsequery (string uri boolean useraw throw urisyntaxexception must check trailing uri .split(""&"") ignore (uri null uri .endswith(""&"")) throw new urisyntaxexception (uri, ""invalid uri syntax trailing marker found ""check uri remove trailing marker (isempty(uri)) return empty map return new linkedhashmap <string, object need parse uri query parameter manually cannot rely splitting used parameter value well try use linked map parameter order map <string, object rc new linkedhashmap <string, object boolean iskey true boolean isvalue false boolean israw false stringbuilder key new stringbuilder stringbuilder value new stringbuilder parse uri parameter char char (int uri .length(); current char char ch uri .charat(i); look ahead next char char next (i uri .length() next uri .charat(i else next '\u0000'; raw value israw value .tostring().startswith(raw_token_start); raw mode keep adding hit end marker (israw) (iskey) key .append(ch); else (isvalue) value .append(ch); end raw marker end value boolean end ch raw_token_end .charat(0) (next next '\u0000'); (end) raw value end add parameter reset flag addparameter (key.tostring(), value .tostring(), rc useraw israw key .setlength(0); value .setlength(0); iskey true isvalue false israw false skip next raw mode already added value continue key sign key end value mode (iskey ch iskey false isvalue true israw false continue denote parameter ended (ch parameter ended hit separator string akey key .tostring(); key may placeholder option know boolean validkey !akey.startswith(""{{"") !akey.endswith(""}}""); (validkey) addparameter (akey, value .tostring(), rc useraw israw key .setlength(0); value .setlength(0); iskey true isvalue false israw false continue regular char add key value (iskey) key .append(ch); else (isvalue) value .append(ch); left parameter add (key.length() string akey key .tostring(); key may placeholder option know boolean validkey !akey.startswith(""{{"") !akey.endswith(""}}""); (validkey) addparameter (akey, value .tostring(), rc useraw israw return rc catch (unsupportedencodingexception e urisyntaxexception se new urisyntaxexception (e.tostring(), ""invalid encoding se .initcause(e); throw se @suppresswarnings(""unchecked"") private static void addparameter (string name string value map <string, object map boolean israw throw unsupportedencodingexception name urldecoder .decode(name, charset (!israw) need replace value urldecoder .decode(value.replaceall(""%"", charset key already exist (map.containskey(name)) yes make sure support multiple value using list hold multiple value object existing map .get(name); list <string> list (existing instanceof list list (list<string>) existing else create new list hold multiple value list new arraylist <string>(); string existing null existing .tostring() null (s null list .add(s); list .add(value); map .put(name, list else map .put(name, value assembles query given map @param option map option (eg key /value pair @param ampersand use java code &amp; xml @return query string <tt>key1=value&key2=value2&...</tt>, empty string option @throws urisyntaxexception thrown uri invalid syntax public static string createquerystring (map<string, string option string ampersand boolean encode throw urisyntaxexception try (options.size() stringbuilder rc new stringbuilder boolean first true (object option .keyset()) (first) first false else rc .append(ampersand); string key (string) object value option .get(key); use value string string value null value .tostring() null appendquerystringparameter (key, rc encode return rc .tostring(); else return catch (unsupportedencodingexception e urisyntaxexception se new urisyntaxexception (e.tostring(), ""invalid encoding se .initcause(e); throw se private static void appendquerystringparameter (string key string value stringbuilder rc boolean encode throw unsupportedencodingexception (encode) rc .append(urlencoder.encode(key, charset else rc .append(key); append value null (value null rc .append(""=""); (value.startswith(raw_token_start) value .endswith(raw_token_end)) encode raw parameter rc .append(value); else (encode) rc .append(urlencoder.encode(value, charset else rc .append(value); test whether value <tt>null</tt> empty string @param value value string tested text length well @return true empty public static boolean isempty (object value return !isnotempty(value); test whether value <b>not</b> <tt>null</tt> empty string @param value value string tested text length well @return true <b>not</b> empty public static boolean isnotempty (object value (value null return false else (value instanceof string string text (string) value return text .trim().length() else return true diff --git /camel-core/src/main/java/org/apache/camel/runtimecatalog/unsafeuricharactersencoder.java b /camel-core/src/main/java/org/apache/camel/runtimecatalog/unsafeuricharactersencoder.java new file mode index ..a11c810 /dev/null b /camel-core/src/main/java/org/apache/camel/runtimecatalog/unsafeuricharactersencoder.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.runtimecatalog; +import java .util.arraylist; +import java .util.bitset; +import java .util.list; +import java .util.regex.matcher; +import java .util.regex.pattern; encoder unsafe uri character <p/> good source detail <a href url encode </a> article +public final class unsafeuricharactersencoder private static bitset unsafecharactersrfc1738 private static bitset unsafecharactershttp private static final char hex_digits 'a', 'b', 'c', 'd', 'e', 'f', 'a', 'b', 'c', 'd', 'e', 'f'}; private static final pattern raw_pattern pattern .compile(""raw\\([^\\)]+\\)""); static unsafecharactersrfc1738 new bitset unsafecharactersrfc1738 .set(' unsafecharactersrfc1738 .set('""'); unsafecharactersrfc1738 .set('<'); unsafecharactersrfc1738 .set('>'); unsafecharactersrfc1738 .set('#'); unsafecharactersrfc1738 .set('%'); unsafecharactersrfc1738 .set('{'); unsafecharactersrfc1738 .set('}'); unsafecharactersrfc1738 .set('|'); unsafecharactersrfc1738 .set('\\'); unsafecharactersrfc1738 .set('^'); unsafecharactersrfc1738 .set('~'); unsafecharactersrfc1738 .set('['); unsafecharactersrfc1738 .set(']'); unsafecharactersrfc1738 .set('`'); static unsafecharactershttp new bitset unsafecharactershttp .set(' unsafecharactershttp .set('""'); unsafecharactershttp .set('<'); unsafecharactershttp .set('>'); unsafecharactershttp .set('#'); unsafecharactershttp .set('%'); unsafecharactershttp .set('{'); unsafecharactershttp .set('}'); unsafecharactershttp .set('|'); unsafecharactershttp .set('\\'); unsafecharactershttp .set('^'); unsafecharactershttp .set('~'); unsafecharactershttp .set('`'); private unsafeuricharactersencoder util class public static string encode (string return encode (s, unsafecharactersrfc1738 public static string encodehttpuri (string return encode (s, unsafecharactershttp public static string encode (string bitset unsafecharacters return encode (s, unsafecharacters false public static string encode (string boolean checkraw return encode (s, unsafecharactersrfc1738 checkraw public static string encodehttpuri (string boolean checkraw return encode (s, unsafecharactershttp checkraw private static list <pair> checkraw (string matcher matcher raw_pattern .matcher(s); list <pair> answer new arraylist <pair>(); check occurrence (matcher.find()) answer .add(new pair (matcher.start(), matcher .end())); return answer private static boolean israw (int index list <pair> pair (pair pair pair (index pair .left) return false else (index pair .left) (index pair .right) return true else continue return false private static class pair int left int right pair (int left int right .left left .right right skip encode israw part public static string encode (string bitset unsafecharacters boolean checkraw list <pair> rawpairs (checkraw) rawpairs checkraw (s); else rawpairs new arraylist <pair>(); int n null .length(); (n return first check whether actually need encode char char .tochararray(); (int deal ascii character (chars[i] char [i] (unsafecharacters.get(chars[i])) break (++i char .length) return okay unsafe character need encode see detail stringbuilder sb new stringbuilder (int char .length; char ch char [i]; (ch ch unsafecharacters .get(ch)) special sign may decimal encoded value (ch char next char .length char [i char next2 char .length char [i (ishexdigit(next) ishexdigit (next2) !israw(i, rawpairs already encoded (decimal encoded append sb .append(ch); else must escape unsafe character appendescape (sb, (byte) ch else must escape unsafe character appendescape (sb, (byte) ch else sb .append(ch); return sb .tostring(); private static void appendescape (stringbuilder sb byte b sb .append('%'); sb .append(hex_digits[(b 0x0f sb .append(hex_digits[(b 0x0f private static boolean ishexdigit (char ch (char hex hex_digits (hex ch return true return false diff --git /camel-core/src/main/java/org/apache/camel/runtimecatalog/package.html b /camel-core/src/main/java/org/apache/camel/runtimecatalog/package.html new file mode index ..2f15a04 /dev/null b /camel-core/src/main/java/org/apache/camel/runtimecatalog/package.html licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +<html> +<head> +</head> +<body> +runtime camel catalog +</body> +</html> diff --git /camel-core/src/main/java/org/apache/camel/util/endpointhelper.java b /camel-core/src/main/java/org/apache/camel/util/endpointhelper.java index fd22f55 ..a32c109 /camel-core/src/main/java/org/apache/camel/util/endpointhelper.java b /camel-core/src/main/java/org/apache/camel/util/endpointhelper.java import org .apache.camel.pollingconsumer; import org .apache.camel.processor; import org .apache.camel.resolveendpointfailedexception; import org .apache.camel.route; -import org .apache.camel.catalog.defaultruntimecamelcatalog; -import org .apache.camel.catalog.runtimecamelcatalog; +import org .apache.camel.runtimecatalog.defaultruntimecamelcatalog; +import org .apache.camel.runtimecatalog.runtimecamelcatalog; import org .apache.camel.spi.browsableendpoint; import org .slf4j.logger; import org .slf4j.loggerfactory; public final class endpointhelper @param uri endpoint uri @return map option uri corresponding information json @throws exception thrown case error @deprecated use {@link org .apache.camel.catalog.runtimecamelcatalog#endpointproperties(string)} @deprecated use {@link org .apache.camel.runtimecatalog.runtimecamelcatalog#endpointproperties(string)} @deprecated public static map <string, object endpointproperties (camelcontext camelcontext string uri throw exception diff --git /camel-core/src/test/java/org/apache/camel/catalog/abstractcamelcatalogtest.java b /camel-core/src/test/java/org/apache/camel/catalog/abstractcamelcatalogtest.java deleted file mode index ed7e997 /camel-core/src/test/java/org/apache/camel/catalog/abstractcamelcatalogtest.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.catalog; -import java .net.urisyntaxexception; -import java .util.hashmap; -import java .util.map; -import org .junit.before; -import org .junit.test; -import static org .easymock.easymock.expect; -import static org .easymock.easymock.mock; -import static org .easymock.easymock.replay; -import static org .junit.assert.assertequals; -public class abstractcamelcatalogtest abstractcamelcatalog catalog new abstractcamelcatalog jsonschemaresolver resolver @before public void setupmockcatalog resolver mock (jsonschemaresolver.class); catalog .setjsonschemaresolver(resolver); @test public void shouldconstructendpointuris throw urisyntaxexception expect (resolver.getcomponentjsonschema(""comp"")).andreturn(""{\n""// \""component\"": {\n""// \""syntax\"": \""comp:param1:param2\""\n""// }\n""// replay (resolver); final map <string, string property new hashmap property .put(""param1"", ""value1""); property .put(""param2"", ""value2""); property .put(""param3"", ""value3""); final string endpointuri catalog .doasendpointuri(""comp"", property false assertequals (""comp:value1:value2?param3=value3"", endpointuri @test public void shouldconstructendpointuriswithpropertyplaceholders throw urisyntaxexception expect (resolver.getcomponentjsonschema(""comp"")).andreturn(""{\n""// \""component\"": {\n""// \""syntax\"": \""comp:param1:param2\""\n""// }\n""// replay (resolver); final map <string, string property new hashmap property .put(""param1"", ""{{prop1}}""); property .put(""param2"", ""{{prop2}}""); property .put(""param3"", ""{{prop3}}""); final string endpointuri catalog .doasendpointuri(""comp"", property false assertequals (""comp:{{prop1}}:{{prop2}}?param3={{prop3}}"", endpointuri @test public void shouldconstructendpointuriswhenvaluescontaintokens throw urisyntaxexception expect (resolver.getcomponentjsonschema(""comp"")).andreturn(""{\n""// \""component\"": {\n""// \""syntax\"": \""comp:param1:param2\""\n""// }\n""// replay (resolver); final map <string, string property new hashmap property .put(""param1"", ""{value1}""); property .put(""param2"", ""/value2/""); property .put(""param3"", ""/value3/{param}""); final string endpointuri catalog .doasendpointuri(""comp"", property false assertequals (""comp:{value1}:/value2/?param3=/value3/{param}"", endpointuri diff --git /camel-core/src/test/java/org/apache/camel/catalog/runtimecamelcatalogtest.java b /camel-core/src/test/java/org/apache/camel/catalog/runtimecamelcatalogtest.java deleted file mode index 78e51a2 /camel-core/src/test/java/org/apache/camel/catalog/runtimecamelcatalogtest.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.catalog; -import java .util.hashmap; -import java .util.map; -import org .apache.camel.impl.defaultcamelcontext; -import org .junit.beforeclass; -import org .junit.test; -import org .slf4j.logger; -import org .slf4j.loggerfactory; -import static org .junit.assert.assertequals; -import static org .junit.assert.assertfalse; -import static org .junit.assert.assertnotnull; -import static org .junit.assert.asserttrue; -public class runtimecamelcatalogtest static runtimecamelcatalog catalog private static final logger log loggerfactory .getlogger(runtimecamelcatalogtest.class); @beforeclass public static void createcamelcatalog catalog new defaultruntimecamelcatalog (new defaultcamelcontext @test public void testfromcamelcontext throw exception string schema new defaultcamelcontext ().getruntimecamelcatalog().modeljsonschema(""choice""); assertnotnull (schema); @test public void testjsonschema throw exception string schema catalog .modeljsonschema(""aggregate""); assertnotnull (schema); let make possible find bean /method using name schema catalog .modeljsonschema(""method""); assertnotnull (schema); schema catalog .modeljsonschema(""bean""); assertnotnull (schema); @test public void testasendpointurimapfile throw exception map <string, string map new hashmap <string, string map .put(""directoryname"", ""src/data/inbox""); map .put(""noop"", ""true""); map .put(""delay"", string uri catalog .asendpointuri(""file"", map true assertequals (""file:src/data/inbox?delay=5000&noop=true"", uri string uri2 catalog .asendpointurixml(""file"", map true assertequals (""file:src/data/inbox?delay=5000&amp;noop=true"", uri2 @test public void testasendpointuritimer throw exception map <string, string map new hashmap <string, string map .put(""timername"", ""foo""); map .put(""period"", string uri catalog .asendpointuri(""timer"", map true assertequals (""timer:foo?period=5000"", uri @test public void testasendpointuripropertiesplaceholders throw exception map <string, string map new hashmap <string, string map .put(""timername"", ""foo""); map .put(""period"", ""{{howoften}}""); map .put(""repeatcount"", string uri catalog .asendpointuri(""timer"", map true assertequals (""timer:foo?period=%7b%7bhowoften%7d%7d&repeatcount=5"", uri uri catalog .asendpointuri(""timer"", map false assertequals (""timer:foo?period={{howoften}}&repeatcount=5"", uri @test public void testasendpointuribeanlookup throw exception map <string, string map new hashmap <string, string map .put(""resourceuri"", ""foo.xslt""); map .put(""converter"", ""#myconverter""); string uri catalog .asendpointuri(""xslt"", map true assertequals (""xslt:foo.xslt?converter=%23myconverter"", uri uri catalog .asendpointuri(""xslt"", map false assertequals (""xslt:foo.xslt?converter=#myconverter"", uri @test public void testendpointpropertiesplaceholders throw exception map <string, string map catalog .endpointproperties(""timer:foo?period={{howoften}}&repeatcount=5""); assertnotnull (map); assertequals map .size()); assertequals (""foo"", map .get(""timername"")); assertequals (""{{howoften}}"", map .get(""period"")); assertequals map .get(""repeatcount"")); @test public void testasendpointurilog throw exception map <string, string map new hashmap <string, string map .put(""loggername"", ""foo""); map .put(""loggerlevel"", ""warn""); map .put(""multiline"", ""true""); map .put(""showall"", ""true""); map .put(""showbody"", ""false""); map .put(""showbodytype"", ""false""); map .put(""showexchangepattern"", ""false""); map .put(""style"", ""tab""); assertequals (""log:foo?loggerlevel=warn&multiline=true&showall=true&style=tab"", catalog .asendpointuri(""log"", map false @test public void testasendpointurilogshort throw exception map <string, string map new hashmap <string, string map .put(""loggername"", ""foo""); map .put(""loggerlevel"", ""debug""); assertequals (""log:foo?loggerlevel=debug"", catalog .asendpointuri(""log"", map false @test public void testasendpointuriwithplaceholder throw exception map <string, string map new hashmap <string, string map .put(""name"", ""foo""); map .put(""blockwhenfull"", ""{{block}}""); assertequals (""seda:foo?blockwhenfull={{block}}"", catalog .asendpointuri(""seda"", map false @test public void testendpointpropertiessedarequired throw exception map <string, string map catalog .endpointproperties(""seda:foo""); assertnotnull (map); assertequals map .size()); assertequals (""foo"", map .get(""name"")); map catalog .endpointproperties(""seda:foo?blockwhenfull=true""); assertnotnull (map); assertequals map .size()); assertequals (""foo"", map .get(""name"")); assertequals (""true"", map .get(""blockwhenfull"")); @test public void validateproperties throw exception valid endpointvalidationresult result catalog .validateendpointproperties(""log:mylog""); asserttrue (result.issuccess()); unknown result catalog .validateendpointproperties(""log:mylog?level=warn&foo=bar""); assertfalse (result.issuccess()); asserttrue (result.getunknown().contains(""foo"")); assertequals result .getnumberoferrors()); enum result catalog .validateendpointproperties(""seda:foo?waitfortasktocomplete=blah""); assertfalse (result.issuccess()); assertequals (""blah"", result .getinvalidenum().get(""waitfortasktocomplete"")); assertequals result .getnumberoferrors()); reference okay result catalog .validateendpointproperties(""seda:foo?queue=#queue""); asserttrue (result.issuccess()); assertequals result .getnumberoferrors()); unknown component result catalog .validateendpointproperties(""foo:bar?me=you""); assertfalse (result.issuccess()); asserttrue (result.getunknowncomponent().equals(""foo"")); assertequals result .getnumberoferrors()); invalid boolean default value result catalog .validateendpointproperties(""log:output?showall=ggg""); assertfalse (result.issuccess()); assertequals (""ggg"", result .getinvalidboolean().get(""showall"")); assertequals result .getnumberoferrors()); dataset result catalog .validateendpointproperties(""dataset:foo?minrate=50""); asserttrue (result.issuccess()); time pattern result catalog .validateendpointproperties(""timer://foo?fixedrate=true&delay=0&period=2s""); asserttrue (result.issuccess()); reference lookup result catalog .validateendpointproperties(""timer://foo?fixedrate=#fixed&delay=#mydelay""); asserttrue (result.issuccess()); optional consumer prefix result catalog .validateendpointproperties(""file:inbox?consumer.delay=5000&consumer.greedy=true""); asserttrue (result.issuccess()); optional without consumer prefix result catalog .validateendpointproperties(""file:inbox?delay=5000&greedy=true""); asserttrue (result.issuccess()); mixed optional without consumer prefix result catalog .validateendpointproperties(""file:inbox?delay=5000&consumer.greedy=true""); asserttrue (result.issuccess()); prefix result catalog .validateendpointproperties(""file:inbox?delay=5000&scheduler.foo=123&scheduler.bar=456""); asserttrue (result.issuccess()); stub result catalog .validateendpointproperties(""stub:foo?me=123&you=456""); asserttrue (result.issuccess()); lenient result catalog .validateendpointproperties(""dataformat:string:marshal?foo=bar""); asserttrue (result.issuccess()); lenient result catalog .validateendpointproperties(""dataformat:string:marshal?foo=bar"", true assertfalse (result.issuccess()); asserttrue (result.getunknown().contains(""foo"")); data format result catalog .validateendpointproperties(""dataformat:string:marshal?charset=utf-8"", true asserttrue (result.issuccess()); incapable parse result catalog .validateendpointproperties(""{{getftpurl}}?recursive=true""); assertfalse (result.issuccess()); asserttrue (result.getincapable() null @test public void validatepropertiessummary throw exception endpointvalidationresult result catalog .validateendpointproperties(""yammer:messages?blah=yada&accesstoken=aaa&consumerkey=&usejson=no&initialdelay=five&pollstrategy=mystrategy""); assertfalse (result.issuccess()); string reason result .summaryerrormessage(true); log .info(reason); result catalog .validateendpointproperties(""jms:unknown:myqueue""); assertfalse (result.issuccess()); reason result .summaryerrormessage(false); log .info(reason); @test public void validatetimepattern throw exception asserttrue (catalog.validatetimepattern(""0"")); asserttrue (catalog.validatetimepattern(""500"")); asserttrue (catalog.validatetimepattern(""10000"")); asserttrue (catalog.validatetimepattern(""5s"")); asserttrue (catalog.validatetimepattern(""5sec"")); asserttrue (catalog.validatetimepattern(""5secs"")); asserttrue (catalog.validatetimepattern(""3m"")); asserttrue (catalog.validatetimepattern(""3min"")); asserttrue (catalog.validatetimepattern(""3minutes"")); asserttrue (catalog.validatetimepattern(""5m15s"")); asserttrue (catalog.validatetimepattern(""1h"")); asserttrue (catalog.validatetimepattern(""1hour"")); asserttrue (catalog.validatetimepattern(""2hours"")); assertfalse (catalog.validatetimepattern(""bla"")); assertfalse (catalog.validatetimepattern(""2year"")); assertfalse (catalog.validatetimepattern(""60darn"")); @test public void testendpointcomponentname throw exception string name catalog .endpointcomponentname(""jms:queue:foo""); assertequals (""jms"", name @test public void testsimpleexpression throw exception simplevalidationresult result catalog .validatesimpleexpression(null, ""${body}""); asserttrue (result.issuccess()); assertequals (""${body}"", result .getsimple()); result catalog .validatesimpleexpression(null, ""${body""); assertfalse (result.issuccess()); assertequals (""${body"", result .getsimple()); log .info(result.geterror()); asserttrue (result.geterror().startswith(""expected symbol functionend eol location assertequals (""expected symbol functionend eol result .getshorterror()); assertequals result .getindex()); @test public void testsimplepredicate throw exception simplevalidationresult result catalog .validatesimplepredicate(null, ""${body} 'abc'""); asserttrue (result.issuccess()); assertequals (""${body} 'abc'"", result .getsimple()); result catalog .validatesimplepredicate(null, ""${body} ${header.size""); assertfalse (result.issuccess()); assertequals (""${body} ${header.size"", result .getsimple()); log .info(result.geterror()); asserttrue (result.geterror().startswith(""expected symbol functionend eol location assertequals (""expected symbol functionend eol result .getshorterror()); assertequals result .getindex()); @test public void testsimplepredicateplaceholder throw exception simplevalidationresult result catalog .validatesimplepredicate(null, ""${body} contains '{{danger}}'""); asserttrue (result.issuccess()); assertequals (""${body} contains '{{danger}}'"", result .getsimple()); result catalog .validatesimplepredicate(null, ""${bdy} contains '{{danger}}'""); assertfalse (result.issuccess()); assertequals (""${bdy} contains '{{danger}}'"", result .getsimple()); log .info(result.geterror()); asserttrue (result.geterror().startswith(""unknown function bdy location asserttrue (result.geterror().contains(""'{{danger}}'"")); assertequals (""unknown function bdy result .getshorterror()); assertequals result .getindex()); @test public void testvalidatelanguage throw exception languagevalidationresult result catalog .validatelanguageexpression(null, ""simple"", ""${body}""); asserttrue (result.issuccess()); assertequals (""${body}"", result .gettext()); result catalog .validatelanguageexpression(null, ""header"", ""foo""); asserttrue (result.issuccess()); assertequals (""foo"", result .gettext()); result catalog .validatelanguagepredicate(null, ""simple"", ""${body} asserttrue (result.issuccess()); assertequals (""${body} result .gettext()); result catalog .validatelanguagepredicate(null, ""header"", ""bar""); asserttrue (result.issuccess()); assertequals (""bar"", result .gettext()); result catalog .validatelanguagepredicate(null, ""foobar"", ""bar""); assertfalse (result.issuccess()); assertequals (""unknown language foobar result .geterror()); @test public void testvalidateendpointconsumeronly throw exception string uri ""file:inbox?buffersize=4096&readlock=changed&delete=true""; endpointvalidationresult result catalog .validateendpointproperties(uri, false true false asserttrue (result.issuccess()); uri ""file:inbox?buffersize=4096&readlock=changed&delete=true&fileexist=append""; result catalog .validateendpointproperties(uri, false true false assertfalse (result.issuccess()); assertequals (""fileexist"", result .getnotconsumeronly().iterator().next()); @test public void testvalidateendpointproduceronly throw exception string uri ""file:outbox?buffersize=4096&fileexist=append""; endpointvalidationresult result catalog .validateendpointproperties(uri, false false true asserttrue (result.issuccess()); uri ""file:outbox?buffersize=4096&fileexist=append&delete=true""; result catalog .validateendpointproperties(uri, false false true assertfalse (result.issuccess()); assertequals (""delete"", result .getnotproduceronly().iterator().next());",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C392ff0b6a5e9466c9cdb499eabbaf550%40git.apache.org%3E,2017-04-14 10:52:57,commits,324.0,camel git commit rename catalog runtimecatalog avoid clash package name camel -catalog.
4,4,4,5.0,325.0,davscl...@apache.org,"diff --git /camel-core/src/main/java/org/apache/camel/runtimecatalog/abstractcamelcatalog.java b /camel-core/src/main/java/org/apache/camel/runtimecatalog/abstractcamelcatalog.java new file mode index /dev/null b /camel-core/src/main/java/org/apache/camel/runtimecatalog/abstractcamelcatalog.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.runtimecatalog; +import java .lang.reflect.invocationtargetexception; +import java .lang.reflect.method; +import java .net.uri; +import java .net.urisyntaxexception; +import java .util.arraylist; +import java .util.arrays; +import java .util.hashmap; +import java .util.iterator; +import java .util.linkedhashmap; +import java .util.linkedhashset; +import java .util.list; +import java .util.map; +import java .util.objects; +import java .util.set; +import java .util.treemap; +import java .util.regex.matcher; +import java .util.regex.pattern; +import static org .apache.camel.runtimecatalog.cataloghelper.after; +import static org .apache.camel.runtimecatalog.jsonschemahelper.getnames; +import static org .apache.camel.runtimecatalog.jsonschemahelper.getpropertydefaultvalue; +import static org .apache.camel.runtimecatalog.jsonschemahelper.getpropertyenum; +import static org .apache.camel.runtimecatalog.jsonschemahelper.getpropertykind; +import static org .apache.camel.runtimecatalog.jsonschemahelper.getpropertynamefromnamewithprefix; +import static org .apache.camel.runtimecatalog.jsonschemahelper.getpropertyprefix; +import static org .apache.camel.runtimecatalog.jsonschemahelper.getrow; +import static org .apache.camel.runtimecatalog.jsonschemahelper.iscomponentconsumeronly; +import static org .apache.camel.runtimecatalog.jsonschemahelper.iscomponentlenientproperties; +import static org .apache.camel.runtimecatalog.jsonschemahelper.iscomponentproduceronly; +import static org .apache.camel.runtimecatalog.jsonschemahelper.ispropertyboolean; +import static org .apache.camel.runtimecatalog.jsonschemahelper.ispropertyconsumeronly; +import static org .apache.camel.runtimecatalog.jsonschemahelper.ispropertyinteger; +import static org .apache.camel.runtimecatalog.jsonschemahelper.ispropertymultivalue; +import static org .apache.camel.runtimecatalog.jsonschemahelper.ispropertynumber; +import static org .apache.camel.runtimecatalog.jsonschemahelper.ispropertyobject; +import static org .apache.camel.runtimecatalog.jsonschemahelper.ispropertyproduceronly; +import static org .apache.camel.runtimecatalog.jsonschemahelper.ispropertyrequired; +import static org .apache.camel.runtimecatalog.jsonschemahelper.stripoptionalprefixfromname; +import static org .apache.camel.runtimecatalog.urisupport.createquerystring; +import static org .apache.camel.runtimecatalog.urisupport.isempty; +import static org .apache.camel.runtimecatalog.urisupport.normalizeuri; +import static org .apache.camel.runtimecatalog.urisupport.stripquery; base class runtime runtimecamelcatalog camel -core complete camelcatalog camel -catalog. +public abstract class abstractcamelcatalog checkstyle :off private static final pattern syntax_pattern pattern .compile(""(\\w+)""); private suggestionstrategy suggestionstrategy private jsonschemaresolver jsonschemaresolver public suggestionstrategy getsuggestionstrategy return suggestionstrategy public void setsuggestionstrategy (suggestionstrategy suggestionstrategy .suggestionstrategy suggestionstrategy public jsonschemaresolver getjsonschemaresolver return jsonschemaresolver public void setjsonschemaresolver (jsonschemaresolver resolver .jsonschemaresolver resolver public boolean validatetimepattern (string pattern return validateinteger (pattern); public endpointvalidationresult validateendpointproperties (string uri return validateendpointproperties (uri, false false false public endpointvalidationresult validateendpointproperties (string uri boolean ignorelenientproperties return validateendpointproperties (uri, ignorelenientproperties false false public endpointvalidationresult validateproperties (string scheme map <string, string property endpointvalidationresult result new endpointvalidationresult (scheme); string json jsonschemaresolver .getcomponentjsonschema(scheme); list <map<string, string row jsonschemahelper .parsejsonschema(""properties"", json true list <map<string, string componentprops jsonschemahelper .parsejsonschema(""componentproperties"", json true endpoint option higher priority remove component may clash componentprops .stream() .filter(c row .stream().nonematch(e object .equals(e.get(""name""), c .get(""name"")))) .foreach(rows::add); boolean lenient boolean .getboolean(properties.getordefault(""lenient"", ""false"")); dataformat component refers data format let add property selected data format list row (""dataformat"".equals(scheme)) string dfname property .get(""name""); (dfname null string dfjson jsonschemaresolver .getdataformatjsonschema(dfname); list <map<string, string dfrows jsonschemahelper .parsejsonschema(""properties"", dfjson true (dfrows null !dfrows.isempty()) row .addall(dfrows); (map.entry<string, string property property .entryset()) string value property .getvalue(); string originalname property .getkey(); string name property .getkey(); name may using optional prefix let strip option schema listed without prefix name stripoptionalprefixfromname (rows, name name may using prefix let see find real property name string propertyname getpropertynamefromnamewithprefix (rows, name (propertyname null name propertyname string prefix getpropertyprefix (rows, name string kind getpropertykind (rows, name boolean nameplaceholder name .startswith(""{{"") name .endswith(""}}""); boolean valueplaceholder value .startswith(""{{"") value .startswith(""${"") value .startswith(""$simple{""); boolean lookup value .startswith(""#"") value .length() cannot evaluate multi value strict others 't know expected type boolean multivalue prefix null originalname .startswith(prefix) ispropertymultivalue (rows, name map <string, string row getrow (rows, name (row null unknown option add error component lenient property stub component name property placeholder one value (!nameplaceholder !""stub"".equals(scheme)) (lenient) lenient option dynamic extra option cannot validate result .addlenient(name); else unknown result .addunknown(name); (suggestionstrategy null string suggestion suggestionstrategy .suggestendpointoptions(getnames(rows), name (suggestions null result .addunknownsuggestions(name, suggestion else todo may need add something property know related producer consumer (""parameter"".equals(kind)) consumer producer mode parameter (consumeronly) boolean producer ispropertyproduceronly (rows, name (producer) option producer cannot use consumer mode result .addnotconsumeronly(name); else (produceronly) boolean consumer ispropertyconsumeronly (rows, name (consumer) option consumer cannot use producer mode result .addnotproduceronly(name); default value string defaultvalue getpropertydefaultvalue (rows, name (defaultvalue null result .adddefaultvalue(name, defaultvalue required value empty boolean required ispropertyrequired (rows, name (required isempty (value)) result .addrequired(name); enum value within enum range check value placeholder string enums getpropertyenum (rows, name (!multivalue !valueplaceholder !lookup enums null string choice enums .split("",""); boolean found false (string choice (value.equalsignorecase(s)) found true break (!found) result .addinvalidenum(name, value result .addinvalidenumchoices(name, choice (suggestionstrategy null set <string> name new linkedhashset name .addall(arrays.aslist(choices)); string suggestion suggestionstrategy .suggestendpointoptions(names, value (suggestions null result .addinvalidenumsuggestions(name, suggestion reference lookup bean (not applicable @uripath, enums multi -valued) (!multivalue enums null !""path"".equals(kind) ispropertyobject (rows, name must start least character (!value.startswith(""#"") value .length() result .addinvalidreference(name, value boolean (!multivalue !valueplaceholder !lookup ispropertyboolean (rows, name value must boolean boolean bool ""true"".equalsignorecase(value) ""false"".equalsignorecase(value); (!bool) result .addinvalidboolean(name, value integer (!multivalue !valueplaceholder !lookup ispropertyinteger (rows, name value must integer boolean valid validateinteger (value); (!valid) result .addinvalidinteger(name, value number (!multivalue !valueplaceholder !lookup ispropertynumber (rows, name value must number boolean valid false try valid !double.valueof(value).isnan() !float.valueof(value).isnan(); catch (exception e ignore (!valid) result .addinvalidnumber(name, value check required value default value exists (map<string, string row row string name row .get(""name""); boolean required ispropertyrequired (rows, name (required) string value property .get(name); (isempty(value)) value getpropertydefaultvalue (rows, name (isempty(value)) result .addrequired(name); return result public endpointvalidationresult validateendpointproperties (string uri boolean ignorelenientproperties boolean consumeronly boolean produceronly endpointvalidationresult result new endpointvalidationresult (uri); map <string, string property list <map<string, string row boolean lenientproperties string scheme try string json null parse uri uri u normalizeuri (uri); scheme u .getscheme(); (scheme null json jsonschemaresolver .getcomponentjsonschema(scheme); (json null uri start placeholder also incapable parsing 't able resolve component name (uri.startswith(""{{"")) result .addincapable(uri); else (scheme null result .addunknowncomponent(scheme); else result .addunknowncomponent(uri); return result row jsonschemahelper .parsejsonschema(""component"", json false component capable consumer producer boolean canconsumeandproduce false (!iscomponentconsumeronly(rows) !iscomponentproduceronly(rows)) canconsumeandproduce true (canconsumeandproduce consumeronly lenient property support consumer mode component lenientproperties false else enable lenient property ignore lenientproperties !ignorelenientproperties iscomponentlenientproperties (rows); row jsonschemahelper .parsejsonschema(""properties"", json true property endpointproperties (uri); catch (urisyntaxexception e (uri.startswith(""{{"")) uri start placeholder also incapable parsing 't able resolve component name result .addincapable(uri); else result .addsyntaxerror(e.getmessage()); return result dataformat component refers data format let add property selected data format list row (""dataformat"".equals(scheme)) string dfname property .get(""name""); (dfname null string dfjson jsonschemaresolver .getdataformatjsonschema(dfname); list <map<string, string dfrows jsonschemahelper .parsejsonschema(""properties"", dfjson true (dfrows null !dfrows.isempty()) row .addall(dfrows); (map.entry<string, string property property .entryset()) string value property .getvalue(); string originalname property .getkey(); string name property .getkey(); name may using optional prefix let strip option schema listed without prefix name stripoptionalprefixfromname (rows, name name may using prefix let see find real property name string propertyname getpropertynamefromnamewithprefix (rows, name (propertyname null name propertyname string prefix getpropertyprefix (rows, name string kind getpropertykind (rows, name boolean nameplaceholder name .startswith(""{{"") name .endswith(""}}""); boolean valueplaceholder value .startswith(""{{"") value .startswith(""${"") value .startswith(""$simple{""); boolean lookup value .startswith(""#"") value .length() cannot evaluate multi value strict others 't know expected type boolean mulitvalue prefix null originalname .startswith(prefix) ispropertymultivalue (rows, name map <string, string row getrow (rows, name (row null unknown option add error component lenient property stub component name property placeholder one value (!nameplaceholder !""stub"".equals(scheme)) (lenientproperties) lenient option dynamic extra option cannot validate result .addlenient(name); else unknown result .addunknown(name); (suggestionstrategy null string suggestion suggestionstrategy .suggestendpointoptions(getnames(rows), name (suggestions null result .addunknownsuggestions(name, suggestion else (""parameter"".equals(kind)) consumer producer mode parameter (consumeronly) boolean producer ispropertyproduceronly (rows, name (producer) option producer cannot use consumer mode result .addnotconsumeronly(name); else (produceronly) boolean consumer ispropertyconsumeronly (rows, name (consumer) option consumer cannot use producer mode result .addnotproduceronly(name); default value string defaultvalue getpropertydefaultvalue (rows, name (defaultvalue null result .adddefaultvalue(name, defaultvalue required value empty boolean required ispropertyrequired (rows, name (required isempty (value)) result .addrequired(name); enum value within enum range check value placeholder string enums getpropertyenum (rows, name (!mulitvalue !valueplaceholder !lookup enums null string choice enums .split("",""); boolean found false (string choice (value.equalsignorecase(s)) found true break (!found) result .addinvalidenum(name, value result .addinvalidenumchoices(name, choice (suggestionstrategy null set <string> name new linkedhashset name .addall(arrays.aslist(choices)); string suggestion suggestionstrategy .suggestendpointoptions(names, value (suggestions null result .addinvalidenumsuggestions(name, suggestion reference lookup bean (not applicable @uripath, enums multi -valued) (!mulitvalue enums null !""path"".equals(kind) ispropertyobject (rows, name must start least character (!value.startswith(""#"") value .length() result .addinvalidreference(name, value boolean (!mulitvalue !valueplaceholder !lookup ispropertyboolean (rows, name value must boolean boolean bool ""true"".equalsignorecase(value) ""false"".equalsignorecase(value); (!bool) result .addinvalidboolean(name, value integer (!mulitvalue !valueplaceholder !lookup ispropertyinteger (rows, name value must integer boolean valid validateinteger (value); (!valid) result .addinvalidinteger(name, value number (!mulitvalue !valueplaceholder !lookup ispropertynumber (rows, name value must number boolean valid false try valid !double.valueof(value).isnan() !float.valueof(value).isnan(); catch (exception e ignore (!valid) result .addinvalidnumber(name, value check required value default value exists (map<string, string row row string name row .get(""name""); boolean required ispropertyrequired (rows, name (required) string value property .get(name); (isempty(value)) value getpropertydefaultvalue (rows, name (isempty(value)) result .addrequired(name); return result public map <string, string endpointproperties (string uri throw urisyntaxexception need normalize uri first uri u normalizeuri (uri); string scheme u .getscheme(); string json jsonschemaresolver .getcomponentjsonschema(scheme); (json null throw new illegalargumentexception (""cannot find endpoint scheme scheme grab syntax string syntax null string alternativesyntax null list <map<string, string row jsonschemahelper .parsejsonschema(""component"", json false (map<string, string row row (row.containskey(""syntax"")) syntax row .get(""syntax""); (row.containskey(""alternativesyntax"")) alternativesyntax row .get(""alternativesyntax""); (syntax null throw new illegalargumentexception (""endpoint scheme scheme syntax defined json schema support alternative syntax uri contains username password authority part uri would need special logic capture information strip detail uri continue parsing uri using normal syntax map <string, string userinfooptions new linkedhashmap <string, string (alternativesyntax null alternativesyntax .contains(""@"")) clip scheme syntax alternativesyntax (alternativesyntax, trim userinfo int idx alternativesyntax .indexof(""@""); string field alternativesyntax .substring(0, idx string name field .split("":""); grab authority part grab username /or password string authority u .getauthority(); (authority null authority .contains(""@"")) string username null string password null grab unserinfo part string userinfo authority .substring(0, authority .indexof(""@"")); string part userinfo .split("":""); (parts.length username part password part else username username userinfo remember username /or password add later option (names.length userinfooptions .put(names[0], username (password null password optional userinfooptions .put(names[1], password clip scheme syntax syntax (syntax, clip scheme uri uri (uri, string uripath stripquery (uri); strip user info uri path (!userinfooptions.isempty()) int idx uripath .indexof('@'); (idx uripath uripath .substring(idx strip double slash start (uripath null uripath .startswith(""//"")) uripath uripath .substring(2); parse syntax find name option matcher matcher syntax_pattern .matcher(syntax); list <string> word new arraylist <string>(); (matcher.find()) string matcher .group(1); (!scheme.equals(s)) word .add(s); parse syntax find token option string token syntax_pattern .split(syntax); find position option start /end list <string> word2 new arraylist <string>(); int prev int prevpath special activemq /jms enum destinationtype cause token issue includes colon 'temp:queue' 'temp:topic' value (""activemq"".equals(scheme) ""jms"".equals(scheme)) (uripath.startswith(""temp:"")) prevpath (string token token (token.isempty()) continue special token used also eg int idx int len ("":"".equals(token)) idx uripath .indexof(""://"", prevpath len (idx idx uripath .indexof(token, prevpath len token .length(); (idx string option uripath .substring(prev, idx word2 .add(option); prev idx len prevpath prev special last add anyone (prev word2 .isempty()) string option uripath .substring(prev); word2 .add(option); row jsonschemahelper .parsejsonschema(""properties"", json true boolean defaultvalueadded false parse uri know part isw map <string, string option new linkedhashmap <string, string include username password userinfo section (!userinfooptions.isempty()) option .putall(userinfooptions); word contains syntax path element iterator <string> word2 .iterator(); (int word .size(); string key word .get(i); boolean alloptions word .size() word2 .size(); boolean required ispropertyrequired (rows, key string defaultvalue getpropertydefaultvalue (rows, key option problem (alloptions) string value .next(); option .put(key, value else little problem option (!required) string value null boolean last word .size() (last) last value use instead default value value .hasnext() .next() null (value null option .put(key, value else value defaultvalue (value null option .put(key, value defaultvalueadded true else string value .hasnext() .next() null (value null option .put(key, value map <string, string answer new linkedhashmap <string, string remove option using default value required (map.entry<string, string entry option .entryset()) string key entry .getkey(); string value entry .getvalue(); (defaultvalueadded) boolean required ispropertyrequired (rows, key string defaultvalue getpropertydefaultvalue (rows, key (!required defaultvalue null (defaultvalue.equals(value)) continue keep answer answer .put(key, value parse uri parameter map <string, object parameter urisupport .parseparameters(u); covert value string jmx friendly (!parameters.isempty()) map .entry<string, object entry parameter .entryset().iterator().next(); string key entry .getkey(); string value entry .getvalue() null entry .getvalue().tostring() boolean multivalued ispropertymultivalue (rows, key (multivalued) string prefix getpropertyprefix (rows, key extra multi valued option map <string, object value urisupport .extractproperties(parameters, prefix build string extra multi valued option prefix separator collectionstringbuffer csb new collectionstringbuffer (map.entry<string, object multi value .entryset()) string line prefix multi .getkey() (multi.getvalue() null multi .getvalue().tostring() csb .append(line); append extra multi -values existing (which contains first multi value (!csb.isempty()) value value csb .tostring(); answer .put(key, value remove parameter run loop parameter parameter .remove(key); return answer public map <string, string endpointlenientproperties (string uri throw urisyntaxexception need normalize uri first parse uri uri u normalizeuri (uri); string scheme u .getscheme(); string json jsonschemaresolver .getcomponentjsonschema(scheme); (json null throw new illegalargumentexception (""cannot find endpoint scheme scheme list <map<string, string row jsonschemahelper .parsejsonschema(""properties"", json true parse uri parameter map <string, object parameter urisupport .parseparameters(u); known option set <string> name getnames (rows); map <string, string answer new linkedhashmap covert value string jmx friendly parameter .foreach((k, v string key k string value v null v .tostring() key prefix property int dot key .indexof('.'); (dot string prefix key .substring(0, dot include dot prefix string option getpropertynamefromnamewithprefix (rows, prefix (option null !ispropertymultivalue(rows, option answer .put(key, value else (!names.contains(key)) answer .put(key, value return answer public string endpointcomponentname (string uri (uri null int idx uri .indexof("":""); (idx return uri .substring(0, idx return null public string asendpointuri (string scheme string json boolean encode throw urisyntaxexception return doasendpointuri (scheme, json encode public string asendpointurixml (string scheme string json boolean encode throw urisyntaxexception return doasendpointuri (scheme, json ""&amp;"", encode private string doasendpointuri (string scheme string json string ampersand boolean encode throw urisyntaxexception list <map<string, string row jsonschemahelper .parsejsonschema(""properties"", json true map <string, string copy new hashmap <string, string (map<string, string row row string name row .get(""name""); string required row .get(""required""); string value row .get(""value""); string defaultvalue row .get(""defaultvalue""); add either required value default value string valuetoadd null (""true"".equals(required)) valuetoadd value null value defaultvalue (valuetoadd null valuetoadd else value default add (value null defaultvalue null valuetoadd value otherwise add value default value (value null defaultvalue null !value.equals(defaultvalue)) valuetoadd value (valuetoadd null copy .put(name, valuetoadd return doasendpointuri (scheme, copy ampersand encode public string asendpointuri (string scheme map <string, string property boolean encode throw urisyntaxexception return doasendpointuri (scheme, property encode public string asendpointurixml (string scheme map <string, string property boolean encode throw urisyntaxexception return doasendpointuri (scheme, property ""&amp;"", encode string doasendpointuri (string scheme map <string, string property string ampersand boolean encode throw urisyntaxexception string json jsonschemaresolver .getcomponentjsonschema(scheme); (json null throw new illegalargumentexception (""cannot find endpoint scheme scheme grab syntax string syntax null list <map<string, string row jsonschemahelper .parsejsonschema(""component"", json false (map<string, string row row (row.containskey(""syntax"")) syntax row .get(""syntax""); break (syntax null throw new illegalargumentexception (""endpoint scheme scheme syntax defined json schema property filtering needed special component property filterproperties (scheme, property row jsonschemahelper .parsejsonschema(""properties"", json true clip scheme syntax syntax (syntax, string originalsyntax syntax build first according syntax (use tree map want uri option sorted map <string, string copy new treemap <string, string (map.entry<string, string entry property .entryset()) string key entry .getkey(); string value entry .getvalue() null entry .getvalue() (syntax null syntax .contains(key)) syntax syntax .replace(key, value else copy .put(key, value option original syntax need (easy way string key syntaxkeys (originalsyntax); boolean hasallkeys property .keyset().containsall(arrays.aslist(keys)); build endpoint uri stringbuilder sb new stringbuilder sb .append(scheme); sb .append("":""); (hasallkeys) key syntax build uri easy way sb .append(syntax); (!copy.isempty()) boolean hasquestionmark sb .tostring().contains(""?""); last option may already contain char use instead sb .append(hasquestionmark ampersand string query createquerystring (copy, ampersand encode sb .append(query); else todo revisit see another way oh darn option missing need complex way building uri token option path string token syntax .split(""\\w+""); parse syntax option matcher matcher syntax_pattern .matcher(originalsyntax); list <string> option new arraylist <string>(); (matcher.find()) string matcher .group(1); option .add(s); need preserve syntax (we need use word provisional placeholder syntax syntax .replaceall(""\\{\\{"", ""begincamelplaceholder""); syntax syntax .replaceall(""\\}\\}"", ""endcamelplaceholder""); parse syntax option matcher matcher2 syntax_pattern .matcher(syntax); list <string> options2 new arraylist <string>(); (matcher2.find()) string matcher2 .group(1); .replaceall(""begincamelplaceholder"", .replaceall(""endcamelplaceholder"", options2 .add(s); build endpoint int range boolean first true boolean hasquestionmark false (int option .size(); string key option .get(i); string key2 options2 .get(i); string token null (tokens.length token token [i]; boolean contains property .containskey(key); (!contains) key similar explicit value try find default value option required (ispropertyrequired(rows, key string value getpropertydefaultvalue (rows, key (value null property .put(key, value key2 value option provided (properties.containskey(key)) (!first token null sb .append(token); hasquestionmark key .contains(""?"") (token null token .contains(""?"")); sb .append(key2); first false range append extra option surplus last (range options2 .size()) string token null (tokens.length range token token [range]; string key2 options2 .get(range); sb .append(token); sb .append(key2); hasquestionmark key2 .contains(""?"") (token null token .contains(""?"")); range (!copy.isempty()) last option may already contain char use instead sb .append(hasquestionmark ampersand string query createquerystring (copy, ampersand encode sb .append(query); return sb .tostring(); @deprecated private static string syntaxtokens (string syntax build token word list <string> token new arraylist preserve backwards behavior empty token first token .add(""""); string current (int syntax .length(); char ch syntax .charat(i); (character.isletterordigit(ch)) reset new current token (current.length() token .add(current); current else current ch anything left (current.length() token .add(current); return token .toarray(new string [tokens.size()]); private static string syntaxkeys (string syntax build token separator list <string> token new arraylist string current (int syntax .length(); char ch syntax .charat(i); (character.isletterordigit(ch)) current ch else reset new current token (current.length() token .add(current); current anything left (current.length() token .add(current); return token .toarray(new string [tokens.size()]); public simplevalidationresult validatesimpleexpression (string simple return dovalidatesimple (null, simple false public simplevalidationresult validatesimpleexpression (classloader classloader string simple return dovalidatesimple (classloader, simple false public simplevalidationresult validatesimplepredicate (string simple return dovalidatesimple (null, simple true public simplevalidationresult validatesimplepredicate (classloader classloader string simple return dovalidatesimple (classloader, simple true private simplevalidationresult dovalidatesimple (classloader classloader string simple boolean predicate (classloader null classloader getclass ().getclassloader(); property placeholder need resolve something else simple parse cannot resolve parsing dont run actual camel application property placeholder setup need dummy replace something else therefore use unlikely character {{xxx}} ~^xxx^~ string resolved simple .replaceall(""\\{\\{(.+)\\}\\}"", simplevalidationresult answer new simplevalidationresult (simple); object instance null class clazz null try clazz classloader .loadclass(""org.apache.camel.language.simple.simplelanguage""); instance clazz .newinstance(); catch (exception e ignore (clazz null instance null throwable cause null try (predicate) instance .getclass().getmethod(""createpredicate"", string .class).invoke(instance, resolved else instance .getclass().getmethod(""createexpression"", string .class).invoke(instance, resolved catch (invocationtargetexception e cause e .gettargetexception(); catch (exception e cause e (cause null reverse ~^xxx^~ back {{xxx}} string errmsg cause .getmessage(); errmsg errmsg .replaceall(""\\~\\^(.+)\\^\\~"", answer .seterror(errmsg); simple parser exception grab index problem (cause.getclass().getname().equals(""org.apache.camel.language.simple.types.simpleillegalsyntaxexception"") cause .getclass().getname().equals(""org.apache.camel.language.simple.types.simpleparserexception"")) try need grab index field simple parser exception method method cause .getclass().getmethod(""getindex""); object result method .invoke(cause); (result null int index (int) result answer .setindex(index); catch (throwable ignore need grab short message field simple syntax exception (cause.getclass().getname().equals(""org.apache.camel.language.simple.types.simpleillegalsyntaxexception"")) try method method cause .getclass().getmethod(""getshortmessage""); object result method .invoke(cause); (result null string msg (string) result answer .setshorterror(msg); catch (throwable ignore (answer.getshorterror() null fallback try make existing message short instead string msg answer .geterror(); grab everything location would regarded short message int idx msg .indexof("" location (idx msg msg .substring(0, idx answer .setshorterror(msg); return answer public languagevalidationresult validatelanguagepredicate (classloader classloader string language string text return dovalidatelanguage (classloader, language text true public languagevalidationresult validatelanguageexpression (classloader classloader string language string text return dovalidatelanguage (classloader, language text false private languagevalidationresult dovalidatelanguage (classloader classloader string language string text boolean predicate (classloader null classloader getclass ().getclassloader(); simplevalidationresult answer new simplevalidationresult (text); string json jsonschemaresolver .getlanguagejsonschema(language); (json null answer .seterror(""unknown language language return answer list <map<string, string row jsonschemahelper .parsejsonschema(""language"", json false string classname null (map<string, string row row (row.containskey(""javatype"")) classname row .get(""javatype""); (classname null answer .seterror(""cannot find javatype language language return answer object instance null class clazz null try clazz classloader .loadclass(classname); instance clazz .newinstance(); catch (exception e ignore (clazz null instance null throwable cause null try (predicate) instance .getclass().getmethod(""createpredicate"", string .class).invoke(instance, text else instance .getclass().getmethod(""createexpression"", string .class).invoke(instance, text catch (invocationtargetexception e cause e .gettargetexception(); catch (exception e cause e (cause null answer .seterror(cause.getmessage()); return answer special logic log endpoint deal showall =true private map <string, string filterproperties (string scheme map <string, string option (""log"".equals(scheme)) string showall option .get(""showall""); (""true"".equals(showall)) map <string, string filtered new linkedhashmap <string, string remove showxxx option showall =true (map.entry<string, string entry option .entryset()) string key entry .getkey(); boolean skip key .startswith(""show"") !key.equals(""showall""); (!skip) filtered .put(key, entry .getvalue()); return filtered use -is return option private static boolean validateinteger (string value boolean valid false try valid integer .valueof(value) null catch (exception e ignore (!valid) may time pattern 5 second try timepatternconverter .tomilliseconds(value); valid true catch (exception e ignore return valid checkstyle :on diff --git /camel-core/src/main/java/org/apache/camel/runtimecatalog/camelcontextjsonschemaresolver.java b /camel-core/src/main/java/org/apache/camel/runtimecatalog/camelcontextjsonschemaresolver.java new file mode index ..d3a448c /dev/null b /camel-core/src/main/java/org/apache/camel/runtimecatalog/camelcontextjsonschemaresolver.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.runtimecatalog; +import java .io.ioexception; +import org .apache.camel.camelcontext; us runtime {@link camelcontext resolve json schema file +public class camelcontextjsonschemaresolver implement jsonschemaresolver private final camelcontext camelcontext public camelcontextjsonschemaresolver (camelcontext camelcontext .camelcontext camelcontext @override public string getcomponentjsonschema (string name try return camelcontext .getcomponentparameterjsonschema(name); catch (ioexception e ignore return null @override public string getdataformatjsonschema (string name try return camelcontext .getdataformatparameterjsonschema(name); catch (ioexception e ignore return null @override public string getlanguagejsonschema (string name try return camelcontext .getlanguageparameterjsonschema(name); catch (ioexception e ignore return null @override public string getotherjsonschema (string name supported return null @override public string getmodeljsonschema (string name try return camelcontext .geteipparameterjsonschema(name); catch (ioexception e ignore return null diff --git /camel-core/src/main/java/org/apache/camel/runtimecatalog/cataloghelper.java b /camel-core/src/main/java/org/apache/camel/runtimecatalog/cataloghelper.java new file mode index ..1b224df /dev/null b /camel-core/src/main/java/org/apache/camel/runtimecatalog/cataloghelper.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.runtimecatalog; +import java .io.bufferedreader; +import java .io.ioexception; +import java .io.inputstream; +import java .io.inputstreamreader; +import java .io.linenumberreader; +import java .util.list; +public final class cataloghelper private cataloghelper load entire stream memory string return <p/> <b>notice:</b> implementation appends <tt>\n</tt> line terminator text <p/> warning 't use crazy big stream public static void loadlines (inputstream list <string> line throw ioexception try (final inputstreamreader isr new inputstreamreader (in); final bufferedreader reader new linenumberreader (isr)) string line ((line reader .readline()) null line .add(line); load entire stream memory string return <p/> <b>notice:</b> implementation appends <tt>\n</tt> line terminator text <p/> warning 't use crazy big stream public static string loadtext (inputstream throw ioexception stringbuilder builder new stringbuilder try (final inputstreamreader isr new inputstreamreader (in); final bufferedreader reader new linenumberreader (isr)) string line ((line reader .readline()) null builder .append(line); builder .append(""\n""); return builder .tostring(); match name pattern @param name name @param pattern pattern @return <tt>true</tt> matched <tt>false</tt> public static boolean matchwildcard (string name string pattern wildcard support hence match file match file endpoint (pattern.endswith(""*"") name .startswith(pattern.substring(0, pattern .length() return true return false return string given token @param text text @param token @return text token <tt>null</tt> text contain token public static string (string text string (!text.contains(after)) return null return text .substring(text.indexof(after) .length()); return string given token @param text text @param token @return text token <tt>null</tt> text contain token public static string (string text string (!text.contains(before)) return null return text .substring(0, text .indexof(before)); return string given token @param text text @param token @param token @return text token <tt>null</tt> text contain token public static string (string text string string text (text, (text null return null return (text, test whether value <tt>null</tt> empty string @param value value string tested text length well @return true empty public static boolean isempty (object value return !isnotempty(value); test whether value <b>not</b> <tt>null</tt> empty string @param value value string tested text length well @return true <b>not</b> empty public static boolean isnotempty (object value (value null return false else (value instanceof string string text (string) value return text .trim().length() else return true remove leading ending quote (single double string @param string @return string without leading ending quote (single double public static string removeleadingandendingquotes (string (isempty(s)) return string copy .trim(); (copy.startswith(""'"") copy .endswith(""'"")) return copy .substring(1, copy .length() (copy.startswith(""\"""") copy .endswith(""\"""")) return copy .substring(1, copy .length() quote return -is return diff --git /camel-core/src/main/java/org/apache/camel/runtimecatalog/collectionstringbuffer.java b /camel-core/src/main/java/org/apache/camel/runtimecatalog/collectionstringbuffer.java new file mode index ..f6484b8 /dev/null b /camel-core/src/main/java/org/apache/camel/runtimecatalog/collectionstringbuffer.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.runtimecatalog; +public class collectionstringbuffer private final stringbuilder buffer new stringbuilder private string separator private boolean first true public collectionstringbuffer public collectionstringbuffer (string separator .separator separator @override public string tostring return buffer .tostring(); public void append (object value (first) first false else buffer .append(separator); buffer .append(value); public string getseparator return separator public void setseparator (string separator .separator separator public boolean isempty return first diff --git /camel-core/src/main/java/org/apache/camel/runtimecatalog/defaultruntimecamelcatalog.java b /camel-core/src/main/java/org/apache/camel/runtimecatalog/defaultruntimecamelcatalog.java new file mode index ..7648e64 /dev/null b /camel-core/src/main/java/org/apache/camel/runtimecatalog/defaultruntimecamelcatalog.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.runtimecatalog; +import java .util.hashmap; +import java .util.map; +import org .apache.camel.camelcontext; default {@link runtimecamelcatalog +public class defaultruntimecamelcatalog extends abstractcamelcatalog implement runtimecamelcatalog cache operation result private final map <string, object cache new hashmap <string, object private boolean caching creates {@link runtimecamelcatalog without caching enabled @param camelcontext camel context public defaultruntimecamelcatalog (camelcontext camelcontext (camelcontext, false creates {@link runtimecamelcatalog @param camelcontext camel context @param caching whether use cache public defaultruntimecamelcatalog (camelcontext camelcontext boolean caching .caching caching setjsonschemaresolver (new camelcontextjsonschemaresolver (camelcontext)); @override public void start throw exception noop @override public void stop throw exception cache .clear(); @override public string modeljsonschema (string name string answer null (caching) answer (string) cache .get(""model-"" name (answer null answer getjsonschemaresolver ().getmodeljsonschema(name); (caching) cache .put(""model-"" name answer return answer @override public string componentjsonschema (string name string answer null (caching) answer (string) cache .get(""component-"" name (answer null answer getjsonschemaresolver ().getcomponentjsonschema(name); (caching) cache .put(""component-"" name answer return answer @override public string dataformatjsonschema (string name string answer null (caching) answer (string) cache .get(""dataformat-"" name (answer null answer getjsonschemaresolver ().getdataformatjsonschema(name); (caching) cache .put(""dataformat-"" name answer return answer @override public string languagejsonschema (string name try look method bean .json file (""method"".equals(name)) name ""bean""; string answer null (caching) answer (string) cache .get(""language-"" name (answer null answer getjsonschemaresolver ().getlanguagejsonschema(name); (caching) cache .put(""language-"" name answer return answer diff --git /camel-core/src/main/java/org/apache/camel/runtimecatalog/endpointvalidationresult.java b /camel-core/src/main/java/org/apache/camel/runtimecatalog/endpointvalidationresult.java new file mode index ..7d1c657 /dev/null b /camel-core/src/main/java/org/apache/camel/runtimecatalog/endpointvalidationresult.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.runtimecatalog; +import java .io.serializable; +import java .util.arrays; +import java .util.collections; +import java .util.linkedhashmap; +import java .util.linkedhashset; +import java .util.list; +import java .util.map; +import java .util.set; +import static org .apache.camel.runtimecatalog.urisupport.isempty; detail result validating endpoint uri +public class endpointvalidationresult implement serializable private final string uri private int error general private string syntaxerror private string unknowncomponent private string incapable option private set <string> unknown private map <string, string unknownsuggestions private set <string> lenient private set <string> notconsumeronly private set <string> notproduceronly private set <string> required private map <string, string invalidenum private map <string, string invalidenumchoices private map <string, string invalidenumsuggestions private map <string, string invalidreference private map <string, string invalidboolean private map <string, string invalidinteger private map <string, string invalidnumber private map <string, string defaultvalues public endpointvalidationresult (null); public endpointvalidationresult (string uri .uri uri public string geturi return uri public boolean haserrors return error public int getnumberoferrors return error public boolean issuccess boolean ok syntaxerror null unknowncomponent null incapable null unknown null required null (ok) ok notconsumeronly null notproduceronly null (ok) ok invalidenum null invalidenumchoices null invalidreference null invalidboolean null invalidinteger null invalidnumber null return ok public void addsyntaxerror (string syntaxerror .syntaxerror syntaxerror error public void addincapable (string uri .incapable uri error public void addunknowncomponent (string name .unknowncomponent name error public void addunknown (string name (unknown null unknown new linkedhashset <string>(); (!unknown.contains(name)) unknown .add(name); error public void addunknownsuggestions (string name string suggestion (unknownsuggestions null unknownsuggestions new linkedhashmap <string, string unknownsuggestions .put(name, suggestion public void addlenient (string name (lenient null lenient new linkedhashset <string>(); (!lenient.contains(name)) lenient .add(name); public void addrequired (string name (required null required new linkedhashset <string>(); (!required.contains(name)) required .add(name); error public void addinvalidenum (string name string value (invalidenum null invalidenum new linkedhashmap <string, string (!invalidenum.containskey(name)) invalidenum .put(name, value error public void addinvalidenumchoices (string name string choice (invalidenumchoices null invalidenumchoices new linkedhashmap <string, string invalidenumchoices .put(name, choice public void addinvalidenumsuggestions (string name string suggestion (invalidenumsuggestions null invalidenumsuggestions new linkedhashmap <string, string invalidenumsuggestions .put(name, suggestion public void addinvalidreference (string name string value (invalidreference null invalidreference new linkedhashmap <string, string (!invalidreference.containskey(name)) invalidreference .put(name, value error public void addinvalidboolean (string name string value (invalidboolean null invalidboolean new linkedhashmap <string, string (!invalidboolean.containskey(name)) invalidboolean .put(name, value error public void addinvalidinteger (string name string value (invalidinteger null invalidinteger new linkedhashmap <string, string (!invalidinteger.containskey(name)) invalidinteger .put(name, value error public void addinvalidnumber (string name string value (invalidnumber null invalidnumber new linkedhashmap <string, string (!invalidnumber.containskey(name)) invalidnumber .put(name, value error public void adddefaultvalue (string name string value (defaultvalues null defaultvalues new linkedhashmap <string, string defaultvalues .put(name, value public void addnotconsumeronly (string name (notconsumeronly null notconsumeronly new linkedhashset <string>(); (!notconsumeronly.contains(name)) notconsumeronly .add(name); error public void addnotproduceronly (string name (notproduceronly null notproduceronly new linkedhashset <string>(); (!notproduceronly.contains(name)) notproduceronly .add(name); error public string getsyntaxerror return syntaxerror public string getincapable return incapable public set <string> getunknown return unknown public set <string> getlenient return lenient public map <string, string getunknownsuggestions return unknownsuggestions public string getunknowncomponent return unknowncomponent public set <string> getrequired return required public map <string, string getinvalidenum return invalidenum public map <string, string getinvalidenumchoices return invalidenumchoices public list <string> getenumchoices (string optionname (invalidenumchoices null string enums invalidenumchoices .get(optionname); (enums null return array .aslist(enums); return collection .emptylist(); public map <string, string getinvalidreference return invalidreference public map <string, string getinvalidboolean return invalidboolean public map <string, string getinvalidinteger return invalidinteger public map <string, string getinvalidnumber return invalidnumber public map <string, string getdefaultvalues return defaultvalues public set <string> getnotconsumeronly return notconsumeronly public set <string> getnotproduceronly return notproduceronly human readable summary validation error @param includeheader whether include header @return summary <tt>null</tt> validation error public string summaryerrormessage (boolean includeheader (issuccess()) return null (incapable null return ""\tincapable parsing uri incapable else (syntaxerror null return ""\tsyntax error syntaxerror else (unknowncomponent null return ""\tunknown component unknowncomponent invalid option build reason message map <string, string option new linkedhashmap <string, string (unknown null (string name unknown (unknownsuggestions null unknownsuggestions .containskey(name)) string suggestion unknownsuggestions .get(name); (suggestions null suggestion .length string str array .aslist(suggestions).tostring(); option .put(name, ""unknown option mean str else option .put(name, ""unknown option else option .put(name, ""unknown option (notconsumeronly null (string name notconsumeronly option .put(name, ""option applicable consumer mode (notproduceronly null (string name notproduceronly option .put(name, ""option applicable producer mode (required null (string name required option .put(name, ""missing required option (invalidenum null (map.entry<string, string entry invalidenum .entryset()) string name entry .getkey(); string choice invalidenumchoices .get(name); string defaultvalue defaultvalues null defaultvalues .get(entry.getkey()) null string str array .aslist(choices).tostring(); string msg ""invalid enum value entry .getvalue() possible value str (invalidenumsuggestions null string suggestion invalidenumsuggestions .get(name); (suggestions null suggestion .length str array .aslist(suggestions).tostring(); msg mean str (defaultvalue null msg default value defaultvalue option .put(entry.getkey(), msg (invalidreference null (map.entry<string, string entry invalidreference .entryset()) boolean empty isempty (entry.getvalue()); (empty) option .put(entry.getkey(), ""empty reference value else (!entry.getvalue().startswith(""#"")) option .put(entry.getkey(), ""invalid reference value entry .getvalue() must start else option .put(entry.getkey(), ""invalid reference value entry .getvalue()); (invalidboolean null (map.entry<string, string entry invalidboolean .entryset()) boolean empty isempty (entry.getvalue()); (empty) option .put(entry.getkey(), ""empty boolean value else option .put(entry.getkey(), ""invalid boolean value entry .getvalue()); (invalidinteger null (map.entry<string, string entry invalidinteger .entryset()) boolean empty isempty (entry.getvalue()); (empty) option .put(entry.getkey(), ""empty integer value else option .put(entry.getkey(), ""invalid integer value entry .getvalue()); (invalidnumber null (map.entry<string, string entry invalidnumber .entryset()) boolean empty isempty (entry.getvalue()); (empty) option .put(entry.getkey(), ""empty number value else option .put(entry.getkey(), ""invalid number value entry .getvalue()); build table error summary nicely formatted let use min length int maxlen (string key option .keyset()) maxlen math .max(maxlen, key .length()); string format maxlen ""s %s""; build human error summary stringbuilder sb new stringbuilder (includeheader) sb .append(""endpoint validator error \n""); sb .append(""---------------------------------------------------------------------------------------------------------------------------------------\n""); sb .append(""\n""); (uri null sb .append(""\t"").append(uri).append(""\n""); else sb .append(""\n""); (map.entry<string, string option option .entryset()) string string .format(format, option .getkey(), option .getvalue()); sb .append(""\n\t"").append(out); return sb .tostring();",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C0ffd278dae9f48d5849d5bd0dc60655f%40git.apache.org%3E,2017-04-14 10:52:58,commits,325.0,camel git commit rename catalog runtimecatalog avoid clash package name camel -catalog.
5,5,5,6.0,326.0,davscl...@apache.org,"diff --git /camel-core/src/main/java/org/apache/camel/catalog/endpointvalidationresult.java b /camel-core/src/main/java/org/apache/camel/catalog/endpointvalidationresult.java deleted file mode index 9bb98f0 /camel-core/src/main/java/org/apache/camel/catalog/endpointvalidationresult.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.catalog; -import java .io.serializable; -import java .util.arrays; -import java .util.collections; -import java .util.linkedhashmap; -import java .util.linkedhashset; -import java .util.list; -import java .util.map; -import java .util.set; -import static org .apache.camel.catalog.urisupport.isempty; detail result validating endpoint uri -public class endpointvalidationresult implement serializable private final string uri private int error general private string syntaxerror private string unknowncomponent private string incapable option private set <string> unknown private map <string, string unknownsuggestions private set <string> lenient private set <string> notconsumeronly private set <string> notproduceronly private set <string> required private map <string, string invalidenum private map <string, string invalidenumchoices private map <string, string invalidenumsuggestions private map <string, string invalidreference private map <string, string invalidboolean private map <string, string invalidinteger private map <string, string invalidnumber private map <string, string defaultvalues public endpointvalidationresult (null); public endpointvalidationresult (string uri .uri uri public string geturi return uri public boolean haserrors return error public int getnumberoferrors return error public boolean issuccess boolean ok syntaxerror null unknowncomponent null incapable null unknown null required null (ok) ok notconsumeronly null notproduceronly null (ok) ok invalidenum null invalidenumchoices null invalidreference null invalidboolean null invalidinteger null invalidnumber null return ok public void addsyntaxerror (string syntaxerror .syntaxerror syntaxerror error public void addincapable (string uri .incapable uri error public void addunknowncomponent (string name .unknowncomponent name error public void addunknown (string name (unknown null unknown new linkedhashset <string>(); (!unknown.contains(name)) unknown .add(name); error public void addunknownsuggestions (string name string suggestion (unknownsuggestions null unknownsuggestions new linkedhashmap <string, string unknownsuggestions .put(name, suggestion public void addlenient (string name (lenient null lenient new linkedhashset <string>(); (!lenient.contains(name)) lenient .add(name); public void addrequired (string name (required null required new linkedhashset <string>(); (!required.contains(name)) required .add(name); error public void addinvalidenum (string name string value (invalidenum null invalidenum new linkedhashmap <string, string (!invalidenum.containskey(name)) invalidenum .put(name, value error public void addinvalidenumchoices (string name string choice (invalidenumchoices null invalidenumchoices new linkedhashmap <string, string invalidenumchoices .put(name, choice public void addinvalidenumsuggestions (string name string suggestion (invalidenumsuggestions null invalidenumsuggestions new linkedhashmap <string, string invalidenumsuggestions .put(name, suggestion public void addinvalidreference (string name string value (invalidreference null invalidreference new linkedhashmap <string, string (!invalidreference.containskey(name)) invalidreference .put(name, value error public void addinvalidboolean (string name string value (invalidboolean null invalidboolean new linkedhashmap <string, string (!invalidboolean.containskey(name)) invalidboolean .put(name, value error public void addinvalidinteger (string name string value (invalidinteger null invalidinteger new linkedhashmap <string, string (!invalidinteger.containskey(name)) invalidinteger .put(name, value error public void addinvalidnumber (string name string value (invalidnumber null invalidnumber new linkedhashmap <string, string (!invalidnumber.containskey(name)) invalidnumber .put(name, value error public void adddefaultvalue (string name string value (defaultvalues null defaultvalues new linkedhashmap <string, string defaultvalues .put(name, value public void addnotconsumeronly (string name (notconsumeronly null notconsumeronly new linkedhashset <string>(); (!notconsumeronly.contains(name)) notconsumeronly .add(name); error public void addnotproduceronly (string name (notproduceronly null notproduceronly new linkedhashset <string>(); (!notproduceronly.contains(name)) notproduceronly .add(name); error public string getsyntaxerror return syntaxerror public string getincapable return incapable public set <string> getunknown return unknown public set <string> getlenient return lenient public map <string, string getunknownsuggestions return unknownsuggestions public string getunknowncomponent return unknowncomponent public set <string> getrequired return required public map <string, string getinvalidenum return invalidenum public map <string, string getinvalidenumchoices return invalidenumchoices public list <string> getenumchoices (string optionname (invalidenumchoices null string enums invalidenumchoices .get(optionname); (enums null return array .aslist(enums); return collection .emptylist(); public map <string, string getinvalidreference return invalidreference public map <string, string getinvalidboolean return invalidboolean public map <string, string getinvalidinteger return invalidinteger public map <string, string getinvalidnumber return invalidnumber public map <string, string getdefaultvalues return defaultvalues public set <string> getnotconsumeronly return notconsumeronly public set <string> getnotproduceronly return notproduceronly human readable summary validation error @param includeheader whether include header @return summary <tt>null</tt> validation error public string summaryerrormessage (boolean includeheader (issuccess()) return null (incapable null return ""\tincapable parsing uri incapable else (syntaxerror null return ""\tsyntax error syntaxerror else (unknowncomponent null return ""\tunknown component unknowncomponent invalid option build reason message map <string, string option new linkedhashmap <string, string (unknown null (string name unknown (unknownsuggestions null unknownsuggestions .containskey(name)) string suggestion unknownsuggestions .get(name); (suggestions null suggestion .length string str array .aslist(suggestions).tostring(); option .put(name, ""unknown option mean str else option .put(name, ""unknown option else option .put(name, ""unknown option (notconsumeronly null (string name notconsumeronly option .put(name, ""option applicable consumer mode (notproduceronly null (string name notproduceronly option .put(name, ""option applicable producer mode (required null (string name required option .put(name, ""missing required option (invalidenum null (map.entry<string, string entry invalidenum .entryset()) string name entry .getkey(); string choice invalidenumchoices .get(name); string defaultvalue defaultvalues null defaultvalues .get(entry.getkey()) null string str array .aslist(choices).tostring(); string msg ""invalid enum value entry .getvalue() possible value str (invalidenumsuggestions null string suggestion invalidenumsuggestions .get(name); (suggestions null suggestion .length str array .aslist(suggestions).tostring(); msg mean str (defaultvalue null msg default value defaultvalue option .put(entry.getkey(), msg (invalidreference null (map.entry<string, string entry invalidreference .entryset()) boolean empty isempty (entry.getvalue()); (empty) option .put(entry.getkey(), ""empty reference value else (!entry.getvalue().startswith(""#"")) option .put(entry.getkey(), ""invalid reference value entry .getvalue() must start else option .put(entry.getkey(), ""invalid reference value entry .getvalue()); (invalidboolean null (map.entry<string, string entry invalidboolean .entryset()) boolean empty isempty (entry.getvalue()); (empty) option .put(entry.getkey(), ""empty boolean value else option .put(entry.getkey(), ""invalid boolean value entry .getvalue()); (invalidinteger null (map.entry<string, string entry invalidinteger .entryset()) boolean empty isempty (entry.getvalue()); (empty) option .put(entry.getkey(), ""empty integer value else option .put(entry.getkey(), ""invalid integer value entry .getvalue()); (invalidnumber null (map.entry<string, string entry invalidnumber .entryset()) boolean empty isempty (entry.getvalue()); (empty) option .put(entry.getkey(), ""empty number value else option .put(entry.getkey(), ""invalid number value entry .getvalue()); build table error summary nicely formatted let use min length int maxlen (string key option .keyset()) maxlen math .max(maxlen, key .length()); string format maxlen ""s %s""; build human error summary stringbuilder sb new stringbuilder (includeheader) sb .append(""endpoint validator error \n""); sb .append(""---------------------------------------------------------------------------------------------------------------------------------------\n""); sb .append(""\n""); (uri null sb .append(""\t"").append(uri).append(""\n""); else sb .append(""\n""); (map.entry<string, string option option .entryset()) string string .format(format, option .getkey(), option .getvalue()); sb .append(""\n\t"").append(out); return sb .tostring(); diff --git /camel-core/src/main/java/org/apache/camel/catalog/jsonschemahelper.java b /camel-core/src/main/java/org/apache/camel/catalog/jsonschemahelper.java deleted file mode index 774facd /camel-core/src/main/java/org/apache/camel/catalog/jsonschemahelper.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.catalog; -import java .util.arraylist; -import java .util.linkedhashmap; -import java .util.linkedhashset; -import java .util.list; -import java .util.map; -import java .util.set; -import java .util.regex.matcher; -import java .util.regex.pattern; -public final class jsonschemahelper text enum boolean integer number private static final pattern pattern pattern .compile(""\""(.+?)\""|\\[(.+)\\]|(true|false)|(-?\\d+\\.?\\d*)""); private static final string quot ""&quot;""; private jsonschemahelper par json schema split list row row contains key value pair metadata @param group group parse <tt>component</tt>, <tt>componentproperties</tt>, <tt>properties</tt>. @param json json @return list row row set key value pair metadata public static list <map<string, string parsejsonschema (string group string json boolean parseproperties list <map<string, string answer new arraylist <map<string, string (json null return answer boolean found false parse line line string line json .split(""\n""); (string line line need find group first (!found) string line .trim(); found .startswith(""\"""" group .endswith(""{""); continue stop end group (line.equals("" line .equals("" break need safe encode parse line line line .replaceall(""\""\\\\\""\"""", quot map <string, string row new linkedhashmap <string, string matcher matcher pattern .matcher(line); string key (parseproperties) parsing property first key given name first parsed token value name key ""name""; else key null (matcher.find()) (key null key matcher .group(1); else string value matcher .group(1); (value null text based value value .trim(); decode value value .replaceall(quot, value decodejson (value); (value null text maybe enum value matcher .group(2); (value null enum strip trim space comma value value .replaceall(""\"""", value value .replaceall("", value value .trim(); (value null text maybe boolean value matcher .group(3); (value null text maybe integer value matcher .group(4); (value null row .put(key, value reset key null (!row.isempty()) answer .add(row); return answer private static string decodejson (string value json encodes need decode back (""\\\\"".equals(value)) value return value public static boolean iscomponentlenientproperties (list<map<string, string row (map<string, string row row (row.containskey(""lenientproperties"")) return ""true"".equals(row.get(""lenientproperties"")); return false public static boolean iscomponentconsumeronly (list<map<string, string row (map<string, string row row (row.containskey(""consumeronly"")) return ""true"".equals(row.get(""consumeronly"")); return false public static boolean iscomponentproduceronly (list<map<string, string row (map<string, string row row (row.containskey(""produceronly"")) return ""true"".equals(row.get(""produceronly"")); return false public static boolean ispropertyconsumeronly (list<map<string, string row string name (map<string, string row row string label null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""label"")) label row .get(""label""); (found) return label null label .contains(""consumer""); return false public static boolean ispropertyproduceronly (list<map<string, string row string name (map<string, string row row string label null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""label"")) label row .get(""label""); (found) return label null label .contains(""producer""); return false public static boolean ispropertyrequired (list<map<string, string row string name (map<string, string row row boolean required false boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""required"")) required ""true"".equals(row.get(""required"")); (found) return required return false public static string getpropertykind (list<map<string, string row string name (map<string, string row row string kind null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""kind"")) kind row .get(""kind""); (found) return kind return null public static boolean ispropertyboolean (list<map<string, string row string name (map<string, string row row string type null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""type"")) type row .get(""type""); (found) return ""boolean"".equals(type); return false public static boolean ispropertyinteger (list<map<string, string row string name (map<string, string row row string type null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""type"")) type row .get(""type""); (found) return ""integer"".equals(type); return false public static boolean ispropertynumber (list<map<string, string row string name (map<string, string row row string type null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""type"")) type row .get(""type""); (found) return ""number"".equals(type); return false public static boolean ispropertyobject (list<map<string, string row string name (map<string, string row row string type null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""type"")) type row .get(""type""); (found) return ""object"".equals(type); return false public static string getpropertydefaultvalue (list<map<string, string row string name (map<string, string row row string defaultvalue null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""defaultvalue"")) defaultvalue row .get(""defaultvalue""); (found) return defaultvalue return null public static string stripoptionalprefixfromname (list<map<string, string row string name (map<string, string row row string optionalprefix null boolean found false (row.containskey(""optionalprefix"")) optionalprefix row .get(""optionalprefix""); (row.containskey(""name"")) (optionalprefix null name .startswith(optionalprefix)) name name .substring(optionalprefix.length()); try return stripoptionalprefixfromname (rows, name else found name .equals(row.get(""name"")); (found) return name return name public static string getpropertyenum (list<map<string, string row string name (map<string, string row row string enums null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""enum"")) enums row .get(""enum""); (found) return enums return null public static string getpropertyprefix (list<map<string, string row string name (map<string, string row row string prefix null boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""prefix"")) prefix row .get(""prefix""); (found) return prefix return null public static boolean ispropertymultivalue (list<map<string, string row string name (map<string, string row row boolean multivalue false boolean found false (row.containskey(""name"")) found name .equals(row.get(""name"")); (row.containskey(""multivalue"")) multivalue ""true"".equals(row.get(""multivalue"")); (found) return multivalue return false public static string getpropertynamefromnamewithprefix (list<map<string, string row string name (map<string, string row row string propertyname null boolean found false (row.containskey(""name"")) propertyname row .get(""name""); (row.containskey(""prefix"")) string preifx row .get(""prefix""); found name .startswith(preifx); (found) return propertyname return null public static map <string, string getrow (list<map<string, string row string key (map<string, string row row (key.equals(row.get(""name""))) return row return null public static set <string> getnames (list<map<string, string row set <string> answer new linkedhashset <string>(); (map<string, string row row (row.containskey(""name"")) answer .add(row.get(""name"")); return answer diff --git /camel-core/src/main/java/org/apache/camel/catalog/jsonschemaresolver.java b /camel-core/src/main/java/org/apache/camel/catalog/jsonschemaresolver.java deleted file mode index 9bf09cc /camel-core/src/main/java/org/apache/camel/catalog/jsonschemaresolver.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.catalog; pluggable resolver load json schema file component data format language etc -public interface jsonschemaresolver return component information json format @param name component name @return component detail json string getcomponentjsonschema (string name return data format information json format @param name data format name @return data format detail json string getdataformatjsonschema (string name return language information json format @param name language name @return language detail json string getlanguagejsonschema (string name return (miscellaneous) information json format @param name (miscellaneous) name @return (miscellaneous) detail json string getotherjsonschema (string name return model information json format @param name model name @return model detail json string getmodeljsonschema (string name diff --git /camel-core/src/main/java/org/apache/camel/catalog/languagevalidationresult.java b /camel-core/src/main/java/org/apache/camel/catalog/languagevalidationresult.java deleted file mode index 4a977eb /camel-core/src/main/java/org/apache/camel/catalog/languagevalidationresult.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.catalog; -import java .io.serializable; validation result parsing language expression predicate -public class languagevalidationresult implement serializable private final string text private string error private string shorterror private int index public languagevalidationresult (string text .text text public string gettext return text public boolean issuccess return error null public void seterror (string error .error error public string geterror return error public string getshorterror return shorterror public void setshorterror (string shorterror .shorterror shorterror public int getindex return index public void setindex (int index .index index diff --git /camel-core/src/main/java/org/apache/camel/catalog/runtimecamelcatalog.java b /camel-core/src/main/java/org/apache/camel/catalog/runtimecamelcatalog.java deleted file mode index b46edab /camel-core/src/main/java/org/apache/camel/catalog/runtimecamelcatalog.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.catalog; -import java .net.urisyntaxexception; -import java .util.map; -import org .apache.camel.staticservice; runtime based camelcatalog included camel -core provided limit camelcatalog capability -public interface runtimecamelcatalog extends staticservice return component information json format @param name component name @return component detail json string componentjsonschema (string name return data format information json format @param name data format name @return data format detail json string dataformatjsonschema (string name return language information json format @param name language name @return language detail json string languagejsonschema (string name return model information json format @param name model name @return model detail json string modeljsonschema (string name par endpoint uri construct key /value property option @param uri endpoint uri @return property key value pair endpoint option map <string, string endpointproperties (string uri throw urisyntaxexception par endpoint uri construct key /value property lenient property (eg custom option <p/> example using http component provide query parameter endpoint uri @param uri endpoint uri @return property key value pair lenient property map <string, string endpointlenientproperties (string uri throw urisyntaxexception validates pattern whether valid time pattern @param pattern pattern 5 5sec 4min 4m30s 1h etc @return <tt>true</tt> valid <tt>false</tt> invalid boolean validatetimepattern (string pattern validates property given scheme component endpoint @param scheme endpoint scheme @param property endpoint property @return validation result endpointvalidationresult validateproperties (string scheme map <string, string property par validates endpoint uri construct key /value property option @param uri endpoint uri @return validation result endpointvalidationresult validateendpointproperties (string uri par validates endpoint uri construct key /value property option <p/> option ignorelenientproperties used ignore component us lenient property true uri validation stricter would fail property part component uri using lenient property example using http component provide query parameter endpoint uri @param uri endpoint uri @param ignorelenientproperties whether ignore component us lenient property @return validation result endpointvalidationresult validateendpointproperties (string uri boolean ignorelenientproperties par validates endpoint uri construct key /value property option <p/> option ignorelenientproperties used ignore component us lenient property true uri validation stricter would fail property part component uri using lenient property example using http component provide query parameter endpoint uri @param uri endpoint uri @param ignorelenientproperties whether ignore component us lenient property @param consumeronly whether endpoint used consumer @param produceronly whether endpoint used producer @return validation result endpointvalidationresult validateendpointproperties (string uri boolean ignorelenientproperties boolean consumeronly boolean produceronly par validates simple expression <p/> <b>important:</b> requires <tt>camel-core</tt> classpath @param simple simple expression @return validation result @deprecated use {@link #validatesimpleexpression(classloader, string @deprecated simplevalidationresult validatesimpleexpression (string simple par validates simple expression <p/> <b>important:</b> requires <tt>camel-core</tt> classpath @param classloader custom classloader use loading language classpath <tt>null</tt> using default classloader @param simple simple expression @return validation result simplevalidationresult validatesimpleexpression (classloader classloader string simple par validates simple predicate <p/> <b>important:</b> requires <tt>camel-core</tt> classpath @param simple simple predicate @return validation result @deprecated use {@link #validatesimplepredicate(classloader, string @deprecated simplevalidationresult validatesimplepredicate (string simple par validates simple predicate <p/> <b>important:</b> requires <tt>camel-core</tt> classpath @param classloader custom classloader use loading language classpath <tt>null</tt> using default classloader @param simple simple predicate @return validation result simplevalidationresult validatesimplepredicate (classloader classloader string simple par validates language predicate <p/> <b>important:</b> requires <tt>camel-core</tt> language dependency classpath @param classloader custom classloader use loading language classpath <tt>null</tt> using default classloader @param language name language @param text predicate text @return validation result languagevalidationresult validatelanguagepredicate (classloader classloader string language string text par validates language expression <p/> <b>important:</b> requires <tt>camel-core</tt> language dependency classpath @param classloader custom classloader use loading language classpath <tt>null</tt> using default classloader @param language name language @param text expression text @return validation result languagevalidationresult validatelanguageexpression (classloader classloader string language string text return component name given endpoint uri @param uri endpoint uri @return component name (aka scheme <tt>null</tt> possible determine string endpointcomponentname (string uri creates endpoint uri java style information property @param scheme endpoint schema @param property property key value pair @param encode whether url encode returned uri @return constructed endpoint uri @throws java .net.urisyntaxexception thrown encoding error string asendpointuri (string scheme map <string, string property boolean encode throw urisyntaxexception creates endpoint uri xml style (eg escape &ampl;) information property @param scheme endpoint schema @param property property key value pair @param encode whether url encode returned uri @return constructed endpoint uri @throws java .net.urisyntaxexception thrown encoding error string asendpointurixml (string scheme map <string, string property boolean encode throw urisyntaxexception diff --git /camel-core/src/main/java/org/apache/camel/catalog/simplevalidationresult.java b /camel-core/src/main/java/org/apache/camel/catalog/simplevalidationresult.java deleted file mode index 5c86f23 /camel-core/src/main/java/org/apache/camel/catalog/simplevalidationresult.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.catalog; backwards compatible favor using {@link languagevalidationresult instead -public class simplevalidationresult extends languagevalidationresult public simplevalidationresult (string text super (text); public string getsimple return gettext diff --git /camel-core/src/main/java/org/apache/camel/catalog/suggestionstrategy.java b /camel-core/src/main/java/org/apache/camel/catalog/suggestionstrategy.java deleted file mode index 057d372 /camel-core/src/main/java/org/apache/camel/catalog/suggestionstrategy.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.catalog; -import java .util.set; strategy provide suggestion unknown endpoint option -public interface suggestionstrategy provides list valid option name mean function @param name valid name @param unknownoption unknown option name @return list suggested name (did mean string suggestendpointoptions (set<string> name string unknownoption diff --git /camel-core/src/main/java/org/apache/camel/catalog/timepatternconverter.java b /camel-core/src/main/java/org/apache/camel/catalog/timepatternconverter.java deleted file mode index 4ed843a /camel-core/src/main/java/org/apache/camel/catalog/timepatternconverter.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.catalog; -import java .util.regex.matcher; -import java .util.regex.pattern; class copy camel -core use independent validate uris time pattern -public final class timepatternconverter private static final pattern numbers_only_string_pattern pattern .compile(""^[-]?(\\d)+$"", pattern .case_insensitive); private static final pattern hour_regex_pattern pattern .compile(""((\\d)*(\\d))h(our(s)?)?"", pattern .case_insensitive); private static final pattern minutes_regex_pattern pattern .compile(""((\\d)*(\\d))m(in(ute(s)?)?)?"", pattern .case_insensitive); private static final pattern seconds_regex_pattern pattern .compile(""((\\d)*(\\d))s(ec(ond)?(s)?)?"", pattern .case_insensitive); utility class public constructor private timepatternconverter public static long tomilliseconds (string source throw illegalargumentexception long millisecond boolean foundflag false checkcorrectnessofpattern (source); matcher matcher matcher creatematcher (numbers_only_string_pattern, source (matcher.find()) note also used regular numeric string string long converter used string millisecond long .valueof(source); else matcher creatematcher (hour_regex_pattern, source (matcher.find()) millisecond millisecond long .valueof(matcher.group(1))); foundflag true matcher creatematcher (minutes_regex_pattern, source (matcher.find()) long minute long .valueof(matcher.group(1)); ((minutes foundflag throw new illegalargumentexception (""minutes contain valid value source foundflag true millisecond millisecond minute matcher creatematcher (seconds_regex_pattern, source (matcher.find()) long second long .valueof(matcher.group(1)); ((seconds foundflag throw new illegalargumentexception (""seconds contain valid value source foundflag true millisecond millisecond second pattern matched initiating fallback check conversion (if required source point may contain illegal value special character (!foundflag) millisecond long .valueof(source); return millisecond private static void checkcorrectnessofpattern (string source //replace number matcher matcher creatematcher (numbers_only_string_pattern, source string replacesource matcher .replacefirst(""""); //replace hour string matcher creatematcher (hour_regex_pattern, replacesource (matcher.find() matcher .find()) throw new illegalargumentexception (""hours specified source replacesource matcher .replacefirst(""""); //replace minute matcher creatematcher (minutes_regex_pattern, replacesource (matcher.find() matcher .find()) throw new illegalargumentexception (""minutes specified source replacesource matcher .replacefirst(""""); //replace second matcher creatematcher (seconds_regex_pattern, replacesource (matcher.find() matcher .find()) throw new illegalargumentexception (""seconds specified source replacesource matcher .replacefirst(""""); (replacesource.length() throw new illegalargumentexception (""illegal character source private static matcher creatematcher (pattern pattern string source return pattern .matcher(source); diff --git /camel-core/src/main/java/org/apache/camel/catalog/urisupport.java b /camel-core/src/main/java/org/apache/camel/catalog/urisupport.java deleted file mode index ea1ecd5 /camel-core/src/main/java/org/apache/camel/catalog/urisupport.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.catalog; -import java .io.unsupportedencodingexception; -import java .net.uri; -import java .net.urisyntaxexception; -import java .net.urldecoder; -import java .net.urlencoder; -import java .util.arraylist; -import java .util.iterator; -import java .util.linkedhashmap; -import java .util.list; -import java .util.map; copied org .apache.camel.util.urisupport -public final class urisupport public static final string raw_token_start ""raw(""; public static final string raw_token_end private static final string charset ""utf-8""; private urisupport helper class normalizes uri unsafe character encoded @param uri input uri @return uri instance @throws urisyntaxexception thrown syntax error input uri public static uri normalizeuri (string uri throw urisyntaxexception return new uri (unsafeuricharactersencoder.encode(uri, true public static map <string, object extractproperties (map<string, object property string optionprefix map <string, object rc new linkedhashmap <string, object >(properties.size()); (iterator<map.entry<string, object property .entryset().iterator(); .hasnext();) map .entry<string, object entry .next(); string name entry .getkey(); (name.startswith(optionprefix)) object value property .get(name); name name .substring(optionprefix.length()); rc .put(name, value .remove(); return rc strip query parameter uri @param uri uri @return uri without query parameter public static string stripquery (string uri int idx uri .indexof('?'); (idx uri uri .substring(0, idx return uri par query parameter uri (eg query part @param uri uri @return parameter empty map parameter (eg never null @throws urisyntaxexception thrown uri invalid syntax public static map <string, object parseparameters (uri uri throw urisyntaxexception string query uri .getquery(); (query null string schemespecificpart uri .getschemespecificpart(); int idx schemespecificpart .indexof('?'); (idx return empty map return new linkedhashmap <string, object else query schemespecificpart .substring(idx else query stripprefix (query, return parsequery (query); strip prefix value <p/> return value -is starting prefix @param value value @param prefix prefix remove value @return value without prefix public static string stripprefix (string value string prefix (value null value .startswith(prefix)) return value .substring(prefix.length()); return value par query part uri (eg parameter <p/> uri parameter default uri encoded however define parameter value syntax <tt>key=raw(value)</tt> tell camel encode value use value (eg key =value) value <b>not</b> encoded @param uri uri @return parameter empty map parameter (eg never null @throws urisyntaxexception thrown uri invalid syntax @see #raw_token_start @see #raw_token_end public static map <string, object parsequery (string uri throw urisyntaxexception return parsequery (uri, false par query part uri (eg parameter <p/> uri parameter default uri encoded however define parameter value syntax <tt>key=raw(value)</tt> tell camel encode value use value (eg key =value) value <b>not</b> encoded @param uri uri @param useraw whether force using raw value @return parameter empty map parameter (eg never null @throws urisyntaxexception thrown uri invalid syntax @see #raw_token_start @see #raw_token_end public static map <string, object parsequery (string uri boolean useraw throw urisyntaxexception must check trailing uri .split(""&"") ignore (uri null uri .endswith(""&"")) throw new urisyntaxexception (uri, ""invalid uri syntax trailing marker found ""check uri remove trailing marker (isempty(uri)) return empty map return new linkedhashmap <string, object need parse uri query parameter manually cannot rely splitting used parameter value well try use linked map parameter order map <string, object rc new linkedhashmap <string, object boolean iskey true boolean isvalue false boolean israw false stringbuilder key new stringbuilder stringbuilder value new stringbuilder parse uri parameter char char (int uri .length(); current char char ch uri .charat(i); look ahead next char char next (i uri .length() next uri .charat(i else next '\u0000'; raw value israw value .tostring().startswith(raw_token_start); raw mode keep adding hit end marker (israw) (iskey) key .append(ch); else (isvalue) value .append(ch); end raw marker end value boolean end ch raw_token_end .charat(0) (next next '\u0000'); (end) raw value end add parameter reset flag addparameter (key.tostring(), value .tostring(), rc useraw israw key .setlength(0); value .setlength(0); iskey true isvalue false israw false skip next raw mode already added value continue key sign key end value mode (iskey ch iskey false isvalue true israw false continue denote parameter ended (ch parameter ended hit separator string akey key .tostring(); key may placeholder option know boolean validkey !akey.startswith(""{{"") !akey.endswith(""}}""); (validkey) addparameter (akey, value .tostring(), rc useraw israw key .setlength(0); value .setlength(0); iskey true isvalue false israw false continue regular char add key value (iskey) key .append(ch); else (isvalue) value .append(ch); left parameter add (key.length() string akey key .tostring(); key may placeholder option know boolean validkey !akey.startswith(""{{"") !akey.endswith(""}}""); (validkey) addparameter (akey, value .tostring(), rc useraw israw return rc catch (unsupportedencodingexception e urisyntaxexception se new urisyntaxexception (e.tostring(), ""invalid encoding se .initcause(e); throw se @suppresswarnings(""unchecked"") private static void addparameter (string name string value map <string, object map boolean israw throw unsupportedencodingexception name urldecoder .decode(name, charset (!israw) need replace value urldecoder .decode(value.replaceall(""%"", charset key already exist (map.containskey(name)) yes make sure support multiple value using list hold multiple value object existing map .get(name); list <string> list (existing instanceof list list (list<string>) existing else create new list hold multiple value list new arraylist <string>(); string existing null existing .tostring() null (s null list .add(s); list .add(value); map .put(name, list else map .put(name, value assembles query given map @param option map option (eg key /value pair @param ampersand use java code &amp; xml @return query string <tt>key1=value&key2=value2&...</tt>, empty string option @throws urisyntaxexception thrown uri invalid syntax public static string createquerystring (map<string, string option string ampersand boolean encode throw urisyntaxexception try (options.size() stringbuilder rc new stringbuilder boolean first true (object option .keyset()) (first) first false else rc .append(ampersand); string key (string) object value option .get(key); use value string string value null value .tostring() null appendquerystringparameter (key, rc encode return rc .tostring(); else return catch (unsupportedencodingexception e urisyntaxexception se new urisyntaxexception (e.tostring(), ""invalid encoding se .initcause(e); throw se private static void appendquerystringparameter (string key string value stringbuilder rc boolean encode throw unsupportedencodingexception (encode) rc .append(urlencoder.encode(key, charset else rc .append(key); append value null (value null rc .append(""=""); (value.startswith(raw_token_start) value .endswith(raw_token_end)) encode raw parameter rc .append(value); else (encode) rc .append(urlencoder.encode(value, charset else rc .append(value); test whether value <tt>null</tt> empty string @param value value string tested text length well @return true empty public static boolean isempty (object value return !isnotempty(value); test whether value <b>not</b> <tt>null</tt> empty string @param value value string tested text length well @return true <b>not</b> empty public static boolean isnotempty (object value (value null return false else (value instanceof string string text (string) value return text .trim().length() else return true diff --git /camel-core/src/main/java/org/apache/camel/catalog/unsafeuricharactersencoder.java b /camel-core/src/main/java/org/apache/camel/catalog/unsafeuricharactersencoder.java deleted file mode index 563bac2 /camel-core/src/main/java/org/apache/camel/catalog/unsafeuricharactersencoder.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.catalog; -import java .util.arraylist; -import java .util.bitset; -import java .util.list; -import java .util.regex.matcher; -import java .util.regex.pattern; encoder unsafe uri character <p/> good source detail <a href url encode </a> article -public final class unsafeuricharactersencoder private static bitset unsafecharactersrfc1738 private static bitset unsafecharactershttp private static final char hex_digits 'a', 'b', 'c', 'd', 'e', 'f', 'a', 'b', 'c', 'd', 'e', 'f'}; private static final pattern raw_pattern pattern .compile(""raw\\([^\\)]+\\)""); static unsafecharactersrfc1738 new bitset unsafecharactersrfc1738 .set(' unsafecharactersrfc1738 .set('""'); unsafecharactersrfc1738 .set('<'); unsafecharactersrfc1738 .set('>'); unsafecharactersrfc1738 .set('#'); unsafecharactersrfc1738 .set('%'); unsafecharactersrfc1738 .set('{'); unsafecharactersrfc1738 .set('}'); unsafecharactersrfc1738 .set('|'); unsafecharactersrfc1738 .set('\\'); unsafecharactersrfc1738 .set('^'); unsafecharactersrfc1738 .set('~'); unsafecharactersrfc1738 .set('['); unsafecharactersrfc1738 .set(']'); unsafecharactersrfc1738 .set('`'); static unsafecharactershttp new bitset unsafecharactershttp .set(' unsafecharactershttp .set('""'); unsafecharactershttp .set('<'); unsafecharactershttp .set('>'); unsafecharactershttp .set('#'); unsafecharactershttp .set('%'); unsafecharactershttp .set('{'); unsafecharactershttp .set('}'); unsafecharactershttp .set('|'); unsafecharactershttp .set('\\'); unsafecharactershttp .set('^'); unsafecharactershttp .set('~'); unsafecharactershttp .set('`'); private unsafeuricharactersencoder util class public static string encode (string return encode (s, unsafecharactersrfc1738 public static string encodehttpuri (string return encode (s, unsafecharactershttp public static string encode (string bitset unsafecharacters return encode (s, unsafecharacters false public static string encode (string boolean checkraw return encode (s, unsafecharactersrfc1738 checkraw public static string encodehttpuri (string boolean checkraw return encode (s, unsafecharactershttp checkraw private static list <pair> checkraw (string matcher matcher raw_pattern .matcher(s); list <pair> answer new arraylist <pair>(); check occurrence (matcher.find()) answer .add(new pair (matcher.start(), matcher .end())); return answer private static boolean israw (int index list <pair> pair (pair pair pair (index pair .left) return false else (index pair .left) (index pair .right) return true else continue return false private static class pair int left int right pair (int left int right .left left .right right skip encode israw part public static string encode (string bitset unsafecharacters boolean checkraw list <pair> rawpairs (checkraw) rawpairs checkraw (s); else rawpairs new arraylist <pair>(); int n null .length(); (n return first check whether actually need encode char char .tochararray(); (int deal ascii character (chars[i] char [i] (unsafecharacters.get(chars[i])) break (++i char .length) return okay unsafe character need encode see detail stringbuilder sb new stringbuilder (int char .length; char ch char [i]; (ch ch unsafecharacters .get(ch)) special sign may decimal encoded value (ch char next char .length char [i char next2 char .length char [i (ishexdigit(next) ishexdigit (next2) !israw(i, rawpairs already encoded (decimal encoded append sb .append(ch); else must escape unsafe character appendescape (sb, (byte) ch else must escape unsafe character appendescape (sb, (byte) ch else sb .append(ch); return sb .tostring(); private static void appendescape (stringbuilder sb byte b sb .append('%'); sb .append(hex_digits[(b 0x0f sb .append(hex_digits[(b 0x0f private static boolean ishexdigit (char ch (char hex hex_digits (hex ch return true return false diff --git /camel-core/src/main/java/org/apache/camel/catalog/package.html b /camel-core/src/main/java/org/apache/camel/catalog/package.html deleted file mode index 98786d1 /camel-core/src/main/java/org/apache/camel/catalog/package.html /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -<html> -<head> -</head> -<body> -camel catalog -</body> -</html> diff --git /camel-core/src/main/java/org/apache/camel/component/rest/restcomponentverifier.java b /camel-core/src/main/java/org/apache/camel/component/rest/restcomponentverifier.java index 5d19e0d ..4013e5f /camel-core/src/main/java/org/apache/camel/component/rest/restcomponentverifier.java b /camel-core/src/main/java/org/apache/camel/component/rest/restcomponentverifier.java import java .util.map; import org .apache.camel.component; import org .apache.camel.componentverifier; import org .apache.camel.verifiablecomponent; -import org .apache.camel.catalog.jsonschemahelper; -import org .apache.camel.catalog.runtimecamelcatalog; import org .apache.camel.impl.verifier.catalogverifiercustomizer; import org .apache.camel.impl.verifier.defaultcomponentverifier; import org .apache.camel.impl.verifier.resultbuilder; import org .apache.camel.impl.verifier.resulterrorbuilder; +import org .apache.camel.runtimecatalog.jsonschemahelper; +import org .apache.camel.runtimecatalog.runtimecamelcatalog; import org .apache.camel.spi.restconsumerfactory; import org .apache.camel.spi.restproducerfactory; import org .apache.camel.util.objecthelper; diff --git /camel-core/src/main/java/org/apache/camel/impl/defaultcamelcontext.java b /camel-core/src/main/java/org/apache/camel/impl/defaultcamelcontext.java index c85ce8c ..b53efc8 /camel-core/src/main/java/org/apache/camel/impl/defaultcamelcontext.java b /camel-core/src/main/java/org/apache/camel/impl/defaultcamelcontext.java import java .util.collections; import java .util.comparator; import java .util.date; import java .util.hashmap; -import java .util.hashset; import java .util.iterator; import java .util.linkedhashmap; import java .util.linkedhashset; import org .apache.camel.api.management.mbean.managedroutembean; import org .apache.camel.builder.defaultfluentproducertemplate; import org .apache.camel.builder.errorhandlerbuilder; import org .apache.camel.builder.errorhandlerbuildersupport; -import org .apache.camel.catalog.defaultruntimecamelcatalog; -import org .apache.camel.catalog.runtimecamelcatalog; import org .apache.camel.component.properties.propertiescomponent; import org .apache.camel.impl.converter.basetypeconverterregistry; import org .apache.camel.impl.converter.defaulttypeconverter; import org .apache.camel.processor.interceptor.delayer; import org .apache.camel.processor.interceptor.handlefault; import org .apache.camel.processor.interceptor.streamcaching; import org .apache.camel.processor.interceptor.tracer; +import org .apache.camel.runtimecatalog.defaultruntimecamelcatalog; +import org .apache.camel.runtimecatalog.runtimecamelcatalog; import org .apache.camel.spi.asyncprocessorawaitmanager; import org .apache.camel.spi.camelcontextnamestrategy; import org .apache.camel.spi.classresolver; diff --git /camel-core/src/main/java/org/apache/camel/impl/verifier/defaultcomponentverifier.java b /camel-core/src/main/java/org/apache/camel/impl/verifier/defaultcomponentverifier.java index b9d9998 ..f05cdb1 /camel-core/src/main/java/org/apache/camel/impl/verifier/defaultcomponentverifier.java b /camel-core/src/main/java/org/apache/camel/impl/verifier/defaultcomponentverifier.java import org .apache.camel.camelcontext; import org .apache.camel.componentverifier; import org .apache.camel.nosuchoptionexception; import org .apache.camel.typeconverter; -import org .apache.camel.catalog.endpointvalidationresult; -import org .apache.camel.catalog.runtimecamelcatalog; +import org .apache.camel.runtimecatalog.endpointvalidationresult; +import org .apache.camel.runtimecatalog.runtimecamelcatalog; import org .apache.camel.util.camelcontexthelper; import org .apache.camel.util.endpointhelper; import org .apache.camel.util.introspectionsupport; diff --git /camel-core/src/main/java/org/apache/camel/management/defaultmanagementlifecyclestrategy.java b /camel-core/src/main/java/org/apache/camel/management/defaultmanagementlifecyclestrategy.java index a09ff7d ..9a70390 /camel-core/src/main/java/org/apache/camel/management/defaultmanagementlifecyclestrategy.java b /camel-core/src/main/java/org/apache/camel/management/defaultmanagementlifecyclestrategy.java import org .apache.camel.startuplistener; import org .apache.camel.timerlistener; import org .apache.camel.vetocamelcontextstartexception; import org .apache.camel.api.management.performancecounter; -import org .apache.camel.catalog.runtimecamelcatalog; import org .apache.camel.impl.consumercache; import org .apache.camel.impl.defaultcamelcontext; import org .apache.camel.impl.defaultendpointregistry; -import org .apache.camel.impl.defaulttransformerregistry; -import org .apache.camel.impl.defaultvalidatorregistry; import org .apache.camel.impl.eventdrivenconsumerroute; import org .apache.camel.impl.producercache; import org .apache.camel.impl.throttlingexceptionroutepolicy; import org .apache.camel.processor.camelinternalprocessor; import org .apache.camel.processor.interceptor.backlogdebugger; import org .apache.camel.processor.interceptor.backlogtracer; import org .apache.camel.processor.interceptor.tracer; +import org .apache.camel.runtimecatalog.runtimecamelcatalog; import org .apache.camel.spi.asyncprocessorawaitmanager; import org .apache.camel.spi.dataformat; import org .apache.camel.spi.eventnotifier; diff --git /camel-core/src/main/java/org/apache/camel/management/mbean/managedruntimecamelcatalog.java b /camel-core/src/main/java/org/apache/camel/management/mbean/managedruntimecamelcatalog.java index 20d3f28 ..6a99656 /camel-core/src/main/java/org/apache/camel/management/mbean/managedruntimecamelcatalog.java b /camel-core/src/main/java/org/apache/camel/management/mbean/managedruntimecamelcatalog.java package org .apache.camel.management.mbean; import org .apache.camel.camelcontext; import org .apache.camel.api.management.managedresource; import org .apache.camel.api.management.mbean.managedruntimecamelcatalogmbean; -import org .apache.camel.catalog.runtimecamelcatalog; +import org .apache.camel.runtimecatalog.runtimecamelcatalog; import org .apache.camel.spi.managementstrategy;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C6a3e7fae5cba4f918aede10c3ae6ef26%40git.apache.org%3E,2017-04-14 10:52:59,commits,326.0,camel git commit rename catalog runtimecatalog avoid clash package name camel -catalog.
6,6,6,7.0,327.0,davscl...@apache.org,"rename catalog runtimecatalog avoid clash package name camel -catalog. project commit tree diff branch ref /heads/master commit c66be7a8c21de8944fd86888a2cf039eb97a2ff1 parent d726964 author claus ibsen <davsclaus@apache.org> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr .../java/org/apache/camel/camelcontext.java .../camel/catalog/abstractcamelcatalog.java .../catalog/camelcontextjsonschemaresolver.java .../org/apache/camel/catalog/cataloghelper.java .../camel/catalog/collectionstringbuffer.java .../catalog/defaultruntimecamelcatalog.java .../camel/catalog/endpointvalidationresult.java .../apache/camel/catalog/jsonschemahelper.java .../camel/catalog/jsonschemaresolver.java .../camel/catalog/languagevalidationresult.java .../camel/catalog/runtimecamelcatalog.java .../camel/catalog/simplevalidationresult.java .../camel/catalog/suggestionstrategy.java .../camel/catalog/timepatternconverter.java .../org/apache/camel/catalog/urisupport.java .../catalog/unsafeuricharactersencoder.java .../java/org/apache/camel/catalog/package.html .../component/rest/restcomponentverifier.java .../apache/camel/impl/defaultcamelcontext.java .../impl/verifier/defaultcomponentverifier.java .../defaultmanagementlifecyclestrategy.java .../mbean/managedruntimecamelcatalog.java .../runtimecatalog/abstractcamelcatalog.java .../camelcontextjsonschemaresolver.java .../camel/runtimecatalog/cataloghelper.java .../runtimecatalog/collectionstringbuffer.java .../defaultruntimecamelcatalog.java .../endpointvalidationresult.java .../camel/runtimecatalog/jsonschemahelper.java .../runtimecatalog/jsonschemaresolver.java .../languagevalidationresult.java .../runtimecatalog/runtimecamelcatalog.java .../runtimecatalog/simplevalidationresult.java .../runtimecatalog/suggestionstrategy.java .../runtimecatalog/timepatternconverter.java .../apache/camel/runtimecatalog/urisupport.java .../unsafeuricharactersencoder.java .../apache/camel/runtimecatalog/package.html .../org/apache/camel/util/endpointhelper.java .../camel/catalog/abstractcamelcatalogtest.java .../camel/catalog/runtimecamelcatalogtest.java .../abstractcamelcatalogtest.java .../runtimecatalog/runtimecamelcatalogtest.java file changed insertion deletion diff --git /camel-core/src/main/java/org/apache/camel/camelcontext.java b /camel-core/src/main/java/org/apache/camel/camelcontext.java index d4fd6ae ..00702d1 /camel-core/src/main/java/org/apache/camel/camelcontext.java b /camel-core/src/main/java/org/apache/camel/camelcontext.java import org .apache.camel.api.management.mbean.managedcamelcontextmbean; import org .apache.camel.api.management.mbean.managedprocessormbean; import org .apache.camel.api.management.mbean.managedroutembean; import org .apache.camel.builder.errorhandlerbuilder; -import org .apache.camel.catalog.runtimecamelcatalog; import org .apache.camel.model.dataformatdefinition; import org .apache.camel.model.hystrixconfigurationdefinition; import org .apache.camel.model.processordefinition; import org .apache.camel.model.rest.restdefinition; import org .apache.camel.model.rest.restsdefinition; import org .apache.camel.model.transformer.transformerdefinition; import org .apache.camel.model.validator.validatordefinition; +import org .apache.camel.runtimecatalog.runtimecamelcatalog; import org .apache.camel.spi.asyncprocessorawaitmanager; import org .apache.camel.spi.camelcontextnamestrategy; import org .apache.camel.spi.classresolver; diff --git /camel-core/src/main/java/org/apache/camel/catalog/abstractcamelcatalog.java b /camel-core/src/main/java/org/apache/camel/catalog/abstractcamelcatalog.java deleted file mode index 6511eff /camel-core/src/main/java/org/apache/camel/catalog/abstractcamelcatalog.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.catalog; -import java .lang.reflect.invocationtargetexception; -import java .lang.reflect.method; -import java .net.uri; -import java .net.urisyntaxexception; -import java .util.arraylist; -import java .util.arrays; -import java .util.hashmap; -import java .util.iterator; -import java .util.linkedhashmap; -import java .util.linkedhashset; -import java .util.list; -import java .util.map; -import java .util.objects; -import java .util.set; -import java .util.treemap; -import java .util.regex.matcher; -import java .util.regex.pattern; -import static org .apache.camel.catalog.cataloghelper.after; -import static org .apache.camel.catalog.jsonschemahelper.getnames; -import static org .apache.camel.catalog.jsonschemahelper.getpropertydefaultvalue; -import static org .apache.camel.catalog.jsonschemahelper.getpropertyenum; -import static org .apache.camel.catalog.jsonschemahelper.getpropertykind; -import static org .apache.camel.catalog.jsonschemahelper.getpropertynamefromnamewithprefix; -import static org .apache.camel.catalog.jsonschemahelper.getpropertyprefix; -import static org .apache.camel.catalog.jsonschemahelper.getrow; -import static org .apache.camel.catalog.jsonschemahelper.iscomponentconsumeronly; -import static org .apache.camel.catalog.jsonschemahelper.iscomponentlenientproperties; -import static org .apache.camel.catalog.jsonschemahelper.iscomponentproduceronly; -import static org .apache.camel.catalog.jsonschemahelper.ispropertyboolean; -import static org .apache.camel.catalog.jsonschemahelper.ispropertyconsumeronly; -import static org .apache.camel.catalog.jsonschemahelper.ispropertyinteger; -import static org .apache.camel.catalog.jsonschemahelper.ispropertymultivalue; -import static org .apache.camel.catalog.jsonschemahelper.ispropertynumber; -import static org .apache.camel.catalog.jsonschemahelper.ispropertyobject; -import static org .apache.camel.catalog.jsonschemahelper.ispropertyproduceronly; -import static org .apache.camel.catalog.jsonschemahelper.ispropertyrequired; -import static org .apache.camel.catalog.jsonschemahelper.stripoptionalprefixfromname; -import static org .apache.camel.catalog.urisupport.createquerystring; -import static org .apache.camel.catalog.urisupport.isempty; -import static org .apache.camel.catalog.urisupport.normalizeuri; -import static org .apache.camel.catalog.urisupport.stripquery; base class runtime runtimecamelcatalog camel -core complete camelcatalog camel -catalog. -public abstract class abstractcamelcatalog checkstyle :off private static final pattern syntax_pattern pattern .compile(""(\\w+)""); private suggestionstrategy suggestionstrategy private jsonschemaresolver jsonschemaresolver public suggestionstrategy getsuggestionstrategy return suggestionstrategy public void setsuggestionstrategy (suggestionstrategy suggestionstrategy .suggestionstrategy suggestionstrategy public jsonschemaresolver getjsonschemaresolver return jsonschemaresolver public void setjsonschemaresolver (jsonschemaresolver resolver .jsonschemaresolver resolver public boolean validatetimepattern (string pattern return validateinteger (pattern); public endpointvalidationresult validateendpointproperties (string uri return validateendpointproperties (uri, false false false public endpointvalidationresult validateendpointproperties (string uri boolean ignorelenientproperties return validateendpointproperties (uri, ignorelenientproperties false false public endpointvalidationresult validateproperties (string scheme map <string, string property endpointvalidationresult result new endpointvalidationresult (scheme); string json jsonschemaresolver .getcomponentjsonschema(scheme); list <map<string, string row jsonschemahelper .parsejsonschema(""properties"", json true list <map<string, string componentprops jsonschemahelper .parsejsonschema(""componentproperties"", json true endpoint option higher priority remove component may clash componentprops .stream() .filter(c row .stream().nonematch(e object .equals(e.get(""name""), c .get(""name"")))) .foreach(rows::add); boolean lenient boolean .getboolean(properties.getordefault(""lenient"", ""false"")); dataformat component refers data format let add property selected data format list row (""dataformat"".equals(scheme)) string dfname property .get(""name""); (dfname null string dfjson jsonschemaresolver .getdataformatjsonschema(dfname); list <map<string, string dfrows jsonschemahelper .parsejsonschema(""properties"", dfjson true (dfrows null !dfrows.isempty()) row .addall(dfrows); (map.entry<string, string property property .entryset()) string value property .getvalue(); string originalname property .getkey(); string name property .getkey(); name may using optional prefix let strip option schema listed without prefix name stripoptionalprefixfromname (rows, name name may using prefix let see find real property name string propertyname getpropertynamefromnamewithprefix (rows, name (propertyname null name propertyname string prefix getpropertyprefix (rows, name string kind getpropertykind (rows, name boolean nameplaceholder name .startswith(""{{"") name .endswith(""}}""); boolean valueplaceholder value .startswith(""{{"") value .startswith(""${"") value .startswith(""$simple{""); boolean lookup value .startswith(""#"") value .length() cannot evaluate multi value strict others 't know expected type boolean multivalue prefix null originalname .startswith(prefix) ispropertymultivalue (rows, name map <string, string row getrow (rows, name (row null unknown option add error component lenient property stub component name property placeholder one value (!nameplaceholder !""stub"".equals(scheme)) (lenient) lenient option dynamic extra option cannot validate result .addlenient(name); else unknown result .addunknown(name); (suggestionstrategy null string suggestion suggestionstrategy .suggestendpointoptions(getnames(rows), name (suggestions null result .addunknownsuggestions(name, suggestion else todo may need add something property know related producer consumer (""parameter"".equals(kind)) consumer producer mode parameter (consumeronly) boolean producer ispropertyproduceronly (rows, name (producer) option producer cannot use consumer mode result .addnotconsumeronly(name); else (produceronly) boolean consumer ispropertyconsumeronly (rows, name (consumer) option consumer cannot use producer mode result .addnotproduceronly(name); default value string defaultvalue getpropertydefaultvalue (rows, name (defaultvalue null result .adddefaultvalue(name, defaultvalue required value empty boolean required ispropertyrequired (rows, name (required isempty (value)) result .addrequired(name); enum value within enum range check value placeholder string enums getpropertyenum (rows, name (!multivalue !valueplaceholder !lookup enums null string choice enums .split("",""); boolean found false (string choice (value.equalsignorecase(s)) found true break (!found) result .addinvalidenum(name, value result .addinvalidenumchoices(name, choice (suggestionstrategy null set <string> name new linkedhashset name .addall(arrays.aslist(choices)); string suggestion suggestionstrategy .suggestendpointoptions(names, value (suggestions null result .addinvalidenumsuggestions(name, suggestion reference lookup bean (not applicable @uripath, enums multi -valued) (!multivalue enums null !""path"".equals(kind) ispropertyobject (rows, name must start least character (!value.startswith(""#"") value .length() result .addinvalidreference(name, value boolean (!multivalue !valueplaceholder !lookup ispropertyboolean (rows, name value must boolean boolean bool ""true"".equalsignorecase(value) ""false"".equalsignorecase(value); (!bool) result .addinvalidboolean(name, value integer (!multivalue !valueplaceholder !lookup ispropertyinteger (rows, name value must integer boolean valid validateinteger (value); (!valid) result .addinvalidinteger(name, value number (!multivalue !valueplaceholder !lookup ispropertynumber (rows, name value must number boolean valid false try valid !double.valueof(value).isnan() !float.valueof(value).isnan(); catch (exception e ignore (!valid) result .addinvalidnumber(name, value check required value default value exists (map<string, string row row string name row .get(""name""); boolean required ispropertyrequired (rows, name (required) string value property .get(name); (isempty(value)) value getpropertydefaultvalue (rows, name (isempty(value)) result .addrequired(name); return result public endpointvalidationresult validateendpointproperties (string uri boolean ignorelenientproperties boolean consumeronly boolean produceronly endpointvalidationresult result new endpointvalidationresult (uri); map <string, string property list <map<string, string row boolean lenientproperties string scheme try string json null parse uri uri u normalizeuri (uri); scheme u .getscheme(); (scheme null json jsonschemaresolver .getcomponentjsonschema(scheme); (json null uri start placeholder also incapable parsing 't able resolve component name (uri.startswith(""{{"")) result .addincapable(uri); else (scheme null result .addunknowncomponent(scheme); else result .addunknowncomponent(uri); return result row jsonschemahelper .parsejsonschema(""component"", json false component capable consumer producer boolean canconsumeandproduce false (!iscomponentconsumeronly(rows) !iscomponentproduceronly(rows)) canconsumeandproduce true (canconsumeandproduce consumeronly lenient property support consumer mode component lenientproperties false else enable lenient property ignore lenientproperties !ignorelenientproperties iscomponentlenientproperties (rows); row jsonschemahelper .parsejsonschema(""properties"", json true property endpointproperties (uri); catch (urisyntaxexception e (uri.startswith(""{{"")) uri start placeholder also incapable parsing 't able resolve component name result .addincapable(uri); else result .addsyntaxerror(e.getmessage()); return result dataformat component refers data format let add property selected data format list row (""dataformat"".equals(scheme)) string dfname property .get(""name""); (dfname null string dfjson jsonschemaresolver .getdataformatjsonschema(dfname); list <map<string, string dfrows jsonschemahelper .parsejsonschema(""properties"", dfjson true (dfrows null !dfrows.isempty()) row .addall(dfrows); (map.entry<string, string property property .entryset()) string value property .getvalue(); string originalname property .getkey(); string name property .getkey(); name may using optional prefix let strip option schema listed without prefix name stripoptionalprefixfromname (rows, name name may using prefix let see find real property name string propertyname getpropertynamefromnamewithprefix (rows, name (propertyname null name propertyname string prefix getpropertyprefix (rows, name string kind getpropertykind (rows, name boolean nameplaceholder name .startswith(""{{"") name .endswith(""}}""); boolean valueplaceholder value .startswith(""{{"") value .startswith(""${"") value .startswith(""$simple{""); boolean lookup value .startswith(""#"") value .length() cannot evaluate multi value strict others 't know expected type boolean mulitvalue prefix null originalname .startswith(prefix) ispropertymultivalue (rows, name map <string, string row getrow (rows, name (row null unknown option add error component lenient property stub component name property placeholder one value (!nameplaceholder !""stub"".equals(scheme)) (lenientproperties) lenient option dynamic extra option cannot validate result .addlenient(name); else unknown result .addunknown(name); (suggestionstrategy null string suggestion suggestionstrategy .suggestendpointoptions(getnames(rows), name (suggestions null result .addunknownsuggestions(name, suggestion else (""parameter"".equals(kind)) consumer producer mode parameter (consumeronly) boolean producer ispropertyproduceronly (rows, name (producer) option producer cannot use consumer mode result .addnotconsumeronly(name); else (produceronly) boolean consumer ispropertyconsumeronly (rows, name (consumer) option consumer cannot use producer mode result .addnotproduceronly(name); default value string defaultvalue getpropertydefaultvalue (rows, name (defaultvalue null result .adddefaultvalue(name, defaultvalue required value empty boolean required ispropertyrequired (rows, name (required isempty (value)) result .addrequired(name); enum value within enum range check value placeholder string enums getpropertyenum (rows, name (!mulitvalue !valueplaceholder !lookup enums null string choice enums .split("",""); boolean found false (string choice (value.equalsignorecase(s)) found true break (!found) result .addinvalidenum(name, value result .addinvalidenumchoices(name, choice (suggestionstrategy null set <string> name new linkedhashset name .addall(arrays.aslist(choices)); string suggestion suggestionstrategy .suggestendpointoptions(names, value (suggestions null result .addinvalidenumsuggestions(name, suggestion reference lookup bean (not applicable @uripath, enums multi -valued) (!mulitvalue enums null !""path"".equals(kind) ispropertyobject (rows, name must start least character (!value.startswith(""#"") value .length() result .addinvalidreference(name, value boolean (!mulitvalue !valueplaceholder !lookup ispropertyboolean (rows, name value must boolean boolean bool ""true"".equalsignorecase(value) ""false"".equalsignorecase(value); (!bool) result .addinvalidboolean(name, value integer (!mulitvalue !valueplaceholder !lookup ispropertyinteger (rows, name value must integer boolean valid validateinteger (value); (!valid) result .addinvalidinteger(name, value number (!mulitvalue !valueplaceholder !lookup ispropertynumber (rows, name value must number boolean valid false try valid !double.valueof(value).isnan() !float.valueof(value).isnan(); catch (exception e ignore (!valid) result .addinvalidnumber(name, value check required value default value exists (map<string, string row row string name row .get(""name""); boolean required ispropertyrequired (rows, name (required) string value property .get(name); (isempty(value)) value getpropertydefaultvalue (rows, name (isempty(value)) result .addrequired(name); return result public map <string, string endpointproperties (string uri throw urisyntaxexception need normalize uri first uri u normalizeuri (uri); string scheme u .getscheme(); string json jsonschemaresolver .getcomponentjsonschema(scheme); (json null throw new illegalargumentexception (""cannot find endpoint scheme scheme grab syntax string syntax null string alternativesyntax null list <map<string, string row jsonschemahelper .parsejsonschema(""component"", json false (map<string, string row row (row.containskey(""syntax"")) syntax row .get(""syntax""); (row.containskey(""alternativesyntax"")) alternativesyntax row .get(""alternativesyntax""); (syntax null throw new illegalargumentexception (""endpoint scheme scheme syntax defined json schema support alternative syntax uri contains username password authority part uri would need special logic capture information strip detail uri continue parsing uri using normal syntax map <string, string userinfooptions new linkedhashmap <string, string (alternativesyntax null alternativesyntax .contains(""@"")) clip scheme syntax alternativesyntax (alternativesyntax, trim userinfo int idx alternativesyntax .indexof(""@""); string field alternativesyntax .substring(0, idx string name field .split("":""); grab authority part grab username /or password string authority u .getauthority(); (authority null authority .contains(""@"")) string username null string password null grab unserinfo part string userinfo authority .substring(0, authority .indexof(""@"")); string part userinfo .split("":""); (parts.length username part password part else username username userinfo remember username /or password add later option (names.length userinfooptions .put(names[0], username (password null password optional userinfooptions .put(names[1], password clip scheme syntax syntax (syntax, clip scheme uri uri (uri, string uripath stripquery (uri); strip user info uri path (!userinfooptions.isempty()) int idx uripath .indexof('@'); (idx uripath uripath .substring(idx strip double slash start (uripath null uripath .startswith(""//"")) uripath uripath .substring(2); parse syntax find name option matcher matcher syntax_pattern .matcher(syntax); list <string> word new arraylist <string>(); (matcher.find()) string matcher .group(1); (!scheme.equals(s)) word .add(s); parse syntax find token option string token syntax_pattern .split(syntax); find position option start /end list <string> word2 new arraylist <string>(); int prev int prevpath special activemq /jms enum destinationtype cause token issue includes colon 'temp:queue' 'temp:topic' value (""activemq"".equals(scheme) ""jms"".equals(scheme)) (uripath.startswith(""temp:"")) prevpath (string token token (token.isempty()) continue special token used also eg int idx int len ("":"".equals(token)) idx uripath .indexof(""://"", prevpath len (idx idx uripath .indexof(token, prevpath len token .length(); (idx string option uripath .substring(prev, idx word2 .add(option); prev idx len prevpath prev special last add anyone (prev word2 .isempty()) string option uripath .substring(prev); word2 .add(option); row jsonschemahelper .parsejsonschema(""properties"", json true boolean defaultvalueadded false parse uri know part isw map <string, string option new linkedhashmap <string, string include username password userinfo section (!userinfooptions.isempty()) option .putall(userinfooptions); word contains syntax path element iterator <string> word2 .iterator(); (int word .size(); string key word .get(i); boolean alloptions word .size() word2 .size(); boolean required ispropertyrequired (rows, key string defaultvalue getpropertydefaultvalue (rows, key option problem (alloptions) string value .next(); option .put(key, value else little problem option (!required) string value null boolean last word .size() (last) last value use instead default value value .hasnext() .next() null (value null option .put(key, value else value defaultvalue (value null option .put(key, value defaultvalueadded true else string value .hasnext() .next() null (value null option .put(key, value map <string, string answer new linkedhashmap <string, string remove option using default value required (map.entry<string, string entry option .entryset()) string key entry .getkey(); string value entry .getvalue(); (defaultvalueadded) boolean required ispropertyrequired (rows, key string defaultvalue getpropertydefaultvalue (rows, key (!required defaultvalue null (defaultvalue.equals(value)) continue keep answer answer .put(key, value parse uri parameter map <string, object parameter urisupport .parseparameters(u); covert value string jmx friendly (!parameters.isempty()) map .entry<string, object entry parameter .entryset().iterator().next(); string key entry .getkey(); string value entry .getvalue() null entry .getvalue().tostring() boolean multivalued ispropertymultivalue (rows, key (multivalued) string prefix getpropertyprefix (rows, key extra multi valued option map <string, object value urisupport .extractproperties(parameters, prefix build string extra multi valued option prefix separator collectionstringbuffer csb new collectionstringbuffer (map.entry<string, object multi value .entryset()) string line prefix multi .getkey() (multi.getvalue() null multi .getvalue().tostring() csb .append(line); append extra multi -values existing (which contains first multi value (!csb.isempty()) value value csb .tostring(); answer .put(key, value remove parameter run loop parameter parameter .remove(key); return answer public map <string, string endpointlenientproperties (string uri throw urisyntaxexception need normalize uri first parse uri uri u normalizeuri (uri); string scheme u .getscheme(); string json jsonschemaresolver .getcomponentjsonschema(scheme); (json null throw new illegalargumentexception (""cannot find endpoint scheme scheme list <map<string, string row jsonschemahelper .parsejsonschema(""properties"", json true parse uri parameter map <string, object parameter urisupport .parseparameters(u); known option set <string> name getnames (rows); map <string, string answer new linkedhashmap covert value string jmx friendly parameter .foreach((k, v string key k string value v null v .tostring() key prefix property int dot key .indexof('.'); (dot string prefix key .substring(0, dot include dot prefix string option getpropertynamefromnamewithprefix (rows, prefix (option null !ispropertymultivalue(rows, option answer .put(key, value else (!names.contains(key)) answer .put(key, value return answer public string endpointcomponentname (string uri (uri null int idx uri .indexof("":""); (idx return uri .substring(0, idx return null public string asendpointuri (string scheme string json boolean encode throw urisyntaxexception return doasendpointuri (scheme, json encode public string asendpointurixml (string scheme string json boolean encode throw urisyntaxexception return doasendpointuri (scheme, json ""&amp;"", encode private string doasendpointuri (string scheme string json string ampersand boolean encode throw urisyntaxexception list <map<string, string row jsonschemahelper .parsejsonschema(""properties"", json true map <string, string copy new hashmap <string, string (map<string, string row row string name row .get(""name""); string required row .get(""required""); string value row .get(""value""); string defaultvalue row .get(""defaultvalue""); add either required value default value string valuetoadd null (""true"".equals(required)) valuetoadd value null value defaultvalue (valuetoadd null valuetoadd else value default add (value null defaultvalue null valuetoadd value otherwise add value default value (value null defaultvalue null !value.equals(defaultvalue)) valuetoadd value (valuetoadd null copy .put(name, valuetoadd return doasendpointuri (scheme, copy ampersand encode public string asendpointuri (string scheme map <string, string property boolean encode throw urisyntaxexception return doasendpointuri (scheme, property encode public string asendpointurixml (string scheme map <string, string property boolean encode throw urisyntaxexception return doasendpointuri (scheme, property ""&amp;"", encode string doasendpointuri (string scheme map <string, string property string ampersand boolean encode throw urisyntaxexception string json jsonschemaresolver .getcomponentjsonschema(scheme); (json null throw new illegalargumentexception (""cannot find endpoint scheme scheme grab syntax string syntax null list <map<string, string row jsonschemahelper .parsejsonschema(""component"", json false (map<string, string row row (row.containskey(""syntax"")) syntax row .get(""syntax""); break (syntax null throw new illegalargumentexception (""endpoint scheme scheme syntax defined json schema property filtering needed special component property filterproperties (scheme, property row jsonschemahelper .parsejsonschema(""properties"", json true clip scheme syntax syntax (syntax, string originalsyntax syntax build first according syntax (use tree map want uri option sorted map <string, string copy new treemap <string, string (map.entry<string, string entry property .entryset()) string key entry .getkey(); string value entry .getvalue() null entry .getvalue() (syntax null syntax .contains(key)) syntax syntax .replace(key, value else copy .put(key, value option original syntax need (easy way string key syntaxkeys (originalsyntax); boolean hasallkeys property .keyset().containsall(arrays.aslist(keys)); build endpoint uri stringbuilder sb new stringbuilder sb .append(scheme); sb .append("":""); (hasallkeys) key syntax build uri easy way sb .append(syntax); (!copy.isempty()) boolean hasquestionmark sb .tostring().contains(""?""); last option may already contain char use instead sb .append(hasquestionmark ampersand string query createquerystring (copy, ampersand encode sb .append(query); else todo revisit see another way oh darn option missing need complex way building uri token option path string token syntax .split(""\\w+""); parse syntax option matcher matcher syntax_pattern .matcher(originalsyntax); list <string> option new arraylist <string>(); (matcher.find()) string matcher .group(1); option .add(s); need preserve syntax (we need use word provisional placeholder syntax syntax .replaceall(""\\{\\{"", ""begincamelplaceholder""); syntax syntax .replaceall(""\\}\\}"", ""endcamelplaceholder""); parse syntax option matcher matcher2 syntax_pattern .matcher(syntax); list <string> options2 new arraylist <string>(); (matcher2.find()) string matcher2 .group(1); .replaceall(""begincamelplaceholder"", .replaceall(""endcamelplaceholder"", options2 .add(s); build endpoint int range boolean first true boolean hasquestionmark false (int option .size(); string key option .get(i); string key2 options2 .get(i); string token null (tokens.length token token [i]; boolean contains property .containskey(key); (!contains) key similar explicit value try find default value option required (ispropertyrequired(rows, key string value getpropertydefaultvalue (rows, key (value null property .put(key, value key2 value option provided (properties.containskey(key)) (!first token null sb .append(token); hasquestionmark key .contains(""?"") (token null token .contains(""?"")); sb .append(key2); first false range append extra option surplus last (range options2 .size()) string token null (tokens.length range token token [range]; string key2 options2 .get(range); sb .append(token); sb .append(key2); hasquestionmark key2 .contains(""?"") (token null token .contains(""?"")); range (!copy.isempty()) last option may already contain char use instead sb .append(hasquestionmark ampersand string query createquerystring (copy, ampersand encode sb .append(query); return sb .tostring(); @deprecated private static string syntaxtokens (string syntax build token word list <string> token new arraylist preserve backwards behavior empty token first token .add(""""); string current (int syntax .length(); char ch syntax .charat(i); (character.isletterordigit(ch)) reset new current token (current.length() token .add(current); current else current ch anything left (current.length() token .add(current); return token .toarray(new string [tokens.size()]); private static string syntaxkeys (string syntax build token separator list <string> token new arraylist string current (int syntax .length(); char ch syntax .charat(i); (character.isletterordigit(ch)) current ch else reset new current token (current.length() token .add(current); current anything left (current.length() token .add(current); return token .toarray(new string [tokens.size()]); public simplevalidationresult validatesimpleexpression (string simple return dovalidatesimple (null, simple false public simplevalidationresult validatesimpleexpression (classloader classloader string simple return dovalidatesimple (classloader, simple false public simplevalidationresult validatesimplepredicate (string simple return dovalidatesimple (null, simple true public simplevalidationresult validatesimplepredicate (classloader classloader string simple return dovalidatesimple (classloader, simple true private simplevalidationresult dovalidatesimple (classloader classloader string simple boolean predicate (classloader null classloader getclass ().getclassloader(); property placeholder need resolve something else simple parse cannot resolve parsing dont run actual camel application property placeholder setup need dummy replace something else therefore use unlikely character {{xxx}} ~^xxx^~ string resolved simple .replaceall(""\\{\\{(.+)\\}\\}"", simplevalidationresult answer new simplevalidationresult (simple); object instance null class clazz null try clazz classloader .loadclass(""org.apache.camel.language.simple.simplelanguage""); instance clazz .newinstance(); catch (exception e ignore (clazz null instance null throwable cause null try (predicate) instance .getclass().getmethod(""createpredicate"", string .class).invoke(instance, resolved else instance .getclass().getmethod(""createexpression"", string .class).invoke(instance, resolved catch (invocationtargetexception e cause e .gettargetexception(); catch (exception e cause e (cause null reverse ~^xxx^~ back {{xxx}} string errmsg cause .getmessage(); errmsg errmsg .replaceall(""\\~\\^(.+)\\^\\~"", answer .seterror(errmsg); simple parser exception grab index problem (cause.getclass().getname().equals(""org.apache.camel.language.simple.types.simpleillegalsyntaxexception"") cause .getclass().getname().equals(""org.apache.camel.language.simple.types.simpleparserexception"")) try need grab index field simple parser exception method method cause .getclass().getmethod(""getindex""); object result method .invoke(cause); (result null int index (int) result answer .setindex(index); catch (throwable ignore need grab short message field simple syntax exception (cause.getclass().getname().equals(""org.apache.camel.language.simple.types.simpleillegalsyntaxexception"")) try method method cause .getclass().getmethod(""getshortmessage""); object result method .invoke(cause); (result null string msg (string) result answer .setshorterror(msg); catch (throwable ignore (answer.getshorterror() null fallback try make existing message short instead string msg answer .geterror(); grab everything location would regarded short message int idx msg .indexof("" location (idx msg msg .substring(0, idx answer .setshorterror(msg); return answer public languagevalidationresult validatelanguagepredicate (classloader classloader string language string text return dovalidatelanguage (classloader, language text true public languagevalidationresult validatelanguageexpression (classloader classloader string language string text return dovalidatelanguage (classloader, language text false private languagevalidationresult dovalidatelanguage (classloader classloader string language string text boolean predicate (classloader null classloader getclass ().getclassloader(); simplevalidationresult answer new simplevalidationresult (text); string json jsonschemaresolver .getlanguagejsonschema(language); (json null answer .seterror(""unknown language language return answer list <map<string, string row jsonschemahelper .parsejsonschema(""language"", json false string classname null (map<string, string row row (row.containskey(""javatype"")) classname row .get(""javatype""); (classname null answer .seterror(""cannot find javatype language language return answer object instance null class clazz null try clazz classloader .loadclass(classname); instance clazz .newinstance(); catch (exception e ignore (clazz null instance null throwable cause null try (predicate) instance .getclass().getmethod(""createpredicate"", string .class).invoke(instance, text else instance .getclass().getmethod(""createexpression"", string .class).invoke(instance, text catch (invocationtargetexception e cause e .gettargetexception(); catch (exception e cause e (cause null answer .seterror(cause.getmessage()); return answer special logic log endpoint deal showall =true private map <string, string filterproperties (string scheme map <string, string option (""log"".equals(scheme)) string showall option .get(""showall""); (""true"".equals(showall)) map <string, string filtered new linkedhashmap <string, string remove showxxx option showall =true (map.entry<string, string entry option .entryset()) string key entry .getkey(); boolean skip key .startswith(""show"") !key.equals(""showall""); (!skip) filtered .put(key, entry .getvalue()); return filtered use -is return option private static boolean validateinteger (string value boolean valid false try valid integer .valueof(value) null catch (exception e ignore (!valid) may time pattern 5 second try timepatternconverter .tomilliseconds(value); valid true catch (exception e ignore return valid checkstyle :on diff --git /camel-core/src/main/java/org/apache/camel/catalog/camelcontextjsonschemaresolver.java b /camel-core/src/main/java/org/apache/camel/catalog/camelcontextjsonschemaresolver.java deleted file mode index 8d95488 /camel-core/src/main/java/org/apache/camel/catalog/camelcontextjsonschemaresolver.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.catalog; -import java .io.ioexception; -import org .apache.camel.camelcontext; us runtime {@link camelcontext resolve json schema file -public class camelcontextjsonschemaresolver implement jsonschemaresolver private final camelcontext camelcontext public camelcontextjsonschemaresolver (camelcontext camelcontext .camelcontext camelcontext @override public string getcomponentjsonschema (string name try return camelcontext .getcomponentparameterjsonschema(name); catch (ioexception e ignore return null @override public string getdataformatjsonschema (string name try return camelcontext .getdataformatparameterjsonschema(name); catch (ioexception e ignore return null @override public string getlanguagejsonschema (string name try return camelcontext .getlanguageparameterjsonschema(name); catch (ioexception e ignore return null @override public string getotherjsonschema (string name supported return null @override public string getmodeljsonschema (string name try return camelcontext .geteipparameterjsonschema(name); catch (ioexception e ignore return null diff --git /camel-core/src/main/java/org/apache/camel/catalog/cataloghelper.java b /camel-core/src/main/java/org/apache/camel/catalog/cataloghelper.java deleted file mode index caba4a3 /camel-core/src/main/java/org/apache/camel/catalog/cataloghelper.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.catalog; -import java .io.bufferedreader; -import java .io.ioexception; -import java .io.inputstream; -import java .io.inputstreamreader; -import java .io.linenumberreader; -import java .util.list; -public final class cataloghelper private cataloghelper load entire stream memory string return <p/> <b>notice:</b> implementation appends <tt>\n</tt> line terminator text <p/> warning 't use crazy big stream public static void loadlines (inputstream list <string> line throw ioexception try (final inputstreamreader isr new inputstreamreader (in); final bufferedreader reader new linenumberreader (isr)) string line ((line reader .readline()) null line .add(line); load entire stream memory string return <p/> <b>notice:</b> implementation appends <tt>\n</tt> line terminator text <p/> warning 't use crazy big stream public static string loadtext (inputstream throw ioexception stringbuilder builder new stringbuilder try (final inputstreamreader isr new inputstreamreader (in); final bufferedreader reader new linenumberreader (isr)) string line ((line reader .readline()) null builder .append(line); builder .append(""\n""); return builder .tostring(); match name pattern @param name name @param pattern pattern @return <tt>true</tt> matched <tt>false</tt> public static boolean matchwildcard (string name string pattern wildcard support hence match file match file endpoint (pattern.endswith(""*"") name .startswith(pattern.substring(0, pattern .length() return true return false return string given token @param text text @param token @return text token <tt>null</tt> text contain token public static string (string text string (!text.contains(after)) return null return text .substring(text.indexof(after) .length()); return string given token @param text text @param token @return text token <tt>null</tt> text contain token public static string (string text string (!text.contains(before)) return null return text .substring(0, text .indexof(before)); return string given token @param text text @param token @param token @return text token <tt>null</tt> text contain token public static string (string text string string text (text, (text null return null return (text, test whether value <tt>null</tt> empty string @param value value string tested text length well @return true empty public static boolean isempty (object value return !isnotempty(value); test whether value <b>not</b> <tt>null</tt> empty string @param value value string tested text length well @return true <b>not</b> empty public static boolean isnotempty (object value (value null return false else (value instanceof string string text (string) value return text .trim().length() else return true remove leading ending quote (single double string @param string @return string without leading ending quote (single double public static string removeleadingandendingquotes (string (isempty(s)) return string copy .trim(); (copy.startswith(""'"") copy .endswith(""'"")) return copy .substring(1, copy .length() (copy.startswith(""\"""") copy .endswith(""\"""")) return copy .substring(1, copy .length() quote return -is return diff --git /camel-core/src/main/java/org/apache/camel/catalog/collectionstringbuffer.java b /camel-core/src/main/java/org/apache/camel/catalog/collectionstringbuffer.java deleted file mode index 2844ca9 /camel-core/src/main/java/org/apache/camel/catalog/collectionstringbuffer.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.catalog; -public class collectionstringbuffer private final stringbuilder buffer new stringbuilder private string separator private boolean first true public collectionstringbuffer public collectionstringbuffer (string separator .separator separator @override public string tostring return buffer .tostring(); public void append (object value (first) first false else buffer .append(separator); buffer .append(value); public string getseparator return separator public void setseparator (string separator .separator separator public boolean isempty return first diff --git /camel-core/src/main/java/org/apache/camel/catalog/defaultruntimecamelcatalog.java b /camel-core/src/main/java/org/apache/camel/catalog/defaultruntimecamelcatalog.java deleted file mode index dd66c55 /camel-core/src/main/java/org/apache/camel/catalog/defaultruntimecamelcatalog.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.catalog; -import java .util.hashmap; -import java .util.map; -import org .apache.camel.camelcontext; default {@link runtimecamelcatalog -public class defaultruntimecamelcatalog extends abstractcamelcatalog implement runtimecamelcatalog cache operation result private final map <string, object cache new hashmap <string, object private boolean caching creates {@link runtimecamelcatalog without caching enabled @param camelcontext camel context public defaultruntimecamelcatalog (camelcontext camelcontext (camelcontext, false creates {@link runtimecamelcatalog @param camelcontext camel context @param caching whether use cache public defaultruntimecamelcatalog (camelcontext camelcontext boolean caching .caching caching setjsonschemaresolver (new camelcontextjsonschemaresolver (camelcontext)); @override public void start throw exception noop @override public void stop throw exception cache .clear(); @override public string modeljsonschema (string name string answer null (caching) answer (string) cache .get(""model-"" name (answer null answer getjsonschemaresolver ().getmodeljsonschema(name); (caching) cache .put(""model-"" name answer return answer @override public string componentjsonschema (string name string answer null (caching) answer (string) cache .get(""component-"" name (answer null answer getjsonschemaresolver ().getcomponentjsonschema(name); (caching) cache .put(""component-"" name answer return answer @override public string dataformatjsonschema (string name string answer null (caching) answer (string) cache .get(""dataformat-"" name (answer null answer getjsonschemaresolver ().getdataformatjsonschema(name); (caching) cache .put(""dataformat-"" name answer return answer @override public string languagejsonschema (string name try look method bean .json file (""method"".equals(name)) name ""bean""; string answer null (caching) answer (string) cache .get(""language-"" name (answer null answer getjsonschemaresolver ().getlanguagejsonschema(name); (caching) cache .put(""language-"" name answer return answer",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C8bc1b1e9d91243898c3083596a1d02a5%40git.apache.org%3E,2017-04-14 10:53:00,commits,327.0,camel git commit rename catalog runtimecatalog avoid clash package name camel -catalog.
7,7,7,39.0,352.0,davscl...@apache.org,"repository camel updated branch ref /heads/master cd84f3857 49e1c0111 rename catalog runtimecatalog avoid clash package name camel -catalog. project commit tree diff branch ref /heads/master commit 49e1c011126df57f41987e432cf0566a523e9ffd parent cd84f38 author claus ibsen <davsclaus@apache.org> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr .../camel/commands/abstractcamelcontroller.java .../camel/commands/internal/matchutil.java file changed insertion deletion diff --git /platforms/commands/commands-core/src/main/java/org/apache/camel/commands/abstractcamelcontroller.java b /platforms/commands/commands-core/src/main/java/org/apache/camel/commands/abstractcamelcontroller.java index 3036d46 ..2937d10 /platforms/commands/commands-core/src/main/java/org/apache/camel/commands/abstractcamelcontroller.java b /platforms/commands/commands-core/src/main/java/org/apache/camel/commands/abstractcamelcontroller.java import java .util.linkedhashmap; import java .util.list; import java .util.map; -import org .apache.camel.catalog.cataloghelper; -import org .apache.camel.commands.internal.regexutil; import org .apache.camel.util.jsonschemahelper; import org .apache.camel.util.objecthelper; +import static org .apache.camel.commands.internal.matchutil.matchwildcard; +import static org .apache.camel.commands.internal.regexutil.wildcardasregex; abstract {@link org .apache.camel.commands.camelcontroller} implementators extend public abstract class abstractcamelcontroller implement camelcontroller list <map<string, string context getcamelcontexts (filter null filter regexutil .wildcardasregex(filter); filter wildcardasregex (filter); else filter (map<string, string entry context string name entry .get(""name""); (name.equalsignorecase(filter) cataloghelper .matchwildcard(name, filter name .matches(filter)) (name.equalsignorecase(filter) matchwildcard (name, filter name .matches(filter)) answer .add(entry); diff --git /platforms/commands/commands-core/src/main/java/org/apache/camel/commands/internal/matchutil.java b /platforms/commands/commands-core/src/main/java/org/apache/camel/commands/internal/matchutil.java new file mode index ..874276e /dev/null b /platforms/commands/commands-core/src/main/java/org/apache/camel/commands/internal/matchutil.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.commands.internal; util class +public final class matchutil private matchutil public static boolean matchwildcard (string name string pattern return pattern .endswith(""*"") name .startswith(pattern.substring(0, pattern .length()",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C0a03a23cc44e4ff9933d9f3be0bacc36%40git.apache.org%3E,2017-04-14 14:42:28,commits,352.0,camel git commit rename catalog runtimecatalog avoid clash package name camel -catalog.
8,8,8,8.0,328.0,davscl...@apache.org,"repository camel updated branch ref /heads/master 6b42a3534 6a02de123 camel ported camel -ignite wiki doc adoc project commit tree diff branch ref /heads/master commit 6a02de123f22dc8367dee3a0a9a73ac1314c6505 parent 6b42a35 author tomohisa igarashi <tm.igarashi@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr .../src/main/docs/ignite-component.adoc component /readme.adoc doc /user-manual/en/summary.md file changed insertion diff --git /components/camel-ignite/src/main/docs/ignite-component.adoc b /components/camel-ignite/src/main/docs/ignite-component.adoc new file mode index ..a721719 /dev/null b /components/camel-ignite/src/main/docs/ignite-component.adoc +[[ignite-component]] ignite component +*available camel version ignite -memory data fabric high -performance, integrated distributed -memory platform computing transacting large -scale data set real -time, order magnitude faster possible traditional disk -based flash technology designed deliver uncompromised performance wide set -memory computing use case high performance computing industry advanced data grid highly available service grid streaming see +image: +this component offer seven endpoint cover much ignite 's functionality <<ignite-cache,ignite cache <<ignite-compute,ignite compute <<ignite-messaging,ignite messaging <<ignite-events,ignite event <<ignite-sets,ignite set <<ignite-queues,ignite queue <<ignite-idgenerator,ignite id generator +to use component add following dependency pom .xml: +[source,xml] +<dependency> <groupid>org.apache.camel</groupid> <artifactid>camel-ignite</artifactid> <version>${camel.version}</version> use version camel core version +</dependency> +[important,title=running osgi +if running osgi container please 't miss <<ignite-osgisupport,osgi support section component option start component option end endpoint option start endpoint option end +[[ignite-cache]] +cache: ignite cache endpoint +this endpoint allows interact cache +[source,text] +ignite:cache:cachename?option1=value1&option2=value2... +offers producer (to invoke cache operation ignite cache consumer (to consume change continuous query +the cache value always body message whereas cache key always stored `igniteconstants.ignite_cache_key` message header +even configure fixed operation endpoint uri vary per -exchange setting `igniteconstants.ignite_cache_operation` message header +options +[width=""100%"",cols=""1,1,1,4,1,1"",options=""header""] option type default value description compulsory consumer /producer operation ignitecacheoperation enum +cache operation perform +possible value get put remove size rebalance query clear +n producer failifinexistentcache boolean false +whether fail initialization cache 't exist +n producer cachepeekmode cachepeekmode (ignite) enum +the cache peek mode used size operation +n producer query query +the query used query operation (as producer launch continuous query (as consumer use reference registry bean syntax like ?query=#myquery. +y consumer n producer producer (for query operation consumer +|remotefilter cacheentryeventserializablefilter +an optional remote filter continuous query consumer use reference registry bean syntax like ?remotefilter=#myremotefilter. +n consumer oneexchangeperupdate boolean true +whether send one exchange per cache update even multiple change arrive group +n consumer fireexistingqueryresults boolean false +when starting continuous query consumer whether fire existing cache result +n consumer autounsubscribe boolean continuousquery .dflt_auto_unsubscribe +auto-unsubscribe flag continuous query (see ignite doc +n consumer pagesize int continuousquery .dflt_page_size +page size continuous query (see ignite doc +n consumer timeinterval long continuousquery .dflt_time_interval +time interval millis continuous query (see ignite doc n consumer +headers used +this endpoint us following header +[width=""100%"",cols=""1,1,1,4"",options=""header""] header name constant expected type description camelignitecachekey igniteconstants .ignite_cache_key string +the cache key entry value message body camelignitecachequery igniteconstants .ignite_cache_query query +the query run (producer) invoking query operation camelignitecacheoperation igniteconstants .ignite_cache_operation ignitecacheoperation enum +allows dynamically change cache operation execute (producer). camelignitecachepeekmode igniteconstants .ignite_cache_peek_mode cachepeekmode enum +allows dynamically change cache peek mode running size operation camelignitecacheeventtype igniteconstants .ignite_cache_event_type int (eventtype constant +this header carry received event type using continuous query consumer camelignitecachename igniteconstants .ignite_cache_name string +this header carry cache name continuous query event received (consumer). +it allow dynamically change cache producer operation performed use eips (e.g. recipient list dynamic router camelignitecacheoldvalue igniteconstants .ignite_cache_old_value object +this header carry old cache value passed incoming cache event (consumer). +[[ignite-compute]] +compute: ignite compute endpoint +this endpoint allows run operation cluster passing ignitecallable igniterunnable igniteclosure collection along parameter necessary +[source,text] +ignite:compute:endpointid?executiontype=...&option1=value1&option2=value2... +this endpoint support producer +the host part endpoint uri symbolic endpoint id used purpose +the endpoint try run object passed body message compute job expects different payload type depending execution type +expected payload type +each operation expects indicated type +[width=""100%"",cols=""1,4"",options=""header""] operation expected payload call collection ignitecallable single ignitecallable broadcast ignitecallable igniterunnable igniteclosure apply igniteclosure execute computetask class extends computetask object representing parameter taskname option null run collection igniterunnables single igniterunnable affinity_call ignitecallable affinity_run igniterunnable +options +[width=""100%"",cols=""1,1,1,4,1,1"",options=""header""] option type default value description compulsory consumer /producer executiontype ignitecomputeexecutiontype enum +the compute operation perform possible value call broadcast apply execute run affinity_call affinity_run +the component expects different payload type depending operation see +y producer clustergroupexpression clustergroupexpression +an expression return cluster group ignitecompute instance +n producer taskname string task name used performing execute computetask passed payload +n producer computename string name ignitecompute instance produced endpoint +n producer timeoutmillis long timeout compute job n producer +headers used +this endpoint us following header +[width=""100%"",cols=""1,1,1,4"",options=""header""] header name constant expected type description camelignitecomputeexecutiontype igniteconstants .ignite_compute_execution_type ignitecomputeexecutiontype enum allows dynamically change compute operation perform camelignitecomputeparameters igniteconstants .ignite_compute_params object collection object +parameters apply broadcast execute operation camelignitecomputereducer igniteconstants .ignite_compute_reducer ignitereducer +reducer apply call operation camelignitecomputeaffinitycachename igniteconstants .ignite_compute_affinity_cache_name string +affinity cache name affinity_call affinity_run operation camelignitecomputeaffinitykey igniteconstants .ignite_compute_affinity_key object +affinity key affinity_call affinity_run operation +[[ignite-messaging]] +messaging: ignite messaging endpoint +the ignite messaging endpoint allows send consume message topic +[source,text] +ignite:messaging:topicname?option1=value1&option2=value2... +this endpoint support producer (to send message consumer (to receive message +options +[width=""100%"",cols=""1,1,1,4,1,1"",options=""header""] option type default value description compulsory consumer /producer clustergroupexpression clustergroupexpression +an expression return cluster group ignitemessaging instance +n |consumer producer sendmode ignitemessagingsendmode enum unordered +the send mode use +possible value unordered ordered +n producer timeout long timeout send operation using ordered message +n producer +headers used +this endpoint us following header +[width=""100%"",cols=""1,1,1,4"",options=""header""] header name constant expected type description camelignitemessagingtopic igniteconstants .ignite_messaging_topic string +allows dynamically change topic send message (producer). +it also carry topic message received (consumer). camelignitemessaginguuid igniteconstants .ignite_messaging_uuid uuid +this header filled uuid subscription message arrives (consumer). +[[ignite-events]] +events: ignite event endpoint +the ignite event endpoint allows event ignite cluster creating local event listener +[source,text] +ignite:events:endpointid?option1=value1&option2=value2... +this endpoint support consumer +the exchange created consumer put received event object body message +options +[width=""100%"",cols=""1,1,1,4,1,1"",options=""header""] option type default value description compulsory consumer /producer event set <integer> string eventtype .evts_all +the event id subscribe set set <integer> directly id different constant org .apache.ignite.events.eventtype, specify comma -separated list constant name +for example evt_cache_entry_created ,evt_cache_object_removed,evt_igfs_dir_created. +n consumer clustergroupexpression clustergroupexpression +an expression return cluster group used igniteevents instance +n consumer +[[ignite-sets]] +sets: ignite set endpoint +the ignite set endpoint allows interact set data structure +[source,text] +ignite:sets:setname?option1=value1&option2=value2... +this endpoint support producer +options +[width=""100%"",cols=""1,1,1,4,1,1"",options=""header""] option type default value description compulsory consumer /producer operation ignitesetoperation enum +the operation invoke ignite set +superseded igniteconstants .ignite_sets_operation header message +possible value contains add size remove iterator clear retain_all array +n producer configuration collectionconfiguration empty collectionconfiguration +the configuration data structure also specify inner property using config prefix +for example ?config.backups=4 +n producer +headers used +this endpoint us following header +[width=""100%"",cols=""1,1,1,4"",options=""header""] header name constant expected type description camelignitesetsoperation igniteconstants .ignite_sets_operation ignitesetoperation enum +allows dynamically change set operation +[[ignite-queues]] +queues: ignite queue endpoint +the ignite queue endpoint allows interact queue data structure +[source,text] +ignite:queue:queuename?option1=value1&option2=value2... +this endpoint support producer +options +[width=""100%"",cols=""1,1,1,4,1,1"",options=""header""] option type default value description compulsory consumer /producer operation ignitequeueoperation enum +the operation invoke ignite queue +superseded igniteconstants .ignite_queue_operation header message +possible value contains add size remove iterator clear retain_all array drain element peek offer poll take put +n producer configuration collectionconfiguration empty collectionconfiguration +the configuration data structure also specify inner property using config prefix +for example ?config.backups=4 +n producer timeoutmillis long +the timeout millisecond use invoking offer poll operation +n producer capacity int (unbounded) +the queue capacity 'd like use bounded queue +n producer +headers used +this endpoint us following header +[width=""100%"",cols=""1,1,1,4"",options=""header""] header name constant expected type description camelignitequeueoperation igniteconstants .ignite_queue_operation ignitequeueoperation enum +allows dynamically change queue operation camelignitequeuemaxelements igniteconstants .ignite_queue_max_elements integer int +when invoking drain operation amount item drain camelignitequeuetransferredcount igniteconstants .ignite_queue_transferred_count integer int +the amount item transferred result drain operation camelignitequeuetimeoutmillis igniteconstants .ignite_queue_timeout_millis long long +dynamically set timeout millisecond use invoking offer poll operation +[[ignite-idgenerator]] +idgen: ignite id generator endpoint +the ignite id generator endpoint allows interact atomic sequence id generator +[source,text] +ignite:idgen:sequencename?option1=value1&option2=value2... +this endpoint support producer +options +[width=""100%"",cols=""1,1,1,4,1,1"",options=""header""] option type default value description compulsory consumer /producer operation igniteidgenoperation enum +the operation invoke ignite id generator +superseded igniteconstants .ignite_idgen_operation header message +possible value add_and_get get get_and_add get_and_increment increment_and_get +n producer configuration collectionconfiguration empty collectionconfiguration +the configuration data structure also specify inner property using config prefix +for example ?config.backups=4 +n producer +[[ignite-initializecomponent]] +initializing ignite component +each instance ignite component associated underlying org .apache.ignite.ignite instance interact two ignite cluster initializing two instance ignite component binding different igniteconfigurations way initialize ignite component passing existing org .apache.ignite.ignite instance 's example using spring config +[source,xml] +<bean name =""ignite"" class =""org.apache.camel.component.ignite.ignitecomponent""> <property name =""ignite"" ref =""ignite"" +</bean> passing igniteconfiguration either constructed programmatically inversion control (e.g. spring blueprint etc 's example using spring config +[source,xml] +<bean name =""ignite"" class =""org.apache.camel.component.ignite.ignitecomponent""> <property name =""igniteconfiguration""> <bean class =""org.apache.ignite.configuration.igniteconfiguration""> </bean> </property> +</bean> passing url inputstream string url spring -based configuration file three case inject property called configurationresource 's example using spring config +[source,xml] +<bean name =""ignite"" class =""org.apache.camel.component.ignite.ignitecomponent""> <property name =""configurationresource"" value =""file:[...]/ignite-config.xml"" +</bean> +additionally, using camel programmatically several convenience static method ignitecomponent return component configuration option ignitecomponent #fromignite(ignite) ignitecomponent #fromconfiguration(igniteconfiguration) ignitecomponent #frominputstream(inputstream) ignitecomponent #fromurl(url) ignitecomponent #fromlocation(string) +you may use method quickly create ignitecomponent chosen configuration technique +general option +all endpoint share following option +[width=""100%"",cols=""1,1,1,4,1,1"",options=""header""] option type default value description propagateincomingbodyifnoreturnvalue boolean true +if underlying ignite operation return void (no return type flag determines whether producer copy body body treatcollectionsascacheobjects boolean false +some ignite operation deal multiple element passed collection enabling option treat collection single object invoking operation variant cardinality +osgi support +[tip] +apache ignite support osgi version .5.0.final onwards +[note,title=when installing apache karaf installing camel -ignite feature require ignite feature repository present must exported jre (system bundle low -level, non -standard package ignite requires +please refer osgi section ignite documentation information +see also camel started newline end file diff --git /components/readme.adoc b /components/readme.adoc index 2909fcb ..f5734d4 /components/readme.adoc b /components/readme.adoc number component jar artifact deprecated link :camel-ibatis/src/main/docs/ibatis-component.adoc[ibatis] (camel-ibatis) `ibatis:statement` *deprecated* performs query poll insert update delete relational database using apache ibatis link :camel-ignite/src/main/docs/ignite-component.adoc[ignite] (camel-ignite) +`ignite:endpointname` ignite component integrates apache camel apache ignite link :camel-infinispan/src/main/docs/infinispan-component.adoc[infinispan] (camel-infinispan) `infinispan:cachename` reading /writing /to infinispan distributed key /value store data grid diff --git /docs/user-manual/en/summary.md b /docs/user-manual/en/summary.md index 96955c4 ..a1bbc02 /docs/user-manual/en/summary.md b /docs/user-manual/en/summary.md [http](http-component.adoc) [http4](http4-component.adoc) [ibatis](ibatis-component.adoc) [ignite](ignite-component.adoc) [imap](imap-component.adoc) [infinispan](infinispan-component.adoc) [influxdb](influxdb-component.adoc)",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C3ecfaacf3d8e4820a231f68340f2ef0d%40git.apache.org%3E,2017-04-14 10:55:56,commits,328.0,camel git commit camel ported camel -ignite wiki doc adoc
9,9,9,29.0,191.0,igarashitm,github user igarashitm closed pull request project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170414112311.A7379DFF36%40git1-us-west.apache.org%3E,2017-04-14 11:23:11,mail,191.0,[github] camel pull request camel ported camel -ignite wiki doc adoc
10,12,12,9.0,329.0,davscl...@apache.org,"repository camel updated branch ref /heads/master 6a02de123 ddd2347d9 camel make camel -example-cxf-blueprint test pas java project commit tree diff branch ref /heads/master commit ddd2347d92c723557cbfc2143bfd648db48ed484 parent 1ca0ec4 author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-cxf-blueprint/pom.xml file changed insertion deletion diff --git /examples/camel-example-cxf-blueprint/pom.xml b /examples/camel-example-cxf-blueprint/pom.xml index ..acf9a11 /examples/camel-example-cxf-blueprint/pom.xml b /examples/camel-example-cxf-blueprint/pom.xml </plugin> </plugins> </build> <profiles> <profile> <id>jdk9-build</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <argline>--add-modules java .activation,java.xml.bind,java.xml.ws,jdk.xml.bind --add-opens java .base/java.lang=all-unnamed --add-exports=java.naming/com.sun.jndi.ldap=all-unnamed --add-exports=java.xml.bind/com.sun.xml.internal.bind=all-unnamed --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2=all-unnamed --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime.reflect=all-unnamed --add-exports=java.xml.ws/com.sun.xml.internal.messaging.saaj.soap.impl=all-unnamed --add-exports=java.xml.ws/com.sun.xml.internal.messaging.saaj.soap=all-unnamed --add-opens java .base/java.net=all-unnamed --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime=all-unnamed</argline> </configuration> </plugin> </plugins> </build> </profile> </profiles> </project>",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cb50b5147c8eb4ac9b023dca40545901b%40git.apache.org%3E,2017-04-14 10:57:46,commits,329.0,camel git commit camel make camel -example-cxf-blueprint test pas java
11,13,13,10.0,330.0,davscl...@apache.org,"camel make camel -example-cxf-tomcat test pas java project commit tree diff branch ref /heads/master commit 8a23104b554fcc9113a1913f49a4082c67d28acc parent 44d333f author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-cxf-tomcat/pom.xml file changed insertion diff --git /examples/camel-example-cxf-tomcat/pom.xml b /examples/camel-example-cxf-tomcat/pom.xml index 8f1c898 ..6336aa9 /examples/camel-example-cxf-tomcat/pom.xml b /examples/camel-example-cxf-tomcat/pom.xml <tomcat.url> </properties> </profile> <profile> <id>jdk9-build</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <argline>--add-modules java .activation,java.xml.bind,java.xml.ws,jdk.xml.bind --add-opens java .base/java.lang=all-unnamed --add-exports=java.naming/com.sun.jndi.ldap=all-unnamed --add-exports=java.xml.bind/com.sun.xml.internal.bind=all-unnamed --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2=all-unnamed --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime.reflect=all-unnamed --add-exports=java.xml.ws/com.sun.xml.internal.messaging.saaj.soap.impl=all-unnamed --add-exports=java.xml.ws/com.sun.xml.internal.messaging.saaj.soap=all-unnamed --add-opens java .base/java.net=all-unnamed --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime=all-unnamed</argline> </configuration> </plugin> </plugins> </build> </profile> </profiles> </project>",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Ce9859842f13443f6b7ce077840356411%40git.apache.org%3E,2017-04-14 10:57:47,commits,330.0,camel git commit camel make camel -example-cxf-tomcat test pas java
12,14,14,11.0,331.0,davscl...@apache.org,camel make camel -cxf-transport test pas java project commit tree diff branch ref /heads/master commit a01f14cdda7b576e42be4357625fec374555f6ae parent 7b2d32e author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr component /camel-cxf-transport/pom.xml file changed insertion diff --git /components/camel-cxf-transport/pom.xml b /components/camel-cxf-transport/pom.xml index 93d650b ..bc76a6a /components/camel-cxf-transport/pom.xml b /components/camel-cxf-transport/pom.xml </plugin> </plugins> </build> <profiles> <profile> <id>jdk9-build</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <reuseforks>true</reuseforks> <argline>--add-modules java .xml.ws --add-opens java .base/java.lang=all-unnamed</argline> </configuration> </plugin> </plugins> </build> </profile> </profiles> </project>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C8944f48bb72241b994053539c7e0edf4%40git.apache.org%3E,2017-04-14 10:57:48,commits,331.0,camel git commit camel make camel -cxf-transport test pas java
13,15,15,12.0,332.0,davscl...@apache.org,"camel make camel -example-loan-broker-jms test pas java project commit tree diff branch ref /heads/master commit e6964f1e74bc2a2f9d76450447332ce03570cf53 parent 3f9ebd5 author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-loan-broker-jms/pom.xml file changed insertion diff --git /examples/camel-example-loan-broker-jms/pom.xml b /examples/camel-example-loan-broker-jms/pom.xml index 186036b ..0668ecf /examples/camel-example-loan-broker-jms/pom.xml b /examples/camel-example-loan-broker-jms/pom.xml <target.main.class>org.apache.camel.loanbroker.client</target.main.class> </properties> </profile> <profile> <id>jdk9-build</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <argline>--add-modules java .xml.bind,java.xml.ws --add-opens java .base/java.lang=all-unnamed --add-opens java .xml.bind/com.sun.xml.internal.bind.v2.runtime=all-unnamed</argline> </configuration> </plugin> </plugins> </build> </profile> </profiles> </project>",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C9940ce4909db4f58bedb1ca432783218%40git.apache.org%3E,2017-04-14 10:57:49,commits,332.0,camel git commit camel make camel -example-loan-broker-jms test pas java
14,16,16,13.0,333.0,davscl...@apache.org,camel make camel -example-cdi-example test pas java project commit tree diff branch ref /heads/master commit 1e31f1e4265f4271d82f54f86cb0ba85f426f54d parent 6a02de1 author jpoth <poth.john@gmail.com> authored thu apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-cdi-xml/pom.xml file changed insertion diff --git /examples/camel-example-cdi-xml/pom.xml b /examples/camel-example-cdi-xml/pom.xml index e365cc2 ..9758b4a /examples/camel-example-cdi-xml/pom.xml b /examples/camel-example-cdi-xml/pom.xml </plugins> </build> <profiles> <profile> <id>jdk9-build</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <argline>--add-modules java .xml.bind --add-opens java .base/java.lang=all-unnamed</argline> </configuration> </plugin> </plugins> </build> </profile> </profiles> </project>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Ce4eb9713620046ea85a7803fdcaefd90%40git.apache.org%3E,2017-04-14 10:57:50,commits,333.0,camel git commit camel make camel -example-cdi-example test pas java
15,17,17,14.0,334.0,davscl...@apache.org,camel make camel -example-cdi-test test pas java project commit tree diff branch ref /heads/master commit d590e92118a20b07c8a7d136d754a26e5055af86 parent 1e31f1e author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-cdi-test/pom.xml file changed insertion deletion diff --git /examples/camel-example-cdi-test/pom.xml b /examples/camel-example-cdi-test/pom.xml index d1b5765 ..697847c /examples/camel-example-cdi-test/pom.xml b /examples/camel-example-cdi-test/pom.xml </dependencies> </plugin> </plugins> </build> <profiles> <profile> <id>jdk9-build</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <argline>--add-modules java .xml.bind --add-opens java .base/java.lang=all-unnamed</argline> </configuration> </plugin> </plugins> </build> </profile> </profiles> </project>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C17603fa71f9f4446851fd50f33bc248a%40git.apache.org%3E,2017-04-14 10:57:51,commits,334.0,camel git commit camel make camel -example-cdi-test test pas java
16,18,18,15.0,335.0,davscl...@apache.org,camel make camel -example-cdi-metrics test pas java project commit tree diff branch ref /heads/master commit 73b61ef32533aac448fe5c31d2f28f0373ad5d90 parent d590e92 author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-cdi-metrics/pom.xml file changed insertion diff --git /examples/camel-example-cdi-metrics/pom.xml b /examples/camel-example-cdi-metrics/pom.xml index 08401f7 ..5f09f7c /examples/camel-example-cdi-metrics/pom.xml b /examples/camel-example-cdi-metrics/pom.xml </plugins> </build> <profiles> <profile> <id>jdk9-build</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <argline>--add-modules java .xml.bind --add-opens java .base/java.lang=all-unnamed</argline> </configuration> </plugin> </plugins> </build> </profile> </profiles> </project>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C17d5bb4af9784983a8ac362b3e589ea3%40git.apache.org%3E,2017-04-14 10:57:52,commits,335.0,camel git commit camel make camel -example-cdi-metrics test pas java
17,19,19,16.0,336.0,davscl...@apache.org,camel make camel -example-cdi-properties test pas java project commit tree diff branch ref /heads/master commit 061eb2416cd5863cf845b330740cacaed83321cd parent 73b61ef author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-cdi-properties/pom.xml file changed insertion diff --git /examples/camel-example-cdi-properties/pom.xml b /examples/camel-example-cdi-properties/pom.xml index 24adc77 ..ae2ae06 /examples/camel-example-cdi-properties/pom.xml b /examples/camel-example-cdi-properties/pom.xml </plugins> </build> <profiles> <profile> <id>jdk9-build</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <argline>--add-modules java .xml.bind --add-opens java .base/java.lang=all-unnamed</argline> </configuration> </plugin> </plugins> </build> </profile> </profiles> </project>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C4901736312b14536a40a9ab29e998af5%40git.apache.org%3E,2017-04-14 10:57:53,commits,336.0,camel git commit camel make camel -example-cdi-properties test pas java
18,20,20,17.0,337.0,davscl...@apache.org,"camel make camel -example-reportincident test pas java project commit tree diff branch ref /heads/master commit 1b8949f593eed1fb0b97bcf0d138f2be113d0d2e parent e6964f1 author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-reportincident/pom.xml file changed insertion deletion diff --git /examples/camel-example-reportincident/pom.xml b /examples/camel-example-reportincident/pom.xml index 92091d7 ..b820ac1 /examples/camel-example-reportincident/pom.xml b /examples/camel-example-reportincident/pom.xml <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <argline>--add-modules java .xml.bind,java.xml.ws --add-opens java .base/java.lang=all-unnamed --add-opens java .base/java.lang.invoke=all-unnamed --add-opens java .base/java.util=all-unnamed</argline> <argline>--add-modules java .xml.bind,java.xml.ws --add-opens java .base/java.lang=all-unnamed --add-opens java .base/java.lang.invoke=all-unnamed --add-opens java .base/java.util=all-unnamed --add-opens java .xml.bind/com.sun.xml.internal.bind.v2.runtime=all-unnamed</argline> </configuration> </plugin> </plugins>",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C4b84d50cca2f408189db81727d97a39f%40git.apache.org%3E,2017-04-14 10:57:54,commits,337.0,camel git commit camel make camel -example-reportincident test pas java
19,21,21,18.0,338.0,davscl...@apache.org,camel make camel -example-rest-servlet test pas java project commit tree diff branch ref /heads/master commit 3f9ebd5a0a9e23e5b8c2f10abdf0c1c6ca4eda90 parent 061eb24 author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-cdi-rest-servlet/pom.xml file changed insertion deletion diff --git /examples/camel-example-cdi-rest-servlet/pom.xml b /examples/camel-example-cdi-rest-servlet/pom.xml index 260d778 ..aac0973 /examples/camel-example-cdi-rest-servlet/pom.xml b /examples/camel-example-cdi-rest-servlet/pom.xml </dependency> </dependencies> </profile> <profile> <id>jdk9-build-jetty</id> <activation> <jdk>9</jdk> </activation> <dependencies> <dependency> <groupid>org.eclipse.jetty</groupid> <artifactid>jetty-webapp</artifactid> <version>${jetty9-version}</version> <scope>runtime</scope> </dependency> <dependency> <groupid>org.eclipse.jetty</groupid> <artifactid>jetty-annotations</artifactid> <version>${jetty9-version}</version> <scope>runtime</scope> </dependency> <dependency> <groupid>org.jboss.arquillian.container</groupid> <artifactid>arquillian-jetty-embedded-9</artifactid> <version>1.0.0.cr2</version> <scope>test</scope> <exclusions> <exclusion> <groupid>org.jboss.arquillian.container</groupid> <artifactid>arquillian-container-spi</artifactid> </exclusion> </exclusions> </dependency> </dependencies> <build> <plugins> <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <argline>--add-modules java .xml.bind --add-opens java .base/java.lang=all-unnamed</argline> </configuration> </plugin> </plugins> </build> </profile> </profiles> <build> </plugin> </plugins> </build> </project>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cd0654af72ef94f628420b970c145ccf5%40git.apache.org%3E,2017-04-14 10:57:55,commits,338.0,camel git commit camel make camel -example-rest-servlet test pas java
20,22,22,19.0,339.0,davscl...@apache.org,camel make camel -example-pojo-messaging test pas java project commit tree diff branch ref /heads/master commit fdeb34752943b2bf4723407b99da875708fae852 parent 1b8949f author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-pojo-messaging/pom.xml file changed insertion diff --git /examples/camel-example-pojo-messaging/pom.xml b /examples/camel-example-pojo-messaging/pom.xml index f71b3b7 ..34b1bd6 /examples/camel-example-pojo-messaging/pom.xml b /examples/camel-example-pojo-messaging/pom.xml </plugins> </build> <profiles> <profile> <id>jdk9-build</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <argline>--add-modules java .xml.bind --add-opens java .base/java.lang=all-unnamed</argline> </configuration> </plugin> </plugins> </build> </profile> </profiles> </project>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C7bc5feb92c534ce9a2bf51de8ce26017%40git.apache.org%3E,2017-04-14 10:57:56,commits,339.0,camel git commit camel make camel -example-pojo-messaging test pas java
21,23,23,20.0,340.0,davscl...@apache.org,camel make camel -example-management test pas java project commit tree diff branch ref /heads/master commit 9e7b6c6c7bb423f36dd3a6db98635e2a95a98acc parent fdeb347 author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-management/pom.xml file changed insertion diff --git /examples/camel-example-management/pom.xml b /examples/camel-example-management/pom.xml index 66f0b1f ..d8db087 /examples/camel-example-management/pom.xml b /examples/camel-example-management/pom.xml </plugins> </build> <profiles> <profile> <id>jdk9-build</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <argline>--add-modules java .xml.bind --add-opens java .base/java.lang=all-unnamed</argline> </configuration> </plugin> </plugins> </build> </profile> </profiles> </project>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C30204927025749bbbc58720eb5a3f27c%40git.apache.org%3E,2017-04-14 10:57:57,commits,340.0,camel git commit camel make camel -example-management test pas java
22,24,24,21.0,341.0,davscl...@apache.org,camel make camel -example-spring-jms test pas java project commit tree diff branch ref /heads/master commit 3d9a999c035aa10bff547d0d3ee053528b615919 parent 9e7b6c6 author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-spring-jms/pom.xml file changed insertion deletion diff --git /examples/camel-example-spring-jms/pom.xml b /examples/camel-example-spring-jms/pom.xml index da360e0 ..af430aa /examples/camel-example-spring-jms/pom.xml b /examples/camel-example-spring-jms/pom.xml <target.main.class>org.apache.camel.example.client.camelclientendpoint</target.main.class> </properties> </profile> <profile> <id>jdk9-build</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <argline>--add-modules java .xml.bind --add-opens java .base/java.lang=all-unnamed</argline> </configuration> </plugin> </plugins> </build> </profile> </profiles> <build> </plugins> </build> </project>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cdf7aef9137e64879b2a51fa8161c519e%40git.apache.org%3E,2017-04-14 10:57:58,commits,341.0,camel git commit camel make camel -example-spring-jms test pas java
23,25,25,22.0,342.0,davscl...@apache.org,camel make camel -example-osgi-rmi test pas java project commit tree diff branch ref /heads/master commit 047761a787d646759069e1ac318ba3523816ec08 parent 3d9a999 author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-osgi-rmi/pom.xml file changed insertion diff --git /examples/camel-example-osgi-rmi/pom.xml b /examples/camel-example-osgi-rmi/pom.xml index dce39d2 ..82c588d /examples/camel-example-osgi-rmi/pom.xml b /examples/camel-example-osgi-rmi/pom.xml <target.main.class>org.apache.camel.example.osgi.helloclient</target.main.class> </properties> </profile> <profile> <id>jdk9-build</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <argline>--add-modules java .xml.bind --add-opens java .base/java.lang=all-unnamed</argline> </configuration> </plugin> </plugins> </build> </profile> </profiles> <build>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Ca519cd2689fb4af09c8ded1b17b83f65%40git.apache.org%3E,2017-04-14 10:57:59,commits,342.0,camel git commit camel make camel -example-osgi-rmi test pas java
24,26,26,23.0,343.0,davscl...@apache.org,camel make camel -example-cafe test pas java project commit tree diff branch ref /heads/master commit f0cc62ec403817c3f0050c870a5ad06732fb4bba parent 047761a author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-cafe/pom.xml file changed insertion deletion diff --git /examples/camel-example-cafe/pom.xml b /examples/camel-example-cafe/pom.xml index ..5e88b79 /examples/camel-example-cafe/pom.xml b /examples/camel-example-cafe/pom.xml </plugins> </build> <profiles> <profile> <id>jdk9-build</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <argline>--add-modules java .xml.bind</argline> </configuration> </plugin> </plugins> </build> </profile> </profiles> </project>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cad79d72ff20f4e9e9063531f4c8a0503%40git.apache.org%3E,2017-04-14 10:58:00,commits,343.0,camel git commit camel make camel -example-cafe test pas java
25,27,27,24.0,344.0,davscl...@apache.org,camel skip cxf test java cxf resolved project commit tree diff branch ref /heads/master commit 925bfe6592ca4831497bfe1c79e8e98f78c0f908 parent a01f14c author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-cxf/pom.xml .../pom.xml test /camel-blueprint-cxf-test/pom.xml file changed insertion deletion diff --git /examples/camel-example-cxf/pom.xml b /examples/camel-example-cxf/pom.xml index cc3f12f ..d87f88f /examples/camel-example-cxf/pom.xml b /examples/camel-example-cxf/pom.xml <target.main.class>org.apache.camel.example.cxf.jaxrs.client</target.main.class> </properties> </profile> <profile> <id>java9</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <groupid>org.apache.maven.plugins</groupid> <artifactid>maven-surefire-plugin</artifactid> <configuration> <excludes> <!--ignore test cxf resolved released <exclude>**/**</exclude> </excludes> </configuration> </plugin> </plugins> </build> </profile> </profiles> <build> diff --git /examples/camel-example-reportincident-wssecurity/pom.xml b /examples/camel-example-reportincident-wssecurity/pom.xml index 143583f ..8ff14c2 /examples/camel-example-reportincident-wssecurity/pom.xml b /examples/camel-example-reportincident-wssecurity/pom.xml </plugins> </build> <profiles> <profile> <id>java9</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <groupid>org.apache.maven.plugins</groupid> <artifactid>maven-surefire-plugin</artifactid> <configuration> <excludes> <!--ignore test cxf resolved released <exclude>**/**</exclude> </excludes> </configuration> </plugin> </plugins> </build> </profile> </profiles> </project> diff --git /tests/camel-blueprint-cxf-test/pom.xml b /tests/camel-blueprint-cxf-test/pom.xml index 6948da8 ..3e790b1 /tests/camel-blueprint-cxf-test/pom.xml b /tests/camel-blueprint-cxf-test/pom.xml </dependency> </dependencies> <profiles> <profile> <id>java9</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <groupid>org.apache.maven.plugins</groupid> <artifactid>maven-surefire-plugin</artifactid> <configuration> <excludes> <!--ignore test cxf resolved released <exclude>**/**</exclude> </excludes> </configuration> </plugin> </plugins> </build> </profile> </profiles> </project>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cf223533da6264a95bdf7c35eb48a0936%40git.apache.org%3E,2017-04-14 10:58:01,commits,344.0,camel git commit camel skip cxf test java cxf resolved
26,28,28,25.0,345.0,davscl...@apache.org,camel skip cxf test java cxf resolved project commit tree diff branch ref /heads/master commit 7b2d32e1292f7d5f2515b018527aba8d6e95846b parent f0cc62e author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr component /camel-cxf/pom.xml file changed insertion deletion diff --git /components/camel-cxf/pom.xml b /components/camel-cxf/pom.xml index 70f782e ..2503adf /components/camel-cxf/pom.xml b /components/camel-cxf/pom.xml </dependency> </dependencies> </profile> <profile> <id>java9</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <groupid>org.apache.maven.plugins</groupid> <artifactid>maven-surefire-plugin</artifactid> <configuration> <excludes> <!--ignore test cxf resolved released <exclude>**/**</exclude> </excludes> </configuration> </plugin> </plugins> </build> </profile> </profiles> </project>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C6ae8575032e649018fd66bcbb39bfa36%40git.apache.org%3E,2017-04-14 10:58:02,commits,345.0,camel git commit camel skip cxf test java cxf resolved
27,29,29,26.0,346.0,davscl...@apache.org,"camel make camel -example-cxf-osgi test pas java project commit tree diff branch ref /heads/master commit bb7bd6ab35a2984bb041e7021039136678315d47 parent 925bfe6 author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-cxf-osgi/pom.xml file changed insertion diff --git /examples/camel-example-cxf-osgi/pom.xml b /examples/camel-example-cxf-osgi/pom.xml index 04e8e79 ..8c2c773 /examples/camel-example-cxf-osgi/pom.xml b /examples/camel-example-cxf-osgi/pom.xml </plugin> </plugins> </build> <profiles> <profile> <id>jdk9-build</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <argline>--add-modules java .activation,java.xml.bind,java.xml.ws,jdk.xml.bind --add-opens java .base/java.lang=all-unnamed --add-exports=java.naming/com.sun.jndi.ldap=all-unnamed --add-exports=java.xml.bind/com.sun.xml.internal.bind=all-unnamed --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2=all-unnamed --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime.reflect=all-unnamed --add-exports=java.xml.ws/com.sun.xml.internal.messaging.saaj.soap.impl=all-unnamed --add-exports=java.xml.ws/com.sun.xml.internal.messaging.saaj.soap=all-unnamed --add-opens java .base/java.net=all-unnamed --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime=all-unnamed</argline> </configuration> </plugin> </plugins> </build> </profile> </profiles> </project>",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cb7b76d890975415b8e3d8088aa623a6f%40git.apache.org%3E,2017-04-14 10:58:03,commits,346.0,camel git commit camel make camel -example-cxf-osgi test pas java
28,30,30,27.0,347.0,davscl...@apache.org,"camel make camel -example-loan-broker-cxf test pas java project commit tree diff branch ref /heads/master commit 1ca0ec4dac23930357bb62ac587b8047d332cf0f parent 8a23104 author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-loan-broker-cxf/pom.xml file changed insertion diff --git /examples/camel-example-loan-broker-cxf/pom.xml b /examples/camel-example-loan-broker-cxf/pom.xml index b5180c5 ..e6c5db0 /examples/camel-example-loan-broker-cxf/pom.xml b /examples/camel-example-loan-broker-cxf/pom.xml <target.main.class>org.apache.camel.loanbroker.client</target.main.class> </properties> </profile> <profile> <id>jdk9-build</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <argline>--add-modules java .xml.bind,java.xml.ws --add-opens java .base/java.lang=all-unnamed --add-opens java .xml.bind/com.sun.xml.internal.bind.v2.runtime=all-unnamed</argline> </configuration> </plugin> </plugins> </build> </profile> </profiles> </project>",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cabfdccad36ad4d6ba0d229dc4c4050cd%40git.apache.org%3E,2017-04-14 10:58:04,commits,347.0,camel git commit camel make camel -example-loan-broker-cxf test pas java
29,31,31,28.0,348.0,davscl...@apache.org,"camel make camel -example-cxf-proxy test pas java project commit tree diff branch ref /heads/master commit 44d333fe7cc2d5bdc1f452a16e5c3923edd9ea10 parent bb7bd6a author jpoth <poth.john@gmail.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed fri apr example /camel-example-cxf-proxy/pom.xml file changed insertion deletion diff --git /examples/camel-example-cxf-proxy/pom.xml b /examples/camel-example-cxf-proxy/pom.xml index be68c33 ..6c08ee7 /examples/camel-example-cxf-proxy/pom.xml b /examples/camel-example-cxf-proxy/pom.xml </plugins> </build> <profiles> <profile> <id>jdk9-build</id> <activation> <jdk>9</jdk> </activation> <build> <plugins> <plugin> <artifactid>maven-surefire-plugin</artifactid> <configuration> <argline>--add-modules java .activation,java.xml.bind,java.xml.ws,jdk.xml.bind --add-opens java .base/java.lang=all-unnamed --add-exports=java.naming/com.sun.jndi.ldap=all-unnamed --add-exports=java.xml.bind/com.sun.xml.internal.bind=all-unnamed --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2=all-unnamed --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime.reflect=all-unnamed --add-exports=java.xml.ws/com.sun.xml.internal.messaging.saaj.soap.impl=all-unnamed --add-exports=java.xml.ws/com.sun.xml.internal.messaging.saaj.soap=all-unnamed --add-opens java .base/java.net=all-unnamed --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime=all-unnamed</argline> </configuration> </plugin> </plugins> </build> </profile> </profiles> </project>",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C846df69249224f8fad5cf4414e42b733%40git.apache.org%3E,2017-04-14 10:58:05,commits,348.0,camel git commit camel make camel -example-cxf-proxy test pas java
30,32,32,32.0,195.0,johnpoth,github user johnpoth closed pull request project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170414114012.0CE98DFDAC%40git1-us-west.apache.org%3E,2017-04-14 11:40:12,mail,195.0,[github] camel pull request camel let pas remaining test java
31,33,33,31.0,185.0,Apache Jenkins Server,apache jenkins build system built camel .trunk.notest (build status fixed check console output view result,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C650829034.1122.1492169204513.JavaMail.jenkins%40crius%3E,2017-04-14 11:26:43,mail,185.0,camel .trunk.notest build fixed
32,34,34,35.0,196.0,Apache Jenkins Server,apache jenkins build system built camel .trunk.notest (build status failure check console output view result,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C1103389866.1132.1492176044941.JavaMail.jenkins%40crius%3E,2017-04-14 13:20:41,mail,196.0,camel .trunk.notest build failure
33,35,35,42.0,197.0,Apache Jenkins Server,apache jenkins build system built camel .trunk.notest (build status still failing check console output view result,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C532825254.1161.1492186125669.JavaMail.jenkins%40crius%3E,2017-04-14 16:08:45,mail,197.0,camel .trunk.notest build still failing
34,36,36,44.0,198.0,Apache Jenkins Server,apache jenkins build system built camel .trunk.notest (build status still failing check console output view result,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C1866482530.1202.1492193623031.JavaMail.jenkins%40crius%3E,2017-04-14 18:13:42,mail,198.0,camel .trunk.notest build still failing
35,37,37,99.0,199.0,Apache Jenkins Server,apache jenkins build system built camel .trunk.notest (build status still failing check console output view result,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C1503066349.929.1492505396575.JavaMail.jenkins%40crius%3E,2017-04-18 08:49:55,mail,199.0,camel .trunk.notest build still failing
36,38,38,112.0,200.0,Apache Jenkins Server,apache jenkins build system built camel .trunk.notest (build status still failing check console output view result,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C1640579252.977.1492512680081.JavaMail.jenkins%40crius%3E,2017-04-18 10:51:17,mail,200.0,camel .trunk.notest build still failing
37,39,39,156.0,201.0,Apache Jenkins Server,apache jenkins build system built camel .trunk.notest (build status fixed check console output view result,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C1711132809.1122.1492534566432.JavaMail.jenkins%40crius%3E,2017-04-18 16:56:04,mail,201.0,camel .trunk.notest build fixed
38,40,40,234.0,221.0,Apache Jenkins Server,apache jenkins build system built camel .trunk.notest (build status failure check console output view result,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C1579680024.1412.1492602693408.JavaMail.jenkins%40crius%3E,2017-04-19 11:51:33,mail,221.0,camel .trunk.notest build failure
39,45,45,93.0,533.0,Luca Burgazzoli (JIRA),work camel started luca burgazzoli camel -infinispan store result header body key camel url project camel issue type improvement component camel -infinispan reporter claus ibsen assignee luca burgazzoli priority minor fix component sadly work like others like hazelcast etc result default message body store magically result header expect want store message body map cache use header whatnot add way configure work like others also better npe check get npes {code} java .lang.nullpointerexception org .apache.camel.component.infinispan.infinispanoperation$operation$7.execute(infinispanoperation.java:183) org .apache.camel.component.infinispan.infinispanoperation.process(infinispanoperation.java:45) org .apache.camel.component.infinispan.infinispanproducer.process(infinispanproducer.java:34) {code} message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13046297.1488037837000.303589.1492502201732%40Atlassian.JIRA%3E,2017-04-18 07:56:41,issues,536.0,[jira] [work started (camel-10896) camel -infinispan store result header body
40,46,46,36.0,349.0,build...@apache.org,"author buildbot date fri apr new revision log production update buildbot camel modified website /production/camel/content/cache/main.pagecache website /production/camel/content/cdi.html modified website /production/camel/content/cache/main.pagecache binary file diff available modified website /production/camel/content/cdi.html website /production/camel/content/cdi.html (original) website /production/camel/content/cdi.html fri apr processor processor exchange -&gt; exc &lt;process ref =&quot;baz&quot;/&gt; &lt;/route&gt; &lt;camelcontext/&gt;]]></script> +</div></div><h3 id =""cdi-transactionsupport"">transaction support </h3><p><strong>available camel .19</strong></p><p>camel cdi provides support camel <a shape =""rect"" href =""transactional-client.html"">transactional client </a> using jta .</p><p>that support optional hence need jta application classpath e .g., explicitly add jta dependency using maven :</p><div class =""code panel pdl style =""border-width: 1px ;""><div class =""codecontent panelcontent pdl +<script class =""brush: xml gutter false theme default type =""syntaxhighlighter""><![cdata[&lt;dependency&gt; &lt;groupid&gt;javax.transaction&lt;/groupid&gt; &lt;artifactid&gt;javax.transaction-api&lt;/artifactid&gt; &lt;scope&gt;runtime&lt;/scope&gt; +&lt;/dependency&gt;]]></script> +</div></div><p>you'll application deployed jta capable container provide standalone jta implementation .</p><div class =""confluence-information-macro confluence -information-macro-note""><span class =""aui-icon aui -icon-small aui -iconfont-warning confluence -information-macro-icon""></span><div class =""confluence-information-macro-body""><p>note time transaction manager looked jndi resource <code>java:/transactionmanager</code> key flexible strategy added future support wider range deployment scenario .</p></div></div><h4 id =""cdi-transactionpolicies"">transaction policy </h4><p>camel cdi provides implementation typically supported camel <code>transactedpolicy</code> cdi bean possible policy looked name using <code>transacted</code> eip e .g.:</p><div class =""code panel pdl style =""border-width: 1px ;""><div class =""codecontent panelcontent pdl +<script class =""brush: java gutter false theme default type =""syntaxhighlighter""><![cdata[class myroutebean extends routebuilder @override public void configure (&quot;activemq:queue:foo&quot;) .transacted(&quot;propagation_required&quot;) .bean(&quot;transformer&quot;) .to(&quot;jpa:my.application.entity.bar&quot;) .log(&quot;${body.id} inserted &quot;); +}]]></script> +</div></div><p>this would equivalent :</p><div class =""code panel pdl style =""border-width: 1px ;""><div class =""codecontent panelcontent pdl +<script class =""brush: java gutter false theme default type =""syntaxhighlighter""><![cdata[class myroutebean extends routebuilder @inject @named(&quot;propagation_required&quot;) policy required +â @override public void configure (&quot;activemq:queue:foo&quot;) .policy(required) .bean(&quot;transformer&quot;) .to(&quot;jpa:my.application.entity.bar&quot;) .log(&quot;${body.id} inserted &quot;); +}]]></script> +</div></div><p>the list supported transaction policy name <code>propagation_never</code>,&#160;<code>propagation_not_supported</code>, <code>propagation_supports</code>,&#160;<code>propagation_required</code>,&#160;<code>propagation_requires_new</code>, <code>propagation_nested</code>,&#160;<code>propagation_mandatory</code>.</p><h4 id =""cdi-transactionalerrorhandler"">transactional error handler </h4><p>camel cdi provides transactional <a shape =""rect"" href =""error-handler.html"">error handler </a> extends redelivery error handler force rollback whenever exception occurs creates new transaction redelivery camel cdi provides <code>cdiroutebuilder</code> class expose <code>transactionerrorhandler</code> helper method enable quick access configuration e .g.:</p><div class =""code panel pdl style =""border-width: 1px ;""><div class =""codecontent panelcontent pdl +<script class =""brush: java gutter false theme default type =""syntaxhighlighter""><![cdata[class myroutebean extends cdiroutebuilder @override public void configure errorhandler (transactionerrorhandler() .settransactionpolicy(&quot;propagation_supports&quot;) .maximumredeliveries(5) .maximumredeliverydelay(5000) .collisionavoidancepercent(10) .backoffmultiplier(1.5)); +}]]></script> </div></div><h3 id =""cdi-auto-configuredosgiintegration"">auto-configured osgi integration </h3><p><strong>available camel .17</strong></p><p>the camel context bean automatically adapted camel cdi registered osgi service various resolvers (like&#160;<strong><code>componentresolver</code></strong> &#160;<strong><code>dataformatresolver</code></strong>) integrate osgi registry mean <a shape =""rect"" href =""karaf.html#karaf-karafcommands"">karaf camel command </a> used operate camel context auto -configured camel cdi e .g.:</p><div class =""code panel pdl style =""border-width: 1px ;""><div class =""codecontent panelcontent pdl <script class =""brush: text gutter false theme default type =""syntaxhighlighter""><![cdata[karaf@root()&gt; camel :context-list context status total failed inflight uptime",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C20170414141846.6A33E3A51B2%40svn01-us-west.apache.org%3E,2017-04-14 14:18:45,commits,349.0,svn commit r1010488 /websites/production/camel/content: cache /main.pagecache cdi .html
41,47,47,37.0,350.0,astefanu...@apache.org,"repository camel updated branch ref /heads/master ddd2347d9 6ec8df219 camel documentation project commit tree diff branch ref /heads/master commit 6ec8df21959037351bbf786cc5d1716696ab1829 parent ddd2347 author antonin stefanutti <antonin@stefanutti.fr> authored fri apr committer antonin stefanutti <antonin@stefanutti.fr> committed fri apr component /camel-cdi/src/main/docs/cdi.adoc file changed insertion diff --git /components/camel-cdi/src/main/docs/cdi.adoc b /components/camel-cdi/src/main/docs/cdi.adoc index 572eec3 ..1a3931e /components/camel-cdi/src/main/docs/cdi.adoc b /components/camel-cdi/src/main/docs/cdi.adoc configuration e .g.: <camelcontext/> transaction support +*available camel +camel cdi provides support camel transactional client using jta +that support optional hence need jta application classpath e .g., explicitly add jta dependency using maven +[source,xml] +<dependency> <groupid>javax.transaction</groupid> <artifactid>javax.transaction-api</artifactid> <scope>runtime</scope> +</dependency> +you'll application deployed jta capable container provide standalone jta implementation +[caution] +note time transaction manager looked jndi resource `java:/transactionmanager` key +more flexible strategy added future support wider range deployment scenario transaction policy +camel cdi provides implementation typically supported camel `transactedpolicy` cdi bean possible policy looked name using transacted eip e .g.: +[source,java] +class myroutebean extends routebuilder @override public void configure (""activemq:queue:foo"") .transacted(""propagation_required"") .bean(""transformer"") .to(""jpa:my.application.entity.bar"") .log(""${body.id} inserted +this would equivalent +[source,java] +class myroutebean extends routebuilder @inject @named(""propagation_required"") policy required @override public void configure (""activemq:queue:foo"") .policy(required) .bean(""transformer"") .to(""jpa:my.application.entity.bar"") .log(""${body.id} inserted +the list supported transaction policy name `propagation_never`, `propagation_not_supported`, `propagation_supports`, `propagation_required`, `propagation_requires_new`, `propagation_nested`, `propagation_mandatory`. transactional error handler +camel cdi provides transactional error handler extends redelivery error handler force rollback whenever exception occurs creates new transaction redelivery +camel cdi provides `cdiroutebuilder` class expose `transactionerrorhandler` helper method enable quick access configuration e .g.: +[source,java] +class myroutebean extends cdiroutebuilder @override public void configure errorhandler (transactionerrorhandler() .settransactionpolicy(""propagation_supports"") .maximumredeliveries(5) .maximumredeliverydelay(5000) .collisionavoidancepercent(10) .backoffmultiplier(1.5)); auto -configured osgi integration *available camel",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cfa61a27cf04c43a69b13da26e7ff1d9d%40git.apache.org%3E,2017-04-14 14:26:14,commits,350.0,camel git commit camel documentation
42,48,48,38.0,351.0,astefanu...@apache.org,repository camel updated branch ref /heads/master 6ec8df219 cd84f3857 camel cdi update testing container version documentation project commit tree diff branch ref /heads/master commit cd84f3857d87b26543989bede3d953dadbd48cf6 parent 6ec8df2 author antonin stefanutti <antonin@stefanutti.fr> authored fri apr committer antonin stefanutti <antonin@stefanutti.fr> committed fri apr component /camel-cdi/src/main/docs/cdi.adoc file changed insertion deletion diff --git /components/camel-cdi/src/main/docs/cdi.adoc b /components/camel-cdi/src/main/docs/cdi.adoc index 1a3931e ..30c7512 /components/camel-cdi/src/main/docs/cdi.adoc b /components/camel-cdi/src/main/docs/cdi.adoc following runtimes |container |version |runtime |weld se |1.1.28.final |cdi java se |openwebbeans |cdi java se -|weld se |2.3.4.final |cdi java se -|openwebbeans |cdi java se +|weld se |2.4.2.final |cdi java se +|openwebbeans |cdi java se |wildfly |8.2.1.final |cdi java ee |wildfly |9.0.1.final |cdi java ee -|wildfly |10.0.0.final |cdi java ee +|wildfly |10.1.0.final |cdi java ee |karaf |cdi osgi pax cdi |karaf |cdi osgi pax cdi |karaf |cdi osgi pax cdi,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cf67338e8a03243c58900544fea88dc32%40git.apache.org%3E,2017-04-14 14:35:24,commits,351.0,camel git commit camel cdi update testing container version documentation
43,49,49,40.0,353.0,astefanu...@apache.org,"repository camel updated branch ref /heads/master 49e1c0111 d41194b8b camel use multi -catch exception polish project commit tree diff branch ref /heads/master commit d41194b8bb822d70f706d9359d6694723cfb034b parent 49e1c01 author antonin stefanutti <antonin@stefanutti.fr> authored fri apr committer antonin stefanutti <antonin@stefanutti.fr> committed fri apr .../org/apache/camel/cdi/cdiroutebuilder.java .../jtatransactionerrorhandlerbuilder.java .../cdi/transaction/jtatransactionpolicy.java .../mandatoryjtatransactionpolicy.java .../transaction/neverjtatransactionpolicy.java .../notsupportedjtatransactionpolicy.java .../requiresnewjtatransactionpolicy.java .../transaction/transactionerrorhandler.java .../transactionaljtatransactionpolicy.java file changed insertion deletion diff --git /components/camel-cdi/src/main/java/org/apache/camel/cdi/cdiroutebuilder.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/cdiroutebuilder.java index 4c4e445 ..337351d /components/camel-cdi/src/main/java/org/apache/camel/cdi/cdiroutebuilder.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/cdiroutebuilder.java import org .apache.camel.cdi.transaction.jtatransactionerrorhandlerbuilder; extension {@link routebuilder provide additional helper method @version method public abstract class cdiroutebuilder extends routebuilder diff --git /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/jtatransactionerrorhandlerbuilder.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/jtatransactionerrorhandlerbuilder.java index 3be2d1d ..6d72aaa /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/jtatransactionerrorhandlerbuilder.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/jtatransactionerrorhandlerbuilder.java public class jtatransactionerrorhandlerbuilder extends defaulterrorhandlerbuilde try lookup default policy (transactionpolicy null log .debug( ""no tranaction policiy configured transactionerrorhandlerbuilder try find registry ""no transaction policy configured transactionerrorhandlerbuilder try find registry map <string, transactedpolicy mappolicy routecontext .lookupbytype(transactedpolicy.class); (mappolicy null mappolicy .size() diff --git /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/jtatransactionpolicy.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/jtatransactionpolicy.java index ..f856261 /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/jtatransactionpolicy.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/jtatransactionpolicy.java public abstract class jtatransactionpolicy implement transactedpolicy protected jtatransactionerrorhandler createtransactionerrorhandler (routecontext routecontext processor processor errorhandlerbuilder builder jtatransactionerrorhandler answer try answer (jtatransactionerrorhandler) builder .createerrorhandler(routecontext, processor diff --git /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/mandatoryjtatransactionpolicy.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/mandatoryjtatransactionpolicy.java index 5adbb8a ..ef90018 /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/mandatoryjtatransactionpolicy.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/mandatoryjtatransactionpolicy.java public class mandatoryjtatransactionpolicy extends transactionaljtatransactionpo @override public void run (final runnable runnable throw exception (!hasactivetransaction()) throw new illegalstateexception ""policy 'propagation_mandatory' configured active transaction found diff --git /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/neverjtatransactionpolicy.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/neverjtatransactionpolicy.java index 61a5a3f ..ff1da9f /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/neverjtatransactionpolicy.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/neverjtatransactionpolicy.java public class neverjtatransactionpolicy extends transactionaljtatransactionpolicy @override public void run (final runnable runnable throw exception (hasactivetransaction()) throw new illegalstateexception ""policy 'propagation_never' configured active transaction found diff --git /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/notsupportedjtatransactionpolicy.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/notsupportedjtatransactionpolicy.java index 20e9edf ..5767b9f /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/notsupportedjtatransactionpolicy.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/notsupportedjtatransactionpolicy.java public class notsupportedjtatransactionpolicy extends transactionaljtatransactio @override public void run (final runnable runnable throw throwable transaction suspendedtransaction null try suspendedtransaction suspendtransaction diff --git /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/requiresnewjtatransactionpolicy.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/requiresnewjtatransactionpolicy.java index 84dd20f ..dc3fcc8 /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/requiresnewjtatransactionpolicy.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/requiresnewjtatransactionpolicy.java public class requiresnewjtatransactionpolicy extends transactionaljtatransaction @override public void run (final runnable runnable throw throwable transaction suspendedtransaction null try suspendedtransaction suspendtransaction diff --git /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/transactionerrorhandler.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/transactionerrorhandler.java index 14e4557 ..57245b5 /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/transactionerrorhandler.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/transactionerrorhandler.java public class transactionerrorhandler extends errorhandlersupport (!hasnext()) return null list <processor> answer new arraylist <processor>(1); list <processor> answer new arraylist answer .add(output); return answer diff --git /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/transactionaljtatransactionpolicy.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/transactionaljtatransactionpolicy.java index 188b587 ..3b515c8 /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/transactionaljtatransactionpolicy.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/transactionaljtatransactionpolicy.java public abstract class transactionaljtatransactionpolicy extends jtatransactionpo try runnable .run(); catch (runtimeexception e rollback (isnew); throw e catch (error e rollback (isnew); throw e catch (throwable e rollback (isnew); throw e public abstract class transactionaljtatransactionpolicy extends jtatransactionpo (isnew) commit return private void begin throw exception public abstract class transactionaljtatransactionpolicy extends jtatransactionpo private void commit throw exception try transactionmanager .commit(); catch (heuristicmixedexception e throw new camelexception (""unable commit transaction e catch (heuristicrollbackexception e throw new camelexception (""unable commit transaction e catch (rollbackexception e catch (heuristicmixedexception heuristicrollbackexception rollbackexception systemexception e throw new camelexception (""unable commit transaction e catch (systemexception e throw new camelexception (""unable commit transaction e catch (runtimeexception e rollback (true); throw e catch (exception e rollback (true); throw e catch (error e catch (exception error e rollback (true); throw e",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C523e9812ac07429db3bf7a8a5c06d8db%40git.apache.org%3E,2017-04-14 14:53:30,commits,353.0,camel git commit camel use multi -catch exception polish
44,50,50,41.0,354.0,astefanu...@apache.org,"repository camel updated branch ref /heads/master d41194b8b ec9ab4e0b camel cdi support transactionerrorhandler camel xml dsl project commit tree diff branch ref /heads/master commit ec9ab4e0be554528d7173df3af12bc275fb2289e parent d41194b author antonin stefanutti <antonin@stefanutti.fr> authored fri apr committer antonin stefanutti <antonin@stefanutti.fr> committed fri apr .../src/main/java/org/apache/camel/cdi/xml/errorhandlertype.java file changed insertion deletion diff --git /components/camel-cdi/src/main/java/org/apache/camel/cdi/xml/errorhandlertype.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/xml/errorhandlertype.java index 57b0860 ..1f9d4c0 /components/camel-cdi/src/main/java/org/apache/camel/cdi/xml/errorhandlertype.java b /components/camel-cdi/src/main/java/org/apache/camel/cdi/xml/errorhandlertype.java import org .apache.camel.builder.errorhandlerbuilder; import org .apache.camel.builder.loggingerrorhandlerbuilder; import org .apache.camel.builder.noerrorhandlerbuilder; +import org .apache.camel.cdi.transaction.jtatransactionerrorhandlerbuilder; used configure errorhandler type public enum errorhandlertype case noerrorhandler return noerrorhandlerbuilder .class; case transactionerrorhandler throw new unsupportedoperationexception (""unsupported error handler return jtatransactionerrorhandlerbuilder .class; default throw new illegalargumentexception (""unknown error handler",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C38066940ce0a47efa5600056b64f3d22%40git.apache.org%3E,2017-04-14 15:39:24,commits,354.0,camel git commit camel cdi support transactionerrorhandler camel xml dsl
45,51,51,43.0,177.0,erevkub1,thanks quick response also tried using multiple routebuilder tried small poc worked please let em know good option view message context sent camel user mailing list archive nabble .com.,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492190123294-5797757.post%40n5.nabble.com%3E,2017-04-14 17:15:23,users,178.0,multiple end point traversing different route
46,52,52,45.0,178.0,DariusX,"""camel action book say ""prefer use bean processor (pg 2nd edition 're dependent camel api lead follow -up question need tranform custom format (i.e. annot use existing dataformat );and, also need exchange transform body assumption also prefer use bean custom -dataformat camel transformer situation two useful even one need anything body view message context sent camel user mailing list archive nabble .com.",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492202353675-5797759.post%40n5.nabble.com%3E,2017-04-14 20:39:13,users,179.0,transformation option
47,53,53,48.0,179.0,Claus Ibsen,"hi try think would write java api message transformation without camel would input output 's etc try write unit test transformation dont use camel possible using bean return type message body need enrich message header well bind @headers map parameter add header comfortable camel api exchange processor fine well direct dependency camel low level eg need know v message etc code cannot see expected input output java /data type etc processor however faster runtime direct method call bean called using bit reflection find relevant method bean binding etc people care cpu cycle overhead negligible fri apr pm dariusx <dariuscooper@gmail.com> wrote ""camel action book say ""prefer use bean processor (pg 2nd edition 're dependent camel api lead follow -up question need tranform custom format (i.e. annot use existing dataformat );and, also need exchange transform body assumption also prefer use bean custom -dataformat camel transformer situation two useful even one need anything body view message context sent camel user mailing list archive nabble .com. claus ibsen @davsclaus camel action",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yNn27z64jcBOZuPJy%3D7E79eZgLF7E6%3DUs71nK-XkMK2nNw%40mail.gmail.com%3E,2017-04-16 07:27:20,users,180.0,transformation option
48,54,54,46.0,180.0,contactreji,"hello guy poc camel websockets data pushed ui layer websockets (""websocket://0.0.0.0:9293/hotelsearch"") .log(logginglevel.info,""testservices"",""received search request data ${body}"") .removeheaders(""*"") .to(""direct:authenticate"")...... deploys perfectly fine long module deployed server deployed springboot application another project running server bind websocket consumer endpoint module changed avoid port conflict surprisingly start app try bind port instead result get port binding error *will consumer endpoint like (websocket://0.0.0.0:9293/hotelsearch) bind trying bind could bug websocket component cheer reji reji mathews sr developer middleware integration soa open source apache camel jboss fuse esb mule esb linkedin twitter reji_mathews view message context sent camel user mailing list archive nabble .com.",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492314558425-5797760.post%40n5.nabble.com%3E,2017-04-16 03:49:18,users,181.0,camel websocket binding error
49,55,55,49.0,181.0,Claus Ibsen,"hi maybe old code old java jvm process running take old port something sun apr contactreji <contactreji@gmail.com> wrote hello guy poc camel websockets data pushed ui layer websockets (""websocket://0.0.0.0:9293/hotelsearch"") .log(logginglevel.info,""testservices"",""received search request data ${body}"") .removeheaders(""*"") .to(""direct:authenticate"")...... deploys perfectly fine long module deployed server deployed springboot application another project running server bind websocket consumer endpoint module changed avoid port conflict surprisingly start app try bind port instead result get port binding error *will consumer endpoint like (websocket://0.0.0.0:9293/hotelsearch) bind trying bind could bug websocket component cheer reji reji mathews sr developer middleware integration soa open source apache camel jboss fuse esb mule esb linkedin twitter reji_mathews view message context sent camel user mailing list archive nabble .com. claus ibsen @davsclaus camel action",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yNnHqnw1uMwUAdXDpQzi372xVMBxWpBWfWConVFEG1E4ww%40mail.gmail.com%3E,2017-04-16 07:27:52,users,182.0,camel websocket binding error
50,56,56,47.0,182.0,Claus Ibsen,hi recently stumbled tweet apache camel review therefore intrigued review site head trustradius read text minute two asks login skeptic first well morning logged using linkedin review provides good insight camel developer like get feedback real user surprisingly review fairly new late till today seem relevant eg review etc review (mind need login via linkedin signup claus ibsen @davsclaus camel action,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yNmmyxHaQg1vVfq%3DNH7KD_H3dUjyi5S2yhdjYGqrn2TGWw%40mail.gmail.com%3E,2017-04-16 07:22:58,users,183.0,apache camel review
51,57,57,50.0,534.0,Claus Ibsen (JIRA),claus ibsen created camel summary camel -ssh allow use message header username /password key camel url project camel issue type improvement component camel -ssh reporter claus ibsen priority minor fix future see nabble org .apache.camel.component.ssh.sshhelper#sendexeccommand allow exchange provide username /password used dynamic reuse ssh endpoint different logins using tod drawback creating new endpoint per username message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064259.1492327880000.291543.1492327901673%40Atlassian.JIRA%3E,2017-04-16 07:31:41,issues,538.0,[jira] [created] (camel-11152) camel -ssh allow use message header username /password
52,58,58,51.0,146.0,Claus Ibsen,"hi logged ticket support username /password header future contribution welcome thu apr urwithsumit <sumit.kushwaha@gmail.com> wrote @claus, tod worked user id password @zoran, approach give null pointer exception user id rsa token combination tried though password dynamic value thus go tod still struggling get work rsa token code view message context sent camel user mailing list archive nabble .com. claus ibsen @davsclaus camel action",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yN%3DsvdKvndZbWOCDESCMTj6qHqcHe%3DcpCAznnbj_aY9LMA%40mail.gmail.com%3E,2017-04-16 07:31:43,users,147.0,camel ssh dynamic value
53,59,59,54.0,535.0,onder sezgin (JIRA),onder sezgin reassigned camel assignee onder sezgin camel -ssh allow use message header username /password key camel url project camel issue type improvement component camel -ssh reporter claus ibsen assignee onder sezgin priority minor fix future see nabble org .apache.camel.component.ssh.sshhelper#sendexeccommand allow exchange provide username /password used dynamic reuse ssh endpoint different logins using tod drawback creating new endpoint per username message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064259.1492327880000.295602.1492428761672%40Atlassian.JIRA%3E,2017-04-17 11:32:41,issues,539.0,[jira] [assigned] (camel-11152) camel -ssh allow use message header username /password
54,60,60,80.0,204.0,onders86,github user onders86 opened pull request camel set credential ssh connection header adoc updated ut provided merge pull request git repository running git pull camel alternatively review apply change patch close pull request make commit master /trunk branch (at least following commit message close commit 89b1738e437df3ae3d79d424dc0dc0bb3b8b02f0 author onders86 <ondersezgin@gmail.com> date -04-18t06:06:39z camel set credential ssh connection header project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3Cgit-pr-1635-camel%40git.apache.org%3E,2017-04-18 07:22:10,mail,204.0,[github] camel pull request camel set credential ssh connection
55,61,61,81.0,536.0,ASF GitHub Bot (JIRA),asf github bot commented camel github user onders86 opened pull request camel set credential ssh connection header adoc updated ut provided merge pull request git repository running git pull camel alternatively review apply change patch close pull request make commit master /trunk branch (at least following commit message close commit 89b1738e437df3ae3d79d424dc0dc0bb3b8b02f0 author onders86 <ondersezgin@gmail.com> date -04-18t06:06:39z camel set credential ssh connection header camel -ssh allow use message header username /password key camel url project camel issue type improvement component camel -ssh reporter claus ibsen assignee onder sezgin priority minor fix future see nabble org .apache.camel.component.ssh.sshhelper#sendexeccommand allow exchange provide username /password used dynamic reuse ssh endpoint different logins using tod drawback creating new endpoint per username message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064259.1492327880000.303269.1492500162438%40Atlassian.JIRA%3E,2017-04-18 07:22:42,issues,540.0,[jira] [commented] (camel-11152) camel -ssh allow use message header username /password
56,62,62,119.0,368.0,acosent...@apache.org,"repository camel updated branch ref /heads/master b3f0c7407 4f01b7861 camel naming fix impl project commit tree diff branch ref /heads/master commit 4f01b7861e3cced634926dc4baa3377c9fa32a47 parent b3f0c74 author onders86 <ondersezgin@gmail.com> authored tue apr committer andrea cosentino <ancosen@gmail.com> committed tue apr .../camel-ssh/src/main/docs/ssh-component.adoc .../camel/component/ssh/sshconstants.java .../apache/camel/component/ssh/sshconsumer.java .../apache/camel/component/ssh/sshhelper.java .../apache/camel/component/ssh/sshproducer.java .../component/ssh/sshcomponentproducertest.java file changed insertion deletion diff --git /components/camel-ssh/src/main/docs/ssh-component.adoc b /components/camel-ssh/src/main/docs/ssh-component.adoc index 3db3d0e ..d38b469 /components/camel-ssh/src/main/docs/ssh-component.adoc b /components/camel-ssh/src/main/docs/ssh-component.adoc use authentication `keypairprovider` set use certificate based authentication neither `certresource` `keypairprovider` set use -the `username` `password` option authentication +the `username` `password` option authentication even though `username` +and `password` provided endpoint configuration header set +`sshconstants.username_header` (`camelsshusername`) +`sshconstants.password_header` (`camelsshpassword`), endpoint +configuration surpassed credential set header used following route fragment show ssh polling consumer using certificate classpath diff --git /components/camel-ssh/src/main/java/org/apache/camel/component/ssh/sshconstants.java b /components/camel-ssh/src/main/java/org/apache/camel/component/ssh/sshconstants.java new file mode index ..f3f2527 /dev/null b /components/camel-ssh/src/main/java/org/apache/camel/component/ssh/sshconstants.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.component.ssh; +public interface sshconstants string username_header ""camelsshusername""; string password_header ""camelsshpassword""; diff --git /components/camel-ssh/src/main/java/org/apache/camel/component/ssh/sshconsumer.java b /components/camel-ssh/src/main/java/org/apache/camel/component/ssh/sshconsumer.java index da12bd2 ..3e07bb9 /components/camel-ssh/src/main/java/org/apache/camel/component/ssh/sshconsumer.java b /components/camel-ssh/src/main/java/org/apache/camel/component/ssh/sshconsumer.java public class sshconsumer extends scheduledpollconsumer string command endpoint .getpollcommand(); sshresult result sshhelper .sendexeccommand(command, endpoint client exchange exchange endpoint .createexchange(); sshresult result sshhelper .sendexeccommand(exchange.getin().getheaders(), command endpoint client exchange .getin().setbody(result.getstdout()); exchange .getin().setheader(sshresult.exit_value, result .getexitvalue()); exchange .getin().setheader(sshresult.stderr, result .getstderr()); diff --git /components/camel-ssh/src/main/java/org/apache/camel/component/ssh/sshhelper.java b /components/camel-ssh/src/main/java/org/apache/camel/component/ssh/sshhelper.java index 6c9ea02 ..972bb8a /components/camel-ssh/src/main/java/org/apache/camel/component/ssh/sshhelper.java b /components/camel-ssh/src/main/java/org/apache/camel/component/ssh/sshhelper.java package org .apache.camel.component.ssh; import java .io.bytearrayinputstream; import java .io.bytearrayoutputstream; import java .security.keypair; +import java .util.map; import org .apache.camel.runtimecamelexception; import org .apache.sshd.clientchannel; public final class sshhelper private sshhelper public static sshresult sendexeccommand (string command sshendpoint endpoint sshclient client throw exception public static sshresult sendexeccommand (map<string, object header string command sshendpoint endpoint sshclient client throw exception sshresult result null sshconfiguration configuration endpoint .getconfiguration(); public final class sshhelper keypair pair keypairprovider .loadkey(configuration.getkeytype()); authresult session .authpublickey(configuration.getusername(), pair else log .debug(""attempting authenticate username using password configuration .getusername()); authresult session .authpassword(configuration.getusername(), configuration .getpassword()); string username configuration .getusername(); string password configuration .getpassword(); object usernameheaderobj header .get(sshconstants.username_header); (usernameheaderobj null usernameheaderobj instanceof string username (string) header .get(sshconstants.username_header); object passwordheaderobj header .get(sshconstants.password_header); (passwordheaderobj null passwordheaderobj instanceof string password (string) header .get(sshconstants.password_header); log .debug(""attempting authenticate username using password username authresult session .authpassword(username, password authresult .await(configuration.gettimeout()); diff --git /components/camel-ssh/src/main/java/org/apache/camel/component/ssh/sshproducer.java b /components/camel-ssh/src/main/java/org/apache/camel/component/ssh/sshproducer.java index 7c4b663 ..9a731cf /components/camel-ssh/src/main/java/org/apache/camel/component/ssh/sshproducer.java b /components/camel-ssh/src/main/java/org/apache/camel/component/ssh/sshproducer.java package org .apache.camel.component.ssh; +import java .util.map; import org .apache.camel.camelexchangeexception; import org .apache.camel.exchange; import org .apache.camel.message; public class sshproducer extends defaultproducer public void process (exchange exchange throw exception final message exchange .getin(); string command .getmandatorybody(string.class); final map <string, object header exchange .getin().getheaders(); try sshresult result sshhelper .sendexeccommand(command, endpoint client sshresult result sshhelper .sendexeccommand(headers, command endpoint client exchange .getout().setbody(result.getstdout()); exchange .getout().setheader(sshresult.exit_value, result .getexitvalue()); exchange .getout().setheader(sshresult.stderr, result .getstderr()); diff --git /components/camel-ssh/src/test/java/org/apache/camel/component/ssh/sshcomponentproducertest.java b /components/camel-ssh/src/test/java/org/apache/camel/component/ssh/sshcomponentproducertest.java index c34f565 ..b781e33 /components/camel-ssh/src/test/java/org/apache/camel/component/ssh/sshcomponentproducertest.java b /components/camel-ssh/src/test/java/org/apache/camel/component/ssh/sshcomponentproducertest.java package org .apache.camel.component.ssh; +import java .util.hashmap; +import java .util.map; import org .apache.camel.builder.routebuilder; import org .apache.camel.component.mock.mockendpoint; public class sshcomponentproducertest extends sshcomponenttestsupport assertmockendpointssatisfied @test public void testcredentialsasheaders throw exception final string msg ""test\n""; mockendpoint mock getmockendpoint (""mock:password""); mock .expectedminimummessagecount(1); mock .expectedbodiesreceived(msg); mock .expectedheaderreceived(sshresult.exit_value, mock .expectedheaderreceived(sshresult.stderr, ""error:test\n""); map <string, object header new hashmap <string, object header .put(sshconstants.username_header, ""smx""); header .put(sshconstants.password_header, ""smx""); template .sendbodyandheaders(""direct:sshcredentialswithheaders"", msg header assertmockendpointssatisfied @override protected routebuilder createroutebuilder throw exception public class sshcomponentproducertest extends sshcomponenttestsupport (""direct:ssh"") .to(""ssh://smx:smx@localhost:"" port ""?timeout=3000"") .to(""mock:password""); (""direct:sshcredentialswithheaders"") .to(""ssh://localhost:"" port ""?timeout=3000"") .to(""mock:password"");",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cfa7ce0ca871b470d8708d03086386d92%40git.apache.org%3E,2017-04-18 11:21:42,commits,368.0,camel git commit camel naming fix impl
57,63,63,120.0,537.0,Andrea Cosentino (JIRA),andrea cosentino updated camel fix version /s: (was: future camel -ssh allow use message header username /password key camel url project camel issue type improvement component camel -ssh reporter claus ibsen assignee onder sezgin priority minor fix see nabble org .apache.camel.component.ssh.sshhelper#sendexeccommand allow exchange provide username /password used dynamic reuse ssh endpoint different logins using tod drawback creating new endpoint per username message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064259.1492327880000.304954.1492514561681%40Atlassian.JIRA%3E,2017-04-18 11:22:41,issues,541.0,[jira] [updated] (camel-11152) camel -ssh allow use message header username /password
58,64,64,121.0,538.0,Andrea Cosentino (JIRA),andrea cosentino resolved camel resolution fixed camel -ssh allow use message header username /password key camel url project camel issue type improvement component camel -ssh reporter claus ibsen assignee onder sezgin priority minor fix see nabble org .apache.camel.component.ssh.sshhelper#sendexeccommand allow exchange provide username /password used dynamic reuse ssh endpoint different logins using tod drawback creating new endpoint per username message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064259.1492327880000.304958.1492514621638%40Atlassian.JIRA%3E,2017-04-18 11:23:41,issues,542.0,[jira] [resolved] (camel-11152) camel -ssh allow use message header username /password
59,65,65,122.0,205.0,onders86,github user onders86 closed pull request project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170418112447.E9CAADFBDA%40git1-us-west.apache.org%3E,2017-04-18 11:24:47,mail,205.0,[github] camel pull request camel set credential ssh connection
60,68,68,52.0,183.0,Priyanka Gopinath,"special usecase want change threadpool size thread pool key based upon endpoint getting called value available configuration exchange eg endpoint threadpool threadpool key (a) endpoint b threadpool threadpool key (z) endpoint c threadpool threadpool key (a) however hystrix route params hystrix eip string aven 't able figure way evaluate (""direct:something"") .hystrix() .threadpoolkey(hystrix.???? inject value .end() .to(""direct:http-endpoint""); also tried creating hystrixthreadpooldefinition tried setting .hystrix().hystrixconfiguration(configuration). come back question pas configuration method call return valuebuilders could cast string /configdefinitions. please suggest correct way",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAOFZOdXeJgWtpDdNrU%2BX0-w3kt-GQOXAOdY-5q8MQ3A47jNJkA%40mail.gmail.com%3E,2017-04-16 22:46:11,users,184.0,dynamically inject hystrix property
61,69,69,111.0,184.0,Claus Ibsen,"maybe create different route hystrix using b c key call appropiate route mon apr priyanka gopinath <priyanka@karnam.net> wrote special usecase want change threadpool size thread pool key based upon endpoint getting called value available configuration exchange eg endpoint threadpool threadpool key (a) endpoint b threadpool threadpool key (z) endpoint c threadpool threadpool key (a) however hystrix route params hystrix eip string aven 't able figure way evaluate (""direct:something"") .hystrix() .threadpoolkey(hystrix.???? inject value .end() .to(""direct:http-endpoint""); also tried creating hystrixthreadpooldefinition tried setting .hystrix().hystrixconfiguration(configuration). come back question pas configuration method call return valuebuilders could cast string /configdefinitions. please suggest correct way claus ibsen @davsclaus camel action",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yNnAjdPk%2BhtrYF3zGJqVy9NqT%2BZcZBEhfMm6mG3uhZGMdQ%40mail.gmail.com%3E,2017-04-18 10:44:12,users,185.0,dynamically inject hystrix property
62,70,70,160.0,185.0,Priyanka Gopinath,"thank response able inject value dynamically creating new hystrix route per endpoint tue apr claus ibsen <claus.ibsen@gmail.com> wrote maybe create different route hystrix using b c key call appropiate route mon apr priyanka gopinath <priyanka@karnam.net> wrote special usecase want change threadpool size thread pool key based upon endpoint getting called value available configuration exchange eg endpoint threadpool threadpool key (a) endpoint b threadpool threadpool key (z) endpoint c threadpool threadpool key (a) however hystrix route params hystrix eip string aven 't able figure way evaluate (""direct:something"") .hystrix() .threadpoolkey(hystrix.???? inject value .end() .to(""direct:http-endpoint""); also tried creating hystrixthreadpooldefinition tried setting .hystrix().hystrixconfiguration(configuration). come back question pas configuration method call return valuebuilders could cast string /configdefinitions. please suggest correct way claus ibsen @davsclaus camel action",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAOFZOdX95ZDiMMqDtR5cKE6WPKWYXzsNbLmupJCKRMFwZvp3gg%40mail.gmail.com%3E,2017-04-19 03:40:13,users,186.0,dynamically inject hystrix property
63,71,71,53.0,186.0,chandangowda,">from one route iâ €™m reading zip file successful completion reading file ,camel able delete file .e. moving file inside .camel outside .camel throughing following exception .this issue happened first record record .please replay asap stack trace org .apache.camel.component.file.genericfileoperationfailedexception: cannot store file e :\xx\xx\xxxx\xxxxx-000001-xxxx.zip org .apache.camel.component.file.fileoperations.storefile(fileoperations.java:269) org .apache.camel.component.file.genericfileproducer.writefile(genericfileproducer.java:278) org .apache.camel.component.file.genericfileproducer.processexchange(genericfileproducer.java:166) org .apache.camel.component.file.genericfileproducer.process(genericfileproducer.java:80) org .apache.camel.util.asyncprocessorconverterhelper$processortoasyncprocessorbridge.process(asyncprocessorconverterhelper.java:61) org .apache.camel.processor.sendprocessor.process(sendprocessor.java:110) org .apache.camel.management.instrumentationprocessor.process(instrumentationprocessor.java:72) org .apache.camel.processor.redeliveryerrorhandler.process(redeliveryerrorhandler.java:398) org .apache.camel.processor.camelinternalprocessor.process(camelinternalprocessor.java:191) org .apache.camel.processor.camelinternalprocessor.process(camelinternalprocessor.java:191) org .apache.camel.component.file.genericfileconsumer.processexchange(genericfileconsumer.java:401) org .apache.camel.component.file.genericfileconsumer.processbatch(genericfileconsumer.java:201) org .apache.camel.component.file.genericfileconsumer.poll(genericfileconsumer.java:165) org .apache.camel.impl.scheduledpollconsumer.dorun(scheduledpollconsumer.java:187) org .apache.camel.impl.scheduledpollconsumer.run(scheduledpollconsumer.java:114) java .util.concurrent.executors$runnableadapter.call(executors.java:471) java .util.concurrent.futuretask.runandreset(futuretask.java:304) java .util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.access$301(scheduledthreadpoolexecutor.java:178) java .util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.run(scheduledthreadpoolexecutor.java:293) java .util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145) java .util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615) java .lang.thread.run(thread.java:745) caused java .io.filenotfoundexception: e :\xxx\xxxx\xx\xxxx-000001-xxx.zip (access denied java .io.fileoutputstream.open(native method java .io.fileoutputstream.<init>(fileoutputstream.java:221) java .io.fileoutputstream.<init>(fileoutputstream.java:171) org .apache.camel.component.file.fileoperations.prepareoutputfilechannel(fileoperations.java:430) org .apache.camel.component.file.fileoperations.writefilebyfile(fileoperations.java:353) org .apache.camel.component.file.fileoperations.storefile(fileoperations.java:242) view message context sent camel user mailing list archive nabble .com.",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492423716313-5797768.post%40n5.nabble.com%3E,2017-04-17 10:08:36,users,187.0,camel able delete file outside .camel
64,72,72,82.0,187.0,"Siano, Stephan","hi caused java .io.filenotfoundexception: e :\xxx\xxxx\xx\xxxx-000001-xxx.zip (access denied look process running camel route access directory containing file (it would need execution right directory best regard stephan -----original message chandangowda [mailto:cgowda299@gmail.com] sent montag april user @camel.apache.org subject camel able delete file outside .camel one route iâ €™m reading zip file successful completion reading file ,camel able delete file .e. moving file inside .camel outside .camel throughing following exception .this issue happened first record record .please replay asap stack trace org .apache.camel.component.file.genericfileoperationfailedexception: cannot store file e :\xx\xx\xxxx\xxxxx-000001-xxxx.zip org .apache.camel.component.file.fileoperations.storefile(fileoperations.java:269) org .apache.camel.component.file.genericfileproducer.writefile(genericfileproducer.java:278) org .apache.camel.component.file.genericfileproducer.processexchange(genericfileproducer.java:166) org .apache.camel.component.file.genericfileproducer.process(genericfileproducer.java:80) org .apache.camel.util.asyncprocessorconverterhelper$processortoasyncprocessorbridge.process(asyncprocessorconverterhelper.java:61) org .apache.camel.processor.sendprocessor.process(sendprocessor.java:110) org .apache.camel.management.instrumentationprocessor.process(instrumentationprocessor.java:72) org .apache.camel.processor.redeliveryerrorhandler.process(redeliveryerrorhandler.java:398) org .apache.camel.processor.camelinternalprocessor.process(camelinternalprocessor.java:191) org .apache.camel.processor.camelinternalprocessor.process(camelinternalprocessor.java:191) org .apache.camel.component.file.genericfileconsumer.processexchange(genericfileconsumer.java:401) org .apache.camel.component.file.genericfileconsumer.processbatch(genericfileconsumer.java:201) org .apache.camel.component.file.genericfileconsumer.poll(genericfileconsumer.java:165) org .apache.camel.impl.scheduledpollconsumer.dorun(scheduledpollconsumer.java:187) org .apache.camel.impl.scheduledpollconsumer.run(scheduledpollconsumer.java:114) java .util.concurrent.executors$runnableadapter.call(executors.java:471) java .util.concurrent.futuretask.runandreset(futuretask.java:304) java .util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.access$301(scheduledthreadpoolexecutor.java:178) java .util.concurrent.scheduledthreadpoolexecutor$scheduledfuturetask.run(scheduledthreadpoolexecutor.java:293) java .util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145) java .util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615) java .lang.thread.run(thread.java:745) caused java .io.filenotfoundexception: e :\xxx\xxxx\xx\xxxx-000001-xxx.zip (access denied java .io.fileoutputstream.open(native method java .io.fileoutputstream.<init>(fileoutputstream.java:221) java .io.fileoutputstream.<init>(fileoutputstream.java:171) org .apache.camel.component.file.fileoperations.prepareoutputfilechannel(fileoperations.java:430) org .apache.camel.component.file.fileoperations.writefilebyfile(fileoperations.java:353) org .apache.camel.component.file.fileoperations.storefile(fileoperations.java:242) view message context sent camel user mailing list archive nabble .com.",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C06958692acac4954991dfa4ddee55a45%40sap.com%3E,2017-04-18 07:25:40,users,188.0,camel able delete file outside .camel
65,73,73,55.0,188.0,Karthick K R,"quite new apache camel using month really feel great integration framework make solving various enterprise problem effectively minimal effort coming issue working splitting huge csv using splitter tokenize grouping n line approach ran encoding issue grouped content similar issue raised stackoverflow camel utf encoding lost using group also commented issue usecase observation made including text sample csv file (with delimiter candidatenumber |candidatelastname|candidatefirstname|educationlevel cand123c001 |wells|jimmy|bachelor's degree year cand123c002 |wells|tom|bachelor's degree year cand123c003 |wells|james|bachelor's degree year cand123c004 |wells|tim|bachelor's degree year character corrupted tokenize grouping initially assumption problem setting proper file encoding split exchange seems right value property camelcharsetname =iso-8859-1. (""file://<dir csv file >?noop=true&charset=iso-8859-1"") .split(body().tokenize(""\n"",2,true)).streaming() .log(""body: ${body}""); work fine dont use grouping (""file://<dir csv file >?noop=true&charset=iso-8859-1"") .split(body().tokenize(""\n"")).streaming() .log(""body: ${body}""); looking grouptokeniterator camel code base problem seems way typeconverter used convert string inputstream convert input stream inputstream camelcontext .gettypeconverter().mandatoryconvertto(inputstream.class, data note mandatoryconvertto overloaded method exchange <t> mandatoryconvertto (class<t> type exchange exchange object value exchange passed argument always fall back default charset set using system property ""org.apache.camel.default.charset"" potential fix convert input stream inputstream camelcontext .gettypeconverter().mandatoryconvertto(inputstream.class, exchange data fix camel -core, another potential option use split without grouping use agrregatestrategy completionsize completiontimeout although would great get fixed camel -core. kindly let know thought whether handled different way view message context sent camel user mailing list archive nabble .com.",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492444573134-5797769.post%40n5.nabble.com%3E,2017-04-17 15:56:13,users,189.0,file encoding fall back default encoding grouping split using tokenize
66,74,74,56.0,159.0,andcrow,"still battle case hehehehe viewing documentation found component sql component option maxmessagesperpoll camel sql consumer integer value define maximum number message gather per poll default maximum set also component ignores option (""timer://query?fixedrate=true&delay=5s&period=10800s"") .routeid(""route-product"") .setbody(constant(new productquery ().getproductselect())) (""sql:"" new productquery ().getproductselect() ""?maxmessagesperpoll=1000&datasource=mydatasource"") .marshal() .json(jsonlibrary.gson) .setheader(exchange.content_type, constant (""application/json"")) .setheader(""camelfilename"", simple (""${id}.json"")) .to(""file:product""); view message context sent camel user mailing list archive nabble .com.",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492447513299-5797770.post%40n5.nabble.com%3E,2017-04-17 16:45:13,users,160.0,using split json file
67,75,75,57.0,160.0,souciance,"'t split resultset database split produce json send batch web service mon apr pm andcrow [via camel ml -node+s465427n5797770h33@n5.nabble.com> wrote still battle case hehehehe viewing documentation found component sql component option maxmessagesperpoll camel sql consumer integer value define maximum number message gather per poll default maximum set also component ignores option (""timer://query?fixedrate=true&delay=5s&period=10800s"") .routeid(""route-product"") .setbody(constant(new productquery ().getproductselect())) (""sql:"" new productquery ().getproductselect() ""?maxmessagesperpoll=1000&datasource=mydatasource"") .marshal() .json(jsonlibrary.gson) .setheader(exchange.content_type, constant (""application/json"")) .setheader(""camelfilename"", simple (""${id}.json"")) .to(""file:product""); reply email message added discussion file -tp5797508p5797770.html start new topic camel user email ml -node+s465427n465428h31@n5.nabble.com unsubscribe camel user click naml view message context sent camel user mailing list archive nabble .com.",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCA%2Bwbgs1zLBw0E657fkB3o%3DgHHVPmxSu9ozauK0nbPg%3DBG4t89A%40mail.gmail.com%3E,2017-04-17 17:40:41,users,161.0,using split json file
68,76,76,58.0,161.0,andcrow,work using maxmessagesperpoll group every record creates json file record view message context sent camel user mailing list archive nabble .com.,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492451365998-5797772.post%40n5.nabble.com%3E,2017-04-17 17:49:25,users,162.0,using split json file
69,77,77,59.0,162.0,souciance,would suggest get whole resultset save data queue even file parse stream every x number row split mon apr pm andcrow [via camel ml -node+s465427n5797772h95@n5.nabble.com> wrote work using maxmessagesperpoll group every record creates json file record reply email message added discussion file -tp5797508p5797772.html start new topic camel user email ml -node+s465427n465428h31@n5.nabble.com unsubscribe camel user click naml view message context sent camel user mailing list archive nabble .com.,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCA%2Bwbgs2xS%3DLT%2BAy9dzbV%2BqRd76WTPbtZ049x6CNUCX05e5G8aA%40mail.gmail.com%3E,2017-04-17 18:21:25,users,163.0,using split json file
70,78,78,60.0,163.0,andcrow,'ll try view message context sent camel user mailing list archive nabble .com.,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492453944657-5797774.post%40n5.nabble.com%3E,2017-04-17 18:32:24,users,164.0,using split json file
71,79,79,61.0,541.0,Tadayoshi Sato (JIRA),tadayoshi sato created camel summary camel -protobuf itest start fail key camel url project camel issue type bug reporter tadayoshi sato fix {{camel-itest-karaf}} seems failing {{camelprotobuftest}} valid reason (i mean flaky remember worked fine locally day ago even fails locally test {code}$ mvn test -dtest=camelprotobuftest{code} {{camel-itest-karaf}}. probably recent dependency upgrade cause issue message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064549.1492479333000.301583.1492479342576%40Atlassian.JIRA%3E,2017-04-18 01:35:42,issues,545.0,[jira] [created] (camel-11153) camel -protobuf itest start fail
72,80,80,62.0,542.0,Tadayoshi Sato (JIRA),tadayoshi sato updated camel affect version /s: camel -protobuf itest start fail key camel url project camel issue type bug affect version reporter tadayoshi sato fix {{camel-itest-karaf}} seems failing {{camelprotobuftest}} valid reason (i mean flaky remember worked fine locally day ago even fails locally test {code}$ mvn test -dtest=camelprotobuftest{code} {{camel-itest-karaf}}. probably recent dependency upgrade cause issue message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064549.1492479333000.301586.1492479401545%40Atlassian.JIRA%3E,2017-04-18 01:36:41,issues,546.0,[jira] [updated] (camel-11153) camel -protobuf itest start fail
73,85,85,65.0,545.0,Tadayoshi Sato (JIRA),tadayoshi sato updated camel description {{camel-itest-karaf}} seems failing {{camelprotobuftest}} valid reason (i mean flaky {code} test run failure error skipped time elapsed sec failure org .apache.camel.itest.karaf.camelprotobuftest test (org.apache.camel.itest.karaf.camelprotobuftest) time elapsed sec error org .apache.karaf.features.internal.util.multiexception: error org .apache.karaf.features.internal.download.impl.mavendownloadmanager$mavendownloader.<init>(mavendownloadmanager.java:84) org .apache.karaf.features.internal.download.impl.mavendownloadmanager.createdownloader(mavendownloadmanager.java:72) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:375) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:372) org .apache.karaf.features.internal.region.subsystemresolver.resolve(subsystemresolver.java:187) org .apache.karaf.features.internal.service.deployer.deploy(deployer.java:285) org .apache.karaf.features.internal.service.featuresserviceimpl.doprovision(featuresserviceimpl.java:1170) org .apache.karaf.features.internal.service.featuresserviceimpl.lambda$doprovisioninthread$0(featuresserviceimpl.java:1069) java .util.concurrent.futuretask.run(futuretask.java:266) java .util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1142) java .util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:617) java .lang.thread.run(thread.java:745) result test error camelprotobuftest .test multi error test run failure error skipped [info] [info] build failure [info] [info] total time min [info] finished -04-18t10:26:57+09:00 [info] final memory 41m /2875m [info] {code} remember worked fine locally day ago even fails locally test {code}$ mvn test -dtest=camelprotobuftest{code} {{camel-itest-karaf}}. probably recent dependency upgrade cause issue {{camel-itest-karaf}} seems failing {{camelprotobuftest}} valid reason (i mean flaky remember worked fine locally day ago even fails locally test {code}$ mvn test -dtest=camelprotobuftest{code} {{camel-itest-karaf}}. probably recent dependency upgrade cause issue camel -protobuf itest start fail key camel url project camel issue type bug component test affect version reporter tadayoshi sato label protobuf fix {{camel-itest-karaf}} seems failing {{camelprotobuftest}} valid reason (i mean flaky {code} test run failure error skipped time elapsed sec failure org .apache.camel.itest.karaf.camelprotobuftest test (org.apache.camel.itest.karaf.camelprotobuftest) time elapsed sec error org .apache.karaf.features.internal.util.multiexception: error org .apache.karaf.features.internal.download.impl.mavendownloadmanager$mavendownloader.<init>(mavendownloadmanager.java:84) org .apache.karaf.features.internal.download.impl.mavendownloadmanager.createdownloader(mavendownloadmanager.java:72) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:375) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:372) org .apache.karaf.features.internal.region.subsystemresolver.resolve(subsystemresolver.java:187) org .apache.karaf.features.internal.service.deployer.deploy(deployer.java:285) org .apache.karaf.features.internal.service.featuresserviceimpl.doprovision(featuresserviceimpl.java:1170) org .apache.karaf.features.internal.service.featuresserviceimpl.lambda$doprovisioninthread$0(featuresserviceimpl.java:1069) java .util.concurrent.futuretask.run(futuretask.java:266) java .util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1142) java .util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:617) java .lang.thread.run(thread.java:745) result test error camelprotobuftest .test multi error test run failure error skipped [info] [info] build failure [info] [info] total time min [info] finished -04-18t10:26:57+09:00 [info] final memory 41m /2875m [info] {code} remember worked fine locally day ago even fails locally test {code}$ mvn test -dtest=camelprotobuftest{code} {{camel-itest-karaf}}. probably recent dependency upgrade cause issue message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064549.1492479333000.301680.1492480361700%40Atlassian.JIRA%3E,2017-04-18 01:52:41,issues,549.0,[jira] [updated] (camel-11153) camel -protobuf itest start fail
74,86,86,66.0,546.0,Tadayoshi Sato (JIRA),tadayoshi sato updated camel description {{camel-itest-karaf}} seems failing {{camelprotobuftest}} valid reason (i mean flaky {code} test run failure error skipped time elapsed sec failure org .apache.camel.itest.karaf.camelprotobuftest test (org.apache.camel.itest.karaf.camelprotobuftest) time elapsed sec error org .apache.karaf.features.internal.util.multiexception: error org .apache.karaf.features.internal.download.impl.mavendownloadmanager$mavendownloader.<init>(mavendownloadmanager.java:84) org .apache.karaf.features.internal.download.impl.mavendownloadmanager.createdownloader(mavendownloadmanager.java:72) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:375) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:372) org .apache.karaf.features.internal.region.subsystemresolver.resolve(subsystemresolver.java:187) org .apache.karaf.features.internal.service.deployer.deploy(deployer.java:285) org .apache.karaf.features.internal.service.featuresserviceimpl.doprovision(featuresserviceimpl.java:1170) org .apache.karaf.features.internal.service.featuresserviceimpl.lambda$doprovisioninthread$0(featuresserviceimpl.java:1069) java .util.concurrent.futuretask.run(futuretask.java:266) java .util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1142) java .util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:617) java .lang.thread.run(thread.java:745) result test error camelprotobuftest .test multi error test run failure error skipped [info] [info] build failure [info] [info] total time min [info] finished -04-18t10:26:57+09:00 [info] final memory 41m /2875m [info] {code} remember worked fine locally day ago even fails locally test {code}$ mvn test -dtest=camelprotobuftest{code} {{camel-itest-karaf}}. probably recent dependency upgrade cause issue {{camel-itest-karaf}} seems failing {{camelprotobuftest}} valid reason (i mean flaky {code} test run failure error skipped time elapsed sec failure org .apache.camel.itest.karaf.camelprotobuftest test (org.apache.camel.itest.karaf.camelprotobuftest) time elapsed sec error org .apache.karaf.features.internal.util.multiexception: error org .apache.karaf.features.internal.download.impl.mavendownloadmanager$mavendownloader.<init>(mavendownloadmanager.java:84) org .apache.karaf.features.internal.download.impl.mavendownloadmanager.createdownloader(mavendownloadmanager.java:72) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:375) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:372) org .apache.karaf.features.internal.region.subsystemresolver.resolve(subsystemresolver.java:187) org .apache.karaf.features.internal.service.deployer.deploy(deployer.java:285) org .apache.karaf.features.internal.service.featuresserviceimpl.doprovision(featuresserviceimpl.java:1170) org .apache.karaf.features.internal.service.featuresserviceimpl.lambda$doprovisioninthread$0(featuresserviceimpl.java:1069) java .util.concurrent.futuretask.run(futuretask.java:266) java .util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1142) java .util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:617) java .lang.thread.run(thread.java:745) result test error camelprotobuftest .test multi error test run failure error skipped [info] [info] build failure [info] [info] total time min [info] finished -04-18t10:26:57+09:00 [info] final memory 41m /2875m [info] {code} remember worked fine locally day ago even fails locally test {code}$ mvn test -dtest=camelprotobuftest{code} {{camel-itest-karaf}}. probably recent dependency upgrade cause issue camel -protobuf itest start fail key camel url project camel issue type bug component test affect version reporter tadayoshi sato label protobuf fix {{camel-itest-karaf}} seems failing {{camelprotobuftest}} valid reason (i mean flaky {code} test run failure error skipped time elapsed sec failure org .apache.camel.itest.karaf.camelprotobuftest test (org.apache.camel.itest.karaf.camelprotobuftest) time elapsed sec error org .apache.karaf.features.internal.util.multiexception: error org .apache.karaf.features.internal.download.impl.mavendownloadmanager$mavendownloader.<init>(mavendownloadmanager.java:84) org .apache.karaf.features.internal.download.impl.mavendownloadmanager.createdownloader(mavendownloadmanager.java:72) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:375) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:372) org .apache.karaf.features.internal.region.subsystemresolver.resolve(subsystemresolver.java:187) org .apache.karaf.features.internal.service.deployer.deploy(deployer.java:285) org .apache.karaf.features.internal.service.featuresserviceimpl.doprovision(featuresserviceimpl.java:1170) org .apache.karaf.features.internal.service.featuresserviceimpl.lambda$doprovisioninthread$0(featuresserviceimpl.java:1069) java .util.concurrent.futuretask.run(futuretask.java:266) java .util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1142) java .util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:617) java .lang.thread.run(thread.java:745) result test error camelprotobuftest .test multi error test run failure error skipped [info] [info] build failure [info] [info] total time min [info] finished -04-18t10:26:57+09:00 [info] final memory 41m /2875m [info] {code} remember worked fine locally day ago even fails locally test {code}$ mvn test -dtest=camelprotobuftest{code} {{camel-itest-karaf}}. probably recent dependency upgrade cause issue message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064549.1492479333000.301682.1492480421582%40Atlassian.JIRA%3E,2017-04-18 01:53:41,issues,550.0,[jira] [updated] (camel-11153) camel -protobuf itest start fail
75,87,87,67.0,547.0,Tadayoshi Sato (JIRA),tadayoshi sato reassigned camel assignee tadayoshi sato camel -protobuf itest start fail key camel url project camel issue type bug component test affect version reporter tadayoshi sato assignee tadayoshi sato label protobuf fix {{camel-itest-karaf}} seems failing {{camelprotobuftest}} valid reason (i mean flaky {code} test run failure error skipped time elapsed sec failure org .apache.camel.itest.karaf.camelprotobuftest test (org.apache.camel.itest.karaf.camelprotobuftest) time elapsed sec error org .apache.karaf.features.internal.util.multiexception: error org .apache.karaf.features.internal.download.impl.mavendownloadmanager$mavendownloader.<init>(mavendownloadmanager.java:84) org .apache.karaf.features.internal.download.impl.mavendownloadmanager.createdownloader(mavendownloadmanager.java:72) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:375) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:372) org .apache.karaf.features.internal.region.subsystemresolver.resolve(subsystemresolver.java:187) org .apache.karaf.features.internal.service.deployer.deploy(deployer.java:285) org .apache.karaf.features.internal.service.featuresserviceimpl.doprovision(featuresserviceimpl.java:1170) org .apache.karaf.features.internal.service.featuresserviceimpl.lambda$doprovisioninthread$0(featuresserviceimpl.java:1069) java .util.concurrent.futuretask.run(futuretask.java:266) java .util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1142) java .util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:617) java .lang.thread.run(thread.java:745) result test error camelprotobuftest .test â multi error test run failure error skipped [info] [info] build failure [info] [info] total time min [info] finished -04-18t10:26:57+09:00 [info] final memory 41m /2875m [info] {code} remember worked fine locally day ago even fails locally test {code}$ mvn test -dtest=camelprotobuftest{code} {{camel-itest-karaf}}. probably recent dependency upgrade cause issue message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064549.1492479333000.301847.1492482162385%40Atlassian.JIRA%3E,2017-04-18 02:22:42,issues,551.0,[jira] [assigned] (camel-11153) camel -protobuf itest start fail
76,88,88,68.0,548.0,Tadayoshi Sato (JIRA),tadayoshi sato commented camel oops bad missed one dependency {{protobuf-guava-version}} fix camel send pull req soon camel -protobuf itest start fail key camel url project camel issue type bug component test affect version reporter tadayoshi sato assignee tadayoshi sato label protobuf fix {{camel-itest-karaf}} seems failing {{camelprotobuftest}} valid reason (i mean flaky {code} test run failure error skipped time elapsed sec failure org .apache.camel.itest.karaf.camelprotobuftest test (org.apache.camel.itest.karaf.camelprotobuftest) time elapsed sec error org .apache.karaf.features.internal.util.multiexception: error org .apache.karaf.features.internal.download.impl.mavendownloadmanager$mavendownloader.<init>(mavendownloadmanager.java:84) org .apache.karaf.features.internal.download.impl.mavendownloadmanager.createdownloader(mavendownloadmanager.java:72) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:375) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:372) org .apache.karaf.features.internal.region.subsystemresolver.resolve(subsystemresolver.java:187) org .apache.karaf.features.internal.service.deployer.deploy(deployer.java:285) org .apache.karaf.features.internal.service.featuresserviceimpl.doprovision(featuresserviceimpl.java:1170) org .apache.karaf.features.internal.service.featuresserviceimpl.lambda$doprovisioninthread$0(featuresserviceimpl.java:1069) java .util.concurrent.futuretask.run(futuretask.java:266) java .util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1142) java .util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:617) java .lang.thread.run(thread.java:745) result test error camelprotobuftest .test â multi error test run failure error skipped [info] [info] build failure [info] [info] total time min [info] finished -04-18t10:26:57+09:00 [info] final memory 41m /2875m [info] {code} remember worked fine locally day ago even fails locally test {code}$ mvn test -dtest=camelprotobuftest{code} {{camel-itest-karaf}}. probably recent dependency upgrade cause issue message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064549.1492479333000.301861.1492482341760%40Atlassian.JIRA%3E,2017-04-18 02:25:41,issues,552.0,[jira] [commented] (camel-11153) camel -protobuf itest start fail
77,89,89,69.0,202.0,tadayosi,github user tadayosi opened pull request camel add missing protobuf -guava-version declaration camel -protobuf karaf feature merge pull request git repository running git pull camel alternatively review apply change patch close pull request make commit master /trunk branch (at least following commit message close commit ecee62a8147c77c757d796d6301e8f9c1fb59308 author tadayoshi sato <sato.tadayoshi@gmail.com> date -04-18t02:25:56z camel add missing protobuf -guava-version declaration camel -protobuf karaf feature project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3Cgit-pr-1634-camel%40git.apache.org%3E,2017-04-18 02:28:26,mail,202.0,[github] camel pull request camel add missing protobuf -guava-version de
78,90,90,70.0,549.0,ASF GitHub Bot (JIRA),asf github bot commented camel github user tadayosi opened pull request camel add missing protobuf -guava-version declaration camel -protobuf karaf feature merge pull request git repository running git pull camel alternatively review apply change patch close pull request make commit master /trunk branch (at least following commit message close commit ecee62a8147c77c757d796d6301e8f9c1fb59308 author tadayoshi sato <sato.tadayoshi@gmail.com> date -04-18t02:25:56z camel add missing protobuf -guava-version declaration camel -protobuf karaf feature camel -protobuf itest start fail key camel url project camel issue type bug component test affect version reporter tadayoshi sato assignee tadayoshi sato label protobuf fix {{camel-itest-karaf}} seems failing {{camelprotobuftest}} valid reason (i mean flaky {code} test run failure error skipped time elapsed sec failure org .apache.camel.itest.karaf.camelprotobuftest test (org.apache.camel.itest.karaf.camelprotobuftest) time elapsed sec error org .apache.karaf.features.internal.util.multiexception: error org .apache.karaf.features.internal.download.impl.mavendownloadmanager$mavendownloader.<init>(mavendownloadmanager.java:84) org .apache.karaf.features.internal.download.impl.mavendownloadmanager.createdownloader(mavendownloadmanager.java:72) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:375) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:372) org .apache.karaf.features.internal.region.subsystemresolver.resolve(subsystemresolver.java:187) org .apache.karaf.features.internal.service.deployer.deploy(deployer.java:285) org .apache.karaf.features.internal.service.featuresserviceimpl.doprovision(featuresserviceimpl.java:1170) org .apache.karaf.features.internal.service.featuresserviceimpl.lambda$doprovisioninthread$0(featuresserviceimpl.java:1069) java .util.concurrent.futuretask.run(futuretask.java:266) java .util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1142) java .util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:617) java .lang.thread.run(thread.java:745) result test error camelprotobuftest .test â multi error test run failure error skipped [info] [info] build failure [info] [info] total time min [info] finished -04-18t10:26:57+09:00 [info] final memory 41m /2875m [info] {code} remember worked fine locally day ago even fails locally test {code}$ mvn test -dtest=camelprotobuftest{code} {{camel-itest-karaf}}. probably recent dependency upgrade cause issue message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064549.1492479333000.301898.1492482522520%40Atlassian.JIRA%3E,2017-04-18 02:28:42,issues,553.0,[jira] [commented] (camel-11153) camel -protobuf itest start fail
79,91,91,73.0,355.0,davscl...@apache.org,repository camel updated branch ref /heads/master ec9ab4e0b ecee62a81 camel add missing protobuf -guava-version declaration camel -protobuf karaf feature project commit tree diff branch ref /heads/master commit ecee62a8147c77c757d796d6301e8f9c1fb59308 parent ec9ab4e author tadayoshi sato <sato.tadayoshi@gmail.com> authored tue apr committer tadayoshi sato <sato.tadayoshi@gmail.com> committed tue apr parent /pom.xml file changed insertion diff --git /parent/pom.xml b /parent/pom.xml index 09719b1 ..e09c123 /parent/pom.xml b /parent/pom.xml <pgjdbc-ng-driver-version>0.7.1</pgjdbc-ng-driver-version> <powermock-version>1.6.6</powermock-version> <protobuf-version>3.1.0</protobuf-version> <protobuf-guava-version>18.0</protobuf-guava-version> <pubnub-version>4.6.1</pubnub-version> <qpid-bundle-version>0.28_1</qpid-bundle-version> <qpid-proton-j-version>0.16.0</qpid-proton-j-version>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C4ef0cf1f83e44e90a9ab4a5befdc817b%40git.apache.org%3E,2017-04-18 06:46:50,commits,355.0,camel git commit camel add missing protobuf -guava-version declaration camel -protobuf karaf feature
80,92,92,74.0,203.0,asfgit,github user asfgit closed pull request project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170418064717.4D188E117B%40git1-us-west.apache.org%3E,2017-04-18 06:47:17,mail,203.0,[github] camel pull request camel add missing protobuf -guava-version de
81,93,93,75.0,550.0,ASF GitHub Bot (JIRA),asf github bot commented camel github user asfgit closed pull request camel -protobuf itest start fail key camel url project camel issue type bug component test affect version reporter tadayoshi sato assignee tadayoshi sato label protobuf fix {{camel-itest-karaf}} seems failing {{camelprotobuftest}} valid reason (i mean flaky {code} test run failure error skipped time elapsed sec failure org .apache.camel.itest.karaf.camelprotobuftest test (org.apache.camel.itest.karaf.camelprotobuftest) time elapsed sec error org .apache.karaf.features.internal.util.multiexception: error org .apache.karaf.features.internal.download.impl.mavendownloadmanager$mavendownloader.<init>(mavendownloadmanager.java:84) org .apache.karaf.features.internal.download.impl.mavendownloadmanager.createdownloader(mavendownloadmanager.java:72) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:375) org .apache.karaf.features.internal.region.subsystem.downloadbundles(subsystem.java:372) org .apache.karaf.features.internal.region.subsystemresolver.resolve(subsystemresolver.java:187) org .apache.karaf.features.internal.service.deployer.deploy(deployer.java:285) org .apache.karaf.features.internal.service.featuresserviceimpl.doprovision(featuresserviceimpl.java:1170) org .apache.karaf.features.internal.service.featuresserviceimpl.lambda$doprovisioninthread$0(featuresserviceimpl.java:1069) java .util.concurrent.futuretask.run(futuretask.java:266) java .util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1142) java .util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:617) java .lang.thread.run(thread.java:745) result test error camelprotobuftest .test â multi error test run failure error skipped [info] [info] build failure [info] [info] total time min [info] finished -04-18t10:26:57+09:00 [info] final memory 41m /2875m [info] {code} remember worked fine locally day ago even fails locally test {code}$ mvn test -dtest=camelprotobuftest{code} {{camel-itest-karaf}}. probably recent dependency upgrade cause issue message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064549.1492479333000.303034.1492498061651%40Atlassian.JIRA%3E,2017-04-18 06:47:41,issues,554.0,[jira] [commented] (camel-11153) camel -protobuf itest start fail
82,100,100,71.0,189.0,KhajaNawas14,"hi currently query like file come folder processed next stage however would like add file name also camel route -use folder multiple file sample folder cd -erpdata-csv sample file name u -ddmmyy.csv uk -ddmmyy.csv <camel:from uri =""file:messaging/cd-erpdata-csv?premove=inprogress&amp;move=.done""/> view message context sent camel user mailing list archive nabble .com.",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492488688966-5797776.post%40n5.nabble.com%3E,2017-04-18 04:11:28,users,190.0,camel route file name
83,101,101,72.0,190.0,KhajaNawas14,note beginner camel route view message context sent camel user mailing list archive nabble .com.,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492488836335-5797777.post%40n5.nabble.com%3E,2017-04-18 04:13:56,users,191.0,camel route file name
84,102,102,83.0,191.0,"Siano, Stephan",hi see especially look filename option likely want best regard stephan -----original message khajanawas14 [mailto:khaja.nawas@me.com] sent dienstag april user @camel.apache.org subject camel route file name note beginner camel route view message context sent camel user mailing list archive nabble .com.,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3Ca386bde03ab947529067523c0d2bc4c6%40sap.com%3E,2017-04-18 07:29:15,users,192.0,camel route file name
85,103,103,176.0,192.0,KhajaNawas14,thanks tried based suggested link however encountering issue tried ${file:name.noext}.org? error dynamic expression placeholder allowed use filename option set dynamic expression view message context sent camel user mailing list archive nabble .com.,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492588658550-5797874.post%40n5.nabble.com%3E,2017-04-19 07:57:38,users,193.0,camel route file name
86,104,104,177.0,193.0,Claus Ibsen,"need use filefilter dynamic chose file consume detail file component doc page tue apr khajanawas14 <khaja.nawas@me.com> wrote hi currently query like file come folder processed next stage however would like add file name also camel route -use folder multiple file sample folder cd -erpdata-csv sample file name u -ddmmyy.csv uk -ddmmyy.csv <camel:from uri =""file:messaging/cd-erpdata-csv?premove=inprogress&amp;move=.done""/> view message context sent camel user mailing list archive nabble .com. claus ibsen @davsclaus camel action",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yN%3DEpzH-Nmzr4ttW5B8_M6wbdoQXCn-F7dxqBMZFnM9SQg%40mail.gmail.com%3E,2017-04-19 08:00:23,users,194.0,camel route file name
87,105,105,76.0,356.0,davscl...@apache.org,repository camel updated branch ref /heads/master ecee62a81 c5bd87682 upgrade amq project commit tree diff branch ref /heads/master commit c5bd876822f08eb44f5d16ae1127e21f366a91be parent ecee62a author claus ibsen <davsclaus@apache.org> authored tue apr committer claus ibsen <davsclaus@apache.org> committed tue apr parent /pom.xml file changed insertion deletion diff --git /parent/pom.xml b /parent/pom.xml index e09c123 ..f661ee3 /parent/pom.xml b /parent/pom.xml dependency version <abdera-version>1.1.3</abdera-version> note activemq dependency used testing <activemq-version>5.14.4</activemq-version> <activemq-version>5.14.5</activemq-version> <activemq-artemis-version>1.5.4</activemq-artemis-version> <aether-version>1.0.2.v20150114</aether-version> <ahc-version>2.0.31</ahc-version>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cdc774b23a45c417189ea8e1585625374%40git.apache.org%3E,2017-04-18 06:48:14,commits,356.0,camel git commit upgrade amq
88,106,106,77.0,554.0,Claus Ibsen (JIRA),claus ibsen created camel summary itest spring -boot fails camel -hbase key camel url project camel issue type test affect version reporter claus ibsen fix test error org .apache.camel.itest.springboot.camelhbasetest.componenttests(org.apache.camel.itest.springboot.camelhbasetest) run camelhbasetest >abstractspringboottestsupport.startspringboot:44 invocationtarget run camelhbasetest >abstractspringboottestsupport.startspringboot:44 invocationtarget test run failure error skipped [error] test failure message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064597.1492499068000.303202.1492499082527%40Atlassian.JIRA%3E,2017-04-18 07:04:42,issues,558.0,[jira] [created] (camel-11154) itest spring -boot fails camel -hbase
89,107,107,87.0,555.0,Claus Ibsen (JIRA),claus ibsen commented camel [~nferraro] wonder could take look itest spring -boot fails camel -hbase key camel url project camel issue type test affect version reporter claus ibsen fix test error org .apache.camel.itest.springboot.camelhbasetest.componenttests(org.apache.camel.itest.springboot.camelhbasetest) run camelhbasetest >abstractspringboottestsupport.startspringboot:44 invocationtarget run camelhbasetest >abstractspringboottestsupport.startspringboot:44 invocationtarget test run failure error skipped [error] test failure message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064597.1492499068000.303490.1492501362440%40Atlassian.JIRA%3E,2017-04-18 07:42:42,issues,559.0,[jira] [commented] (camel-11154) itest spring -boot fails camel -hbase
90,108,108,94.0,556.0,Nicola Ferraro (JIRA),nicola ferraro commented camel checking itest spring -boot fails camel -hbase key camel url project camel issue type test affect version reporter claus ibsen fix test error org .apache.camel.itest.springboot.camelhbasetest.componenttests(org.apache.camel.itest.springboot.camelhbasetest) run camelhbasetest >abstractspringboottestsupport.startspringboot:44 invocationtarget run camelhbasetest >abstractspringboottestsupport.startspringboot:44 invocationtarget test run failure error skipped [error] test failure message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064597.1492499068000.303697.1492502922106%40Atlassian.JIRA%3E,2017-04-18 08:08:42,issues,560.0,[jira] [commented] (camel-11154) itest spring -boot fails camel -hbase
91,111,111,109.0,557.0,Nicola Ferraro (JIRA),nicola ferraro commented camel problem happening locally current build going fail 've changed test try embed test dependency (that include hbase server inside spring -boot. problem seems related transitive import log4j itest spring -boot fails camel -hbase key camel url project camel issue type test affect version reporter claus ibsen fix test error org .apache.camel.itest.springboot.camelhbasetest.componenttests(org.apache.camel.itest.springboot.camelhbasetest) run camelhbasetest >abstractspringboottestsupport.startspringboot:44 invocationtarget run camelhbasetest >abstractspringboottestsupport.startspringboot:44 invocationtarget test run failure error skipped [error] test failure message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064597.1492499068000.304278.1492507901605%40Atlassian.JIRA%3E,2017-04-18 09:31:41,issues,561.0,[jira] [commented] (camel-11154) itest spring -boot fails camel -hbase
92,128,128,86.0,514.0,Claus Ibsen (JIRA),claus ibsen commented camel tomo think maven goal may need add special logic include camel -ignite. fine hardcode something ticket fix camel -ignite becomes like component camel -solr removed readme full build key camel url project camel issue type task component documentation reporter tomohisa igarashi assignee tomohisa igarashi priority minor full build camel -solr removed component /readme.adoc doc /user-manual/en/summary.md 't happen message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064021.1492157502000.303478.1492501301562%40Atlassian.JIRA%3E,2017-04-18 07:41:41,issues,517.0,[jira] [commented] (camel-11150) camel -solr removed readme full build
93,133,133,131.0,517.0,Claus Ibsen (JIRA),claus ibsen commented camel apt -error log file camel -solr directory camel -solr/camel-ignite removed readme full build key camel url project camel issue type task component documentation reporter tomohisa igarashi assignee tomohisa igarashi priority minor full build camel -solr removed component /readme.adoc doc /user-manual/en/summary.md 't happen message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064021.1492157502000.305218.1492517861621%40Atlassian.JIRA%3E,2017-04-18 12:17:41,issues,520.0,[jira] [commented] (camel-11150) camel -solr/camel-ignite removed readme full build
94,134,134,136.0,518.0,Tomohisa Igarashi (JIRA),tomohisa igarashi commented camel nope see one camel -ignite dir camel -solr. 'll check maven log (maybe -x) solr camel -solr/camel-ignite removed readme full build key camel url project camel issue type task component documentation reporter tomohisa igarashi assignee tomohisa igarashi priority minor full build camel -solr removed component /readme.adoc doc /user-manual/en/summary.md 't happen message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064021.1492157502000.305299.1492518882010%40Atlassian.JIRA%3E,2017-04-18 12:34:42,issues,521.0,[jira] [commented] (camel-11150) camel -solr/camel-ignite removed readme full build
95,135,135,162.0,519.0,Tomohisa Igarashi (JIRA),tomohisa igarashi commented camel hmm confusing removal readme 't happen today still json file generated camel -solr camel -ignite. camel -solr/camel-ignite removed readme full build key camel url project camel issue type task component documentation reporter tomohisa igarashi assignee tomohisa igarashi priority minor full build camel -solr removed component /readme.adoc doc /user-manual/en/summary.md 't happen message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064021.1492157502000.314819.1492582481545%40Atlassian.JIRA%3E,2017-04-19 06:14:41,issues,522.0,[jira] [commented] (camel-11150) camel -solr/camel-ignite removed readme full build
96,136,136,167.0,520.0,Claus Ibsen (JIRA),claus ibsen commented camel camel -ignite known issue ticket however camel -solr ought generate json file camel -solr/camel-ignite removed readme full build key camel url project camel issue type task component documentation reporter tomohisa igarashi assignee tomohisa igarashi priority minor full build camel -solr removed component /readme.adoc doc /user-manual/en/summary.md 't happen message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064021.1492157502000.315138.1492585721611%40Atlassian.JIRA%3E,2017-04-19 07:08:41,issues,523.0,[jira] [commented] (camel-11150) camel -solr/camel-ignite removed readme full build
97,141,141,209.0,215.0,igarashitm,github user igarashitm opened pull request use maven -antrun-plugin remove data dir instead maven -clean-plu… …gin mvn clean would remove target dir merge pull request git repository running git pull camel -solr-remove-data-dir alternatively review apply change patch close pull request make commit master /trunk branch (at least following commit message close commit 9776e85a0742c98ea966691e39dfd1015d306394 author tomohisa igarashi <tm.igarashi@gmail.com> date -04-19t09:05:57z use maven -antrun-plugin remove data dir instead maven -clean-plugin mvn clean would remove target dir project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3Cgit-pr-1638-camel%40git.apache.org%3E,2017-04-19 09:09:49,mail,215.0,[github] camel pull request use maven -antrun-plugin remove data dir instead
98,142,142,214.0,402.0,davscl...@apache.org,"repository camel updated branch ref /heads/master e09180940 424273fa9 use maven -antrun-plugin remove data dir instead maven -clean-plugin mvn clean would remove target dir project commit tree diff branch ref /heads/master commit 424273fa986790fece72d8f0b9f58f526ce3b192 parent e091809 author tomohisa igarashi <tm.igarashi@gmail.com> authored wed apr committer claus ibsen <davsclaus@apache.org> committed wed apr component /camel-solr/pom.xml file changed insertion deletion diff --git /components/camel-solr/pom.xml b /components/camel-solr/pom.xml index ..448e2f6c /components/camel-solr/pom.xml b /components/camel-solr/pom.xml clean data directory installing <plugin> <groupid>org.apache.maven.plugins</groupid> <artifactid>maven-clean-plugin</artifactid> <artifactid>maven-antrun-plugin</artifactid> <executions> <execution> <id>auto-clean</id> <phase>install</phase> <goals> <goal>clean</goal> <goal>run</goal> </goals> <configuration> <target> <delete dir =""${basedir}/data"" quiet =""true""/> </target> </configuration> </execution> </executions> <configuration> <excludedefaultdirectories>true</excludedefaultdirectories> <filesets> <fileset> <directory>${basedir}/data</directory> </fileset> </filesets> </configuration> </plugin> </plugins> </build>",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C05bf03951083470cb6da59ee9ef4c62e%40git.apache.org%3E,2017-04-19 09:17:59,commits,402.0,camel git commit use maven -antrun-plugin remove data dir instead maven -clean-plugin mvn clean would remove target dir
99,143,143,215.0,216.0,igarashitm,github user igarashitm closed pull request project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170419091919.04CCFDF999%40git1-us-west.apache.org%3E,2017-04-19 09:19:19,mail,216.0,[github] camel pull request use maven -antrun-plugin remove data dir instead
100,144,144,216.0,523.0,Tomohisa Igarashi (JIRA),tomohisa igarashi commented camel fixed camel -solr pom remove target dir mvn clean camel -ignite removed readme full build key camel url project camel issue type task component documentation reporter tomohisa igarashi assignee tomohisa igarashi priority minor full build camel -solr removed component /readme.adoc doc /user-manual/en/summary.md 't happen message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064021.1492157502000.316114.1492593641651%40Atlassian.JIRA%3E,2017-04-19 09:20:41,issues,526.0,[jira] [commented] (camel-11150) camel -ignite removed readme full build
101,151,151,90.0,13.0,Claus Ibsen,"hi thing start look good itest fails spring boot need look get fixed test passing recently ought become blue let keep eye thu apr pm claus ibsen <claus.ibsen@gmail.com> wrote hi thanks antonin sound great jira ticket recently fixed missing component doc fixed broken link browsing github keep eye ci server output camel -catalog report see report missing stuff currently false positive missing doc test component try fix later today however thats time feel free fun work anything like camel still time small improvement etc bigger stuff really defer next release wed apr pm antonin stefanutti <antonin@stefanutti.fr> wrote apr claus ibsen <claus.ibsen@gmail.com> wrote hi head plan cut rc camel next week closing last ticket bug feature etc get code base shape jira ticket course welcome work ticket etc mind big functionality likely better wait next release however expected transaction stuff cdi pr work also new iot component cdi transaction support pr merged end week keep eye ci server see fix test failure etc recently got build test osgi spring -boot specific test able better keep eye future fri apr gregor zurowski <gregor@list.zurowski.org> wrote hi claus week work send another email shortly starting build rc thanks gregor wed apr pm claus ibsen <claus.ibsen@gmail.com> wrote hi gregor yeah april get release door setup version jira folk start moving ticket version something cannot finish time also refrain bigger work time close last ticket bug fix get ci test good order etc look jiras later week cleanup bit better overview work yet done april easter holiday wonder time schedule look like maybe time help release holiday week last week april holiday could maybe cut rc week would good mon apr pm gregor zurowski <gregor@list.zurowski.org> wrote hi getting closer build release would volunteer creating release wanted check would good time thanks gregor wed mar claus ibsen <claus.ibsen@gmail.com> wrote hi wanted bring closing good time new release example mid april would around month since last release therefore start closing fixing bug make sure ci server test good shape morning fixed number recent test failure test failure mon jan claus ibsen <claus.ibsen@gmail.com> wrote hi bunch stuff /should roadmap complete camel release top head finish migrating wiki documentation adoc file think eip pattern missing basic list eips generate documentation website maybe documentation first come modern website later new logo well mark stuff @deprecate dont drag camel component artifact well camel -core apis maybe deprecate example old stuff created prior component doc apt plugin build time instead old code runtime dont really pan anyway move spring -boot starter platform folder ticket improvement spring boot auto configuration bunch ticket look health check api see something get started possible api integrate spring boot actuator (when using sb allow component provide check implemented ad -hoc. ticket possible teak camel -catalog based feedback idea plugin maven validate goal cdi jee transaction pr github ideally would transaction api camel -core one impl camel -spring, another camel -cdi-jee. may require much work work java dsl get community feedback resolve todos documentation update look area api benefit java lambda whatnot dont think ticket karaf user may want improve /finish camel -test-karaf module usable end user use test integration test camel karaf introduce camel connector (more later anything else claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3CCAGB5yN%3DwYjV89vqRtAzS_VjdyQcByUgZBJML3iCrbZLCY4SU7A%40mail.gmail.com%3E,2017-04-18 07:45:20,mail,13.0,camel roadmap
102,152,152,174.0,14.0,Claus Ibsen,"hi okay last minute issue @generated annotation need look unforseen effect java build full test passing spring boot karaf test also passed failed recently due maven download error weird error let kick new build get ticket resolved tue apr claus ibsen <claus.ibsen@gmail.com> wrote hi thing start look good itest fails spring boot need look get fixed test passing recently ought become blue let keep eye thu apr pm claus ibsen <claus.ibsen@gmail.com> wrote hi thanks antonin sound great jira ticket recently fixed missing component doc fixed broken link browsing github keep eye ci server output camel -catalog report see report missing stuff currently false positive missing doc test component try fix later today however thats time feel free fun work anything like camel still time small improvement etc bigger stuff really defer next release wed apr pm antonin stefanutti <antonin@stefanutti.fr> wrote apr claus ibsen <claus.ibsen@gmail.com> wrote hi head plan cut rc camel next week closing last ticket bug feature etc get code base shape jira ticket course welcome work ticket etc mind big functionality likely better wait next release however expected transaction stuff cdi pr work also new iot component cdi transaction support pr merged end week keep eye ci server see fix test failure etc recently got build test osgi spring -boot specific test able better keep eye future fri apr gregor zurowski <gregor@list.zurowski.org> wrote hi claus week work send another email shortly starting build rc thanks gregor wed apr pm claus ibsen <claus.ibsen@gmail.com> wrote hi gregor yeah april get release door setup version jira folk start moving ticket version something cannot finish time also refrain bigger work time close last ticket bug fix get ci test good order etc look jiras later week cleanup bit better overview work yet done april easter holiday wonder time schedule look like maybe time help release holiday week last week april holiday could maybe cut rc week would good mon apr pm gregor zurowski <gregor@list.zurowski.org> wrote hi getting closer build release would volunteer creating release wanted check would good time thanks gregor wed mar claus ibsen <claus.ibsen@gmail.com> wrote hi wanted bring closing good time new release example mid april would around month since last release therefore start closing fixing bug make sure ci server test good shape morning fixed number recent test failure test failure mon jan claus ibsen <claus.ibsen@gmail.com> wrote hi bunch stuff /should roadmap complete camel release top head finish migrating wiki documentation adoc file think eip pattern missing basic list eips generate documentation website maybe documentation first come modern website later new logo well mark stuff @deprecate dont drag camel component artifact well camel -core apis maybe deprecate example old stuff created prior component doc apt plugin build time instead old code runtime dont really pan anyway move spring -boot starter platform folder ticket improvement spring boot auto configuration bunch ticket look health check api see something get started possible api integrate spring boot actuator (when using sb allow component provide check implemented ad -hoc. ticket possible teak camel -catalog based feedback idea plugin maven validate goal cdi jee transaction pr github ideally would transaction api camel -core one impl camel -spring, another camel -cdi-jee. may require much work work java dsl get community feedback resolve todos documentation update look area api benefit java lambda whatnot dont think ticket karaf user may want improve /finish camel -test-karaf module usable end user use test integration test camel karaf introduce camel connector (more later anything else claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3CCAGB5yNkkfcc0Qy7Of_%2Bh1BrhFRax93%2Bhsd%3D%2B7qOAzuF63tbxKw%40mail.gmail.com%3E,2017-04-19 07:54:25,mail,14.0,camel roadmap
103,153,153,233.0,15.0,Claus Ibsen,"hi @generated java ought fixed new version spring boot way may beneficial wait released running latest wed apr claus ibsen <claus.ibsen@gmail.com> wrote hi okay last minute issue @generated annotation need look unforseen effect java build full test passing spring boot karaf test also passed failed recently due maven download error weird error let kick new build get ticket resolved tue apr claus ibsen <claus.ibsen@gmail.com> wrote hi thing start look good itest fails spring boot need look get fixed test passing recently ought become blue let keep eye thu apr pm claus ibsen <claus.ibsen@gmail.com> wrote hi thanks antonin sound great jira ticket recently fixed missing component doc fixed broken link browsing github keep eye ci server output camel -catalog report see report missing stuff currently false positive missing doc test component try fix later today however thats time feel free fun work anything like camel still time small improvement etc bigger stuff really defer next release wed apr pm antonin stefanutti <antonin@stefanutti.fr> wrote apr claus ibsen <claus.ibsen@gmail.com> wrote hi head plan cut rc camel next week closing last ticket bug feature etc get code base shape jira ticket course welcome work ticket etc mind big functionality likely better wait next release however expected transaction stuff cdi pr work also new iot component cdi transaction support pr merged end week keep eye ci server see fix test failure etc recently got build test osgi spring -boot specific test able better keep eye future fri apr gregor zurowski <gregor@list.zurowski.org> wrote hi claus week work send another email shortly starting build rc thanks gregor wed apr pm claus ibsen <claus.ibsen@gmail.com> wrote hi gregor yeah april get release door setup version jira folk start moving ticket version something cannot finish time also refrain bigger work time close last ticket bug fix get ci test good order etc look jiras later week cleanup bit better overview work yet done april easter holiday wonder time schedule look like maybe time help release holiday week last week april holiday could maybe cut rc week would good mon apr pm gregor zurowski <gregor@list.zurowski.org> wrote hi getting closer build release would volunteer creating release wanted check would good time thanks gregor wed mar claus ibsen <claus.ibsen@gmail.com> wrote hi wanted bring closing good time new release example mid april would around month since last release therefore start closing fixing bug make sure ci server test good shape morning fixed number recent test failure test failure mon jan claus ibsen <claus.ibsen@gmail.com> wrote hi bunch stuff /should roadmap complete camel release top head finish migrating wiki documentation adoc file think eip pattern missing basic list eips generate documentation website maybe documentation first come modern website later new logo well mark stuff @deprecate dont drag camel component artifact well camel -core apis maybe deprecate example old stuff created prior component doc apt plugin build time instead old code runtime dont really pan anyway move spring -boot starter platform folder ticket improvement spring boot auto configuration bunch ticket look health check api see something get started possible api integrate spring boot actuator (when using sb allow component provide check implemented ad -hoc. ticket possible teak camel -catalog based feedback idea plugin maven validate goal cdi jee transaction pr github ideally would transaction api camel -core one impl camel -spring, another camel -cdi-jee. may require much work work java dsl get community feedback resolve todos documentation update look area api benefit java lambda whatnot dont think ticket karaf user may want improve /finish camel -test-karaf module usable end user use test integration test camel karaf introduce camel connector (more later anything else claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3CCAGB5yNnn9d7JUWHqDfdU8Kcx6LmqLvP14GTN%3DBZ4bxv-gxen7Q%40mail.gmail.com%3E,2017-04-19 11:39:20,mail,15.0,camel roadmap
104,154,154,239.0,16.0,Luca Burgazzoli,"hi one little refactoring (rename loadbalancer camel cloud package avoid confusion loadbalancer processor little doc update 'm trying make end day luca burgazzoli wed apr pm claus ibsen <claus.ibsen@gmail.com> wrote hi @generated java ought fixed new version spring boot way may beneficial wait released running latest wed apr claus ibsen <claus.ibsen@gmail.com> wrote hi okay last minute issue @generated annotation need look unforseen effect java build full test passing spring boot karaf test also passed failed recently due maven download error weird error let kick new build get ticket resolved tue apr claus ibsen <claus.ibsen@gmail.com> wrote hi thing start look good itest fails spring boot need look get fixed test passing recently ought become blue let keep eye thu apr pm claus ibsen <claus.ibsen@gmail.com> wrote hi thanks antonin sound great jira ticket recently fixed missing component doc fixed broken link browsing github keep eye ci server output camel -catalog report see report missing stuff currently false positive missing doc test component try fix later today however thats time feel free fun work anything like camel still time small improvement etc bigger stuff really defer next release wed apr pm antonin stefanutti <antonin@stefanutti.fr> wrote apr claus ibsen <claus.ibsen@gmail.com> wrote hi head plan cut rc camel next week closing last ticket bug feature etc get code base shape jira ticket course welcome work ticket etc mind big functionality likely better wait next release however expected transaction stuff cdi pr work also new iot component cdi transaction support pr merged end week keep eye ci server see fix test failure etc recently got build test osgi spring -boot specific test able better keep eye future fri apr gregor zurowski <gregor@list.zurowski.org> wrote hi claus week work send another email shortly starting build rc thanks gregor wed apr pm claus ibsen <claus.ibsen@gmail.com> wrote hi gregor yeah april get release door setup version jira folk start moving ticket version something cannot finish time also refrain bigger work time close last ticket bug fix get ci test good order etc look jiras later week cleanup bit better overview work yet done april easter holiday wonder time schedule look like maybe time help release holiday week last week april holiday could maybe cut rc week would good mon apr pm gregor zurowski <gregor@list.zurowski.org> wrote hi getting closer build release would volunteer creating release wanted check would good time thanks gregor wed mar claus ibsen <claus.ibsen@gmail.com> wrote hi wanted bring closing good time new release example mid april would around month since last release therefore start closing fixing bug make sure ci server test good shape morning fixed number recent test failure test failure mon jan claus ibsen <claus.ibsen@gmail.com> wrote hi bunch stuff /should roadmap complete camel release top head finish migrating wiki documentation adoc file think eip pattern missing basic list eips generate documentation website maybe documentation first come modern website later new logo well mark stuff @deprecate dont drag camel component artifact well camel -core apis maybe deprecate example old stuff created prior component doc apt plugin build time instead old code runtime dont really pan anyway move spring -boot starter platform folder ticket improvement spring boot auto configuration bunch ticket look health check api see something get started possible api integrate spring boot actuator (when using sb allow component provide check implemented ad -hoc. ticket possible teak camel -catalog based feedback idea plugin maven validate goal cdi jee transaction pr github ideally would transaction api camel -core one impl camel -spring, another camel -cdi-jee. may require much work work java dsl get community feedback resolve todos documentation update look area api benefit java lambda whatnot dont think ticket karaf user may want improve /finish camel -test-karaf module usable end user use test integration test camel karaf introduce camel connector (more later anything else claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action claus ibsen @davsclaus camel action",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3CCAMpNYoYivdY%2BiaTTOUn4RvYUoOpAGBs%2B9sdFDJ4FgPALWPzPeQ%40mail.gmail.com%3E,2017-04-19 12:21:57,mail,16.0,camel roadmap
105,155,155,91.0,562.0,Luca Burgazzoli (JIRA),"luca burgazzoli created camel summary camel -infinispan: command operation match key camel url project camel issue type improvement component camel -infinispan reporter luca burgazzoli assignee luca burgazzoli priority minor fix today camel -infinispan configure operation producer perform two way setting camelinfinispanoperation header setting command option endpoint first thing notice use different naming consistency use either operation command second thing set operation header use .e. camelinfinispanoperationput ""operation"" set command uri option put discrepancy naming used solution use camelinfinispanoperation header operation endpoint option operation simple form like put get etc clear context targeting infinispan message sent atlassian jira (v6.3.15#6346)",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064616.1492502072000.303571.1492502081884%40Atlassian.JIRA%3E,2017-04-18 07:54:41,issues,566.0,[jira] [created] (camel-11155) camel -infinispan: command operation match
106,166,166,100.0,573.0,Bjørn Hilstad (JIRA),"bjørn hilstad commented camel change actually seem version something gone wrong property 'accessexternaldtd' recognized (all) xerces key camel url project camel issue type bug component camel -validator affect version reporter bernard ligny assignee andrea cosentino fix upgrading v2 encounter (blocking) regression preventing route involving validator component successfully start indeed one recent validation -related change fully compatible version xerces especially deployed jboss wildlfy .1.0.final *stack trace {code:java} caused java .lang.illegalstateexception: org .xml.sax.saxnotrecognizedexception: property recognized org .apache.camel.processor.validation.schemareader.createschemafactory(schemareader.java:181) org .apache.camel.processor.validation.schemareader.getschemafactory(schemareader.java:152) org .apache.camel.processor.validation.schemareader.createschema(schemareader.java:192) org .apache.camel.processor.validation.schemareader.loadschema(schemareader.java:84) org .apache.camel.component.validator.validatorendpoint.createproducer(validatorendpoint.java:119) org .apache.camel.impl.producercache.dogetproducer(producercache.java:574) caused org .xml.sax.saxnotrecognizedexception: property recognized org .apache.xerces.jaxp.validation.xmlschemafactory.setproperty(xmlschemafactory.java:436) __redirected .__schemafactory.setproperty(__schemafactory.java:143) org .apache.camel.processor.validation.schemareader.createschemafactory(schemareader.java:178) {code} particular following code {code:java} protected schemafactory createschemafactory try factory .setproperty(xmlconstants.access_external_dtd, catch (saxexception e log .error(e.getmessage(), e throw new illegalstateexception (e); {code} would possible issue simple warning rather raising exception (>see oracle recommandations message sent atlassian jira (v6.3.15#6346)",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13050532.1489405412000.304013.1492505861849%40Atlassian.JIRA%3E,2017-04-18 08:57:41,issues,577.0,[jira] [commented] (camel-11000) property 'accessexternaldtd' recognized (all) xerces
107,173,173,106.0,359.0,davscl...@apache.org,"repository camel updated branch ref /heads/master d73893ffc a49af7f1d camel component doc ascii doc warns project commit tree diff branch ref /heads/master commit a49af7f1d899080d0e3ddcc200a0b89c9c1320a1 parent d73893f author claus ibsen <davsclaus@apache.org> authored tue apr committer claus ibsen <davsclaus@apache.org> committed tue apr .../src/main/docs/ignite-component.adoc .../src/main/docs/test-spring.adoc file changed insertion deletion diff --git /components/camel-ignite/src/main/docs/ignite-component.adoc b /components/camel-ignite/src/main/docs/ignite-component.adoc index a721719 ..36b1e39 /components/camel-ignite/src/main/docs/ignite-component.adoc b /components/camel-ignite/src/main/docs/ignite-component.adoc -[[ignite-component]] ignite component *available camel version running osgi container please 't miss <<ignite-osgisupport,osgi endpoint option end -[[ignite-cache]] -cache: ignite cache endpoint cache ignite cache endpoint endpoint allows interact cache [source,text] cache value always body message whereas cache key alwa even configure fixed operation endpoint uri vary per -exchange setting `igniteconstants.ignite_cache_operation` message header -options option [width=""100%"",cols=""1,1,1,4,1,1"",options=""header""] option type default value description compulsory consumer /producer n consumer time interval millis continuous query (see ignite doc n consumer -headers used header used endpoint us following header [width=""100%"",cols=""1,1,1,4"",options=""header""] header carry old cache value passed incoming cache event -[[ignite-compute]] -compute: ignite compute endpoint -this endpoint allows run operation cluster passing ignitecallable igniterunnable igniteclosure collection along parameter necessary compute ignite compute endpoint +this endpoint allows run operation cluster passing ignitecallable igniterunnable igniteclosure collection along parameter necessary [source,text] host part endpoint uri symbolic endpoint id used endpoint try run object passed body message compute job expects different payload type depending execution type -expected payload type expected payload type operation expects indicated type [width=""100%"",cols=""1,4"",options=""header""] operation expects indicated type affinity_run igniterunnable -options option [width=""100%"",cols=""1,1,1,4,1,1"",options=""header""] option type default value description compulsory consumer /producer n producer timeoutmillis long timeout compute job n producer -headers used header used endpoint us following header [width=""100%"",cols=""1,1,1,4"",options=""header""] affinity key affinity_call affinity_run operation -[[ignite-messaging]] -messaging: ignite messaging endpoint messaging ignite messaging endpoint ignite messaging endpoint allows send consume message topic [source,text] ignite :messaging:topicname?option1=value1&option2=value2... endpoint support producer (to send message consumer (to receive message -options option [width=""100%"",cols=""1,1,1,4,1,1"",options=""header""] option type default value description compulsory consumer /producer n producer n producer -headers used header used endpoint us following header [width=""100%"",cols=""1,1,1,4"",options=""header""] header filled uuid subscription message arrive -[[ignite-events]] -events: ignite event endpoint event ignite event endpoint ignite event endpoint allows event ignite cluster creating local event listener [source,text] ignite :events:endpointid?option1=value1&option2=value2... endpoint support consumer exchange created consumer put received event object body message -options option [width=""100%"",cols=""1,1,1,4,1,1"",options=""header""] option type default value description compulsory consumer /producer n consumer -[[ignite-sets]] -sets: ignite set endpoint set ignite set endpoint ignite set endpoint allows interact set data structure [source,text] ignite :sets:setname?option1=value1&option2=value2... endpoint support producer -options option [width=""100%"",cols=""1,1,1,4,1,1"",options=""header""] option type default value description compulsory consumer /producer example ?config.backups=4 n producer -headers used header used endpoint us following header [width=""100%"",cols=""1,1,1,4"",options=""header""] allows dynamically change set operation -[[ignite-queues]] -queues: ignite queue endpoint queue ignite queue endpoint ignite queue endpoint allows interact queue data structure [source,text] ignite :queue:queuename?option1=value1&option2=value2... endpoint support producer -options option [width=""100%"",cols=""1,1,1,4,1,1"",options=""header""] option type default value description compulsory consumer /producer queue capacity 'd like use bounded queue n producer -headers used header used endpoint us following header [width=""100%"",cols=""1,1,1,4"",options=""header""] dynamically set timeout millisecond use invoking offer p -[[ignite-idgenerator]] -idgen: ignite id generator endpoint idgen ignite id generator endpoint ignite id generator endpoint allows interact atomic sequence id generator [source,text] ignite :idgen:sequencename?option1=value1&option2=value2... endpoint support producer -options option [width=""100%"",cols=""1,1,1,4,1,1"",options=""header""] option type default value description compulsory consumer /producer n producer -[[ignite-initializecomponent]] -initializing ignite component initializing ignite component instance ignite component associated underlying org .apache.ignite.ignite instance interact two ignite cluster initializing two instance ignite component binding different igniteconfigurations way initialize ignite component passing existing org .apache.ignite.ignite instance 's example using spring config additionally using camel programmatically several convenience sta may use method quickly create ignitecomponent chosen configuration technique -general option general option endpoint share following option [width=""100%"",cols=""1,1,1,4,1,1"",options=""header""] underlying ignite operation return void (no return type flag dete ignite operation deal multiple element passed collection enabling option treat collection single object invoking operation variant cardinality -osgi support osgi support -[tip] -apache ignite support osgi version .5.0.final onwards +tip: apache ignite support osgi version .5.0.final onwards +when installing apache karaf -[note,title=when installing apache karaf installing camel -ignite feature require ignite feature repository present must exported jre (system bundle low -level, non -standard package ignite requires -please refer osgi section ignite documentation information must exported jre (system bundle low -level, non -standard package ignite requires -see also camel started newline end file +please refer osgi section ignite documentation information diff --git /components/camel-test-spring/src/main/docs/test-spring.adoc b /components/camel-test-spring/src/main/docs/test-spring.adoc index 305c3e6 ..9cd8659 /components/camel-test-spring/src/main/docs/test-spring.adoc b /components/camel-test-spring/src/main/docs/test-spring.adoc -[[springtesting-camelspringtestsupport]] -camelspringtestsupport camelspringtestsupport following spring test support class `org.apache.camel.test.camelspringtestsupport` responsible instantiation spring context method im -[[springtesting-plainspringtest]] -plain spring test plain spring test approach test class directly inherit spring test abstract test class use junit .x test runner provided spring test approach support dependency injection test class full suite spring test annotation however support feature provided `camelspringtestsupport` class -plain spring test using junit .x xml config example plain spring test using junit .x xml config example simple unit test using junit .x support spring test using config [source,java] src /test/java/org/apache/camel/spring/patterns/filtertest.java src /test/resources/org/apache/camel/spring/patterns/filtertest-context.xml -plain spring test using junit .x java config example plain spring test using junit .x java config example completely avoid using xml configuration file using java config unit test using junit .x support spring test using config [source,text] public class filtertest extends abstractjunit4springcontexttests similar xml config example except xml file instead nested `contextconfig` class configuration entire test case contained single java class currently reference class name class `@contextconfiguration` bit ugly please vote address make spring test work cleanly spring javaconfig -plain spring test using junit .0.x runner xml config plain spring test using junit .0.x runner xml config avoid extending spring class using `springjunit4classrunner` provided spring test custom junit runner mean free choose class hierarchy retaining capability spring test -[info] -this spring .0.x. use spring newer see next section +tip: spring .0.x. use spring newer see next section [source,java] @runwith(springjunit4classrunner.class) public class mycameltest -plain spring test using junit .1.x runner xml config plain spring test using junit .1.x runner xml config avoid extending spring class using `springjunit4classrunner` provided spring test custom junit runner mean free choose class hierarchy retaining capability spring test -[info] -from *spring need use `@bootstrapwith` annotation configure use camel testing shown +tip: *spring need use `@bootstrapwith` annotation configure use camel testing shown [source,java] @runwith(camelspringjunit4classrunner.class) public class mycameltest camel enhanced spring test -[[springtesting-camelenhancedspringtest]] -camel enhanced spring test using `org.apache.camel.test.junit4.camelspringjunit4classrunner` runner `@runwith` annotation extending `org.apache.camel.testng.abstractcameltestngspringcontexttests` provides full feature set spring test support feature set provided `cameltestsupport` class number camel specific annotation developed order provide declarative manipulation camel context (s) involved test annotation free test class inherit `camelspringtestsupport` class also reduce amount code required customize test [width=""100%"",cols=""1,1,4,1,1"",options=""header"",] -|annotation class |applies |description |default behavioir present |default behavior present +|annotation class |applies |description |default behaviour present |default behavior present |org.apache.camel.test.spring.disablejmx |class indicates jmx globally disabled camelcontexts bootstrapped test use spring test loaded application context jmx disabled |jmx disabled |override property following example illustrates use `@mockendpoints` annotation order setup mock endpoint interceptor endpoint using camel log component `@disablejmx` annotation enable jmx disabled test default -[info] -note: still use `@dirtiescontext` annotation ensure camelcontext route mock endpoint reinitialized test method +tip: still use `@dirtiescontext` annotation ensure camelcontext route mock endpoint reinitialized test method [source,java] @runwith(camelspringjunit4classrunner.class) public class camelspringjunit4classrunnerplaintest -adding mock expectation -if wish programmatically add new assertion test easily following notice use `@endpointinject` inject camel endpoint code api add expectation specific message adding mock expectation +if wish add new assertion test easily following notice use `@endpointinject` inject camel endpoint code api add expectation specific message [source,java] @contextconfiguration public class mycameltest extends abstractjunit38springcontexttests -further processing received message processing received message sometimes endpoint received message want process add assertion test case worked expect process received message exchange like public class mycameltest extends abstractjunit38springcontexttests -sending receiving message sending receiving message might integration pattern defined either xml using java sending receiving might work endpoint described however sometimes test case useful explicitly send receive message directly send receive message use integration mechanism example send message inject `producertemplate` using `@endpointinject` annotation call various send method object send message endpoint consume message use `@messagedriven` annotation method method invoked message received public class foo -see also example test case using mock spring along xml integration endpoint endpoint",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cfcf4e09a71a545ceb32101b629d433a3%40git.apache.org%3E,2017-04-18 09:25:03,commits,359.0,camel git commit camel component doc ascii doc warns
108,176,176,103.0,357.0,acosent...@apache.org,repository camel updated branch ref /heads/master c5bd87682 dd3eec651 upgrade docker java version project commit tree diff branch ref /heads/master commit dd3eec6512ad2bde3a3511aa411c28f720d440f8 parent c5bd876 author andrea cosentino <ancosen@gmail.com> authored tue apr committer andrea cosentino <ancosen@gmail.com> committed tue apr parent /pom.xml .../spring-boot/components-starter/camel-docker-starter/pom.xml file changed insertion deletion diff --git /parent/pom.xml b /parent/pom.xml index f661ee3 ..d5954e8 /parent/pom.xml b /parent/pom.xml <disruptor-version>3.3.6</disruptor-version> <dnsjava-version>2.1.8</dnsjava-version> <dnsjava-bundle-version>2.1.8_1</dnsjava-bundle-version> <docker-java-version>3.0.8</docker-java-version> <docker-java-version>3.0.9</docker-java-version> <dom4j-bundle-version>1.6.1_5</dom4j-bundle-version> <dozer-version>5.5.1</dozer-version> <drools-version>6.5.0.final</drools-version> diff --git /platforms/spring-boot/components-starter/camel-docker-starter/pom.xml b /platforms/spring-boot/components-starter/camel-docker-starter/pom.xml index 5d889b2 ..f5ff82f /platforms/spring-boot/components-starter/camel-docker-starter/pom.xml b /platforms/spring-boot/components-starter/camel-docker-starter/pom.xml <!--start generated code <exclusions> <exclusion> <groupid>commons-logging</groupid> <artifactid>commons-logging</artifactid> </exclusion> <exclusion> <groupid>log4j</groupid> <artifactid>log4j</artifactid> </exclusion>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C1ae914a52b5249f1bfda7237015c36ae%40git.apache.org%3E,2017-04-18 09:00:40,commits,357.0,camel git commit upgrade docker java version
109,177,177,105.0,358.0,davscl...@apache.org,repository camel updated branch ref /heads/master dd3eec651 d73893ffc fix pom .xml camel -catalog javadoc generated copy /rename task must run maven phase project commit tree diff branch ref /heads/master commit d73893ffcacdb60d45107ff530153d547a494f60 parent dd3eec6 author claus ibsen <davsclaus@apache.org> authored tue apr committer claus ibsen <davsclaus@apache.org> committed tue apr platform /camel-catalog/pom.xml file changed insertion deletion diff --git /platforms/camel-catalog/pom.xml b /platforms/camel-catalog/pom.xml index 6c71fcb ..07046c9 /platforms/camel-catalog/pom.xml b /platforms/camel-catalog/pom.xml <version>1.5.3</version> <executions> <execution> <phase>process-sources</phase> <phase>generate-sources</phase> <goals> <goal>replace</goal> </goals>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C0d55a5f64d1c4e188602fa31519e3a36%40git.apache.org%3E,2017-04-18 09:08:19,commits,358.0,camel git commit fix pom .xml camel -catalog javadoc generated copy /rename task must run maven phase
110,178,178,110.0,580.0,Luca Burgazzoli (JIRA),luca burgazzoli created camel summary service call allow use property customize underlying camel component used implement service -call concept key camel url project camel issue type improvement component camel -core reporter luca burgazzoli assignee luca burgazzoli fix today configuration via dsl service call 's concpetts (i.e. service discovery limited option hard coded dsl would nice leverage available property customize underlying component message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064660.1492510699000.304643.1492510722119%40Atlassian.JIRA%3E,2017-04-18 10:18:42,issues,584.0,[jira] [created] (camel-11161) service call allow use property customize underlying camel component used implement service -call concept
111,179,179,114.0,364.0,lburgazz...@apache.org,"repository camel updated branch ref /heads/master 89ba56d3d 60675efc3 add servicecall eip documentation project commit tree diff branch ref /heads/master commit 60675efc3ac420b35da219542607bdc01e9f9598 parent 89ba56d author lburgazzoli <lburgazzoli@gmail.com> authored tue apr committer lburgazzoli <lburgazzoli@gmail.com> committed tue apr .../src/main/docs/eips/servicecall-eip.adoc file changed insertion diff --git /camel-core/src/main/docs/eips/servicecall-eip.adoc b /camel-core/src/main/docs/eips/servicecall-eip.adoc new file mode index ..35965ea /dev/null b /camel-core/src/main/docs/eips/servicecall-eip.adoc service call eip +the servicecall eip allows call remote service distributed system service call looked service registry sort kubernetes consul etcd zookeeper dns eip separate configuration service registry calling service +when calling service may refer name service eip shown +[source,java] +.java dsl +from(""direct:start"") .servicecall(""foo"") .to(""mock:result""); +[source,xml] +.xml dsl +<camelcontext xmlns <route> <from uri =""direct:start""/> <servicecall name =""foo""/> <to uri =""mock:result""/> </route> +</camelcontext> +camel search service call configuration camel context registry lookup service name ```foo``` external service registry filter server select server use build camel uri using choosen server info +by default service call eip us camel -http4 assuming selected service instance run host ```myhost.com``` port computed camel uri +[source] http4 :myhost.com:80 service name camel uri example +it often needed build complex camel uri may include option path possible different option :name: value *service name support limited uri like syntax example +[width=""100%"",cols=""25%a,75%a"",options=""header""] +|name |resolution +|foo http4 ://host:port +|foo/path http4 ://host:port/path +|foo/path?foo=bar http4 ://host:port/path?foo=bar +[source,java] +from(""direct:start"") .servicecall(""foo/hello"") .to(""mock:result""); wan control uri construction use *uri* directive +[width=""100%"",cols=""25%a,40%a,35%a"",options=""header""] +|name uri resolution +|foo undertow undertow +|foo undertow undertow +[source,java] +from(""direct:start"") .servicecall(""foo"", ""undertow: .to(""mock:result""); advanced user full control uri construction expression +[source,java] +from(""direct:start"") .servicecall() .name(""foo"") .expression() .simple(""undertow: configuring service call +the service call eip configured following option +[width=""100%"",cols=""3,1m,6"",options=""header""] name java type description name string *required* set name service use uri string uri endpoint send component string component use pattern exchangepattern set optional exchangepattern used invoke endpoint configurationref string refers servicecall configuration use servicediscoveryref string set reference custom servicediscovery use servicediscovery servicediscovery set servicediscovery use ([.underline]_java dsl only_ servicefilterref string set reference custom servicefilter use servicefilter servicefilter set servicefilter use ([.underline]_java dsl only_ servicechooserref string set reference custom servicechooser use servicechooser servicechooser set servicechooser use ([.underline]_java dsl only_ loadbalancerref string set reference custom loadbalancer use loadbalancer loadbalancer set loadbalancer use ([.underline]_java dsl only_ expressionref string set reference custom expression use expression expression set expression use compute camel uri ([.underline]_java dsl only_ +in addition ref /binding configuration style leverage specific configuration dsl customize specific option *consul service discovery +to leverage consul service discover maven user need add following dependency pom .xml +[source,xml] +<dependency> <groupid>org.apache.camel</groupid> <artifactid>camel-consul</artifactid> use version camel core version <version>x.y.z</version> +</dependency> +*available option +[width=""100%"",cols=""3,1m,6"",options=""header""] name java type description url string consul agent url datacenter string data center acltoken string set acl token used consul username string set username used basic authentication password string set password used basic authentication connecttimeoutmillis long connect timeout okhttpclient readtimeoutmillis long read timeout okhttpclient writetimeoutmillis long write timeout okhttpclient +[source,java] +.example +from(""direct:start"") .servicecall(""foo"") .consulservicediscovery() .url("" .datacenter(""neverland"") .end() .to(""mock:result""); *dns service discovery +to leverage dns service discover maven user need add following dependency pom .xml +[source,xml] +<dependency> <groupid>org.apache.camel</groupid> <artifactid>camel-dns</artifactid> use version camel core version <version>x.y.z</version> +</dependency> +[source,xml] +.xml dsl +<camelcontext xmlns <route> <from uri =""direct:start""/> <servicecall name =""foo""> <consulservicediscovery url datacenter =""neverland""/> </servicecall> <to uri =""mock:result""/> </route> +</camelcontext> +*available option +[width=""100%"",cols=""3,1m,6"",options=""header""] name java type description proto string transport protocol desired service default ""_tcp"" domain string user name use basic authentication +[source,java] +.example +from(""direct:start"") .servicecall(""foo"") .dnsservicediscovery(""my.domain.com"") .to(""mock:result""); +[source,xml] +.xml dsl +<camelcontext xmlns <route> <from uri =""direct:start""/> <servicecall name =""foo""> <dnsservicediscovery domain =""my.domain.com""/> </servicecall> <to uri =""mock:result""/> </route> +</camelcontext> *etcd service discovery +to leverage etcd service discover maven user need add following dependency pom .xml +[source,xml] +<dependency> <groupid>org.apache.camel</groupid> <artifactid>camel-etcd</artifactid> use version camel core version <version>x.y.z</version> +</dependency> +*available option +[width=""100%"",cols=""3,1m,6"",options=""header""] name java type description uris string uris client connect username string user name use basic authentication password string password use basic authentication timeout long set maximum time action could take complete servicepath string path look service discovery default ""/services"" type string set discovery type valid value -demand watch +[source,java] +.example +from(""direct:start"") .servicecall(""foo"") .etcdservicediscovery() .uris("" .servicepath(""/camel/services"") .end() .to(""mock:result""); +[source,xml] +.xml dsl +<camelcontext xmlns <route> <from uri =""direct:start""/> <servicecall name =""foo""> <etcdservicediscovery uris servicepath =""/camel/services""/> </servicecall> <to uri =""mock:result""/> </route> +</camelcontext> *kubernetes service discovery +to leverage kubernetes service discover maven user need add following dependency pom .xml +[source,xml] +<dependency> <groupid>org.apache.camel</groupid> <artifactid>camel-kubernetes</artifactid> use version camel core version <version>x.y.z</version> +</dependency> +*available option +[width=""100%"",cols=""3,1m,6"",options=""header""] name java type description lookup string perform service lookup possible value client dns environment apiversion string kubernetes api version using client lookup cacertdata string set certificate authority data using client lookup cacertfile string set certificate authority data loaded file using client lookup clientcertdata string set client certificate data using client lookup clientcertfile string set client certificate data loaded file using client lookup clientkeyalgo string set client keystore algorithm rsa using client lookup clientkeydata string set client keystore data using client lookup clientkeyfile string set client keystore data loaded file using client lookup clientkeypassphrase string set client keystore passphrase using client lookup dnsdomain string set dns domain use dns lookup namespace string kubernetes namespace use default namespace 's name taken environment variable kubernetes_master oauthtoken string set oauth token authentication (instead username /password) using client lookup username string set username authentication using client lookup password string set password authentication using client lookup trustcerts boolean set whether turn trust certificate check using client lookup +[source,java] +.java dsl +from(""direct:start"") .servicecall(""foo"") .kubernetesservicediscovery() .lookup(""dns"") .namespace(""mynamespace"") .dnsdomain(""my.domain.com"") .end() .to(""mock:result""); +[source,xml] +.xml dsl +<camelcontext xmlns <route> <from uri =""direct:start""/> <servicecall name =""foo""> <kubernetesservicediscovery lookup =""dns"" namespace =""mynamespace"" dnsdomain =""my.domain.com""/> </servicecall> <to uri =""mock:result""/> </route> +</camelcontext> shared configuration +the service call eip configured straight route definition shared configuration example two configuration registered camel context +[source,java] +.example +servicecallconfigurationdefinition globalconf new servicecallconfigurationdefinition +globalconf.setservicediscovery( name array .aslist( new defaultservicedefinition (name, ""my.host1.com"", new defaultservicedefinition (name, ""my.host2.com"", +globalconf.setservicechooser( list list .get(threadlocalrandom.current().nextint(list.size())) +servicecallconfigurationdefinition httpsconf new servicecallconfigurationdefinition +httpsconf.setservicefilter( list list .stream().filter(s .getport() ).collect(tolist()) +getcontext().setservicecallconfiguration(globalconf); +getcontext().addservicecallconfiguration(""https"", httpsconf +each service call definition configuration inheriths ```globalconf``` see default configuration reference ```httpsconf``` rute follow +[source,java] +.example +rom(""direct_:start"") .servicecall() .name(""foo"") .servicecallconfiguration(""https"") .end() .to(""mock:result""); +this route leverage service discovery service chooser ```globalconf``` service filter ```httpsconf``` override needed straight route +[source,java] +.example +rom(""direc_:start"") .servicecall() .name(""foo"") .servicecallconfiguration(""https"") .servicechooser(list list .get(0)) .end() .to(""mock:result""); spring boot support +in spring -boot application externalize configuration option +[source,properties] +.application.properties configured stright tot route included show property placeholder support +service.name foo property mandatory included show configure service discovery implementation provided camel -consul +camel.cloud.consul.service-discovery.url add static list server service named foo +camel.cloud.service-discovery.services[foo] host1 .static:8080,host2.static:8080 +[source,java] +.routes +@component +public class myroutebuilder implement routebuilder @override public void configure throw exception (""direct:start"") .servicecall(""{{service.name}}"");",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C0be5337630534f32b8226bf42f53098d%40git.apache.org%3E,2017-04-18 11:09:43,commits,364.0,camel git commit add servicecall eip documentation
112,180,180,126.0,581.0,Luca Burgazzoli (JIRA),work camel started luca burgazzoli service call allow use property customize underlying camel component used implement service -call concept key camel url project camel issue type improvement component camel -core reporter luca burgazzoli assignee luca burgazzoli fix today configuration via dsl service call 's concpetts (i.e. service discovery limited option hard coded dsl would nice leverage available property customize underlying component message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064660.1492510699000.305128.1492516721554%40Atlassian.JIRA%3E,2017-04-18 11:58:41,issues,585.0,[jira] [work started (camel-11161) service call allow use property customize underlying camel component used implement service -call concept
113,183,183,113.0,362.0,davscl...@apache.org,"repository camel updated branch ref /heads/master e961a2a8e 89ba56d3d polished example project commit tree diff branch ref /heads/master commit 89ba56d3de1b7181e158ac36d38d4d80ea56eca7 parent e961a2a author claus ibsen <davsclaus@apache.org> authored tue apr committer claus ibsen <davsclaus@apache.org> committed tue apr .../readme.adoc .../service/src/main/bash/consul-run-linux.sh .../service/src/main/bash/consul-run-osx.sh .../service/src/main/bash/consul-run.sh file changed insertion deletion diff --git /examples/camel-example-spring-cloud-servicecall/readme.adoc b /examples/camel-example-spring-cloud-servicecall/readme.adoc index 8d5f385 ..0d0fbce /examples/camel-example-spring-cloud-servicecall/readme.adoc b /examples/camel-example-spring-cloud-servicecall/readme.adoc using multiple shell start consul cd service src /main/bash/consul-run.sh src /main/bash/consul-run-linux.sh (for linux src /main/bash/consul-run-osx.sh (for mac osx start service diff --git /examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-linux.sh b /examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-linux.sh new file mode index ..14afcfe /dev/null b /examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-linux.sh +#!/usr/bin/env bash +consul_ver=""0.8.1"" +consul_zip=""consul_${consul_ver}_linux_amd64.zip"" cleanup +rm -rf ""target/consul-data"" +rm -rf ""target/consul-config"" +rm -rf ""target/consul"" +mkdir -p target +mkdir -p target /consul-data +mkdir -p target /consul-config +if -f target /${consul_zip} wget -o target /${consul_zip} +fi +cat target /consul-config/services.json <<eof ""services"": ""id"": ""s1i1"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s1i2"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s1i3"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s1i4"", ""name"": ""service-1"", ""address"": ""localhost"", ""port"": ""id"": ""s2i1"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s2i2"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s2i3"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s2i4"", ""name"": ""service-2"", ""address"": ""localhost"", ""port"": +eof +unzip -d target target /${consul_zip} +target/consul agent -server -bootstrap -datacenter camel -advertise -bind -log-level trace -data-dir target /consul-data -config-dir target /consul-config newline end file diff --git /examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-osx.sh b /examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-osx.sh new file mode index ..4b62282 /dev/null b /examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-osx.sh +#!/usr/bin/env bash +consul_ver=""0.8.1"" +consul_zip=""consul_${consul_ver}_darwin_amd64.zip"" cleanup +rm -rf ""target/consul-data"" +rm -rf ""target/consul-config"" +rm -rf ""target/consul"" +mkdir -p target +mkdir -p target /consul-data +mkdir -p target /consul-config +if -f target /$consul_zip echo downloading curl -o target /$consul_zip +fi +cat target /consul-config/services.json <<eof ""services"": ""id"": ""s1i1"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s1i2"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s1i3"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s1i4"", ""name"": ""service-1"", ""address"": ""localhost"", ""port"": ""id"": ""s2i1"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s2i2"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s2i3"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s2i4"", ""name"": ""service-2"", ""address"": ""localhost"", ""port"": +eof +unzip -d target target /$consul_zip +chmod +x target /consul +target/consul agent -server -bootstrap -datacenter camel -advertise -bind -log-level trace -data-dir target /consul-data -config-dir target /consul-config newline end file diff --git /examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run.sh b /examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run.sh deleted file mode index f5ac79c /examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run.sh /dev/null -#!/usr/bin/env bash -consul_ver=""0.7.5"" -consul_zip=""consul_${consul_ver}_linux_amd64.zip"" cleanup -rm -rf ""target/consul-data"" -rm -rf ""target/consul-config"" -rm -rf ""target/consul"" -mkdir -p target -mkdir -p target /consul-data -mkdir -p target /consul-config -if -f target /${consul_zip} wget -o target /${consul_zip} -fi -cat target /consul-config/services.json <<eof ""services"": ""id"": ""s1i1"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s1i2"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s1i3"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s1i4"", ""name"": ""service-1"", ""address"": ""localhost"", ""port"": ""id"": ""s2i1"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s2i2"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s2i3"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s2i4"", ""name"": ""service-2"", ""address"": ""localhost"", ""port"": -eof -unzip -d target target /${consul_zip} -target/consul agent -server -bootstrap -datacenter camel -advertise -bind -log-level trace -data-dir target /consul-data -config-dir target /consul-config newline end file",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C639ed319227c4d7b9e413e844ebeae34%40git.apache.org%3E,2017-04-18 11:08:29,commits,362.0,camel git commit polished example
114,184,184,124.0,363.0,davscl...@apache.org,"repository camel updated branch ref /heads/master 4f01b7861 bef5ab7ec polished example project commit tree diff branch ref /heads/master commit bef5ab7ec52a55394ea516dd9836fb62d7cac571 parent 4f01b78 author claus ibsen <davsclaus@apache.org> authored tue apr committer claus ibsen <davsclaus@apache.org> committed tue apr .../readme.adoc .../services/src/main/bash/consul-run-linux.sh .../services/src/main/bash/consul-run-osx.sh .../services/src/main/bash/consul-run.sh .../readme.adoc .../service/src/main/bash/consul-run-linux.sh .../service/src/main/bash/consul-run-osx.sh file changed insertion deletion diff --git /examples/camel-example-spring-boot-servicecall/readme.adoc b /examples/camel-example-spring-boot-servicecall/readme.adoc index 2a0d097 ..e02ce31 /examples/camel-example-spring-boot-servicecall/readme.adoc b /examples/camel-example-spring-boot-servicecall/readme.adoc using multiple shell start consul cd service src /main/bash/consul-run.sh src /main/bash/consul-run-linx.sh (for linux src /main/bash/consul-run-osx.sh (for mac osx start service service group new shell keep calling http endpoint 'll notice consumed using round robin policy one service registered consul taken account according blacklist web console +you open consul web console +where find information service state information find information apache camel website diff --git /examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run-linux.sh b /examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run-linux.sh new file mode index ..aa5dd3f /dev/null b /examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run-linux.sh +#!/usr/bin/env bash +consul_ver=""0.8.1"" +consul_zip=""consul_${consul_ver}_linux_amd64.zip"" cleanup +rm -rf ""target/consul-data"" +rm -rf ""target/consul-config"" +rm -rf ""target/consul"" +mkdir -p target +mkdir -p target /consul-data +mkdir -p target /consul-config +if -f target /${consul_zip} wget -o target /${consul_zip} +fi +cat target /consul-config/services.json <<eof ""services"": ""id"": ""s1i1"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s1i2"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s1i3"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": +eof +unzip -d target target /${consul_zip} +target/consul agent -server -bootstrap -datacenter camel -advertise -bind -log-level trace -data-dir target /consul-data -config-dir target /consul-config -ui newline end file diff --git /examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run-osx.sh b /examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run-osx.sh new file mode index ..b3be9e1 /dev/null b /examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run-osx.sh +#!/usr/bin/env bash +consul_ver=""0.8.1"" +consul_zip=""consul_${consul_ver}_darwin_amd64.zip"" cleanup +rm -rf ""target/consul-data"" +rm -rf ""target/consul-config"" +rm -rf ""target/consul"" +mkdir -p target +mkdir -p target /consul-data +mkdir -p target /consul-config +if -f target /$consul_zip echo downloading curl -o target /$consul_zip +fi +cat target /consul-config/services.json <<eof ""services"": ""id"": ""s1i1"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s1i2"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s1i3"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": +eof +unzip -d target target /$consul_zip +chmod +x target /consul +target/consul agent -server -bootstrap -datacenter camel -advertise -bind -log-level trace -data-dir target /consul-data -config-dir target /consul-config -ui newline end file diff --git /examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run.sh b /examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run.sh deleted file mode index bb74d96 /examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run.sh /dev/null -#!/usr/bin/env bash -consul_ver=""0.7.5"" -consul_zip=""consul_${consul_ver}_linux_amd64.zip"" cleanup -rm -rf ""target/consul-data"" -rm -rf ""target/consul-config"" -rm -rf ""target/consul"" -mkdir -p target -mkdir -p target /consul-data -mkdir -p target /consul-config -if -f target /${consul_zip} wget -o target /${consul_zip} -fi -cat target /consul-config/services.json <<eof ""services"": ""id"": ""s1i1"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s1i2"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": ""id"": ""s1i3"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"", ""port"": -eof -unzip -d target target /${consul_zip} -target/consul agent -server -bootstrap -datacenter camel -advertise -bind -log-level trace -data-dir target /consul-data -config-dir target /consul-config newline end file diff --git /examples/camel-example-spring-cloud-servicecall/readme.adoc b /examples/camel-example-spring-cloud-servicecall/readme.adoc index 0d0fbce ..3e66d3b /examples/camel-example-spring-cloud-servicecall/readme.adoc b /examples/camel-example-spring-cloud-servicecall/readme.adoc new shell keep calling http endpoint 'll notice consumed using round robin policy service matching specific tag consumed web console +you open consul web console +where find information service state information find information apache camel website diff --git /examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-linux.sh b /examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-linux.sh index 14afcfe ..c170c04 /examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-linux.sh b /examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-linux.sh target /consul -bind -log-level trace -data-dir target /consul-data -config-dir target /consul-config newline end file -config-dir target /consul-config -ui newline end file diff --git /examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-osx.sh b /examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-osx.sh index 4b62282 ..ff314cc /examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-osx.sh b /examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-osx.sh target /consul -bind -log-level trace -data-dir target /consul-data -config-dir target /consul-config newline end file -config-dir target /consul-config -ui newline end file",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cf8b363ce36914d9397d29cac12a2cd88%40git.apache.org%3E,2017-04-18 11:38:19,commits,363.0,camel git commit polished example
115,185,185,115.0,206.0,dmvolod,"github user dmvolod opened pull request protobuf issue check running o platform support protobuf generator plugin platform 't support protobuf test code generation assembly launch skipped supported platform linux (x86 -bit) window (x86 -bit) osx (x86 -bit) prevents fails build without ""fastinstall"" profile run unsupported protoc plugin platform merge pull request git repository running git pull protobuf -issue alternatively review apply change patch close pull request make commit master /trunk branch (at least following commit message close commit 35ab9fa64958ba451cc5d2ca81a499059831ddc1 author dmitry volodin <dmvolod@gmail.com> date -04-18t10:59:18z camel -protobuf: check o support protobuf generator plugin commit cb9e031f46ec917793775f49535633af88da02c3 author dmitry volodin <dmvolod@gmail.com> date -04-18t11:08:10z camel -protobuf: set gmaven -plugin version global param project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3Cgit-pr-1636-camel%40git.apache.org%3E,2017-04-18 11:10:54,mail,206.0,[github] camel pull request protobuf issue
116,186,186,117.0,366.0,davscl...@apache.org,repository camel updated branch ref /heads/master 33bb03fb2 b3f0c7407 camel -protobuf: set gmaven -plugin version global param project commit tree diff branch ref /heads/master commit b3f0c7407633538fd4648175a87522343dd28f05 parent ecaf006 author dmitry volodin <dmvolod@gmail.com> authored tue apr committer claus ibsen <davsclaus@apache.org> committed tue apr component /camel-protobuf/pom.xml file changed insertion deletion diff --git /components/camel-protobuf/pom.xml b /components/camel-protobuf/pom.xml index f97679c ..536d95c /components/camel-protobuf/pom.xml b /components/camel-protobuf/pom.xml <plugin> <groupid>org.codehaus.gmaven</groupid> <artifactid>gmaven-plugin</artifactid> <version>1.5</version> <version>${gmaven-plugin-version}</version> <executions> <execution> <phase>validate</phase>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cc9356b760c6d4805b7146ca866dd8676%40git.apache.org%3E,2017-04-18 11:21:09,commits,366.0,camel git commit camel -protobuf: set gmaven -plugin version global param
117,187,187,118.0,367.0,davscl...@apache.org,"camel -protobuf: check o support protobuf generator plugin project commit tree diff branch ref /heads/master commit ecaf006408b55857abf341a505124befc4fb4be5 parent 33bb03f author dmitry volodin <dmvolod@gmail.com> authored tue apr committer claus ibsen <davsclaus@apache.org> committed tue apr component /camel-protobuf/pom.xml file changed insertion deletion diff --git /components/camel-protobuf/pom.xml b /components/camel-protobuf/pom.xml index ..f97679c /components/camel-protobuf/pom.xml b /components/camel-protobuf/pom.xml <project xmlns xmlns :xsi="" xsi :schemalocation="" <modelversion>4.0.0</modelversion> <parent> <version>${protobuf-version}</version> </dependency> <dependency> <groupid>commons-io</groupid> <groupid>commons-io</groupid> <artifactid>commons-io</artifactid> </dependency> <scope>test</scope> </dependency> </dependencies> <build> <extensions> operating system cpu architecture detection extension <version>1.4.1.final</version> </extension> </extensions> <plugins> check running o platform support protobuf generator plugin platform 't support protobuf test code generation assembly launch skipped supported platform linux (x86 -bit) window (x86 -bit) osx (x86 -bit) <plugin> <groupid>org.codehaus.gmaven</groupid> <artifactid>gmaven-plugin</artifactid> <version>1.5</version> <executions> <execution> <phase>validate</phase> <goals> <goal>execute</goal> </goals> <configuration> <source><![cdata[pom.properties['skip-test']=pom.properties['os.detected.classifier'].matches('^.*?(linux|windows|osx)-x86.*$') 'false' 'true';]]></source> </configuration> </execution> </executions> </plugin> protobuf java code generator plugin <plugin> <groupid>org.xolstice.maven.plugins</groupid> </goals> <configuration> <protocartifact>com.google.protobuf:protoc:${protobuf-version}:exe:${os.detected.classifier}</protocartifact> <skip>${skip-test}</skip> </configuration> </execution> </executions> </plugin> <plugin> <artifactid>maven-compiler-plugin</artifactid> <executions> <execution> <id>default-testcompile</id> <phase>test-compile</phase> <goals> <goal>testcompile</goal> </goals> <configuration> <skip>${skip-test}</skip> </configuration> </execution> </executions> </plugin> <plugin> <groupid>org.apache.maven.plugins</groupid> <artifactid>maven-surefire-plugin</artifactid> <configuration> <skiptests>${skip-test}</skiptests> </configuration> </plugin> </plugins> </build> </project> newline end file",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C971bc01990b54dd98b543e3fea3351da%40git.apache.org%3E,2017-04-18 11:21:10,commits,367.0,camel git commit camel -protobuf: check o support protobuf generator plugin
118,188,188,125.0,207.0,dmvolod,github user dmvolod closed pull request project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170418114251.D3BB3DFC70%40git1-us-west.apache.org%3E,2017-04-18 11:42:51,mail,207.0,[github] camel pull request protobuf issue
119,189,189,129.0,208.0,dmvolod,"github user dmvolod opened pull request camel -grpc: check o support protoc /grpc generator plugin check running o platform support protobuf generator plugin platform 't support protobuf test code generation assembly launch skipped prevents fails build without ""fastinstall"" profile run unsupported protoc plugin platform merge pull request git repository running git pull grpc -issue alternatively review apply change patch close pull request make commit master /trunk branch (at least following commit message close commit 1d82e2074266f2ae75abe79128344acc5ebb88c9 author dmitry volodin <dmvolod@gmail.com> date -04-18t12:10:44z camel -grpc: check o support protobuf generator plugin project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3Cgit-pr-1637-camel%40git.apache.org%3E,2017-04-18 12:14:39,mail,208.0,[github] camel pull request camel -grpc: check o support protoc /gr...
120,190,190,132.0,369.0,davscl...@apache.org,"repository camel updated branch ref /heads/master bef5ab7ec 1d82e2074 camel -grpc: check o support protobuf generator plugin project commit tree diff branch ref /heads/master commit 1d82e2074266f2ae75abe79128344acc5ebb88c9 parent bef5ab7 author dmitry volodin <dmvolod@gmail.com> authored tue apr committer dmitry volodin <dmvolod@gmail.com> committed tue apr component /camel-grpc/pom.xml file changed insertion deletion diff --git /components/camel-grpc/pom.xml b /components/camel-grpc/pom.xml index 4d45f0c ..af65988 /components/camel-grpc/pom.xml b /components/camel-grpc/pom.xml limitation license <project xmlns xmlns :xsi="" xsi :schemalocation="" xsi :schemalocation="" <modelversion>4.0.0</modelversion> <parent> <packaging>jar</packaging> <name>camel grpc </name> <description>camel component grpc (remote procedure call support </description> <properties> <camel.osgi.export.pkg>org.apache.camel.component.grpc.*;${camel.osgi.version}</camel.osgi.export.pkg> <camel.osgi.export.service>org.apache.camel.spi.componentresolver;component=grpc</camel.osgi.export.service> <artifactid>grpc-stub</artifactid> <version>${grpc-version}</version> </dependency> <dependency> <groupid>org.springframework</groupid> <artifactid>spring-core</artifactid> <scope>test</scope> </dependency> </dependencies> <build> <extensions> operating system cpu architecture detection extension <version>1.4.1.final</version> </extension> </extensions> <plugins> check running o platform support protobuf generator plugin platform 't support protobuf test code generation assembly launch skipped supported platform linux (x86 -bit) window (x86 -bit) osx (x86 -bit) <plugin> <groupid>org.codehaus.gmaven</groupid> <artifactid>gmaven-plugin</artifactid> <version>${gmaven-plugin-version}</version> <executions> <execution> <phase>validate</phase> <goals> <goal>execute</goal> </goals> <configuration> <source><![cdata[pom.properties['skip-test']=pom.properties['os.detected.classifier'].matches('^.*?(linux|windows|osx)-x86.*$') 'false' 'true';]]></source> </configuration> </execution> </executions> </plugin> grpc protobuf java code generator plugin <plugin> <groupid>org.xolstice.maven.plugins</groupid> <protocartifact>com.google.protobuf:protoc:${protobuf-version}:exe:${os.detected.classifier}</protocartifact> <pluginid>grpc-java</pluginid> <pluginartifact>io.grpc:protoc-gen-grpc-java:${grpc-version}:exe:${os.detected.classifier}</pluginartifact> <skip>${skip-test}</skip> </configuration> <executions> <execution> </execution> </executions> </plugin> <plugin> <artifactid>maven-compiler-plugin</artifactid> <executions> <execution> <id>default-testcompile</id> <phase>test-compile</phase> <goals> <goal>testcompile</goal> </goals> <configuration> <skip>${skip-test}</skip> </configuration> </execution> </executions> </plugin> <plugin> <groupid>org.apache.maven.plugins</groupid> <artifactid>maven-surefire-plugin</artifactid> <configuration> <skiptests>${skip-test}</skiptests> </configuration> </plugin> </plugins> </build> </project>",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C29a67d48337041cb9a58ce5068414454%40git.apache.org%3E,2017-04-18 12:26:07,commits,369.0,camel git commit camel -grpc: check o support protobuf generator plugin
121,193,193,116.0,365.0,acosent...@apache.org,"repository camel updated branch ref /heads/master 60675efc3 33bb03fb2 avoid use stringutils favor objecthelper project commit tree diff branch ref /heads/master commit 33bb03fb24db0df2489686513cf0676983a3df27 parent 60675ef author andrea cosentino <ancosen@gmail.com> authored tue apr committer andrea cosentino <ancosen@gmail.com> committed tue apr .../java/org/apache/camel/component/grpc/grpcproducer.java file changed insertion deletion diff --git /components/camel-grpc/src/main/java/org/apache/camel/component/grpc/grpcproducer.java b /components/camel-grpc/src/main/java/org/apache/camel/component/grpc/grpcproducer.java index 10d8faf ..232b8d7 /components/camel-grpc/src/main/java/org/apache/camel/component/grpc/grpcproducer.java b /components/camel-grpc/src/main/java/org/apache/camel/component/grpc/grpcproducer.java import org .apache.camel.asyncprocessor; import org .apache.camel.exchange; import org .apache.camel.message; import org .apache.camel.impl.defaultproducer; +import org .apache.camel.util.objecthelper; import org .slf4j.logger; import org .slf4j.loggerfactory; -import org .springframework.util.stringutils; represents asynchronous synchronous grpc producer implementation public class grpcproducer extends defaultproducer implement asyncprocessor protected void initializechannel (!stringutils.isempty(configuration.gethost()) !stringutils.isempty(configuration.getport())) (!objecthelper.isempty(configuration.gethost()) !objecthelper.isempty(configuration.getport())) log .info(""creating channel remote grpc server configuration .gethost() configuration .getport()); channel managedchannelbuilder .foraddress(configuration.gethost(), configuration .getport()).useplaintext(configuration.getuseplaintext()).build(); else (!stringutils.isempty(configuration.gettarget())) else (!objecthelper.isempty(configuration.gettarget())) log .info(""creating channel remote grpc server configuration .gettarget()); channel managedchannelbuilder .fortarget(configuration.gettarget()).useplaintext(configuration.getuseplaintext()).build(); else",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C043bf010120840de9dcc5e49fb1d0ebb%40git.apache.org%3E,2017-04-18 11:17:25,commits,365.0,camel git commit avoid use stringutils favor objecthelper
122,196,196,134.0,370.0,acosent...@apache.org,repository camel updated branch ref /heads/master 1d82e2074 915b53685 upgrade kubernetes model version project commit tree diff branch ref /heads/master commit 49ae86c4868b2fc82ce094efe0eac90f1f966140 parent 1d82e20 author andrea cosentino <ancosen@gmail.com> authored tue apr committer andrea cosentino <ancosen@gmail.com> committed tue apr parent /pom.xml file changed insertion deletion diff --git /parent/pom.xml b /parent/pom.xml index d5954e8 ..99168ff /parent/pom.xml b /parent/pom.xml <kie-version>6.5.0.final</kie-version> <krati-version>0.4.9</krati-version> <kubernetes-client-version>2.2.13</kubernetes-client-version> <kubernetes-model-version>1.0.67</kubernetes-model-version> <kubernetes-model-version>1.0.72</kubernetes-model-version> <kxml2-bundle-version>2.3.0_3</kxml2-bundle-version> <leveldbjni-version>1.8</leveldbjni-version> <libphonenumber-version>8.3.3</libphonenumber-version>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Ce0df644a013f4f298599ab186e64347d%40git.apache.org%3E,2017-04-18 12:27:16,commits,370.0,camel git commit upgrade kubernetes model version
123,197,197,135.0,371.0,acosent...@apache.org,upgrade kubernetes client version project commit tree diff branch ref /heads/master commit 915b5368566d250dad2e58b4b6b9813bed335a61 parent 49ae86c author andrea cosentino <ancosen@gmail.com> authored tue apr committer andrea cosentino <ancosen@gmail.com> committed tue apr parent /pom.xml file changed insertion deletion diff --git /parent/pom.xml b /parent/pom.xml index 99168ff ..b3284be /parent/pom.xml b /parent/pom.xml <karaf4-version>4.1.1</karaf4-version> <kie-version>6.5.0.final</kie-version> <krati-version>0.4.9</krati-version> <kubernetes-client-version>2.2.13</kubernetes-client-version> <kubernetes-client-version>2.2.14</kubernetes-client-version> <kubernetes-model-version>1.0.72</kubernetes-model-version> <kxml2-bundle-version>2.3.0_3</kxml2-bundle-version> <leveldbjni-version>1.8</leveldbjni-version>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Ccc4f4a1bbbdb4c96aa1ddfae3862d806%40git.apache.org%3E,2017-04-18 12:27:17,commits,371.0,camel git commit upgrade kubernetes client version
124,200,200,144.0,376.0,davscl...@apache.org,"repository camel updated branch ref /heads/master ff463456a b3ac9932f camel add component component table add description signed -off-by: jens reimann <jreimann@redhat.com> project commit tree diff branch ref /heads/master commit 8b277e6db5ff7fc796e32cfa33f043a2d5ee6584 parent ff46345 author jens reimann <jreimann@redhat.com> authored fri apr committer claus ibsen <davsclaus@apache.org> committed tue apr .../org/apache/camel/component/milo/client/miloclientendpoint.java file changed insertion deletion diff --git /components/camel-milo/src/main/java/org/apache/camel/component/milo/client/miloclientendpoint.java b /components/camel-milo/src/main/java/org/apache/camel/component/milo/client/miloclientendpoint.java index ba07ea4 ..56041ff /components/camel-milo/src/main/java/org/apache/camel/component/milo/client/miloclientendpoint.java b /components/camel-milo/src/main/java/org/apache/camel/component/milo/client/miloclientendpoint.java import org .eclipse.milo.opcua.stack.core.types.builtin.expandednodeid; connect opc ua server using binary protocol acquiring telemetry data -@uriendpoint(firstversion scheme ""milo-client"", syntax ""milo-client:endpointuri"", title ""milo based opc ua client consumerclass miloclientconsumer .class, label ""iot"") +@uriendpoint(firstversion scheme ""milo-client"", syntax ""milo-client:endpointuri"", title ""opc ua client consumerclass miloclientconsumer .class, label ""iot"") public class miloclientendpoint extends defaultendpoint implement miloclientitemconfiguration",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cb0d782fc27d5476ea7adeff0c0c190b4%40git.apache.org%3E,2017-04-18 14:04:53,commits,376.0,camel git commit camel add component component table add description
125,201,201,145.0,377.0,davscl...@apache.org,regen project commit tree diff branch ref /heads/master commit b3ac9932f100660755818028260338c02d780881 parent 8b277e6 author claus ibsen <davsclaus@apache.org> authored tue apr committer claus ibsen <davsclaus@apache.org> committed tue apr .../camel-milo/src/main/docs/milo-client-component.adoc component /readme.adoc doc /user-manual/en/summary.md file changed insertion deletion diff --git /components/camel-milo/src/main/docs/milo-client-component.adoc b /components/camel-milo/src/main/docs/milo-client-component.adoc index 1be664f ..a6dd6e0 /components/camel-milo/src/main/docs/milo-client-component.adoc b /components/camel-milo/src/main/docs/milo-client-component.adoc milo based opc ua client component opc ua client component *available camel version component component option start -the milo based opc ua client component support option listed +the opc ua client component support option listed word shared connection located combination endpoint uri endpoint option start -the milo based opc ua client endpoint configured using uri syntax +the opc ua client endpoint configured using uri syntax milo -client:endpointuri diff --git /components/readme.adoc b /components/readme.adoc index fbf16b9 ..09c9bf1 /components/readme.adoc b /components/readme.adoc number component jar artifact deprecated link :camel-ibatis/src/main/docs/ibatis-component.adoc[ibatis] (camel-ibatis) `ibatis:statement` *deprecated* performs query poll insert update delete relational database using apache ibatis link :camel-ignite/src/main/docs/ignite-component.adoc[ignite] (camel-ignite) -`ignite:endpointname` ignite component integrates apache camel apache ignite link :camel-infinispan/src/main/docs/infinispan-component.adoc[infinispan] (camel-infinispan) `infinispan:cachename` reading /writing /to infinispan distributed key /value store data grid number component jar artifact deprecated link :camel-metrics/src/main/docs/metrics-component.adoc[metrics] (camel-metrics) `metrics:metricstype:metricsname` collect various metric directly camel route using dropwizard metric library link :camel-milo/src/main/docs/milo-client-component.adoc[milo based opc ua client (camel-milo) -`milo-client:endpointuri` connect opc ua server using binary protocol acquiring telemetry data link :camel-mina/src/main/docs/mina-component.adoc[mina] (camel-mina) `mina:protocol:host:port` *deprecated* socket level networking using tcp udp apache mina .x library number component jar artifact deprecated link :camel-olingo4/camel-olingo4-component/src/main/docs/olingo4-component.adoc[olingo4] (camel-olingo4) `olingo4:apiname/methodname` communicates odata service using apache olingo odata api link :camel-milo/src/main/docs/milo-client-component.adoc[opc ua client (camel-milo) +`milo-client:endpointuri` connect opc ua server using binary protocol acquiring telemetry data link :camel-milo/src/main/docs/milo-server-component.adoc[opc ua server (camel-milo) `milo-server:itemid` make telemetry data available opc ua server diff --git /docs/user-manual/en/summary.md b /docs/user-manual/en/summary.md index a1bbc02 ..25968df /docs/user-manual/en/summary.md b /docs/user-manual/en/summary.md [http](http-component.adoc) [http4](http4-component.adoc) [ibatis](ibatis-component.adoc) [ignite](ignite-component.adoc) [imap](imap-component.adoc) [infinispan](infinispan-component.adoc) [influxdb](influxdb-component.adoc) [lucene](lucene-component.adoc) [lumberjack](lumberjack-component.adoc) [metrics](metrics-component.adoc) [milo based opc ua client ](milo-client-component.adoc) [mina](mina-component.adoc) [mina2](mina2-component.adoc) [mllp](mllp-component.adoc) [netty4 http ](netty4-http-component.adoc) [olingo2](olingo2-component.adoc) [olingo4](olingo4-component.adoc) [opc ua client ](milo-client-component.adoc) [opc ua server ](milo-server-component.adoc) [openshift](openshift-component.adoc) [openstack cinder ](openstack-cinder-component.adoc),http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C3e213d571ef24fc5bbb47a5e324142b1%40git.apache.org%3E,2017-04-18 14:04:54,commits,377.0,camel git commit regen
126,202,202,152.0,193.0,ctron,github user ctron closed pull request project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170418150528.3EF8ADFBDA%40git1-us-west.apache.org%3E,2017-04-18 15:05:28,mail,193.0,[github] camel pull request camel add component component table ad
127,205,205,227.0,136.0,davscl...@apache.org,repository camel updated branch ref /heads/master 4f415029d 1d1daefe8 polished project commit tree diff branch ref /heads/master commit 1d1daefe899db83383d5e46bbb4bd67db71fad2a parent 4f41502 author claus ibsen <davsclaus@apache.org> authored wed apr committer claus ibsen <davsclaus@apache.org> committed wed apr component /camel-milo/src/main/docs/milo-client-component.adoc component /camel-milo/src/main/docs/milo-server-component.adoc file changed deletion diff --git /components/camel-milo/src/main/docs/milo-client-component.adoc b /components/camel-milo/src/main/docs/milo-client-component.adoc index a6dd6e0 ..2fc8535 /components/camel-milo/src/main/docs/milo-client-component.adoc b /components/camel-milo/src/main/docs/milo-client-component.adoc *available camel version milo client component -*available camel *milo client component provides access opc ua server using milo implementation -*java component requires java runtime maven user need add following dependency `pom.xml` component diff --git /components/camel-milo/src/main/docs/milo-server-component.adoc b /components/camel-milo/src/main/docs/milo-server-component.adoc index 6b4d828 ..2573f9d /components/camel-milo/src/main/docs/milo-server-component.adoc b /components/camel-milo/src/main/docs/milo-server-component.adoc *available camel version eclipse milo server component -*available camel *milo server component provides opc ua server using milo implementation message sent endpoint camel available opc ua serve value write request opc ua client trigger message sent apache camel component option start opc ua server component support option listed,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C6b96bcc6a4f7438da64f023f5b7d409e%40git.apache.org%3E,2017-04-19 11:04:44,commits,136.0,camel git commit polished
128,206,206,139.0,194.0,Ancil hameed,"working jboss fuse want put soap request active mq queue putting soap request queue want response sent back soap request sample code snippet camel context replace (cxf:cxfendpoint address id =""soapinput"" serviceclass =""com.ws.demo.helloworld""/) (bean class =""com.ws.demo.soapresprocessor"" id =""soapresprocessor""/) (camelcontext id =""camelcontext"" xmlns (route id =""route1"" streamcache =""true"") (from id =""samplefrom"" uri =""cxf:bean:soapinput? dataformat =payload&amp;exchangepattern=inout""/) (when id =""whenbatch"") (xpath)starts-with(substring-after((/v1:processmessagerequest/name/text()), 'dest_name='), ""sample"")(/xpath)`enter code (to id =""tosampleq"" uri =""activemq:queue:sampleq?jmsmessagetype=text""/) (process id =""soapresprocess"" ref =""soapresprocessor""/) (/when) view message context sent camel user mailing list archive nabble .com.",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492520014899-5797816.post%40n5.nabble.com%3E,2017-04-18 12:53:34,users,195.0,active mq put soap request active mq get back soap response
129,207,207,154.0,200.0,"Andathodan Tiringoli, Ancil Hameed","hi claus ibsen please help working jboss fuse want put soap request active mq queue putting soap request queue want response sent back soap request sample code snippet camel context <cxf:cxfendpoint address id =""soapinput"" serviceclass =""com.ws.demo.helloworld""/> <bean class =""com.ws.demo.soapresprocessor"" id =""soapresprocessor""/> <camelcontext id =""camelcontext"" xmlns <route id =""route1"" streamcache =""true""> <from id =""samplefrom"" uri =""cxf:bean:soapinput? dataformat =payload&amp;exchangepattern=inout""/> <when id =""whenbatch""> <xpath>starts-with(substring-after((/v1:processmessagerequest/name/text()), 'dest_name='), ""sample"")</xpath>`enter code <to id =""tosampleq"" uri =""activemq:queue:sampleq?jmsmessagetype=text""/> <process id =""soapresprocess"" ref =""soapresprocessor""/> </when>",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C88aeb3caabab4192b8106b90b04fc672%40SW933EXP001.visa.com%3E,2017-04-18 15:20:06,users,201.0,use request reply jms
130,208,208,140.0,586.0,Zoran Regvart (JIRA),zoran regvart created camel summary add @generated annotation rest dsl swagger generated code key camel url project camel issue type improvement component tooling reporter zoran regvart assignee zoran regvart priority trivial rest dsl swagger code generation add {{@generated}} annotation source code help ides code analysis tool treat generated code generated message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064693.1492521308000.305569.1492521341890%40Atlassian.JIRA%3E,2017-04-18 13:15:41,issues,590.0,[jira] [created] (camel-11163) add @generated annotation rest dsl swagger generated code
131,209,209,141.0,374.0,zregv...@apache.org,"repository camel updated branch ref /heads/master 13d16f1db ff463456a camel add @generated annotation rest sl swagger generated code add `@generated` annotation generated source code `routebuilder` implementation way ides source code analysis tool know code generated project commit tree diff branch ref /heads/master commit ff463456afb5a66b9576806311deb9737a00c6c7 parent 13d16f1 author zoran regvart <zregvart@apache.org> authored tue apr committer zoran regvart <zregvart@apache.org> committed tue apr .../swagger/restdslsourcecodegenerator.java .../generator/swagger/restdslgeneratortest.java .../src/test/resources/myrestroute.txt .../src/test/resources/swaggerpetstore.txt file changed insertion deletion diff --git /tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/restdslsourcecodegenerator.java b /tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/restdslsourcecodegenerator.java index cd27c3b ..bbc4b22 /tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/restdslsourcecodegenerator.java b /tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/restdslsourcecodegenerator.java package org .apache.camel.generator.swagger; import java .io.ioexception; +import java .time.instant; import java .util.function.function; import java .util.stream.collector; +import javax .annotation.generated; import javax .lang.model.element.modifier; +import com .squareup.javapoet.annotationspec; import com .squareup.javapoet.javafile; import com .squareup.javapoet.methodspec; import com .squareup.javapoet.typespec; public abstract class restdslsourcecodegenerator <t> extends restdslgenerator <res private function <swagger, string classnamegenerator restdslsourcecodegenerator ::generateclassname; private instant generated instant .now(); private string indent default_indent private function <swagger, string packagenamegenerator restdslsourcecodegenerator ::generatepackagename; public abstract class restdslsourcecodegenerator <t> extends restdslgenerator <res return emitter .result(); instant generated return generated javafile generatesourcecode final methodspec methodspec generateconfiguremethod (swagger); public abstract class restdslsourcecodegenerator <t> extends restdslgenerator <res final typespec generatedroutebulder typespec .classbuilder(classnametouse).superclass(routebuilder.class) .addmodifiers(modifier.public, modifier .final).addmethod(methodspec) .addannotation(annotationspec.builder(generated.class).addmember(""value"", ""$s"", getclass ().getname()) .addmember(""date"", ""$s"", generated ()).build()) .addjavadoc(""generated swagger specification camel rest dsl generator .\n"").build(); final string packagenametouse packagenamegenerator .apply(swagger); public abstract class restdslsourcecodegenerator <t> extends restdslgenerator <res return javafile .builder(packagenametouse, generatedroutebulder ).indent(indent).build(); restdslsourcecodegenerator <t> withgeneratedtime (final instant generated .generated generated return static string generateclassname (final swagger swagger final info info swagger .getinfo(); (info null diff --git /tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/restdslgeneratortest.java b /tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/restdslgeneratortest.java index ..69aee57 /tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/restdslgeneratortest.java b /tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/restdslgeneratortest.java import java .net.urisyntaxexception; import java .nio.charset.standardcharsets; import java .nio.file.files; import java .nio.file.paths; +import java .time.instant; import io .swagger.models.swagger; import io .swagger.parser.swaggerparser; import static org .assertj.core.api.assertions.assertthat; public class restdslgeneratortest final instant generated instant .parse(""2017-10-17t00:00:00.000z""); final swagger swagger new swaggerparser ().read(""petstore.json""); @test public class restdslgeneratortest public void shouldgeneratesourcecodewithdefaults throw ioexception urisyntaxexception final stringbuilder code new stringbuilder restdslgenerator .toappendable(swagger).generate(code); restdslgenerator .toappendable(swagger).withgeneratedtime(generated).generate(code); final uri file restdslgeneratortest .class.getresource(""/swaggerpetstore.txt"").touri(); final string expectedcontent new string (files.readallbytes(paths.get(file)), standardcharsets .utf_8); public class restdslgeneratortest public void shouldgeneratesourcecodewithoptions throw ioexception urisyntaxexception final stringbuilder code new stringbuilder restdslgenerator .toappendable(swagger).withclassname(""myrestroute"").withpackagename(""com.example"") .withindent(""\t"").withdestinationgenerator(o ""direct:rest-"" .getoperationid()).generate(code); restdslgenerator .toappendable(swagger).withgeneratedtime(generated).withclassname(""myrestroute"") .withpackagename(""com.example"").withindent(""\t"") .withdestinationgenerator(o ""direct:rest-"" .getoperationid()).generate(code); final uri file restdslgeneratortest .class.getresource(""/myrestroute.txt"").touri(); final string expectedcontent new string (files.readallbytes(paths.get(file)), standardcharsets .utf_8); diff --git /tooling/swagger-rest-dsl-generator/src/test/resources/myrestroute.txt b /tooling/swagger-rest-dsl-generator/src/test/resources/myrestroute.txt index 4b19f69 ..d782300 /tooling/swagger-rest-dsl-generator/src/test/resources/myrestroute.txt b /tooling/swagger-rest-dsl-generator/src/test/resources/myrestroute.txt package com .example; +import javax .annotation.generated; import org .apache.camel.builder.routebuilder; import org .apache.camel.model.rest.collectionformat; import org .apache.camel.model.rest.restparamtype; import org .apache.camel.model.rest.restparamtype; generated swagger specification camel rest dsl generator +@generated( value ""org.apache.camel.generator.swagger.appendablegenerator"", date ""2017-10-17t00:00:00z"" public final class myrestroute extends routebuilder defines apache camel route using rest dsl fluent api diff --git /tooling/swagger-rest-dsl-generator/src/test/resources/swaggerpetstore.txt b /tooling/swagger-rest-dsl-generator/src/test/resources/swaggerpetstore.txt index 21d259c ..6a4cb0f /tooling/swagger-rest-dsl-generator/src/test/resources/swaggerpetstore.txt b /tooling/swagger-rest-dsl-generator/src/test/resources/swaggerpetstore.txt package io .swagger.petstore; +import javax .annotation.generated; import org .apache.camel.builder.routebuilder; import org .apache.camel.model.rest.collectionformat; import org .apache.camel.model.rest.restparamtype; import org .apache.camel.model.rest.restparamtype; generated swagger specification camel rest dsl generator +@generated( value ""org.apache.camel.generator.swagger.appendablegenerator"", date ""2017-10-17t00:00:00z"" public final class swaggerpetstore extends routebuilder defines apache camel route using rest dsl fluent api",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C694d96e31ace475a9426b02ad8bcbfff%40git.apache.org%3E,2017-04-18 13:17:12,commits,374.0,camel git commit camel add @generated annotation rest
132,210,210,142.0,587.0,Zoran Regvart (JIRA),zoran regvart resolved camel resolution implemented fix version /s: add @generated annotation rest dsl swagger generated code key camel url project camel issue type improvement component tooling reporter zoran regvart assignee zoran regvart priority trivial fix rest dsl swagger code generation add {{@generated}} annotation source code help ides code analysis tool treat generated code generated message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064693.1492521308000.305582.1492521461631%40Atlassian.JIRA%3E,2017-04-18 13:17:41,issues,591.0,[jira] [resolved] (camel-11163) add @generated annotation rest dsl swagger generated code
133,211,211,201.0,588.0,Zoran Regvart (JIRA),zoran regvart reopened camel {{date}} property {{@generated}} annotation optional add @generated annotation rest dsl swagger generated code key camel url project camel issue type improvement component tooling reporter zoran regvart assignee zoran regvart priority trivial fix rest dsl swagger code generation add {{@generated}} annotation source code help ides code analysis tool treat generated code generated message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064693.1492521308000.315761.1492591181591%40Atlassian.JIRA%3E,2017-04-19 08:39:41,issues,592.0,[jira] [reopened] (camel-11163) add @generated annotation rest dsl swagger generated code
134,212,212,204.0,375.0,zregv...@apache.org,"repository camel updated branch ref /heads/master 9cf875246 30308c9f9 camel add @generated annotation rest ...sl swagger generated code make `date` annotation member `@generated` annotation optional generation turned default project commit tree diff branch ref /heads/master commit 30308c9f9c453fb0731ca726a7821de839a4a1dd parent 9cf8752 author zoran regvart <zregvart@apache.org> authored wed apr committer zoran regvart <zregvart@apache.org> committed wed apr .../swagger/restdslsourcecodegenerator.java .../generator/swagger/restdslgeneratortest.java .../src/test/resources/swaggerpetstore.txt file changed insertion deletion diff --git /tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/restdslsourcecodegenerator.java b /tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/restdslsourcecodegenerator.java index bbc4b22 ..252bc40 /tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/restdslsourcecodegenerator.java b /tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/restdslsourcecodegenerator.java public abstract class restdslsourcecodegenerator <t> extends restdslgenerator <res private function <swagger, string packagenamegenerator restdslsourcecodegenerator ::generatepackagename; private boolean sourcecodetimestamps restdslsourcecodegenerator (final swagger swagger super (swagger); public abstract class restdslsourcecodegenerator <t> extends restdslgenerator <res return public restdslsourcecodegenerator <t> withoutsourcecodetimestamps sourcecodetimestamps false return public restdslsourcecodegenerator <t> withpackagename (final string packagename notempty (packagename, ""packagename""); .packagenamegenerator (s) packagename public abstract class restdslsourcecodegenerator <t> extends restdslgenerator <res return public restdslsourcecodegenerator <t> withsourcecodetimestamps sourcecodetimestamps true return methodspec generateconfiguremethod (final swagger swagger final methodspec .builder configure methodspec .methodbuilder(""configure"").addmodifiers(modifier.public) .returns(void.class).addjavadoc(""defines apache camel route using rest dsl fluent api .\n""); public abstract class restdslsourcecodegenerator <t> extends restdslgenerator <res final string classnametouse classnamegenerator .apply(swagger); final annotationspec .builder generatedannotation annotationspec .builder(generated.class).addmember(""value"", ""$s"", getclass ().getname()); (sourcecodetimestamps) generatedannotation .addmember(""date"", ""$s"", generated final typespec generatedroutebulder typespec .classbuilder(classnametouse).superclass(routebuilder.class) .addmodifiers(modifier.public, modifier .final).addmethod(methodspec) .addannotation(annotationspec.builder(generated.class).addmember(""value"", ""$s"", getclass ().getname()) .addmember(""date"", ""$s"", generated ()).build()) .addannotation(generatedannotation.build()) .addjavadoc(""generated swagger specification camel rest dsl generator .\n"").build(); final string packagenametouse packagenamegenerator .apply(swagger); diff --git /tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/restdslgeneratortest.java b /tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/restdslgeneratortest.java index 69aee57 ..ba0a553 /tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/restdslgeneratortest.java b /tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/restdslgeneratortest.java public class restdslgeneratortest final stringbuilder code new stringbuilder restdslgenerator .toappendable(swagger).withgeneratedtime(generated).withclassname(""myrestroute"") .withpackagename(""com.example"").withindent(""\t"") .withpackagename(""com.example"").withindent(""\t"").withsourcecodetimestamps() .withdestinationgenerator(o ""direct:rest-"" .getoperationid()).generate(code); final uri file restdslgeneratortest .class.getresource(""/myrestroute.txt"").touri(); diff --git /tooling/swagger-rest-dsl-generator/src/test/resources/swaggerpetstore.txt b /tooling/swagger-rest-dsl-generator/src/test/resources/swaggerpetstore.txt index 6a4cb0f ..ab99611 /tooling/swagger-rest-dsl-generator/src/test/resources/swaggerpetstore.txt b /tooling/swagger-rest-dsl-generator/src/test/resources/swaggerpetstore.txt import org .apache.camel.model.rest.restparamtype; generated swagger specification camel rest dsl generator -@generated( value ""org.apache.camel.generator.swagger.appendablegenerator"", date ""2017-10-17t00:00:00z"" +@generated(""org.apache.camel.generator.swagger.appendablegenerator"") public final class swaggerpetstore extends routebuilder defines apache camel route using rest dsl fluent api",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C9994eb304dcc40f09f0b494ac5215a45%40git.apache.org%3E,2017-04-19 08:48:23,commits,375.0,camel git commit camel add @generated annotation rest
135,215,215,143.0,196.0,akpcnu,using camel two clause sql query cause exception org .springframework.jdbc.uncategorizedsqlexception: preparedstatementcallback uncategorized sqlexception sql sql state [null]; error code number parameter mismatch expected nested exception java .sql.sqlexception: number parameter mismatch expected one clause query working fine known bug behavior yes alternative ex select column1 column2 column1 (:#in:<<dynamically build column2 (:#in:<<dynamically build view message context sent camel user mailing list archive nabble .com.,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492523259121-5797818.post%40n5.nabble.com%3E,2017-04-18 13:47:39,users,197.0,camel -sql one clause sql throw exception
136,216,216,146.0,197.0,Claus Ibsen,try newer camel version tue apr pm akpcnu <srinivas@live.com> wrote using camel two clause sql query cause exception org .springframework.jdbc.uncategorizedsqlexception: preparedstatementcallback uncategorized sqlexception sql sql state [null]; error code number parameter mismatch expected nested exception java .sql.sqlexception: number parameter mismatch expected one clause query working fine known bug behavior yes alternative ex select column1 column2 column1 (:#in:<<dynamically build column2 (:#in:<<dynamically build view message context sent camel user mailing list archive nabble .com. claus ibsen @davsclaus camel action,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yNm54tvOqwQ%2BmHihvU1kwQYmheFB12Z7rwLGHiEd5yfAdQ%40mail.gmail.com%3E,2017-04-18 14:05:59,users,198.0,camel -sql one clause sql throw exception
137,217,217,155.0,198.0,akpcnu,thanks clause worked view message context sent camel user mailing list archive nabble .com.,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492529869830-5797826.post%40n5.nabble.com%3E,2017-04-18 15:37:49,users,199.0,camel -sql one clause sql throw exception
138,218,218,166.0,199.0,Claus Ibsen,might also work latest .17.x release case want stay release branch tue apr pm akpcnu <srinivas@live.com> wrote thanks clause worked view message context sent camel user mailing list archive nabble .com. claus ibsen @davsclaus camel action,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yNn7DCpuvFgG-CeEZd7V63QiRNRi2AJiOHFbU6SAnWN4kg%40mail.gmail.com%3E,2017-04-19 07:07:12,users,200.0,camel -sql one clause sql throw exception
139,219,219,147.0,591.0,Zoran Regvart (JIRA),zoran regvart created camel summary add @generated annotation salesforce generated code key camel url project camel issue type improvement reporter zoran regvart assignee zoran regvart priority trivial salesforce maven plugin generates source code data transfer object (dtos) used exchange data salesforce api help ides code analysis tool annotated {{@generated}}. message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064723.1492525172000.306176.1492525181634%40Atlassian.JIRA%3E,2017-04-18 14:19:41,issues,595.0,[jira] [created] (camel-11164) add @generated annotation salesforce generated code
140,220,220,217.0,403.0,zregv...@apache.org,"repository camel updated branch ref /heads/master 424273fa9 d9f4ff922 camel add @generated annotation salesforc ...e generated code add `@generated` annotation dtos generated salesforce maven plugin help ides code analysis tool project commit tree diff branch ref /heads/master commit d9f4ff92225593274759a47e0018eebc5642347f parent 424273f author zoran regvart <zregvart@apache.org> authored tue apr committer zoran regvart <zregvart@apache.org> committed wed apr .../src/main/resources/sobject-picklist.vm .../src/main/resources/sobject-pojo-optional.vm .../src/main/resources/sobject-pojo.vm .../src/main/resources/sobject-query-records-optional.vm .../src/main/resources/sobject-query-records.vm .../src/test/resources/generated/case.java .../src/test/resources/generated/case_picklistaccentmarkenum.java .../test/resources/generated/case_picklistquotationmarkenum.java .../src/test/resources/generated/case_picklistslashenum.java .../src/test/resources/generated/complexcalculatedformula.java .../src/test/resources/generated/queryrecordscase.java .../resources/generated/queryrecordscomplexcalculatedformula.java file changed insertion diff --git /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-picklist.vm b /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-picklist.vm index 58bf3e6 ..847bbfc /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-picklist.vm b /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-picklist.vm package $packagename; +import javax .annotation.generated; import com .fasterxml.jackson.annotation.jsoncreator; import com .fasterxml.jackson.annotation.jsonvalue; salesforce enumeration dto picklist $field.name +@generated(""org.apache.camel.maven.camelsalesforcemojo"") public enum $enumname #set $values $utility.getuniquevalues($field) diff --git /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo-optional.vm b /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo-optional.vm index ..9dcfca0 /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo-optional.vm b /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo-optional.vm package $packagename; import java .util.optional; +import javax .annotation.generated; add import xstreamconverter picklistenumconverter needed #set $haspicklists $utility.haspicklists($desc) #set $hasmultiselectpicklists $utility.hasmultiselectpicklists($desc) import com .fasterxml.jackson.databind.annotation.jsonserialize; salesforce dto sobject $desc.name +@generated(""org.apache.camel.maven.camelsalesforcemojo"") @xstreamalias(""${desc.name}optional"") public class ${desc.name}optional extends abstractsobjectbase diff --git /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo.vm b /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo.vm index 35b6f4a ..9087f47 /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo.vm b /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo.vm package $packagename; import java .util.arraylist; import java .util.list; +import javax .annotation.generated; add import xstreamconverter picklistenumconverter needed #set $haspicklists $utility.haspicklists($desc) #set $hasmultiselectpicklists $utility.hasmultiselectpicklists($desc) import com .fasterxml.jackson.annotation.jsoninclude.include; salesforce dto sobject $desc.name +@generated(""org.apache.camel.maven.camelsalesforcemojo"") @xstreamalias(""$desc.name"") public class $desc.name extends abstractdescribedsobjectbase diff --git /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records-optional.vm b /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records-optional.vm index 56a6f25 ..c8c6bbf /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records-optional.vm b /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records-optional.vm import com .thoughtworks.xstream.annotations.xstreamimplicit; import org .apache.camel.component.salesforce.api.dto.abstractqueryrecordsbase; import java .util.list; +import javax .annotation.generated; salesforce queryrecords dto type $desc.name #set( $descname ""${desc.name}optional"" +@generated(""org.apache.camel.maven.camelsalesforcemojo"") public class queryrecords $descname extends abstractqueryrecordsbase @xstreamimplicit diff --git /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records.vm b /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records.vm index d17468a ..893bef8 /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records.vm b /components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records.vm import com .thoughtworks.xstream.annotations.xstreamimplicit; import org .apache.camel.component.salesforce.api.dto.abstractqueryrecordsbase; import java .util.list; +import javax .annotation.generated; salesforce queryrecords dto type $desc.name #set( $descname $desc.name +@generated(""org.apache.camel.maven.camelsalesforcemojo"") public class queryrecords $descname extends abstractqueryrecordsbase @xstreamimplicit diff --git /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/case.java b /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/case.java index df282c3 ..af37bd1 /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/case.java b /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/case.java package $packagename; import java .util.arraylist; import java .util.list; +import javax .annotation.generated; import com .thoughtworks.xstream.annotations.xstreamalias; import com .thoughtworks.xstream.annotations.xstreamconverter; import com .fasterxml.jackson.annotation.jsonproperty; salesforce dto sobject case +@generated(""org.apache.camel.maven.camelsalesforcemojo"") @xstreamalias(""case"") public class case extends abstractdescribedsobjectbase diff --git /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/case_picklistaccentmarkenum.java b /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/case_picklistaccentmarkenum.java index 915d143 ..6af6914 /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/case_picklistaccentmarkenum.java b /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/case_picklistaccentmarkenum.java package $packagename; +import javax .annotation.generated; import com .fasterxml.jackson.annotation.jsoncreator; import com .fasterxml.jackson.annotation.jsonvalue; salesforce enumeration dto picklist picklistaccentmark +@generated(""org.apache.camel.maven.camelsalesforcemojo"") public enum case_picklistaccentmarkenum audiencia de conciliaciã³n diff --git /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/case_picklistquotationmarkenum.java b /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/case_picklistquotationmarkenum.java index 3f55dd2 ..7719fa2 /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/case_picklistquotationmarkenum.java b /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/case_picklistquotationmarkenum.java package $packagename; +import javax .annotation.generated; import com .fasterxml.jackson.annotation.jsoncreator; import com .fasterxml.jackson.annotation.jsonvalue; salesforce enumeration dto picklist picklistquotationmark +@generated(""org.apache.camel.maven.camelsalesforcemojo"") public enum case_picklistquotationmarkenum apretar ""miralo"" diff --git /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/case_picklistslashenum.java b /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/case_picklistslashenum.java index fca520a ..4ad2758 /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/case_picklistslashenum.java b /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/case_picklistslashenum.java package $packagename; +import javax .annotation.generated; import com .fasterxml.jackson.annotation.jsoncreator; import com .fasterxml.jackson.annotation.jsonvalue; salesforce enumeration dto picklist picklistslash +@generated(""org.apache.camel.maven.camelsalesforcemojo"") public enum case_picklistslashenum acciones relacionadas con cotizaciones /o avisos de entrega diff --git /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/complexcalculatedformula.java b /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/complexcalculatedformula.java index 3eeaef1 ..4e550d9 /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/complexcalculatedformula.java b /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/complexcalculatedformula.java package $packagename; import java .util.arraylist; import java .util.list; +import javax .annotation.generated; import com .thoughtworks.xstream.annotations.xstreamalias; import org .apache.camel.component.salesforce.api.dto.abstractdescribedsobjectbase; import com .fasterxml.jackson.annotation.jsonproperty; salesforce dto sobject complexcalculatedformula +@generated(""org.apache.camel.maven.camelsalesforcemojo"") @xstreamalias(""complexcalculatedformula"") public class complexcalculatedformula extends abstractdescribedsobjectbase diff --git /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/queryrecordscase.java b /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/queryrecordscase.java index a644a31 ..7b23a8f /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/queryrecordscase.java b /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/queryrecordscase.java import com .thoughtworks.xstream.annotations.xstreamimplicit; import org .apache.camel.component.salesforce.api.dto.abstractqueryrecordsbase; import java .util.list; +import javax .annotation.generated; salesforce queryrecords dto type case +@generated(""org.apache.camel.maven.camelsalesforcemojo"") public class queryrecordscase extends abstractqueryrecordsbase @xstreamimplicit diff --git /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/queryrecordscomplexcalculatedformula.java b /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/queryrecordscomplexcalculatedformula.java index 279373b ..951a70a /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/queryrecordscomplexcalculatedformula.java b /components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/queryrecordscomplexcalculatedformula.java import com .thoughtworks.xstream.annotations.xstreamimplicit; import org .apache.camel.component.salesforce.api.dto.abstractqueryrecordsbase; import java .util.list; +import javax .annotation.generated; salesforce queryrecords dto type complexcalculatedformula +@generated(""org.apache.camel.maven.camelsalesforcemojo"") public class queryrecordscomplexcalculatedformula extends abstractqueryrecordsbase @xstreamimplicit",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C56cff17005604f0a9939df7a8fba43c8%40git.apache.org%3E,2017-04-19 09:45:35,commits,403.0,camel git commit camel add @generated annotation salesforc
141,223,223,148.0,594.0,Zoran Regvart (JIRA),zoran regvart created camel summary add @generated annotation code generated springbootautoconfigurationmojo key camel url project camel issue type improvement component tooling reporter zoran regvart assignee zoran regvart priority trivial help ides code analysis tool class generated camel maven plugin spring boot configuration support annotated {{@generated}}. message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064724.1492525323000.306194.1492525361672%40Atlassian.JIRA%3E,2017-04-18 14:22:41,issues,598.0,[jira] [created] (camel-11165) add @generated annotation code generated springbootautoconfigurationmojo
142,224,224,149.0,378.0,zregv...@apache.org,"repository camel updated branch ref /heads/master b3ac9932f 110d1c9d6 camel add @generated annotation code g ...enerated springbootautoconfigurationmojo add `@generated` annotation spring boot auto -configuration generated source file project commit tree diff branch ref /heads/master commit 110d1c9d6acf386bceed3e6b2f5f6e2046607236 parent b3ac993 author zoran regvart <zregvart@apache.org> authored tue apr committer zoran regvart <zregvart@apache.org> committed tue apr .../springbootautoconfigurationmojo.java file changed insertion diff --git /tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/springbootautoconfigurationmojo.java b /tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/springbootautoconfigurationmojo.java index d7eac27 ..a2f5fcd /tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/springbootautoconfigurationmojo.java b /tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/springbootautoconfigurationmojo.java import java .lang.reflect.modifier; import java .net.malformedurlexception; import java .net.url; import java .net.urlclassloader; +import java .time.instant; import java .util.arraylist; import java .util.arrays; import java .util.collections; import java .util.treeset; import java .util.regex.pattern; import java .util.stream.collectors; +import javax .annotation.generated; import com .google.gson.gson; import com .google.gson.gsonbuilder; import org .apache.camel.maven.packaging.model.componentmodel; public class springbootautoconfigurationmojo extends abstractmojo doc model .getdescription() ""\n\n"" doc commonclass .getjavadoc().setfulltext(doc); commonclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); (otheroptionmodel option model .getoptions()) string type option .getjavatype(); public class springbootautoconfigurationmojo extends abstractmojo configclass .setpackage(packagename); configclass .setname(configname); configclass .extendsupertype(commonclass); configclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); configclass .addannotation(""org.springframework.boot.context.properties.configurationproperties"").setstringvalue(""prefix"", propertiesprefix configclass .addimport(map.class); configclass .addimport(hashmap.class); public class springbootautoconfigurationmojo extends abstractmojo javaclasssource javaclass roaster .create(javaclasssource.class); javaclass .setpackage(packagename); javaclass .setname(classname); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); javaclass .addannotation(""org.springframework.boot.context.properties.configurationproperties"").setstringvalue(""prefix"", propertiesprefix string doc ""generated camel -package-maven-plugin edit file public class springbootautoconfigurationmojo extends abstractmojo string doc ""generated camel -package-maven-plugin edit file javaclass .getjavadoc().setfulltext(doc); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); javaclass .addannotation(configuration.class); javaclass .addannotation(conditionalonbean.class).setstringvalue(""type"", ""org.apache.camel.spring.boot.camelautoconfiguration""); javaclass .addannotation(conditionalonproperty.class).setstringvalue(""name"", ""camel.rest.enabled"").setliteralvalue(""matchifmissing"", ""true""); public class springbootautoconfigurationmojo extends abstractmojo string prefix ""camel.component."" (overridecomponentname null overridecomponentname model .getscheme()); make sure prefix lower case prefix prefix .tolowercase(locale.us); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); javaclass .addannotation(""org.springframework.boot.context.properties.configurationproperties"").setstringvalue(""prefix"", prefix set <javaclasssource> nestedtypes new hashset public class springbootautoconfigurationmojo extends abstractmojo string prefix ""camel.dataformat."" (overridedataformatname null overridedataformatname model .getname()); make sure prefix lower case prefix prefix .tolowercase(locale.us); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); javaclass .addannotation(""org.springframework.boot.context.properties.configurationproperties"").setstringvalue(""prefix"", prefix (dataformatoptionmodel option model .getdataformatoptions()) public class springbootautoconfigurationmojo extends abstractmojo string prefix ""camel.language."" (overridelanguagename null overridelanguagename model .getname()); make sure prefix lower case prefix prefix .tolowercase(locale.us); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); javaclass .addannotation(""org.springframework.boot.context.properties.configurationproperties"").setstringvalue(""prefix"", prefix (languageoptionmodel option model .getlanguageoptions()) public class springbootautoconfigurationmojo extends abstractmojo string doc ""generated camel -package-maven-plugin edit file javaclass .getjavadoc().setfulltext(doc); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); javaclass .addannotation(configuration.class); javaclass .addannotation(conditionalonbean.class).setstringvalue(""type"", ""org.apache.camel.spring.boot.camelautoconfiguration""); javaclass .addannotation(conditional.class).setliteralvalue(name "".condition.class""); public class springbootautoconfigurationmojo extends abstractmojo string doc ""generated camel -package-maven-plugin edit file javaclass .getjavadoc().setfulltext(doc); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); javaclass .addannotation(configuration.class); javaclass .addannotation(conditionalonbean.class).setstringvalue(""type"", ""org.apache.camel.spring.boot.camelautoconfiguration""); javaclass .addannotation(conditional.class).setliteralvalue(name "".condition.class""); public class springbootautoconfigurationmojo extends abstractmojo string doc ""generated camel -package-maven-plugin edit file javaclass .getjavadoc().setfulltext(doc); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); javaclass .addannotation(configuration.class); javaclass .addannotation(conditionalonbean.class).setstringvalue(""type"", ""org.apache.camel.spring.boot.camelautoconfiguration""); javaclass .addannotation(conditional.class).setliteralvalue(name "".condition.class""); public class springbootautoconfigurationmojo extends abstractmojo condition .extendsupertype(springbootcondition.class); condition .setpublic(); condition .setstatic(true); condition .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); string fullqualifiedtype prefix .endswith(""."") prefix type prefix type",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C48cac69905244aeba244c92c38de6780%40git.apache.org%3E,2017-04-18 14:40:02,commits,378.0,camel git commit camel add @generated annotation code g
143,225,225,150.0,595.0,Zoran Regvart (JIRA),zoran regvart resolved camel resolution implemented fix version /s: add @generated annotation code generated springbootautoconfigurationmojo key camel url project camel issue type improvement component tooling reporter zoran regvart assignee zoran regvart priority trivial fix help ides code analysis tool class generated camel maven plugin spring boot configuration support annotated {{@generated}}. message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064724.1492525323000.306505.1492526441536%40Atlassian.JIRA%3E,2017-04-18 14:40:41,issues,599.0,[jira] [resolved] (camel-11165) add @generated annotation code generated springbootautoconfigurationmojo
144,226,226,163.0,596.0,Claus Ibsen (JIRA),"claus ibsen commented camel dont think include timestamp cause source file change build eg @generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t07:04:18.056z"") @generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") add @generated annotation code generated springbootautoconfigurationmojo key camel url project camel issue type improvement component tooling reporter zoran regvart assignee zoran regvart priority trivial fix help ides code analysis tool class generated camel maven plugin spring boot configuration support annotated {{@generated}}. message sent atlassian jira (v6.3.15#6346)",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064724.1492525323000.315126.1492585541584%40Atlassian.JIRA%3E,2017-04-19 07:05:41,issues,600.0,[jira] [commented] (camel-11165) add @generated annotation code generated springbootautoconfigurationmojo
145,231,231,187.0,385.0,zregv...@apache.org,"repository camel updated branch ref /heads/master dd940e926 492bef343 camel add @generated annotation code g ...enerated springbootautoconfigurationmojo remove `date` annotation member generation timestamps create source code difference code get regenerated clean build project commit tree diff branch ref /heads/master commit 583d6dce4f42ae320107c4a16b13af68870b228b parent dd940e9 author zoran regvart <zregvart@apache.org> authored wed apr committer zoran regvart <zregvart@apache.org> committed wed apr .../springbootautoconfigurationmojo.java file changed insertion deletion diff --git /tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/springbootautoconfigurationmojo.java b /tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/springbootautoconfigurationmojo.java index bba8ecf ..57dd4649d /tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/springbootautoconfigurationmojo.java b /tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/springbootautoconfigurationmojo.java public class springbootautoconfigurationmojo extends abstractmojo doc model .getdescription() ""\n\n"" doc commonclass .getjavadoc().setfulltext(doc); commonclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); commonclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()); (otheroptionmodel option model .getoptions()) string type option .getjavatype(); public class springbootautoconfigurationmojo extends abstractmojo configclass .setpackage(packagename); configclass .setname(configname); configclass .extendsupertype(commonclass); configclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); configclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()); configclass .addannotation(""org.springframework.boot.context.properties.configurationproperties"").setstringvalue(""prefix"", propertiesprefix configclass .addimport(map.class); configclass .addimport(hashmap.class); public class springbootautoconfigurationmojo extends abstractmojo javaclasssource javaclass roaster .create(javaclasssource.class); javaclass .setpackage(packagename); javaclass .setname(classname); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()); javaclass .addannotation(""org.springframework.boot.context.properties.configurationproperties"").setstringvalue(""prefix"", propertiesprefix string doc ""generated camel -package-maven-plugin edit file public class springbootautoconfigurationmojo extends abstractmojo string doc ""generated camel -package-maven-plugin edit file javaclass .getjavadoc().setfulltext(doc); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()); javaclass .addannotation(configuration.class); javaclass .addannotation(conditionalonbean.class).setstringvalue(""type"", ""org.apache.camel.spring.boot.camelautoconfiguration""); javaclass .addannotation(conditionalonproperty.class).setstringvalue(""name"", ""camel.rest.enabled"").setliteralvalue(""matchifmissing"", ""true""); public class springbootautoconfigurationmojo extends abstractmojo string prefix ""camel.component."" (overridecomponentname null overridecomponentname model .getscheme()); make sure prefix lower case prefix prefix .tolowercase(locale.us); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()); javaclass .addannotation(""org.springframework.boot.context.properties.configurationproperties"").setstringvalue(""prefix"", prefix set <javaclasssource> nestedtypes new hashset public class springbootautoconfigurationmojo extends abstractmojo string prefix ""camel.dataformat."" (overridedataformatname null overridedataformatname model .getname()); make sure prefix lower case prefix prefix .tolowercase(locale.us); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()); javaclass .addannotation(""org.springframework.boot.context.properties.configurationproperties"").setstringvalue(""prefix"", prefix (dataformatoptionmodel option model .getdataformatoptions()) public class springbootautoconfigurationmojo extends abstractmojo string prefix ""camel.language."" (overridelanguagename null overridelanguagename model .getname()); make sure prefix lower case prefix prefix .tolowercase(locale.us); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()); javaclass .addannotation(""org.springframework.boot.context.properties.configurationproperties"").setstringvalue(""prefix"", prefix (languageoptionmodel option model .getlanguageoptions()) public class springbootautoconfigurationmojo extends abstractmojo string doc ""generated camel -package-maven-plugin edit file javaclass .getjavadoc().setfulltext(doc); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()); javaclass .addannotation(configuration.class); javaclass .addannotation(conditionalonbean.class).setstringvalue(""type"", ""org.apache.camel.spring.boot.camelautoconfiguration""); javaclass .addannotation(conditional.class).setliteralvalue(name "".condition.class""); public class springbootautoconfigurationmojo extends abstractmojo string doc ""generated camel -package-maven-plugin edit file javaclass .getjavadoc().setfulltext(doc); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()); javaclass .addannotation(configuration.class); javaclass .addannotation(conditionalonbean.class).setstringvalue(""type"", ""org.apache.camel.spring.boot.camelautoconfiguration""); javaclass .addannotation(conditional.class).setliteralvalue(name "".condition.class""); public class springbootautoconfigurationmojo extends abstractmojo string doc ""generated camel -package-maven-plugin edit file javaclass .getjavadoc().setfulltext(doc); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); javaclass .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()); javaclass .addannotation(configuration.class); javaclass .addannotation(conditionalonbean.class).setstringvalue(""type"", ""org.apache.camel.spring.boot.camelautoconfiguration""); javaclass .addannotation(conditional.class).setliteralvalue(name "".condition.class""); public class springbootautoconfigurationmojo extends abstractmojo condition .setpublic(); condition .setstatic(true); condition .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()) .setstringvalue(""date"", instant .now().tostring()); condition .addannotation(generated.class).setstringvalue(""value"", springbootautoconfigurationmojo .class.getname()); string fullqualifiedtype prefix .endswith(""."") prefix type prefix type",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C532bd530059b491faaab8e91173b5fd8%40git.apache.org%3E,2017-04-19 08:35:46,commits,385.0,camel git commit camel add @generated annotation code g
146,232,232,188.0,386.0,zregv...@apache.org,"diff --git /platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/xmlbeansdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/xmlbeansdataformatautoconfiguration.java index 7ec6a95 ..cfd5297 /platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/xmlbeansdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/xmlbeansdataformatautoconfiguration.java package org .apache.camel.converter.xmlbeans.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(xmlbeansdataformatautoconfiguration.condition.class) public class xmlbeansdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/xmlbeansdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/xmlbeansdataformatconfiguration.java index eef7b64 ..1ff358b /platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/xmlbeansdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/xmlbeansdataformatconfiguration.java package org .apache.camel.converter.xmlbeans.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.xmlbeans"") public class xmlbeansdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/xmljsondataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/xmljsondataformatautoconfiguration.java index 6c6c7b7 ..ad00be1 /platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/xmljsondataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/xmljsondataformatautoconfiguration.java package org .apache.camel.dataformat.xmljson.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(xmljsondataformatautoconfiguration.condition.class) public class xmljsondataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/xmljsondataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/xmljsondataformatconfiguration.java index 013bdc0 ..63741af /platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/xmljsondataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/xmljsondataformatconfiguration.java package org .apache.camel.dataformat.xmljson.springboot; import java .util.list; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.xmljson"") public class xmljsondataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/component/xmlrpc/springboot/xmlrpccomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/component/xmlrpc/springboot/xmlrpccomponentautoconfiguration.java index ab993bb ..c4ae448 /platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/component/xmlrpc/springboot/xmlrpccomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/component/xmlrpc/springboot/xmlrpccomponentautoconfiguration.java package org .apache.camel.component.xmlrpc.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.xmlrpc.xmlrpccomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(xmlrpccomponentautoconfiguration.condition.class) public class xmlrpccomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/xmlrpcdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/xmlrpcdataformatautoconfiguration.java index 79d2439 ..81f0b5e /platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/xmlrpcdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/xmlrpcdataformatautoconfiguration.java package org .apache.camel.dataformat.xmlrpc.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(xmlrpcdataformatautoconfiguration.condition.class) public class xmlrpcdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/xmlrpcdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/xmlrpcdataformatconfiguration.java index b13729f ..b66d2c3 /platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/xmlrpcdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/xmlrpcdataformatconfiguration.java package org .apache.camel.dataformat.xmlrpc.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.xmlrpc"") public class xmlrpcdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/xmlsignaturecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/xmlsignaturecomponentautoconfiguration.java index dfcd3de ..67fb7a6 /platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/xmlsignaturecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/xmlsignaturecomponentautoconfiguration.java package org .apache.camel.component.xmlsecurity.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.xmlsecurity.xmlsignaturecomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(xmlsignaturecomponentautoconfiguration.condition.class) public class xmlsignaturecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/xmlsignaturecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/xmlsignaturecomponentconfiguration.java index 443724d ..0c3f804 /platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/xmlsignaturecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/xmlsignaturecomponentconfiguration.java package org .apache.camel.component.xmlsecurity.springboot; import java .util.list; import java .util.map; +import javax .annotation.generated; import javax .xml.crypto.algorithmmethod; import javax .xml.crypto.keyselector; import javax .xml.crypto.uridereferencer; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.xmlsecurity"") public class xmlsignaturecomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/xmlsecuritydataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/xmlsecuritydataformatautoconfiguration.java index 62ca4d5 ..7bb1d70 /platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/xmlsecuritydataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/xmlsecuritydataformatautoconfiguration.java package org .apache.camel.dataformat.xmlsecurity.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(xmlsecuritydataformatautoconfiguration.condition.class) public class xmlsecuritydataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/xmlsecuritydataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/xmlsecuritydataformatconfiguration.java index 9c725c7 ..772b52c /platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/xmlsecuritydataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/xmlsecuritydataformatconfiguration.java package org .apache.camel.dataformat.xmlsecurity.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.securexml"") public class xmlsecuritydataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-xmpp-starter/src/main/java/org/apache/camel/component/xmpp/springboot/xmppcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xmpp-starter/src/main/java/org/apache/camel/component/xmpp/springboot/xmppcomponentautoconfiguration.java index a48647e ..5b21da0 /platforms/spring-boot/components-starter/camel-xmpp-starter/src/main/java/org/apache/camel/component/xmpp/springboot/xmppcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xmpp-starter/src/main/java/org/apache/camel/component/xmpp/springboot/xmppcomponentautoconfiguration.java package org .apache.camel.component.xmpp.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.xmpp.xmppcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(xmppcomponentautoconfiguration.condition.class) public class xmppcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/jsondataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/jsondataformatautoconfiguration.java index b45b669 ..58f86c8 /platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/jsondataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/jsondataformatautoconfiguration.java package org .apache.camel.dataformat.xstream.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jsondataformatautoconfiguration.condition.class) public class jsondataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/jsondataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/jsondataformatconfiguration.java index 522c52e ..d56f19a /platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/jsondataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/jsondataformatconfiguration.java package org .apache.camel.dataformat.xstream.springboot; +import javax .annotation.generated; import org .apache.camel.dataformat.xstream.jsondataformat; import org .apache.camel.model.dataformat.jsonlibrary; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.json-xstream"") public class jsondataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/xstreamdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/xstreamdataformatautoconfiguration.java index c132cab ..3d5b520 /platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/xstreamdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/xstreamdataformatautoconfiguration.java package org .apache.camel.dataformat.xstream.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(xstreamdataformatautoconfiguration.condition.class) public class xstreamdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/xstreamdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/xstreamdataformatconfiguration.java index 8e953c6 /platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/xstreamdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/xstreamdataformatconfiguration.java package org .apache.camel.dataformat.xstream.springboot; import java .util.list; import java .util.map; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.xstream"") public class xstreamdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/yammercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/yammercomponentautoconfiguration.java index 006d096 ..219e800 /platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/yammercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/yammercomponentautoconfiguration.java package org .apache.camel.component.yammer.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.yammer.yammercomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(yammercomponentautoconfiguration.condition.class) public class yammercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/yammercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/yammercomponentconfiguration.java index 1168a36 ..752766f /platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/yammercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/yammercomponentconfiguration.java package org .apache.camel.component.yammer.springboot; +import javax .annotation.generated; import org .apache.camel.component.yammer.apirequestor; import org .apache.camel.component.yammer.yammerfunctiontype; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.yammer"") public class yammercomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/zendeskcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/zendeskcomponentautoconfiguration.java index d181838 ..0bd35c0 /platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/zendeskcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/zendeskcomponentautoconfiguration.java package org .apache.camel.component.zendesk.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.zendesk.zendeskcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(zendeskcomponentautoconfiguration.condition.class) public class zendeskcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/zendeskcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/zendeskcomponentconfiguration.java index 8defaca ..e81d23f /platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/zendeskcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/zendeskcomponentconfiguration.java package org .apache.camel.component.zendesk.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .zendesk.client.v2.zendesk; import org .zendesk.client.v2.zendesk; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.zendesk"") public class zendeskcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/zipfiledataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/zipfiledataformatautoconfiguration.java index a0a3213 ..9772e7d /platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/zipfiledataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/zipfiledataformatautoconfiguration.java package org .apache.camel.dataformat.zipfile.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(zipfiledataformatautoconfiguration.condition.class) public class zipfiledataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/zipfiledataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/zipfiledataformatconfiguration.java index fa42d9e ..d08996a /platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/zipfiledataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/zipfiledataformatconfiguration.java package org .apache.camel.dataformat.zipfile.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.zipfile"") public class zipfiledataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/mastercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/mastercomponentautoconfiguration.java index 5afd8cc ..1162a59 /platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/mastercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/mastercomponentautoconfiguration.java package org .apache.camel.component.zookeepermaster.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.zookeepermaster.mastercomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(mastercomponentautoconfiguration.condition.class) public class mastercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/mastercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/mastercomponentconfiguration.java index 8529a4d ..5e0ed69 /platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/mastercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/mastercomponentconfiguration.java package org .apache.camel.component.zookeepermaster.springboot; +import javax .annotation.generated; import org .apache.camel.component.zookeepermaster.containeridfactory; import org .apache.curator.framework.curatorframework; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.zookeeper-master"") public class mastercomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/zookeepercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/zookeepercomponentautoconfiguration.java index 1478c95 ..209747a /platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/zookeepercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/zookeepercomponentautoconfiguration.java package org .apache.camel.component.zookeeper.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.zookeeper.zookeepercomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(zookeepercomponentautoconfiguration.condition.class) public class zookeepercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/zookeepercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/zookeepercomponentconfiguration.java index 7f40e02 ..9e4d2cc /platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/zookeepercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/zookeepercomponentconfiguration.java package org .apache.camel.component.zookeeper.springboot; import java .util.list; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.deprecatedconfigurationproperty; import org .springframework.boot.context.properties.deprecatedconfigurationproper generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.zookeeper"") public class zookeepercomponentconfiguration",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C19ba0daee4734fc1b83147288089a447%40git.apache.org%3E,2017-04-19 08:35:47,commits,386.0,camel git commit camel add @generated annotation code g
147,233,233,189.0,387.0,zregv...@apache.org,"diff --git /platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/splunkcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/splunkcomponentconfiguration.java index 8e1d97b ..ede27fc /platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/splunkcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/splunkcomponentconfiguration.java package org .apache.camel.component.splunk.springboot; +import javax .annotation.generated; import org .apache.camel.component.splunk.splunkconfigurationfactory; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.splunk"") public class splunkcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/springbatchcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/springbatchcomponentautoconfiguration.java index 380c1fe ..fb3fad0 /platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/springbatchcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/springbatchcomponentautoconfiguration.java package org .apache.camel.component.spring.batch.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.spring.batch.springbatchcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(springbatchcomponentautoconfiguration.condition.class) public class springbatchcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/springbatchcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/springbatchcomponentconfiguration.java index 4aff6a2 ..85fb173 /platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/springbatchcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/springbatchcomponentconfiguration.java package org .apache.camel.component.spring.batch.springboot; +import javax .annotation.generated; import org .springframework.batch.core.configuration.jobregistry; import org .springframework.batch.core.launch.joblauncher; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.spring-batch"") public class springbatchcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-spring-integration-starter/src/main/java/org/apache/camel/component/spring/integration/springboot/springintegrationcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-integration-starter/src/main/java/org/apache/camel/component/spring/integration/springboot/springintegrationcomponentautoconfiguration.java index e0bf058 ..c0cc013 /platforms/spring-boot/components-starter/camel-spring-integration-starter/src/main/java/org/apache/camel/component/spring/integration/springboot/springintegrationcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-integration-starter/src/main/java/org/apache/camel/component/spring/integration/springboot/springintegrationcomponentautoconfiguration.java package org .apache.camel.component.spring.integration.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.spring.integration.springintegrationcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(springintegrationcomponentautoconfiguration.condition.class) public class springintegrationcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-spring-ldap-starter/src/main/java/org/apache/camel/component/springldap/springboot/springldapcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-ldap-starter/src/main/java/org/apache/camel/component/springldap/springboot/springldapcomponentautoconfiguration.java index fef476d ..1a032a4 /platforms/spring-boot/components-starter/camel-spring-ldap-starter/src/main/java/org/apache/camel/component/springldap/springboot/springldapcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-ldap-starter/src/main/java/org/apache/camel/component/springldap/springboot/springldapcomponentautoconfiguration.java package org .apache.camel.component.springldap.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.springldap.springldapcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(springldapcomponentautoconfiguration.condition.class) public class springldapcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-spring-redis-starter/src/main/java/org/apache/camel/component/redis/springboot/rediscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-redis-starter/src/main/java/org/apache/camel/component/redis/springboot/rediscomponentautoconfiguration.java index 66bd1be ..adcdd1c /platforms/spring-boot/components-starter/camel-spring-redis-starter/src/main/java/org/apache/camel/component/redis/springboot/rediscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-redis-starter/src/main/java/org/apache/camel/component/redis/springboot/rediscomponentautoconfiguration.java package org .apache.camel.component.redis.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.redis.rediscomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(rediscomponentautoconfiguration.condition.class) public class rediscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/component/event/springboot/eventcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/component/event/springboot/eventcomponentautoconfiguration.java index 62b26a0 ..6fea192 /platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/component/event/springboot/eventcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/component/event/springboot/eventcomponentautoconfiguration.java package org .apache.camel.component.event.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.event.eventcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(eventcomponentautoconfiguration.condition.class) public class eventcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/spellanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/spellanguageautoconfiguration.java index c41a22c ..eb7e21f /platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/spellanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/spellanguageautoconfiguration.java package org .apache.camel.language.spel.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.spel.spellanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(spellanguageautoconfiguration.condition.class) public class spellanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/spellanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/spellanguageconfiguration.java index b8dddfd ..37968ae /platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/spellanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/spellanguageconfiguration.java package org .apache.camel.language.spel.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.spel"") public class spellanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/springwebservicecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/springwebservicecomponentautoconfiguration.java index 42c56db ..d64e3b0 /platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/springwebservicecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/springwebservicecomponentautoconfiguration.java package org .apache.camel.component.spring.ws.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.spring.ws.springwebservicecomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(springwebservicecomponentautoconfiguration.condition.class) public class springwebservicecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/springwebservicecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/springwebservicecomponentconfiguration.java index a24699a ..4d7bf1c /platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/springwebservicecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/springwebservicecomponentconfiguration.java package org .apache.camel.component.spring.ws.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.spring-ws"") public class springwebservicecomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/sqlcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/sqlcomponentautoconfiguration.java index facfb76 ..0783c16 /platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/sqlcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/sqlcomponentautoconfiguration.java package org .apache.camel.component.sql.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.sql.sqlcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(sqlcomponentautoconfiguration.condition.class) public class sqlcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/sqlcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/sqlcomponentconfiguration.java index 99df47c ..41b913a /platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/sqlcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/sqlcomponentconfiguration.java package org .apache.camel.component.sql.springboot; +import javax .annotation.generated; import javax .sql.datasource; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.sql"") public class sqlcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/sqlstoredcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/sqlstoredcomponentautoconfiguration.java index 68190dc ..c9ef4e5 /platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/sqlstoredcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/sqlstoredcomponentautoconfiguration.java package org .apache.camel.component.sql.stored.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.sql.stored.sqlstoredcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(sqlstoredcomponentautoconfiguration.condition.class) public class sqlstoredcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/sqlstoredcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/sqlstoredcomponentconfiguration.java index 310d2d3 ..234b800 /platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/sqlstoredcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/sqlstoredcomponentconfiguration.java package org .apache.camel.component.sql.stored.springboot; +import javax .annotation.generated; import javax .sql.datasource; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.sql-stored"") public class sqlstoredcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/sshcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/sshcomponentautoconfiguration.java index e9f3ced ..87750a7 /platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/sshcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/sshcomponentautoconfiguration.java package org .apache.camel.component.ssh.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.ssh.sshcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(sshcomponentautoconfiguration.condition.class) public class sshcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/sshcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/sshcomponentconfiguration.java index 4befc2f ..2f31426 /platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/sshcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/sshcomponentconfiguration.java package org .apache.camel.component.ssh.springboot; +import javax .annotation.generated; import org .apache.sshd.common.keypairprovider; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.deprecatedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.ssh"") public class sshcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-stax-starter/src/main/java/org/apache/camel/component/stax/springboot/staxcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-stax-starter/src/main/java/org/apache/camel/component/stax/springboot/staxcomponentautoconfiguration.java index bee7380 ..fa6e299 /platforms/spring-boot/components-starter/camel-stax-starter/src/main/java/org/apache/camel/component/stax/springboot/staxcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-stax-starter/src/main/java/org/apache/camel/component/stax/springboot/staxcomponentautoconfiguration.java package org .apache.camel.component.stax.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.stax.staxcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(staxcomponentautoconfiguration.condition.class) public class staxcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/stompcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/stompcomponentautoconfiguration.java index c46611e ..08f7262 /platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/stompcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/stompcomponentautoconfiguration.java package org .apache.camel.component.stomp.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.stomp.stompcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(stompcomponentautoconfiguration.condition.class) public class stompcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/stompcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/stompcomponentconfiguration.java index f2be104 ..2671bd5 /platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/stompcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/stompcomponentconfiguration.java package org .apache.camel.component.stomp.springboot; +import javax .annotation.generated; import org .apache.camel.util.jsse.sslcontextparameters; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.stomp"") public class stompcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-stream-starter/src/main/java/org/apache/camel/component/stream/springboot/streamcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-stream-starter/src/main/java/org/apache/camel/component/stream/springboot/streamcomponentautoconfiguration.java index 8f72be2 ..8b5177d /platforms/spring-boot/components-starter/camel-stream-starter/src/main/java/org/apache/camel/component/stream/springboot/streamcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-stream-starter/src/main/java/org/apache/camel/component/stream/springboot/streamcomponentautoconfiguration.java package org .apache.camel.component.stream.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.stream.streamcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(streamcomponentautoconfiguration.condition.class) public class streamcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-stringtemplate-starter/src/main/java/org/apache/camel/component/stringtemplate/springboot/stringtemplatecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-stringtemplate-starter/src/main/java/org/apache/camel/component/stringtemplate/springboot/stringtemplatecomponentautoconfiguration.java index 098d350 ..9409ab2 /platforms/spring-boot/components-starter/camel-stringtemplate-starter/src/main/java/org/apache/camel/component/stringtemplate/springboot/stringtemplatecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-stringtemplate-starter/src/main/java/org/apache/camel/component/stringtemplate/springboot/stringtemplatecomponentautoconfiguration.java package org .apache.camel.component.stringtemplate.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.stringtemplate.stringtemplatecomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(stringtemplatecomponentautoconfiguration.condition.class) public class stringtemplatecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/syslogdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/syslogdataformatautoconfiguration.java index 6c96a3f ..0645a74 /platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/syslogdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/syslogdataformatautoconfiguration.java package org .apache.camel.component.syslog.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(syslogdataformatautoconfiguration.condition.class) public class syslogdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/syslogdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/syslogdataformatconfiguration.java index afdc18f ..3ef518f /platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/syslogdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/syslogdataformatconfiguration.java package org .apache.camel.component.syslog.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.syslog"") public class syslogdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/tidymarkupdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/tidymarkupdataformatautoconfiguration.java index b9f2ed8 ..6ee00da /platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/tidymarkupdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/tidymarkupdataformatautoconfiguration.java package org .apache.camel.dataformat.tagsoup.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(tidymarkupdataformatautoconfiguration.condition.class) public class tidymarkupdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/tidymarkupdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/tidymarkupdataformatconfiguration.java index 0e45ec6 ..a7fb06a /platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/tidymarkupdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/tidymarkupdataformatconfiguration.java package org .apache.camel.dataformat.tagsoup.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.tidymarkup"") public class tidymarkupdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/tarfiledataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/tarfiledataformatautoconfiguration.java index 24b34f7 ..2427e92 /platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/tarfiledataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/tarfiledataformatautoconfiguration.java package org .apache.camel.dataformat.tarfile.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(tarfiledataformatautoconfiguration.condition.class) public class tarfiledataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/tarfiledataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/tarfiledataformatconfiguration.java index 6d96c3b ..ab7836b /platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/tarfiledataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/tarfiledataformatconfiguration.java package org .apache.camel.dataformat.tarfile.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.tarfile"") public class tarfiledataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/telegramcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/telegramcomponentautoconfiguration.java index ef588b197 ..0dfd831 /platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/telegramcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/telegramcomponentautoconfiguration.java package org .apache.camel.component.telegram.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.telegram.telegramcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(telegramcomponentautoconfiguration.condition.class) public class telegramcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/telegramcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/telegramcomponentconfiguration.java index b4b53fd ..b27d2c9 /platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/telegramcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/telegramcomponentconfiguration.java package org .apache.camel.component.telegram.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.telegram"") public class telegramcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-tika-starter/src/main/java/org/apache/camel/component/tika/springboot/tikacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-tika-starter/src/main/java/org/apache/camel/component/tika/springboot/tikacomponentautoconfiguration.java index 72c4d56 ..c6ab08c /platforms/spring-boot/components-starter/camel-tika-starter/src/main/java/org/apache/camel/component/tika/springboot/tikacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-tika-starter/src/main/java/org/apache/camel/component/tika/springboot/tikacomponentautoconfiguration.java package org .apache.camel.component.tika.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.tika.tikacomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(tikacomponentautoconfiguration.condition.class) public class tikacomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/twittercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/twittercomponentautoconfiguration.java index b31610b ..985ec37 /platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/twittercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/twittercomponentautoconfiguration.java package org .apache.camel.component.twitter.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.twitter.twittercomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(twittercomponentautoconfiguration.condition.class) public class twittercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/twittercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/twittercomponentconfiguration.java index 21cd925 ..624f274 /platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/twittercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/twittercomponentconfiguration.java package org .apache.camel.component.twitter.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.twitter"") public class twittercomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/undertowcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/undertowcomponentautoconfiguration.java index ..554bd17 /platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/undertowcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/undertowcomponentautoconfiguration.java package org .apache.camel.component.undertow.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.undertow.undertowcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(undertowcomponentautoconfiguration.condition.class) public class undertowcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/undertowcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/undertowcomponentconfiguration.java index ba44c7f ..0548f3f /platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/undertowcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/undertowcomponentconfiguration.java package org .apache.camel.component.undertow.springboot; +import javax .annotation.generated; import org .apache.camel.component.undertow.undertowhttpbinding; import org .apache.camel.util.jsse.sslcontextparameters; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.undertow"") public class undertowcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocitycsvdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocitycsvdataformatautoconfiguration.java index ..fc798a6 /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocitycsvdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocitycsvdataformatautoconfiguration.java package org .apache.camel.dataformat.univocity.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(univocitycsvdataformatautoconfiguration.condition.class) public class univocitycsvdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocitycsvdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocitycsvdataformatconfiguration.java index 6b4bb84 ..7c826b0 /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocitycsvdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocitycsvdataformatconfiguration.java package org .apache.camel.dataformat.univocity.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.univocity-csv"") public class univocitycsvdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocityfixedwidthdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocityfixedwidthdataformatautoconfiguration.java index b7e50b3 ..44313ec /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocityfixedwidthdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocityfixedwidthdataformatautoconfiguration.java package org .apache.camel.dataformat.univocity.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(univocityfixedwidthdataformatautoconfiguration.condition.class) public class univocityfixedwidthdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocityfixedwidthdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocityfixedwidthdataformatconfiguration.java index 6fada79 ..4ac1cf8 /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocityfixedwidthdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocityfixedwidthdataformatconfiguration.java package org .apache.camel.dataformat.univocity.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.univocity-fixed"") public class univocityfixedwidthdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocitytsvdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocitytsvdataformatautoconfiguration.java index aaaff6c ..d4e5513 /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocitytsvdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocitytsvdataformatautoconfiguration.java package org .apache.camel.dataformat.univocity.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(univocitytsvdataformatautoconfiguration.condition.class) public class univocitytsvdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocitytsvdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocitytsvdataformatconfiguration.java index 110369f ..a04fa0c /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocitytsvdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/univocitytsvdataformatconfiguration.java package org .apache.camel.dataformat.univocity.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.univocity-tsv"") public class univocitytsvdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/velocitycomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/velocitycomponentautoconfiguration.java index 77c26bb ..34f7d3c /platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/velocitycomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/velocitycomponentautoconfiguration.java package org .apache.camel.component.velocity.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.velocity.velocitycomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(velocitycomponentautoconfiguration.condition.class) public class velocitycomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/velocitycomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/velocitycomponentconfiguration.java index 365d4af ..ab13c27 /platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/velocitycomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/velocitycomponentconfiguration.java package org .apache.camel.component.velocity.springboot; +import javax .annotation.generated; import org .apache.velocity.app.velocityengine; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.velocity"") public class velocitycomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/vertxcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/vertxcomponentautoconfiguration.java index 5677d99 ..d5c6724 /platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/vertxcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/vertxcomponentautoconfiguration.java package org .apache.camel.component.vertx.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.vertx.vertxcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(vertxcomponentautoconfiguration.condition.class) public class vertxcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/vertxcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/vertxcomponentconfiguration.java index 0a44bdf ..12d6417 /platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/vertxcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/vertxcomponentconfiguration.java package org .apache.camel.component.vertx.springboot; +import javax .annotation.generated; import io .vertx.core.vertx; import io .vertx.core.vertxoptions; import io .vertx.core.spi.vertxfactory; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.vertx"") public class vertxcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-weather-starter/src/main/java/org/apache/camel/component/weather/springboot/weathercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-weather-starter/src/main/java/org/apache/camel/component/weather/springboot/weathercomponentautoconfiguration.java index be36aaa ..6e09f0d /platforms/spring-boot/components-starter/camel-weather-starter/src/main/java/org/apache/camel/component/weather/springboot/weathercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-weather-starter/src/main/java/org/apache/camel/component/weather/springboot/weathercomponentautoconfiguration.java package org .apache.camel.component.weather.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.weather.weathercomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(weathercomponentautoconfiguration.condition.class) public class weathercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/websocketcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/websocketcomponentautoconfiguration.java index 9e2ad4b ..864d4f3 /platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/websocketcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/websocketcomponentautoconfiguration.java package org .apache.camel.component.websocket.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.websocket.websocketcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(websocketcomponentautoconfiguration.condition.class) public class websocketcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/websocketcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/websocketcomponentconfiguration.java index ec61ac0 ..27331a6 /platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/websocketcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/websocketcomponentconfiguration.java package org .apache.camel.component.websocket.springboot; import java .util.map; +import javax .annotation.generated; import org .apache.camel.component.websocket.websocketfactory; import org .apache.camel.util.jsse.sslcontextparameters; import org .eclipse.jetty.util.thread.threadpool; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.websocket"") public class websocketcomponentconfiguration",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cc04c2513dd764094bfebc8ac9fcb9cb7%40git.apache.org%3E,2017-04-19 08:35:48,commits,387.0,camel git commit camel add @generated annotation code g
148,234,234,190.0,388.0,zregv...@apache.org,"diff --git /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentautoconfiguration.java index 52f4ef1 ..56064f2 /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentautoconfiguration.java package org .apache.camel.component.rest.swagger.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.rest.swagger.restswaggercomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(restswaggercomponentautoconfiguration.condition.class) public class restswaggercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentconfiguration.java index 1d59966 ..cf01faa /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentconfiguration.java package org .apache.camel.component.rest.swagger.springboot; import java .net.uri; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.rest-swagger"") public class restswaggercomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/restletcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/restletcomponentautoconfiguration.java index de4f785 ..254cb73 /platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/restletcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/restletcomponentautoconfiguration.java package org .apache.camel.component.restlet.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.restlet.restletcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(restletcomponentautoconfiguration.condition.class) public class restletcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/restletcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/restletcomponentconfiguration.java index 38d23c6 ..1d485e8 /platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/restletcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/restletcomponentconfiguration.java package org .apache.camel.component.restlet.springboot; import java .util.list; +import javax .annotation.generated; import org .apache.camel.spi.headerfilterstrategy; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.restlet"") public class restletcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-rmi-starter/src/main/java/org/apache/camel/component/rmi/springboot/rmicomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-rmi-starter/src/main/java/org/apache/camel/component/rmi/springboot/rmicomponentautoconfiguration.java index b7c0ee3 ..275a09e /platforms/spring-boot/components-starter/camel-rmi-starter/src/main/java/org/apache/camel/component/rmi/springboot/rmicomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-rmi-starter/src/main/java/org/apache/camel/component/rmi/springboot/rmicomponentautoconfiguration.java package org .apache.camel.component.rmi.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.rmi.rmicomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(rmicomponentautoconfiguration.condition.class) public class rmicomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-routebox-starter/src/main/java/org/apache/camel/component/routebox/springboot/routeboxcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-routebox-starter/src/main/java/org/apache/camel/component/routebox/springboot/routeboxcomponentautoconfiguration.java index a5e8023 ..87984cd /platforms/spring-boot/components-starter/camel-routebox-starter/src/main/java/org/apache/camel/component/routebox/springboot/routeboxcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-routebox-starter/src/main/java/org/apache/camel/component/routebox/springboot/routeboxcomponentautoconfiguration.java package org .apache.camel.component.routebox.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.routebox.routeboxcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(routeboxcomponentautoconfiguration.condition.class) public class routeboxcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/component/rss/springboot/rsscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/component/rss/springboot/rsscomponentautoconfiguration.java index 6d0a272 ..1f27ae1 /platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/component/rss/springboot/rsscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/component/rss/springboot/rsscomponentautoconfiguration.java package org .apache.camel.component.rss.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.rss.rsscomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(rsscomponentautoconfiguration.condition.class) public class rsscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/rssdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/rssdataformatautoconfiguration.java index 708a3bd ..32d10e0 /platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/rssdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/rssdataformatautoconfiguration.java package org .apache.camel.dataformat.rss.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(rssdataformatautoconfiguration.condition.class) public class rssdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/rssdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/rssdataformatconfiguration.java index 405e8af ..ae0813f /platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/rssdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/rssdataformatconfiguration.java package org .apache.camel.dataformat.rss.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.rss"") public class rssdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/salesforcecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/salesforcecomponentautoconfiguration.java index b38fd21 ..153c330 /platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/salesforcecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/salesforcecomponentautoconfiguration.java package org .apache.camel.component.salesforce.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.salesforce.salesforcecomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(salesforcecomponentautoconfiguration.condition.class) public class salesforcecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/salesforcecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/salesforcecomponentconfiguration.java index e36d5a6 ..3cde2be /platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/salesforcecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/salesforcecomponentconfiguration.java package org .apache.camel.component.salesforce.springboot; import java .util.list; import java .util.map; import java .util.set; +import javax .annotation.generated; import com .fasterxml.jackson.databind.objectmapper; import org .apache.camel.component.salesforce.authenticationtype; import org .apache.camel.component.salesforce.notfoundbehaviour; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.salesforce"") public class salesforcecomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-sap-netweaver-starter/src/main/java/org/apache/camel/component/sap/netweaver/springboot/netweavercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-sap-netweaver-starter/src/main/java/org/apache/camel/component/sap/netweaver/springboot/netweavercomponentautoconfiguration.java index f58e734 ..88da568 /platforms/spring-boot/components-starter/camel-sap-netweaver-starter/src/main/java/org/apache/camel/component/sap/netweaver/springboot/netweavercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-sap-netweaver-starter/src/main/java/org/apache/camel/component/sap/netweaver/springboot/netweavercomponentautoconfiguration.java package org .apache.camel.component.sap.netweaver.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.sap.netweaver.netweavercomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(netweavercomponentautoconfiguration.condition.class) public class netweavercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/xquerycomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/xquerycomponentautoconfiguration.java index f81c5bd ..2542c9b /platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/xquerycomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/xquerycomponentautoconfiguration.java package org .apache.camel.component.xquery.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.xquery.xquerycomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(xquerycomponentautoconfiguration.condition.class) public class xquerycomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/xquerycomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/xquerycomponentconfiguration.java index 86adaef ..69b7644 /platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/xquerycomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/xquerycomponentconfiguration.java package org .apache.camel.component.xquery.springboot; import java .util.map; +import javax .annotation.generated; import net .sf.saxon.configuration; import net .sf.saxon.lib.moduleuriresolver; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.xquery"") public class xquerycomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/xquerylanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/xquerylanguageautoconfiguration.java index b53f4c8 ..c970cf3 /platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/xquerylanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/xquerylanguageautoconfiguration.java package org .apache.camel.language.xquery.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.xquery.xquerylanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(xquerylanguageautoconfiguration.condition.class) public class xquerylanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/xquerylanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/xquerylanguageconfiguration.java index d45e4c4 ..d479273 /platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/xquerylanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/xquerylanguageconfiguration.java package org .apache.camel.language.xquery.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.xquery"") public class xquerylanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-schematron-starter/src/main/java/org/apache/camel/component/schematron/springboot/schematroncomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-schematron-starter/src/main/java/org/apache/camel/component/schematron/springboot/schematroncomponentautoconfiguration.java index 30d3f0f ..6b5e42f /platforms/spring-boot/components-starter/camel-schematron-starter/src/main/java/org/apache/camel/component/schematron/springboot/schematroncomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-schematron-starter/src/main/java/org/apache/camel/component/schematron/springboot/schematroncomponentautoconfiguration.java package org .apache.camel.component.schematron.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.schematron.schematroncomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(schematroncomponentautoconfiguration.condition.class) public class schematroncomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/javascriptlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/javascriptlanguageautoconfiguration.java index fff186c ..7a2e636 /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/javascriptlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/javascriptlanguageautoconfiguration.java package org .apache.camel.builder.script.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.builder.script.javascriptlanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(javascriptlanguageautoconfiguration.condition.class) public class javascriptlanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/javascriptlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/javascriptlanguageconfiguration.java index d7be77d ..bbd9a57 /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/javascriptlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/javascriptlanguageconfiguration.java package org .apache.camel.builder.script.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.javascript"") public class javascriptlanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/phplanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/phplanguageautoconfiguration.java index 3c8cd52 ..23202cd /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/phplanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/phplanguageautoconfiguration.java package org .apache.camel.builder.script.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.builder.script.phplanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(phplanguageautoconfiguration.condition.class) public class phplanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/phplanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/phplanguageconfiguration.java index 0bdee8e ..4d6641b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/phplanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/phplanguageconfiguration.java package org .apache.camel.builder.script.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.php"") public class phplanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/pythonlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/pythonlanguageautoconfiguration.java index ..6cac0e9 /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/pythonlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/pythonlanguageautoconfiguration.java package org .apache.camel.builder.script.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.builder.script.pythonlanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(pythonlanguageautoconfiguration.condition.class) public class pythonlanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/pythonlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/pythonlanguageconfiguration.java index 1b0f256 ..214f23a /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/pythonlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/pythonlanguageconfiguration.java package org .apache.camel.builder.script.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.python"") public class pythonlanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/rubylanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/rubylanguageautoconfiguration.java index 727b5d4 ..c480b3b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/rubylanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/rubylanguageautoconfiguration.java package org .apache.camel.builder.script.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.builder.script.rubylanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(rubylanguageautoconfiguration.condition.class) public class rubylanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/rubylanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/rubylanguageconfiguration.java index 865fb78 /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/rubylanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/rubylanguageconfiguration.java package org .apache.camel.builder.script.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.ruby"") public class rubylanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/servicenowcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/servicenowcomponentautoconfiguration.java index 3ef4ed8 ..f201ffe /platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/servicenowcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/servicenowcomponentautoconfiguration.java package org .apache.camel.component.servicenow.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.servicenow.servicenowcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(servicenowcomponentautoconfiguration.condition.class) public class servicenowcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/servicenowcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/servicenowcomponentconfiguration.java index 4bc2a61 ..4b7fc5b /platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/servicenowcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/servicenowcomponentconfiguration.java package org .apache.camel.component.servicenow.springboot; import java .util.map; +import javax .annotation.generated; import com .fasterxml.jackson.databind.objectmapper; import org .apache.camel.component.servicenow.servicenowcomponent; import org .apache.camel.component.servicenow.servicenowrelease; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.servicenow"") public class servicenowcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/servletcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/servletcomponentautoconfiguration.java index 86cc6be ..7b6ae53 /platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/servletcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/servletcomponentautoconfiguration.java package org .apache.camel.component.servlet.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.servlet.servletcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(servletcomponentautoconfiguration.condition.class) public class servletcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/servletcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/servletcomponentconfiguration.java index bddd727 ..a54938a /platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/servletcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/servletcomponentconfiguration.java package org .apache.camel.component.servlet.springboot; +import javax .annotation.generated; import org .apache.camel.component.servlet.httpregistry; import org .apache.camel.http.common.httpbinding; import org .apache.camel.http.common.httpconfiguration; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.servlet"") public class servletcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-sip-starter/src/main/java/org/apache/camel/component/sip/springboot/sipcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-sip-starter/src/main/java/org/apache/camel/component/sip/springboot/sipcomponentautoconfiguration.java index 48122e0 ..9a3d7a6 /platforms/spring-boot/components-starter/camel-sip-starter/src/main/java/org/apache/camel/component/sip/springboot/sipcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-sip-starter/src/main/java/org/apache/camel/component/sip/springboot/sipcomponentautoconfiguration.java package org .apache.camel.component.sip.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.sip.sipcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(sipcomponentautoconfiguration.condition.class) public class sipcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/sjmsbatchcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/sjmsbatchcomponentautoconfiguration.java index 442a3e7 ..b7bc6fa /platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/sjmsbatchcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/sjmsbatchcomponentautoconfiguration.java package org .apache.camel.component.sjms.batch.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.sjms.batch.sjmsbatchcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(sjmsbatchcomponentautoconfiguration.condition.class) public class sjmsbatchcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/sjmsbatchcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/sjmsbatchcomponentconfiguration.java index 5b9ac23 ..90ad059 /platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/sjmsbatchcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/sjmsbatchcomponentconfiguration.java package org .apache.camel.component.sjms.batch.springboot; +import javax .annotation.generated; import javax .jms.connectionfactory; import org .apache.camel.spi.headerfilterstrategy; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.sjms-batch"") public class sjmsbatchcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/sjmscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/sjmscomponentautoconfiguration.java index a931c21 ..30022fc /platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/sjmscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/sjmscomponentautoconfiguration.java package org .apache.camel.component.sjms.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.sjms.sjmscomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(sjmscomponentautoconfiguration.condition.class) public class sjmscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/sjmscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/sjmscomponentconfiguration.java index f099d09 ..6e8bdce /platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/sjmscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/sjmscomponentconfiguration.java package org .apache.camel.component.sjms.springboot; +import javax .annotation.generated; import javax .jms.connectionfactory; import org .apache.camel.component.sjms.transactioncommitstrategy; import org .apache.camel.component.sjms.jms.connectionresource; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.sjms"") public class sjmscomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/sjms2componentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/sjms2componentautoconfiguration.java index 4be32a4 ..fa2a166 /platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/sjms2componentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/sjms2componentautoconfiguration.java package org .apache.camel.component.sjms2.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.sjms2.sjms2component; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(sjms2componentautoconfiguration.condition.class) public class sjms2componentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/sjms2componentconfiguration.java b /platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/sjms2componentconfiguration.java index a4a503b ..e5f8ad5 /platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/sjms2componentconfiguration.java b /platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/sjms2componentconfiguration.java package org .apache.camel.component.sjms2.springboot; +import javax .annotation.generated; import javax .jms.connectionfactory; import org .apache.camel.component.sjms.transactioncommitstrategy; import org .apache.camel.component.sjms.jms.connectionresource; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.sjms2"") public class sjms2componentconfiguration diff --git /platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/slackcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/slackcomponentautoconfiguration.java index 296d80e ..3a09bd4 /platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/slackcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/slackcomponentautoconfiguration.java package org .apache.camel.component.slack.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.slack.slackcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(slackcomponentautoconfiguration.condition.class) public class slackcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/slackcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/slackcomponentconfiguration.java index aa92aa0 ..8e5ce18 /platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/slackcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/slackcomponentconfiguration.java package org .apache.camel.component.slack.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.slack"") public class slackcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/smppcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/smppcomponentautoconfiguration.java index 8f62937 ..3153fc9 /platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/smppcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/smppcomponentautoconfiguration.java package org .apache.camel.component.smpp.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.smpp.smppcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(smppcomponentautoconfiguration.condition.class) public class smppcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/smppcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/smppcomponentconfiguration.java index a0f489f ..285e097 /platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/smppcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/smppcomponentconfiguration.java package org .apache.camel.component.smpp.springboot; import java .util.map; +import javax .annotation.generated; import org .apache.camel.component.smpp.smppcomponent; import org .apache.camel.component.smpp.smppsplittingpolicy; import org .jsmpp.session.sessionstatelistener; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.smpp"") public class smppcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/snakeyamldataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/snakeyamldataformatautoconfiguration.java index c5595d9 ..8e990fc /platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/snakeyamldataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/snakeyamldataformatautoconfiguration.java package org .apache.camel.component.snakeyaml.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(snakeyamldataformatautoconfiguration.condition.class) public class snakeyamldataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/snakeyamldataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/snakeyamldataformatconfiguration.java index 368e1e4 ..e0e1d90 /platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/snakeyamldataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/snakeyamldataformatconfiguration.java package org .apache.camel.component.snakeyaml.springboot; import java .util.list; +import javax .annotation.generated; import org .apache.camel.component.snakeyaml.snakeyamldataformat; import org .apache.camel.model.dataformat.yamllibrary; import org .apache.camel.model.dataformat.yamltypefilterdefinition; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.yaml-snakeyaml"") public class snakeyamldataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-snmp-starter/src/main/java/org/apache/camel/component/snmp/springboot/snmpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-snmp-starter/src/main/java/org/apache/camel/component/snmp/springboot/snmpcomponentautoconfiguration.java index 14839fa ..82cd4cb /platforms/spring-boot/components-starter/camel-snmp-starter/src/main/java/org/apache/camel/component/snmp/springboot/snmpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-snmp-starter/src/main/java/org/apache/camel/component/snmp/springboot/snmpcomponentautoconfiguration.java package org .apache.camel.component.snmp.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.snmp.snmpcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(snmpcomponentautoconfiguration.condition.class) public class snmpcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/soapjaxbdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/soapjaxbdataformatautoconfiguration.java index 85e6b5d ..6b575e0 /platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/soapjaxbdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/soapjaxbdataformatautoconfiguration.java package org .apache.camel.dataformat.soap.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(soapjaxbdataformatautoconfiguration.condition.class) public class soapjaxbdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/soapjaxbdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/soapjaxbdataformatconfiguration.java index 311d951 ..a1769ac /platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/soapjaxbdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/soapjaxbdataformatconfiguration.java package org .apache.camel.dataformat.soap.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.soapjaxb"") public class soapjaxbdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-solr-starter/src/main/java/org/apache/camel/component/solr/springboot/solrcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-solr-starter/src/main/java/org/apache/camel/component/solr/springboot/solrcomponentautoconfiguration.java index 341a6ba ..1afb281 /platforms/spring-boot/components-starter/camel-solr-starter/src/main/java/org/apache/camel/component/solr/springboot/solrcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-solr-starter/src/main/java/org/apache/camel/component/solr/springboot/solrcomponentautoconfiguration.java package org .apache.camel.component.solr.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.solr.solrcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(solrcomponentautoconfiguration.condition.class) public class solrcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/sparkcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/sparkcomponentautoconfiguration.java index 38a2264 ..bcfbf96 /platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/sparkcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/sparkcomponentautoconfiguration.java package org .apache.camel.component.spark.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.spark.sparkcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(sparkcomponentautoconfiguration.condition.class) public class sparkcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/sparkcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/sparkcomponentconfiguration.java index 2d52a1f ..98a55a4 /platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/sparkcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/sparkcomponentconfiguration.java package org .apache.camel.component.spark.springboot; +import javax .annotation.generated; import org .apache.camel.component.spark.rddcallback; import org .apache.spark.api.java.javarddlike; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.spark"") public class sparkcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/splunkcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/splunkcomponentautoconfiguration.java index f8a1ee2 ..d80d4d1 /platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/splunkcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/splunkcomponentautoconfiguration.java package org .apache.camel.component.splunk.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.splunk.splunkcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(splunkcomponentautoconfiguration.condition.class) public class splunkcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C464e4f3daf11494cb2bdb1dba9d6af41%40git.apache.org%3E,2017-04-19 08:35:49,commits,388.0,camel git commit camel add @generated annotation code g
149,235,235,191.0,389.0,zregv...@apache.org,"diff --git /platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/component/mvel/springboot/mvelcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/component/mvel/springboot/mvelcomponentautoconfiguration.java index ..bfaef25 /platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/component/mvel/springboot/mvelcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/component/mvel/springboot/mvelcomponentautoconfiguration.java package org .apache.camel.component.mvel.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.mvel.mvelcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(mvelcomponentautoconfiguration.condition.class) public class mvelcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/mvellanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/mvellanguageautoconfiguration.java index e864e35 ..0072cfe /platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/mvellanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/mvellanguageautoconfiguration.java package org .apache.camel.language.mvel.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.mvel.mvellanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(mvellanguageautoconfiguration.condition.class) public class mvellanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/mvellanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/mvellanguageconfiguration.java index cad6bd9 ..9eeb3e7 /platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/mvellanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/mvellanguageconfiguration.java package org .apache.camel.language.mvel.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.mvel"") public class mvellanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/mybatiscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/mybatiscomponentautoconfiguration.java index ..b0e516a /platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/mybatiscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/mybatiscomponentautoconfiguration.java package org .apache.camel.component.mybatis.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.mybatis.mybatiscomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(mybatiscomponentautoconfiguration.condition.class) public class mybatiscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/mybatiscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/mybatiscomponentconfiguration.java index 3d67f47 ..d3152c4 /platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/mybatiscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/mybatiscomponentconfiguration.java package org .apache.camel.component.mybatis.springboot; +import javax .annotation.generated; import org .apache.ibatis.session.sqlsessionfactory; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.mybatis"") public class mybatiscomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/nagioscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/nagioscomponentautoconfiguration.java index 7d6984d ..ff72f2b /platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/nagioscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/nagioscomponentautoconfiguration.java package org .apache.camel.component.nagios.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.nagios.nagioscomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(nagioscomponentautoconfiguration.condition.class) public class nagioscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/nagioscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/nagioscomponentconfiguration.java index a621c46 ..ddcf6cb /platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/nagioscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/nagioscomponentconfiguration.java package org .apache.camel.component.nagios.springboot; +import javax .annotation.generated; import com .googlecode.jsendnsca.core.nagiossettings; import org .apache.camel.component.nagios.nagiosencryptionmethod; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.nagios"") public class nagioscomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/natscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/natscomponentautoconfiguration.java index 52780ce ..5f0a19f /platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/natscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/natscomponentautoconfiguration.java package org .apache.camel.component.nats.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.nats.natscomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(natscomponentautoconfiguration.condition.class) public class natscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/natscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/natscomponentconfiguration.java index 92cbe0c ..fb872db /platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/natscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/natscomponentconfiguration.java package org .apache.camel.component.nats.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.nats"") public class natscomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/nettyhttpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/nettyhttpcomponentautoconfiguration.java index e1238d2 ..1ed1da4 /platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/nettyhttpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/nettyhttpcomponentautoconfiguration.java package org .apache.camel.component.netty.http.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.netty.http.nettyhttpcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(nettyhttpcomponentautoconfiguration.condition.class) public class nettyhttpcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/nettyhttpcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/nettyhttpcomponentconfiguration.java index fc4064b ..e105a34 /platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/nettyhttpcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/nettyhttpcomponentconfiguration.java package org .apache.camel.component.netty.http.springboot; +import javax .annotation.generated; import org .apache.camel.logginglevel; import org .apache.camel.component.netty.http.nettyhttpbinding; import org .apache.camel.component.netty.http.securityauthenticator; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.netty-http"") public class nettyhttpcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/nettycomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/nettycomponentautoconfiguration.java index 0d54763 ..c80984a /platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/nettycomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/nettycomponentautoconfiguration.java package org .apache.camel.component.netty.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.netty.nettycomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(nettycomponentautoconfiguration.condition.class) public class nettycomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/nettycomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/nettycomponentconfiguration.java index /platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/nettycomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/nettycomponentconfiguration.java package org .apache.camel.component.netty.springboot; import java .io.file; import java .util.list; import java .util.map; +import javax .annotation.generated; import org .apache.camel.logginglevel; import org .apache.camel.component.netty.clientpipelinefactory; import org .apache.camel.component.netty.nettycomponent; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.netty"") public class nettycomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/nettyhttpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/nettyhttpcomponentautoconfiguration.java index 3898d9a ..6478cfc /platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/nettyhttpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/nettyhttpcomponentautoconfiguration.java package org .apache.camel.component.netty4.http.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.netty4.http.nettyhttpcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(nettyhttpcomponentautoconfiguration.condition.class) public class nettyhttpcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/nettyhttpcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/nettyhttpcomponentconfiguration.java index 3c88189 ..7ac1105 /platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/nettyhttpcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/nettyhttpcomponentconfiguration.java package org .apache.camel.component.netty4.http.springboot; +import javax .annotation.generated; import io .netty.util.concurrent.eventexecutorgroup; import org .apache.camel.logginglevel; import org .apache.camel.component.netty4.http.nettyhttpbinding; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.netty4-http"") public class nettyhttpcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/nettycomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/nettycomponentautoconfiguration.java index ..afb784c /platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/nettycomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/nettycomponentautoconfiguration.java package org .apache.camel.component.netty4.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.netty4.nettycomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(nettycomponentautoconfiguration.condition.class) public class nettycomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/nettycomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/nettycomponentconfiguration.java index 4d8621f ..659ea39 /platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/nettycomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/nettycomponentconfiguration.java package org .apache.camel.component.netty4.springboot; import java .io.file; import java .util.list; import java .util.map; +import javax .annotation.generated; import io .netty.channel.channelhandler; import io .netty.channel.eventloopgroup; import io .netty.channel.group.channelgroup; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.netty4"") public class nettycomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/ognllanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/ognllanguageautoconfiguration.java index eb87fa8 ..4d6bcc0 /platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/ognllanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/ognllanguageautoconfiguration.java package org .apache.camel.language.ognl.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.ognl.ognllanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(ognllanguageautoconfiguration.condition.class) public class ognllanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/ognllanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/ognllanguageconfiguration.java index c0db250 ..77c4b6b /platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/ognllanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/ognllanguageconfiguration.java package org .apache.camel.language.ognl.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.ognl"") public class ognllanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/olingo2componentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/olingo2componentautoconfiguration.java index 33a4304 ..bf91860 /platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/olingo2componentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/olingo2componentautoconfiguration.java package org .apache.camel.component.olingo2.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.olingo2.olingo2component; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(olingo2componentautoconfiguration.condition.class) public class olingo2componentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/olingo2componentconfiguration.java b /platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/olingo2componentconfiguration.java index 1ea121d ..a808800 /platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/olingo2componentconfiguration.java b /platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/olingo2componentconfiguration.java package org .apache.camel.component.olingo2.springboot; import java .util.map; +import javax .annotation.generated; import org .apache.camel.component.olingo2.internal.olingo2apiname; import org .apache.camel.util.jsse.sslcontextparameters; import org .apache.http.httphost; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.olingo2"") public class olingo2componentconfiguration diff --git /platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/olingo4componentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/olingo4componentautoconfiguration.java index f3e685d ..6cdf4b1 /platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/olingo4componentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/olingo4componentautoconfiguration.java package org .apache.camel.component.olingo4.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.olingo4.olingo4component; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(olingo4componentautoconfiguration.condition.class) public class olingo4componentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/olingo4componentconfiguration.java b /platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/olingo4componentconfiguration.java index 664c51a ..105cd2d /platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/olingo4componentconfiguration.java b /platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/olingo4componentconfiguration.java package org .apache.camel.component.olingo4.springboot; import java .util.map; +import javax .annotation.generated; import org .apache.camel.component.olingo4.internal.olingo4apiname; import org .apache.camel.util.jsse.sslcontextparameters; import org .apache.http.httphost; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.olingo4"") public class olingo4componentconfiguration diff --git /platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/openshiftcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/openshiftcomponentautoconfiguration.java index f86b79b ..d08dda4 /platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/openshiftcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/openshiftcomponentautoconfiguration.java package org .apache.camel.component.openshift.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.openshift.openshiftcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(openshiftcomponentautoconfiguration.condition.class) public class openshiftcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/openshiftcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/openshiftcomponentconfiguration.java index b4ccb37 ..d0d7a95 /platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/openshiftcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/openshiftcomponentconfiguration.java package org .apache.camel.component.openshift.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.openshift"") public class openshiftcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/cinder/springboot/cindercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/cinder/springboot/cindercomponentautoconfiguration.java index 4defed1 ..4890d66 /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/cinder/springboot/cindercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/cinder/springboot/cindercomponentautoconfiguration.java package org .apache.camel.component.openstack.cinder.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.openstack.cinder.cindercomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(cindercomponentautoconfiguration.condition.class) public class cindercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/glance/springboot/glancecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/glance/springboot/glancecomponentautoconfiguration.java index a404e64 ..5ea5b1b /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/glance/springboot/glancecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/glance/springboot/glancecomponentautoconfiguration.java package org .apache.camel.component.openstack.glance.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.openstack.glance.glancecomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(glancecomponentautoconfiguration.condition.class) public class glancecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/keystone/springboot/keystonecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/keystone/springboot/keystonecomponentautoconfiguration.java index ac5053e ..7816c7f /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/keystone/springboot/keystonecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/keystone/springboot/keystonecomponentautoconfiguration.java package org .apache.camel.component.openstack.keystone.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.openstack.keystone.keystonecomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(keystonecomponentautoconfiguration.condition.class) public class keystonecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/neutron/springboot/neutroncomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/neutron/springboot/neutroncomponentautoconfiguration.java index 8d9d54c ..69ca7d2 /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/neutron/springboot/neutroncomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/neutron/springboot/neutroncomponentautoconfiguration.java package org .apache.camel.component.openstack.neutron.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.openstack.neutron.neutroncomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(neutroncomponentautoconfiguration.condition.class) public class neutroncomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/nova/springboot/novacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/nova/springboot/novacomponentautoconfiguration.java index 59f6f9a ..69a2033 /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/nova/springboot/novacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/nova/springboot/novacomponentautoconfiguration.java package org .apache.camel.component.openstack.nova.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.openstack.nova.novacomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(novacomponentautoconfiguration.condition.class) public class novacomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/swift/springboot/swiftcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/swift/springboot/swiftcomponentautoconfiguration.java index 2a21ed9 ..49220ba /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/swift/springboot/swiftcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/swift/springboot/swiftcomponentautoconfiguration.java package org .apache.camel.component.openstack.swift.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.openstack.swift.swiftcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(swiftcomponentautoconfiguration.condition.class) public class swiftcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-optaplanner-starter/src/main/java/org/apache/camel/component/optaplanner/springboot/optaplannercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-optaplanner-starter/src/main/java/org/apache/camel/component/optaplanner/springboot/optaplannercomponentautoconfiguration.java index 62047ab ..06ecb5f /platforms/spring-boot/components-starter/camel-optaplanner-starter/src/main/java/org/apache/camel/component/optaplanner/springboot/optaplannercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-optaplanner-starter/src/main/java/org/apache/camel/component/optaplanner/springboot/optaplannercomponentautoconfiguration.java package org .apache.camel.component.optaplanner.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.optaplanner.optaplannercomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(optaplannercomponentautoconfiguration.condition.class) public class optaplannercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/pahocomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/pahocomponentautoconfiguration.java index e156732 ..13c6342 /platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/pahocomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/pahocomponentautoconfiguration.java package org .apache.camel.component.paho.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.paho.pahocomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(pahocomponentautoconfiguration.condition.class) public class pahocomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/pahocomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/pahocomponentconfiguration.java index fcc757d ..cf2b40b /platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/pahocomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/pahocomponentconfiguration.java package org .apache.camel.component.paho.springboot; +import javax .annotation.generated; import org .eclipse.paho.client.mqttv3.mqttconnectoptions; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.paho"") public class pahocomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-pdf-starter/src/main/java/org/apache/camel/component/pdf/springboot/pdfcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-pdf-starter/src/main/java/org/apache/camel/component/pdf/springboot/pdfcomponentautoconfiguration.java index 8076b67 ..c9098e9 /platforms/spring-boot/components-starter/camel-pdf-starter/src/main/java/org/apache/camel/component/pdf/springboot/pdfcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-pdf-starter/src/main/java/org/apache/camel/component/pdf/springboot/pdfcomponentautoconfiguration.java package org .apache.camel.component.pdf.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.pdf.pdfcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(pdfcomponentautoconfiguration.condition.class) public class pdfcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-pgevent-starter/src/main/java/org/apache/camel/component/pgevent/springboot/pgeventcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-pgevent-starter/src/main/java/org/apache/camel/component/pgevent/springboot/pgeventcomponentautoconfiguration.java index 7314c24 ..04998ad /platforms/spring-boot/components-starter/camel-pgevent-starter/src/main/java/org/apache/camel/component/pgevent/springboot/pgeventcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-pgevent-starter/src/main/java/org/apache/camel/component/pgevent/springboot/pgeventcomponentautoconfiguration.java package org .apache.camel.component.pgevent.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.pgevent.pgeventcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(pgeventcomponentautoconfiguration.condition.class) public class pgeventcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-printer-starter/src/main/java/org/apache/camel/component/printer/springboot/printercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-printer-starter/src/main/java/org/apache/camel/component/printer/springboot/printercomponentautoconfiguration.java index a9db24a ..281f1d1 /platforms/spring-boot/components-starter/camel-printer-starter/src/main/java/org/apache/camel/component/printer/springboot/printercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-printer-starter/src/main/java/org/apache/camel/component/printer/springboot/printercomponentautoconfiguration.java package org .apache.camel.component.printer.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.printer.printercomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(printercomponentautoconfiguration.condition.class) public class printercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/protobufdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/protobufdataformatautoconfiguration.java index 417d610 ..20ae50e /platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/protobufdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/protobufdataformatautoconfiguration.java package org .apache.camel.dataformat.protobuf.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(protobufdataformatautoconfiguration.condition.class) public class protobufdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/protobufdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/protobufdataformatconfiguration.java index 85a6319 ..74ed36a /platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/protobufdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/protobufdataformatconfiguration.java package org .apache.camel.dataformat.protobuf.springboot; +import javax .annotation.generated; import org .apache.camel.dataformat.protobuf.protobufdataformat; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.protobuf"") public class protobufdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/pubnubcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/pubnubcomponentautoconfiguration.java index 897f9d4 ..671c1ce /platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/pubnubcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/pubnubcomponentautoconfiguration.java package org .apache.camel.component.pubnub.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.pubnub.pubnubcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(pubnubcomponentautoconfiguration.condition.class) public class pubnubcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/quartzcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/quartzcomponentautoconfiguration.java index ..058162a /platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/quartzcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/quartzcomponentautoconfiguration.java package org .apache.camel.component.quartz2.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.quartz2.quartzcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(quartzcomponentautoconfiguration.condition.class) public class quartzcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/quartzcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/quartzcomponentconfiguration.java index 55ae924 ..b064f26 /platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/quartzcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/quartzcomponentconfiguration.java package org .apache.camel.component.quartz2.springboot; import java .util.properties; +import javax .annotation.generated; import org .quartz.scheduler; import org .quartz.schedulerfactory; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.quartz2"") public class quartzcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/quickfixjcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/quickfixjcomponentautoconfiguration.java index ..1d6b54f /platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/quickfixjcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/quickfixjcomponentautoconfiguration.java package org .apache.camel.component.quickfixj.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.quickfixj.quickfixjcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(quickfixjcomponentautoconfiguration.condition.class) public class quickfixjcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/quickfixjcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/quickfixjcomponentconfiguration.java index de88743 ..14aadb0 /platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/quickfixjcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/quickfixjcomponentconfiguration.java package org .apache.camel.component.quickfixj.springboot; import java .util.map; +import javax .annotation.generated; import org .apache.camel.component.quickfixj.quickfixjconfiguration; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import quickfix .messagestorefactory; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.quickfix"") public class quickfixjcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-rabbitmq-starter/src/main/java/org/apache/camel/component/rabbitmq/springboot/rabbitmqcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-rabbitmq-starter/src/main/java/org/apache/camel/component/rabbitmq/springboot/rabbitmqcomponentautoconfiguration.java index fa00891 ..fa5e7d9 /platforms/spring-boot/components-starter/camel-rabbitmq-starter/src/main/java/org/apache/camel/component/rabbitmq/springboot/rabbitmqcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-rabbitmq-starter/src/main/java/org/apache/camel/component/rabbitmq/springboot/rabbitmqcomponentautoconfiguration.java package org .apache.camel.component.rabbitmq.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.rabbitmq.rabbitmqcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(rabbitmqcomponentautoconfiguration.condition.class) public class rabbitmqcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/reactivestreamscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/reactivestreamscomponentautoconfiguration.java index 10f6dad ..2e26698 /platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/reactivestreamscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/reactivestreamscomponentautoconfiguration.java package org .apache.camel.component.reactive.streams.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.reactive.streams.reactivestreamscomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(reactivestreamscomponentautoconfiguration.condition.class) public class reactivestreamscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/reactivestreamscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/reactivestreamscomponentconfiguration.java index 5fb6dd4 ..d75bcbd /platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/reactivestreamscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/reactivestreamscomponentconfiguration.java package org .apache.camel.component.reactive.streams.springboot; +import javax .annotation.generated; import org .apache.camel.component.reactive.streams.reactivestreamsbackpressurestrategy; import org .apache.camel.component.reactive.streams.reactivestreamscomponent; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.reactive-streams"") public class reactivestreamscomponentconfiguration",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cfd0bc43441814d50a8ceed0660539f1a%40git.apache.org%3E,2017-04-19 08:35:50,commits,389.0,camel git commit camel add @generated annotation code g
150,236,236,192.0,390.0,zregv...@apache.org,"diff --git /platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/jpacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/jpacomponentautoconfiguration.java index 3aa6b0e ..e8c56a7 /platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/jpacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/jpacomponentautoconfiguration.java package org .apache.camel.component.jpa.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.jpa.jpacomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jpacomponentautoconfiguration.condition.class) public class jpacomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/jpacomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/jpacomponentconfiguration.java index ed73738 ..93064c1 /platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/jpacomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/jpacomponentconfiguration.java package org .apache.camel.component.jpa.springboot; +import javax .annotation.generated; import javax .persistence.entitymanagerfactory; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.transaction.platformtransactionmanager; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.jpa"") public class jpacomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/scpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/scpcomponentautoconfiguration.java index fcff156 ..d626d83 /platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/scpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/scpcomponentautoconfiguration.java package org .apache.camel.component.scp.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.scp.scpcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(scpcomponentautoconfiguration.condition.class) public class scpcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/scpcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/scpcomponentconfiguration.java index 5ec146c /platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/scpcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/scpcomponentconfiguration.java package org .apache.camel.component.scp.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.scp"") public class scpcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/jsonpathlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/jsonpathlanguageautoconfiguration.java index 86e337e ..654c8c8 /platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/jsonpathlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/jsonpathlanguageautoconfiguration.java package org .apache.camel.jsonpath.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.jsonpath.jsonpathlanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jsonpathlanguageautoconfiguration.condition.class) public class jsonpathlanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/jsonpathlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/jsonpathlanguageconfiguration.java index 616362d ..e812a7f /platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/jsonpathlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/jsonpathlanguageconfiguration.java package org .apache.camel.jsonpath.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.jsonpath"") public class jsonpathlanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/jt400componentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/jt400componentautoconfiguration.java index d7e1d1d ..28e9128 /platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/jt400componentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/jt400componentautoconfiguration.java package org .apache.camel.component.jt400.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.jt400.jt400component; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jt400componentautoconfiguration.condition.class) public class jt400componentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/jt400componentconfiguration.java b /platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/jt400componentconfiguration.java index 1da21d4 ..7fa9c36 /platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/jt400componentconfiguration.java b /platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/jt400componentconfiguration.java package org .apache.camel.component.jt400.springboot; +import javax .annotation.generated; import com .ibm.as400.access.as400connectionpool; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.jt400"") public class jt400componentconfiguration diff --git /platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/juellanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/juellanguageautoconfiguration.java index b419281 ..0ec2827 /platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/juellanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/juellanguageautoconfiguration.java package org .apache.camel.language.juel.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.juel.juellanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(juellanguageautoconfiguration.condition.class) public class juellanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/juellanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/juellanguageconfiguration.java index 08ae2da ..87b9baf /platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/juellanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/juellanguageconfiguration.java package org .apache.camel.language.juel.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.el"") public class juellanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/jxpathlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/jxpathlanguageautoconfiguration.java index 928aba9 ..3816ffd /platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/jxpathlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/jxpathlanguageautoconfiguration.java package org .apache.camel.language.jxpath.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.jxpath.jxpathlanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jxpathlanguageautoconfiguration.condition.class) public class jxpathlanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/jxpathlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/jxpathlanguageconfiguration.java index ca46049 ..5fc6add /platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/jxpathlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/jxpathlanguageconfiguration.java package org .apache.camel.language.jxpath.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.jxpath"") public class jxpathlanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/kafkacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/kafkacomponentautoconfiguration.java index a3022ee ..0c8d81a /platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/kafkacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/kafkacomponentautoconfiguration.java package org .apache.camel.component.kafka.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.kafka.kafkacomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(kafkacomponentautoconfiguration.condition.class) public class kafkacomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/kafkacomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/kafkacomponentconfiguration.java index 3843e8a ..160c552 /platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/kafkacomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/kafkacomponentconfiguration.java package org .apache.camel.component.kafka.springboot; import java .util.concurrent.executorservice; +import javax .annotation.generated; import org .apache.camel.spi.staterepository; import org .apache.camel.util.jsse.sslcontextparameters; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.kafka"") public class kafkacomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/kestrelcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/kestrelcomponentautoconfiguration.java index d6be15e ..c1e238c /platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/kestrelcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/kestrelcomponentautoconfiguration.java package org .apache.camel.component.kestrel.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.kestrel.kestrelcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(kestrelcomponentautoconfiguration.condition.class) public class kestrelcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/kestrelcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/kestrelcomponentconfiguration.java index 9d62010 ..2f04772 /platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/kestrelcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/kestrelcomponentconfiguration.java package org .apache.camel.component.kestrel.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.kestrel"") public class kestrelcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-krati-starter/src/main/java/org/apache/camel/component/krati/springboot/kraticomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-krati-starter/src/main/java/org/apache/camel/component/krati/springboot/kraticomponentautoconfiguration.java index ..8147c37 /platforms/spring-boot/components-starter/camel-krati-starter/src/main/java/org/apache/camel/component/krati/springboot/kraticomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-krati-starter/src/main/java/org/apache/camel/component/krati/springboot/kraticomponentautoconfiguration.java package org .apache.camel.component.krati.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.krati.kraticomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(kraticomponentautoconfiguration.condition.class) public class kraticomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-kubernetes-starter/src/main/java/org/apache/camel/component/kubernetes/springboot/kubernetescomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-kubernetes-starter/src/main/java/org/apache/camel/component/kubernetes/springboot/kubernetescomponentautoconfiguration.java index c3b5545 ..5bcd127 /platforms/spring-boot/components-starter/camel-kubernetes-starter/src/main/java/org/apache/camel/component/kubernetes/springboot/kubernetescomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-kubernetes-starter/src/main/java/org/apache/camel/component/kubernetes/springboot/kubernetescomponentautoconfiguration.java package org .apache.camel.component.kubernetes.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.kubernetes.kubernetescomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(kubernetescomponentautoconfiguration.condition.class) public class kubernetescomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-ldap-starter/src/main/java/org/apache/camel/component/ldap/springboot/ldapcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ldap-starter/src/main/java/org/apache/camel/component/ldap/springboot/ldapcomponentautoconfiguration.java index 9a541be ..7f4bc3e /platforms/spring-boot/components-starter/camel-ldap-starter/src/main/java/org/apache/camel/component/ldap/springboot/ldapcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ldap-starter/src/main/java/org/apache/camel/component/ldap/springboot/ldapcomponentautoconfiguration.java package org .apache.camel.component.ldap.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.ldap.ldapcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(ldapcomponentautoconfiguration.condition.class) public class ldapcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/linkedincomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/linkedincomponentautoconfiguration.java index c183aba ..4bc8079 /platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/linkedincomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/linkedincomponentautoconfiguration.java package org .apache.camel.component.linkedin.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.linkedin.linkedincomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(linkedincomponentautoconfiguration.condition.class) public class linkedincomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/linkedincomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/linkedincomponentconfiguration.java index 86ab776 ..d7b753a /platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/linkedincomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/linkedincomponentconfiguration.java package org .apache.camel.component.linkedin.springboot; import java .util.map; +import javax .annotation.generated; import org .apache.camel.component.linkedin.api.oauthscope; import org .apache.camel.component.linkedin.api.oauthsecurestorage; import org .apache.camel.component.linkedin.internal.linkedinapiname; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.linkedin"") public class linkedincomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/lucenecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/lucenecomponentautoconfiguration.java index 358005c ..64eec42 /platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/lucenecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/lucenecomponentautoconfiguration.java package org .apache.camel.component.lucene.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.lucene.lucenecomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(lucenecomponentautoconfiguration.condition.class) public class lucenecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/lucenecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/lucenecomponentconfiguration.java index 25aaf95 /platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/lucenecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/lucenecomponentconfiguration.java package org .apache.camel.component.lucene.springboot; import java .io.file; import java .net.uri; +import javax .annotation.generated; import org .apache.camel.component.lucene.luceneoperation; import org .apache.lucene.analysis.analyzer; import org .apache.lucene.util.version; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.lucene"") public class lucenecomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/lumberjackcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/lumberjackcomponentautoconfiguration.java index 070766e ..df79781 /platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/lumberjackcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/lumberjackcomponentautoconfiguration.java package org .apache.camel.component.lumberjack.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.lumberjack.lumberjackcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(lumberjackcomponentautoconfiguration.condition.class) public class lumberjackcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/lumberjackcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/lumberjackcomponentconfiguration.java index 6836fb6 ..611df02 /platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/lumberjackcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/lumberjackcomponentconfiguration.java package org .apache.camel.component.lumberjack.springboot; +import javax .annotation.generated; import org .apache.camel.util.jsse.sslcontextparameters; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.lumberjack"") public class lumberjackcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/lzfdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/lzfdataformatautoconfiguration.java index fdffdef ..cd137da /platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/lzfdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/lzfdataformatautoconfiguration.java package org .apache.camel.dataformat.lzf.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(lzfdataformatautoconfiguration.condition.class) public class lzfdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/lzfdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/lzfdataformatconfiguration.java index 9a716b6 ..f04ab15 /platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/lzfdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/lzfdataformatconfiguration.java package org .apache.camel.dataformat.lzf.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.lzf"") public class lzfdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/mailcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/mailcomponentautoconfiguration.java index 9e6e7b3 ..fcd9d5e /platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/mailcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/mailcomponentautoconfiguration.java package org .apache.camel.component.mail.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.mail.mailcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(mailcomponentautoconfiguration.condition.class) public class mailcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/mailcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/mailcomponentconfiguration.java index fb45260 /platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/mailcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/mailcomponentconfiguration.java package org .apache.camel.component.mail.springboot; import java .util.properties; +import javax .annotation.generated; import javax .mail.session; import org .apache.camel.component.mail.attachmentscontenttransferencodingresolver; import org .apache.camel.component.mail.contenttyperesolver; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.mail"") public class mailcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/mimemultipartdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/mimemultipartdataformatautoconfiguration.java index 3e97726 ..d95972e /platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/mimemultipartdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/mimemultipartdataformatautoconfiguration.java package org .apache.camel.dataformat.mime.multipart.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(mimemultipartdataformatautoconfiguration.condition.class) public class mimemultipartdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/mimemultipartdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/mimemultipartdataformatconfiguration.java index 9c2202a ..c88a4a1 /platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/mimemultipartdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/mimemultipartdataformatconfiguration.java package org .apache.camel.dataformat.mime.multipart.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.mime-multipart"") public class mimemultipartdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/metricscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/metricscomponentautoconfiguration.java index e3f2e87 ..6f000b7 /platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/metricscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/metricscomponentautoconfiguration.java package org .apache.camel.component.metrics.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.metrics.metricscomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(metricscomponentautoconfiguration.condition.class) public class metricscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/metricscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/metricscomponentconfiguration.java index 6c2306b ..1f6e350 /platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/metricscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/metricscomponentconfiguration.java package org .apache.camel.component.metrics.springboot; +import javax .annotation.generated; import com .codahale.metrics.metricregistry; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.metrics"") public class metricscomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/miloclientcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/miloclientcomponentautoconfiguration.java index 36e6961 ..245a1e6 /platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/miloclientcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/miloclientcomponentautoconfiguration.java package org .apache.camel.component.milo.client.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.milo.client.miloclientcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(miloclientcomponentautoconfiguration.condition.class) public class miloclientcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/miloclientcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/miloclientcomponentconfiguration.java index ad0ebed /platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/miloclientcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/miloclientcomponentconfiguration.java package org .apache.camel.component.milo.client.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.milo-client"") public class miloclientcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/miloservercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/miloservercomponentautoconfiguration.java index 46d80a9 ..620cacd /platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/miloservercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/miloservercomponentautoconfiguration.java package org .apache.camel.component.milo.server.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.milo.server.miloservercomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(miloservercomponentautoconfiguration.condition.class) public class miloservercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/miloservercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/miloservercomponentconfiguration.java index 14745d8 ..4a368e0 /platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/miloservercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/miloservercomponentconfiguration.java import java .io.file; import java .util.collection; import java .util.set; import java .util.function.supplier; +import javax .annotation.generated; import org .apache.camel.component.milo.keystoreloader.result; import org .eclipse.milo.opcua.stack.core.application.certificatemanager; import org .eclipse.milo.opcua.stack.core.application.certificatevalidator; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.milo-server"") public class miloservercomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/mina2componentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/mina2componentautoconfiguration.java index d8a22a2 ..5b919b5 /platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/mina2componentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/mina2componentautoconfiguration.java package org .apache.camel.component.mina2.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.mina2.mina2component; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(mina2componentautoconfiguration.condition.class) public class mina2componentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/mina2componentconfiguration.java b /platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/mina2componentconfiguration.java index 5fee68f ..1448d76 /platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/mina2componentconfiguration.java b /platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/mina2componentconfiguration.java package org .apache.camel.component.mina2.springboot; import java .util.list; +import javax .annotation.generated; import org .apache.camel.logginglevel; import org .apache.camel.component.mina2.mina2component; import org .apache.camel.component.mina2.mina2textlinedelimiter; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.mina2"") public class mina2componentconfiguration diff --git /platforms/spring-boot/components-starter/camel-mllp-starter/src/main/java/org/apache/camel/component/mllp/springboot/mllpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mllp-starter/src/main/java/org/apache/camel/component/mllp/springboot/mllpcomponentautoconfiguration.java index 1386dd4 ..aa05c12 /platforms/spring-boot/components-starter/camel-mllp-starter/src/main/java/org/apache/camel/component/mllp/springboot/mllpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mllp-starter/src/main/java/org/apache/camel/component/mllp/springboot/mllpcomponentautoconfiguration.java package org .apache.camel.component.mllp.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.mllp.mllpcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(mllpcomponentautoconfiguration.condition.class) public class mllpcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-mongodb-gridfs-starter/src/main/java/org/apache/camel/component/mongodb/gridfs/springboot/gridfscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mongodb-gridfs-starter/src/main/java/org/apache/camel/component/mongodb/gridfs/springboot/gridfscomponentautoconfiguration.java index 4ee9881 ..3306a78 /platforms/spring-boot/components-starter/camel-mongodb-gridfs-starter/src/main/java/org/apache/camel/component/mongodb/gridfs/springboot/gridfscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mongodb-gridfs-starter/src/main/java/org/apache/camel/component/mongodb/gridfs/springboot/gridfscomponentautoconfiguration.java package org .apache.camel.component.mongodb.gridfs.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.mongodb.gridfs.gridfscomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(gridfscomponentautoconfiguration.condition.class) public class gridfscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-mongodb-starter/src/main/java/org/apache/camel/component/mongodb/springboot/mongodbcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mongodb-starter/src/main/java/org/apache/camel/component/mongodb/springboot/mongodbcomponentautoconfiguration.java index aa68ff1 ..6c0bace /platforms/spring-boot/components-starter/camel-mongodb-starter/src/main/java/org/apache/camel/component/mongodb/springboot/mongodbcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mongodb-starter/src/main/java/org/apache/camel/component/mongodb/springboot/mongodbcomponentautoconfiguration.java package org .apache.camel.component.mongodb.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.mongodb.mongodbcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(mongodbcomponentautoconfiguration.condition.class) public class mongodbcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-mongodb3-starter/src/main/java/org/apache/camel/component/mongodb3/springboot/mongodbcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mongodb3-starter/src/main/java/org/apache/camel/component/mongodb3/springboot/mongodbcomponentautoconfiguration.java index 38f7dc7 ..24c20db /platforms/spring-boot/components-starter/camel-mongodb3-starter/src/main/java/org/apache/camel/component/mongodb3/springboot/mongodbcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mongodb3-starter/src/main/java/org/apache/camel/component/mongodb3/springboot/mongodbcomponentautoconfiguration.java package org .apache.camel.component.mongodb3.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.mongodb3.mongodbcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(mongodbcomponentautoconfiguration.condition.class) public class mongodbcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/mqttcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/mqttcomponentautoconfiguration.java index 17477b7 ..8bfa98c /platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/mqttcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/mqttcomponentautoconfiguration.java package org .apache.camel.component.mqtt.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.mqtt.mqttcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(mqttcomponentautoconfiguration.condition.class) public class mqttcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/mqttcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/mqttcomponentconfiguration.java index f3c45c5 ..a449f1b /platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/mqttcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/mqttcomponentconfiguration.java package org .apache.camel.component.mqtt.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.mqtt"") public class mqttcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/msvcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/msvcomponentautoconfiguration.java index 7d923c2 ..ec86706 /platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/msvcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/msvcomponentautoconfiguration.java package org .apache.camel.component.validator.msv.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.validator.msv.msvcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(msvcomponentautoconfiguration.condition.class) public class msvcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/msvcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/msvcomponentconfiguration.java index 66ddfb9 ..5a5165f /platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/msvcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/msvcomponentconfiguration.java package org .apache.camel.component.validator.msv.springboot; +import javax .annotation.generated; import javax .xml.validation.schemafactory; import org .apache.camel.component.validator.validatorresourceresolverfactory; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.msv"") public class msvcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/mustachecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/mustachecomponentautoconfiguration.java index a66bd3d ..fb6ca8d /platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/mustachecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/mustachecomponentautoconfiguration.java package org .apache.camel.component.mustache.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.mustache.mustachecomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(mustachecomponentautoconfiguration.condition.class) public class mustachecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/mustachecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/mustachecomponentconfiguration.java index 0393a2d ..32cf515 /platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/mustachecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/mustachecomponentconfiguration.java package org .apache.camel.component.mustache.springboot; +import javax .annotation.generated; import com .github.mustachejava.mustachefactory; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.mustache"") public class mustachecomponentconfiguration",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C8a85b0ba129c45eb82ed94eff0cea425%40git.apache.org%3E,2017-04-19 08:35:51,commits,390.0,camel git commit camel add @generated annotation code g
151,237,237,193.0,391.0,zregv...@apache.org,"diff --git /platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/hessiandataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/hessiandataformatautoconfiguration.java index 11c817e /platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/hessiandataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/hessiandataformatautoconfiguration.java package org .apache.camel.dataformat.hessian.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(hessiandataformatautoconfiguration.condition.class) public class hessiandataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/hessiandataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/hessiandataformatconfiguration.java index b00d46d ..2a48dc4 /platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/hessiandataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/hessiandataformatconfiguration.java package org .apache.camel.dataformat.hessian.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.hessian"") public class hessiandataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-hipchat-starter/src/main/java/org/apache/camel/component/hipchat/springboot/hipchatcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hipchat-starter/src/main/java/org/apache/camel/component/hipchat/springboot/hipchatcomponentautoconfiguration.java index 7e450a4 ..ee16b53 /platforms/spring-boot/components-starter/camel-hipchat-starter/src/main/java/org/apache/camel/component/hipchat/springboot/hipchatcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hipchat-starter/src/main/java/org/apache/camel/component/hipchat/springboot/hipchatcomponentautoconfiguration.java package org .apache.camel.component.hipchat.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.hipchat.hipchatcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(hipchatcomponentautoconfiguration.condition.class) public class hipchatcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/hl7dataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/hl7dataformatautoconfiguration.java index 55a1bed ..242569d /platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/hl7dataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/hl7dataformatautoconfiguration.java package org .apache.camel.component.hl7.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(hl7dataformatautoconfiguration.condition.class) public class hl7dataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/hl7dataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/hl7dataformatconfiguration.java index f25f772 ..f20bde9 /platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/hl7dataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/hl7dataformatconfiguration.java package org .apache.camel.component.hl7.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.hl7"") public class hl7dataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/terserlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/terserlanguageautoconfiguration.java index f64fe5e ..bdeb045 /platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/terserlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/terserlanguageautoconfiguration.java package org .apache.camel.component.hl7.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.component.hl7.terserlanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(terserlanguageautoconfiguration.condition.class) public class terserlanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/terserlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/terserlanguageconfiguration.java index 8551aa9 ..e13994a /platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/terserlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/terserlanguageconfiguration.java package org .apache.camel.component.hl7.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.terser"") public class terserlanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/httpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/httpcomponentautoconfiguration.java index 338d58a ..96daf13 /platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/httpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/httpcomponentautoconfiguration.java package org .apache.camel.component.http.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.http.httpcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(httpcomponentautoconfiguration.condition.class) public class httpcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/httpcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/httpcomponentconfiguration.java index 02c86e8 ..62b4821 /platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/httpcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/httpcomponentconfiguration.java package org .apache.camel.component.http.springboot; +import javax .annotation.generated; import org .apache.camel.component.http.httpclientconfigurer; import org .apache.camel.http.common.httpbinding; import org .apache.camel.http.common.httpconfiguration; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.http"") public class httpcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/httpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/httpcomponentautoconfiguration.java index 4530a87 ..040655f /platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/httpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/httpcomponentautoconfiguration.java package org .apache.camel.component.http4.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.http4.httpcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(httpcomponentautoconfiguration.condition.class) public class httpcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/httpcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/httpcomponentconfiguration.java index d80edc8 ..78aa3ff /platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/httpcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/httpcomponentconfiguration.java package org .apache.camel.component.http4.springboot; +import javax .annotation.generated; import javax .net.ssl.hostnameverifier; import org .apache.camel.component.http4.httpclientconfigurer; import org .apache.camel.http.common.httpbinding; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.http4"") public class httpcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/icaldataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/icaldataformatautoconfiguration.java index b799b7d ..36ec2a5 /platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/icaldataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/icaldataformatautoconfiguration.java package org .apache.camel.component.ical.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(icaldataformatautoconfiguration.condition.class) public class icaldataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/icaldataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/icaldataformatconfiguration.java index 88ddfa0 ..2b654ae /platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/icaldataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/icaldataformatconfiguration.java package org .apache.camel.component.ical.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.ical"") public class icaldataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/infinispancomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/infinispancomponentautoconfiguration.java index 144791c ..ae496d2 /platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/infinispancomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/infinispancomponentautoconfiguration.java package org .apache.camel.component.infinispan.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.infinispan.infinispancomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(infinispancomponentautoconfiguration.condition.class) public class infinispancomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/infinispancomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/infinispancomponentconfiguration.java index c4afece ..8fc56dd /platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/infinispancomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/infinispancomponentconfiguration.java package org .apache.camel.component.infinispan.springboot; import java .util.map; import java .util.set; +import javax .annotation.generated; import org .apache.camel.component.infinispan.infinispancustomlistener; import org .apache.camel.component.infinispan.infinispanquerybuilder; import org .infinispan.commons.api.basiccachecontainer; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.infinispan"") public class infinispancomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-influxdb-starter/src/main/java/org/apache/camel/component/influxdb/springboot/influxdbcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-influxdb-starter/src/main/java/org/apache/camel/component/influxdb/springboot/influxdbcomponentautoconfiguration.java index f7a0e26 ..9aa6fe0 /platforms/spring-boot/components-starter/camel-influxdb-starter/src/main/java/org/apache/camel/component/influxdb/springboot/influxdbcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-influxdb-starter/src/main/java/org/apache/camel/component/influxdb/springboot/influxdbcomponentautoconfiguration.java package org .apache.camel.component.influxdb.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.influxdb.influxdbcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(influxdbcomponentautoconfiguration.condition.class) public class influxdbcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/irccomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/irccomponentautoconfiguration.java index 67d9cf8 ..741a06e /platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/irccomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/irccomponentautoconfiguration.java package org .apache.camel.component.irc.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.irc.irccomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(irccomponentautoconfiguration.condition.class) public class irccomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/irccomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/irccomponentconfiguration.java index 02daefb ..fe89d50 /platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/irccomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/irccomponentconfiguration.java package org .apache.camel.component.irc.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.irc"") public class irccomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-ironmq-starter/src/main/java/org/apache/camel/component/ironmq/springboot/ironmqcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ironmq-starter/src/main/java/org/apache/camel/component/ironmq/springboot/ironmqcomponentautoconfiguration.java index 5053f68 ..de636c0 /platforms/spring-boot/components-starter/camel-ironmq-starter/src/main/java/org/apache/camel/component/ironmq/springboot/ironmqcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ironmq-starter/src/main/java/org/apache/camel/component/ironmq/springboot/ironmqcomponentautoconfiguration.java package org .apache.camel.component.ironmq.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.ironmq.ironmqcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(ironmqcomponentautoconfiguration.condition.class) public class ironmqcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/jacksondataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/jacksondataformatautoconfiguration.java index 406b5af ..5099b19 /platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/jacksondataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/jacksondataformatautoconfiguration.java package org .apache.camel.component.jackson.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jacksondataformatautoconfiguration.condition.class) public class jacksondataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/jacksondataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/jacksondataformatconfiguration.java index e5dcbc2 ..8f69717 /platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/jacksondataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/jacksondataformatconfiguration.java package org .apache.camel.component.jackson.springboot; +import javax .annotation.generated; import org .apache.camel.component.jackson.jacksondataformat; import org .apache.camel.model.dataformat.jsonlibrary; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.json-jackson"") public class jacksondataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/jacksonxmldataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/jacksonxmldataformatautoconfiguration.java index 30c2f63 ..3a22f52 /platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/jacksonxmldataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/jacksonxmldataformatautoconfiguration.java package org .apache.camel.component.jacksonxml.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jacksonxmldataformatautoconfiguration.condition.class) public class jacksonxmldataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/jacksonxmldataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/jacksonxmldataformatconfiguration.java index 50c8062 ..389e38a /platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/jacksonxmldataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/jacksonxmldataformatconfiguration.java package org .apache.camel.component.jacksonxml.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.jacksonxml"") public class jacksonxmldataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-javaspace-starter/src/main/java/org/apache/camel/component/javaspace/springboot/javaspacecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-javaspace-starter/src/main/java/org/apache/camel/component/javaspace/springboot/javaspacecomponentautoconfiguration.java index 567af38 ..a409ff9 /platforms/spring-boot/components-starter/camel-javaspace-starter/src/main/java/org/apache/camel/component/javaspace/springboot/javaspacecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-javaspace-starter/src/main/java/org/apache/camel/component/javaspace/springboot/javaspacecomponentautoconfiguration.java package org .apache.camel.component.javaspace.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.javaspace.javaspacecomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(javaspacecomponentautoconfiguration.condition.class) public class javaspacecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/jaxbdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/jaxbdataformatautoconfiguration.java index ..a8388f1 /platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/jaxbdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/jaxbdataformatautoconfiguration.java package org .apache.camel.converter.jaxb.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jaxbdataformatautoconfiguration.condition.class) public class jaxbdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/jaxbdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/jaxbdataformatconfiguration.java index a980537 ..4d28036 /platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/jaxbdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/jaxbdataformatconfiguration.java package org .apache.camel.converter.jaxb.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.jaxb"") public class jaxbdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-jbpm-starter/src/main/java/org/apache/camel/component/jbpm/springboot/jbpmcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jbpm-starter/src/main/java/org/apache/camel/component/jbpm/springboot/jbpmcomponentautoconfiguration.java index e744a5a ..13ede67 /platforms/spring-boot/components-starter/camel-jbpm-starter/src/main/java/org/apache/camel/component/jbpm/springboot/jbpmcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jbpm-starter/src/main/java/org/apache/camel/component/jbpm/springboot/jbpmcomponentautoconfiguration.java package org .apache.camel.component.jbpm.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.jbpm.jbpmcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jbpmcomponentautoconfiguration.condition.class) public class jbpmcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/jcachecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/jcachecomponentautoconfiguration.java index d552b5f ..37137b4 /platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/jcachecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/jcachecomponentautoconfiguration.java package org .apache.camel.component.jcache.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.jcache.jcachecomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jcachecomponentautoconfiguration.condition.class) public class jcachecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/jcachecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/jcachecomponentconfiguration.java index b0d9f5e ..be5ced1 /platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/jcachecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/jcachecomponentconfiguration.java package org .apache.camel.component.jcache.springboot; import java .util.properties; +import javax .annotation.generated; import javax .cache.configuration.configuration; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.jcache"") public class jcachecomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-jcr-starter/src/main/java/org/apache/camel/component/jcr/springboot/jcrcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jcr-starter/src/main/java/org/apache/camel/component/jcr/springboot/jcrcomponentautoconfiguration.java index 21ea150 ..8aebcc2 /platforms/spring-boot/components-starter/camel-jcr-starter/src/main/java/org/apache/camel/component/jcr/springboot/jcrcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jcr-starter/src/main/java/org/apache/camel/component/jcr/springboot/jcrcomponentautoconfiguration.java package org .apache.camel.component.jcr.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.jcr.jcrcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jcrcomponentautoconfiguration.condition.class) public class jcrcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/jdbccomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/jdbccomponentautoconfiguration.java index fe8cb68 ..2424bdc /platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/jdbccomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/jdbccomponentautoconfiguration.java package org .apache.camel.component.jdbc.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.jdbc.jdbccomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jdbccomponentautoconfiguration.condition.class) public class jdbccomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/jdbccomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/jdbccomponentconfiguration.java index 49df11b ..f2e6234 /platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/jdbccomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/jdbccomponentconfiguration.java package org .apache.camel.component.jdbc.springboot; +import javax .annotation.generated; import javax .sql.datasource; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.jdbc"") public class jdbccomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/jettyhttpcomponentautoconfiguration9.java b /platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/jettyhttpcomponentautoconfiguration9.java index 3ac3ed9 ..c887d25 /platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/jettyhttpcomponentautoconfiguration9.java b /platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/jettyhttpcomponentautoconfiguration9.java package org .apache.camel.component.jetty9.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.jetty9.jettyhttpcomponent9; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jettyhttpcomponentautoconfiguration9.condition.class) public class jettyhttpcomponentautoconfiguration9 return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/jettyhttpcomponentconfiguration9.java b /platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/jettyhttpcomponentconfiguration9.java index 6cfc3dc ..dc841bb /platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/jettyhttpcomponentconfiguration9.java b /platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/jettyhttpcomponentconfiguration9.java package org .apache.camel.component.jetty9.springboot; import java .util.map; +import javax .annotation.generated; import org .apache.camel.component.jetty.jettyhttpbinding; import org .apache.camel.http.common.httpbinding; import org .apache.camel.http.common.httpconfiguration; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.jetty"") public class jettyhttpcomponentconfiguration9 diff --git /platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/jgroupscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/jgroupscomponentautoconfiguration.java index a6d263f ..492439c /platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/jgroupscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/jgroupscomponentautoconfiguration.java package org .apache.camel.component.jgroups.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.jgroups.jgroupscomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jgroupscomponentautoconfiguration.condition.class) public class jgroupscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/jgroupscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/jgroupscomponentconfiguration.java index 8f61eb1 ..0c2e812 /platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/jgroupscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/jgroupscomponentconfiguration.java package org .apache.camel.component.jgroups.springboot; +import javax .annotation.generated; import org .jgroups.jchannel; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.jgroups"") public class jgroupscomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/jibxdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/jibxdataformatautoconfiguration.java index 179701a ..1597cbd /platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/jibxdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/jibxdataformatautoconfiguration.java package org .apache.camel.dataformat.jibx.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jibxdataformatautoconfiguration.condition.class) public class jibxdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/jibxdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/jibxdataformatconfiguration.java index 47af923 ..a2e21b7 /platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/jibxdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/jibxdataformatconfiguration.java package org .apache.camel.dataformat.jibx.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.jibx"") public class jibxdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-jing-starter/src/main/java/org/apache/camel/component/validator/jing/springboot/jingcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jing-starter/src/main/java/org/apache/camel/component/validator/jing/springboot/jingcomponentautoconfiguration.java index b318b2c ..eeb94b4 /platforms/spring-boot/components-starter/camel-jing-starter/src/main/java/org/apache/camel/component/validator/jing/springboot/jingcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jing-starter/src/main/java/org/apache/camel/component/validator/jing/springboot/jingcomponentautoconfiguration.java package org .apache.camel.component.validator.jing.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.validator.jing.jingcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jingcomponentautoconfiguration.condition.class) public class jingcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jira-starter/src/main/java/org/apache/camel/component/jira/springboot/jiracomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jira-starter/src/main/java/org/apache/camel/component/jira/springboot/jiracomponentautoconfiguration.java index a40a8c1 ..1a1a48e /platforms/spring-boot/components-starter/camel-jira-starter/src/main/java/org/apache/camel/component/jira/springboot/jiracomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jira-starter/src/main/java/org/apache/camel/component/jira/springboot/jiracomponentautoconfiguration.java package org .apache.camel.component.jira.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.jira.jiracomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jiracomponentautoconfiguration.condition.class) public class jiracomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/jmscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/jmscomponentautoconfiguration.java index c7761fa ..9cf6e26 /platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/jmscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/jmscomponentautoconfiguration.java package org .apache.camel.component.jms.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.jms.jmscomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jmscomponentautoconfiguration.condition.class) public class jmscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/jmscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/jmscomponentconfiguration.java index ..1f1130e /platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/jmscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/jmscomponentconfiguration.java package org .apache.camel.component.jms.springboot; +import javax .annotation.generated; import javax .jms.connectionfactory; import javax .jms.exceptionlistener; import org .apache.camel.logginglevel; import org .springframework.util.errorhandler; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.jms"") public class jmscomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-jmx-starter/src/main/java/org/apache/camel/component/jmx/springboot/jmxcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jmx-starter/src/main/java/org/apache/camel/component/jmx/springboot/jmxcomponentautoconfiguration.java index 2230be6 ..ec8d6c3 /platforms/spring-boot/components-starter/camel-jmx-starter/src/main/java/org/apache/camel/component/jmx/springboot/jmxcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jmx-starter/src/main/java/org/apache/camel/component/jmx/springboot/jmxcomponentautoconfiguration.java package org .apache.camel.component.jmx.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.jmx.jmxcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(jmxcomponentautoconfiguration.condition.class) public class jmxcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/johnzondataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/johnzondataformatautoconfiguration.java index 0f5d2e0 ..e20fde9 /platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/johnzondataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/johnzondataformatautoconfiguration.java package org .apache.camel.component.johnzon.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(johnzondataformatautoconfiguration.condition.class) public class johnzondataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/johnzondataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/johnzondataformatconfiguration.java index 47b9093 ..67c542b /platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/johnzondataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/johnzondataformatconfiguration.java package org .apache.camel.component.johnzon.springboot; +import javax .annotation.generated; import org .apache.camel.component.johnzon.johnzondataformat; import org .apache.camel.model.dataformat.jsonlibrary; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.json-johnzon"") public class johnzondataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/joltcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/joltcomponentautoconfiguration.java index 7b6552d ..1c53972 /platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/joltcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/joltcomponentautoconfiguration.java package org .apache.camel.component.jolt.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.jolt.joltcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(joltcomponentautoconfiguration.condition.class) public class joltcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/joltcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/joltcomponentconfiguration.java index c14d949 ..e1017f0 /platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/joltcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/joltcomponentconfiguration.java package org .apache.camel.component.jolt.springboot; +import javax .annotation.generated; import com .bazaarvoice.jolt.transform; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.jolt"") public class joltcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/sqllanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/sqllanguageautoconfiguration.java index 0bc0a5d ..8a993a6 /platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/sqllanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/sqllanguageautoconfiguration.java package org .apache.camel.language.sql.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.sql.sqllanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(sqllanguageautoconfiguration.condition.class) public class sqllanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/sqllanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/sqllanguageconfiguration.java index ..6060fb5 /platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/sqllanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/sqllanguageconfiguration.java package org .apache.camel.language.sql.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.sql"") public class sqllanguageconfiguration",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C6b16c48f14ad48ab8ec2f241a9d0f7b5%40git.apache.org%3E,2017-04-19 08:35:52,commits,391.0,camel git commit camel add @generated annotation code g
152,238,238,194.0,392.0,zregv...@apache.org,"diff --git /platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/elsqlcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/elsqlcomponentautoconfiguration.java index cb4bf49 ..344a03a /platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/elsqlcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/elsqlcomponentautoconfiguration.java package org .apache.camel.component.elsql.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.elsql.elsqlcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(elsqlcomponentautoconfiguration.condition.class) public class elsqlcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/elsqlcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/elsqlcomponentconfiguration.java index c6a1577 ..da283bd /platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/elsqlcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/elsqlcomponentconfiguration.java package org .apache.camel.component.elsql.springboot; +import javax .annotation.generated; import javax .sql.datasource; import com .opengamma.elsql.elsqlconfig; import org .apache.camel.component.elsql.elsqldatabasevendor; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.elsql"") public class elsqlcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/etcdcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/etcdcomponentautoconfiguration.java index 26290f1 ..c48f095 /platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/etcdcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/etcdcomponentautoconfiguration.java package org .apache.camel.component.etcd.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.etcd.etcdcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(etcdcomponentautoconfiguration.condition.class) public class etcdcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/etcdcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/etcdcomponentconfiguration.java index 0e2cbdb ..a7168a6 /platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/etcdcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/etcdcomponentconfiguration.java package org .apache.camel.component.etcd.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.util.jsse.sslcontextparameters; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.etcd"") public class etcdcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-exec-starter/src/main/java/org/apache/camel/component/exec/springboot/execcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-exec-starter/src/main/java/org/apache/camel/component/exec/springboot/execcomponentautoconfiguration.java index 0b3c115 /platforms/spring-boot/components-starter/camel-exec-starter/src/main/java/org/apache/camel/component/exec/springboot/execcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-exec-starter/src/main/java/org/apache/camel/component/exec/springboot/execcomponentautoconfiguration.java package org .apache.camel.component.exec.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.exec.execcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(execcomponentautoconfiguration.condition.class) public class execcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/facebookcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/facebookcomponentautoconfiguration.java index baa8e05 ..9bfa887 /platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/facebookcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/facebookcomponentautoconfiguration.java package org .apache.camel.component.facebook.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.facebook.facebookcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(facebookcomponentautoconfiguration.condition.class) public class facebookcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/facebookcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/facebookcomponentconfiguration.java index 28b2963 ..e164fe7 /platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/facebookcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/facebookcomponentconfiguration.java package org .apache.camel.component.facebook.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.facebook"") public class facebookcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/component/flatpack/springboot/flatpackcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/component/flatpack/springboot/flatpackcomponentautoconfiguration.java index 2a9c2f1 ..19e04d4 /platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/component/flatpack/springboot/flatpackcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/component/flatpack/springboot/flatpackcomponentautoconfiguration.java package org .apache.camel.component.flatpack.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.flatpack.flatpackcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(flatpackcomponentautoconfiguration.condition.class) public class flatpackcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/flatpackdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/flatpackdataformatautoconfiguration.java index ce9a747 ..553ccb6 /platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/flatpackdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/flatpackdataformatautoconfiguration.java package org .apache.camel.dataformat.flatpack.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(flatpackdataformatautoconfiguration.condition.class) public class flatpackdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/flatpackdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/flatpackdataformatconfiguration.java index 4d81857 ..0f07c9a /platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/flatpackdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/flatpackdataformatconfiguration.java package org .apache.camel.dataformat.flatpack.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.flatpack"") public class flatpackdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/flinkcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/flinkcomponentautoconfiguration.java index d505ab5 ..31cd17c /platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/flinkcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/flinkcomponentautoconfiguration.java package org .apache.camel.component.flink.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.flink.flinkcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(flinkcomponentautoconfiguration.condition.class) public class flinkcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/flinkcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/flinkcomponentconfiguration.java index c6ebc59 ..5387af1 /platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/flinkcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/flinkcomponentconfiguration.java package org .apache.camel.component.flink.springboot; +import javax .annotation.generated; import org .apache.camel.component.flink.datasetcallback; import org .apache.camel.component.flink.datastreamcallback; import org .apache.flink.api.java.dataset; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.flink"") public class flinkcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-fop-starter/src/main/java/org/apache/camel/component/fop/springboot/fopcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-fop-starter/src/main/java/org/apache/camel/component/fop/springboot/fopcomponentautoconfiguration.java index b5afd94 ..d2c0108 /platforms/spring-boot/components-starter/camel-fop-starter/src/main/java/org/apache/camel/component/fop/springboot/fopcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-fop-starter/src/main/java/org/apache/camel/component/fop/springboot/fopcomponentautoconfiguration.java package org .apache.camel.component.fop.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.fop.fopcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(fopcomponentautoconfiguration.condition.class) public class fopcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/freemarkercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/freemarkercomponentautoconfiguration.java index d0c68ae ..4b57873 /platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/freemarkercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/freemarkercomponentautoconfiguration.java package org .apache.camel.component.freemarker.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.freemarker.freemarkercomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(freemarkercomponentautoconfiguration.condition.class) public class freemarkercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/freemarkercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/freemarkercomponentconfiguration.java index 25d1d83 ..2ccdfaa /platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/freemarkercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/freemarkercomponentconfiguration.java package org .apache.camel.component.freemarker.springboot; +import javax .annotation.generated; import freemarker .template.configuration; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.freemarker"") public class freemarkercomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/ftpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/ftpcomponentautoconfiguration.java index 80427e3 ..756a65b /platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/ftpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/ftpcomponentautoconfiguration.java package org .apache.camel.component.file.remote.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.file.remote.ftpcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(ftpcomponentautoconfiguration.condition.class) public class ftpcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/ftpscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/ftpscomponentautoconfiguration.java index 731b91b ..db13a00 /platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/ftpscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/ftpscomponentautoconfiguration.java package org .apache.camel.component.file.remote.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.file.remote.ftpscomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(ftpscomponentautoconfiguration.condition.class) public class ftpscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/ftpscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/ftpscomponentconfiguration.java index 45a36e2 ..667f643 /platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/ftpscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/ftpscomponentconfiguration.java package org .apache.camel.component.file.remote.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.ftps"") public class ftpscomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/sftpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/sftpcomponentautoconfiguration.java index 1c728ea ..883e8f2 /platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/sftpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/sftpcomponentautoconfiguration.java package org .apache.camel.component.file.remote.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.file.remote.sftpcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(sftpcomponentautoconfiguration.condition.class) public class sftpcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/gangliacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/gangliacomponentautoconfiguration.java index a325c6b ..3d2fa32 /platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/gangliacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/gangliacomponentautoconfiguration.java package org .apache.camel.component.ganglia.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.ganglia.gangliacomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(gangliacomponentautoconfiguration.condition.class) public class gangliacomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/gangliacomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/gangliacomponentconfiguration.java index ..6f82f77 /platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/gangliacomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/gangliacomponentconfiguration.java package org .apache.camel.component.ganglia.springboot; +import javax .annotation.generated; import info .ganglia.gmetric4j.gmetric.gmetric.udpaddressingmode; import info .ganglia.gmetric4j.gmetric.gmetricslope; import info .ganglia.gmetric4j.gmetric.gmetrictype; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.ganglia"") public class gangliacomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-geocoder-starter/src/main/java/org/apache/camel/component/geocoder/springboot/geocodercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-geocoder-starter/src/main/java/org/apache/camel/component/geocoder/springboot/geocodercomponentautoconfiguration.java index f3f4725 ..a0291e0 /platforms/spring-boot/components-starter/camel-geocoder-starter/src/main/java/org/apache/camel/component/geocoder/springboot/geocodercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-geocoder-starter/src/main/java/org/apache/camel/component/geocoder/springboot/geocodercomponentautoconfiguration.java package org .apache.camel.component.geocoder.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.geocoder.geocodercomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(geocodercomponentautoconfiguration.condition.class) public class geocodercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-git-starter/src/main/java/org/apache/camel/component/git/springboot/gitcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-git-starter/src/main/java/org/apache/camel/component/git/springboot/gitcomponentautoconfiguration.java index f63c61e ..886a699 /platforms/spring-boot/components-starter/camel-git-starter/src/main/java/org/apache/camel/component/git/springboot/gitcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-git-starter/src/main/java/org/apache/camel/component/git/springboot/gitcomponentautoconfiguration.java package org .apache.camel.component.git.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.git.gitcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(gitcomponentautoconfiguration.condition.class) public class gitcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-github-starter/src/main/java/org/apache/camel/component/github/springboot/githubcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-github-starter/src/main/java/org/apache/camel/component/github/springboot/githubcomponentautoconfiguration.java index 69f7757 ..82ffa4a /platforms/spring-boot/components-starter/camel-github-starter/src/main/java/org/apache/camel/component/github/springboot/githubcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-github-starter/src/main/java/org/apache/camel/component/github/springboot/githubcomponentautoconfiguration.java package org .apache.camel.component.github.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.github.githubcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(githubcomponentautoconfiguration.condition.class) public class githubcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/googlecalendarcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/googlecalendarcomponentautoconfiguration.java index 771dad5 ..ee870b5 /platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/googlecalendarcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/googlecalendarcomponentautoconfiguration.java package org .apache.camel.component.google.calendar.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.google.calendar.googlecalendarcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(googlecalendarcomponentautoconfiguration.condition.class) public class googlecalendarcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/googlecalendarcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/googlecalendarcomponentconfiguration.java index 68c5683 ..600fab6 /platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/googlecalendarcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/googlecalendarcomponentconfiguration.java package org .apache.camel.component.google.calendar.springboot; +import javax .annotation.generated; import org .apache.camel.component.google.calendar.googlecalendarclientfactory; import org .apache.camel.component.google.calendar.internal.googlecalendarapiname; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.google-calendar"") public class googlecalendarcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/googledrivecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/googledrivecomponentautoconfiguration.java index 4fd6229 ..d643326 /platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/googledrivecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/googledrivecomponentautoconfiguration.java package org .apache.camel.component.google.drive.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.google.drive.googledrivecomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(googledrivecomponentautoconfiguration.condition.class) public class googledrivecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/googledrivecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/googledrivecomponentconfiguration.java index 3aee8f5 ..31d46dd /platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/googledrivecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/googledrivecomponentconfiguration.java package org .apache.camel.component.google.drive.springboot; import java .util.list; +import javax .annotation.generated; import org .apache.camel.component.google.drive.googledriveclientfactory; import org .apache.camel.component.google.drive.internal.googledriveapiname; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.google-drive"") public class googledrivecomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/googlemailcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/googlemailcomponentautoconfiguration.java index 6c7b5b5 ..69b8493 /platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/googlemailcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/googlemailcomponentautoconfiguration.java package org .apache.camel.component.google.mail.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.google.mail.googlemailcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(googlemailcomponentautoconfiguration.condition.class) public class googlemailcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/googlemailcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/googlemailcomponentconfiguration.java index 13cf940 ..de05160 /platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/googlemailcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/googlemailcomponentconfiguration.java package org .apache.camel.component.google.mail.springboot; import java .util.list; +import javax .annotation.generated; import org .apache.camel.component.google.mail.googlemailclientfactory; import org .apache.camel.component.google.mail.internal.googlemailapiname; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.google-mail"") public class googlemailcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/googlepubsubcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/googlepubsubcomponentautoconfiguration.java index 31f14b9 ..f018f70 /platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/googlepubsubcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/googlepubsubcomponentautoconfiguration.java package org .apache.camel.component.google.pubsub.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.google.pubsub.googlepubsubcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(googlepubsubcomponentautoconfiguration.condition.class) public class googlepubsubcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/googlepubsubcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/googlepubsubcomponentconfiguration.java index 1c3116c ..80e22f8 /platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/googlepubsubcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/googlepubsubcomponentconfiguration.java package org .apache.camel.component.google.pubsub.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.google-pubsub"") public class googlepubsubcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-gora-starter/src/main/java/org/apache/camel/component/gora/springboot/goracomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-gora-starter/src/main/java/org/apache/camel/component/gora/springboot/goracomponentautoconfiguration.java index 8bc3294 ..431f241 /platforms/spring-boot/components-starter/camel-gora-starter/src/main/java/org/apache/camel/component/gora/springboot/goracomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-gora-starter/src/main/java/org/apache/camel/component/gora/springboot/goracomponentautoconfiguration.java package org .apache.camel.component.gora.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.gora.goracomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(goracomponentautoconfiguration.condition.class) public class goracomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/groovylanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/groovylanguageautoconfiguration.java index 31ae769 ..f1d4da7 /platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/groovylanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/groovylanguageautoconfiguration.java package org .apache.camel.language.groovy.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.groovy.groovylanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(groovylanguageautoconfiguration.condition.class) public class groovylanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/groovylanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/groovylanguageconfiguration.java index 8b34501 ..a10a018 /platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/groovylanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/groovylanguageconfiguration.java package org .apache.camel.language.groovy.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.groovy"") public class groovylanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-grpc-starter/src/main/java/org/apache/camel/component/grpc/springboot/grpccomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-grpc-starter/src/main/java/org/apache/camel/component/grpc/springboot/grpccomponentautoconfiguration.java index f511eb0 ..2b584d5 /platforms/spring-boot/components-starter/camel-grpc-starter/src/main/java/org/apache/camel/component/grpc/springboot/grpccomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-grpc-starter/src/main/java/org/apache/camel/component/grpc/springboot/grpccomponentautoconfiguration.java package org .apache.camel.component.grpc.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.grpc.grpccomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(grpccomponentautoconfiguration.condition.class) public class grpccomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/gsondataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/gsondataformatautoconfiguration.java index 97122f2 ..09db4a2 /platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/gsondataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/gsondataformatautoconfiguration.java package org .apache.camel.component.gson.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(gsondataformatautoconfiguration.condition.class) public class gsondataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/gsondataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/gsondataformatconfiguration.java index cf25b31 /platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/gsondataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/gsondataformatconfiguration.java package org .apache.camel.component.gson.springboot; +import javax .annotation.generated; import org .apache.camel.component.gson.gsondataformat; import org .apache.camel.model.dataformat.jsonlibrary; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.json-gson"") public class gsondataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/guavaeventbuscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/guavaeventbuscomponentautoconfiguration.java index 23aa142 ..cf23c1e /platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/guavaeventbuscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/guavaeventbuscomponentautoconfiguration.java package org .apache.camel.component.guava.eventbus.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.guava.eventbus.guavaeventbuscomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(guavaeventbuscomponentautoconfiguration.condition.class) public class guavaeventbuscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/guavaeventbuscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/guavaeventbuscomponentconfiguration.java index 6dbcc5c ..1b13339 /platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/guavaeventbuscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/guavaeventbuscomponentconfiguration.java package org .apache.camel.component.guava.eventbus.springboot; +import javax .annotation.generated; import com .google.common.eventbus.eventbus; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.guava-eventbus"") public class guavaeventbuscomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/hazelcastcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/hazelcastcomponentautoconfiguration.java index 182007c ..f779771 /platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/hazelcastcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/hazelcastcomponentautoconfiguration.java package org .apache.camel.component.hazelcast.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.hazelcast.hazelcastcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(hazelcastcomponentautoconfiguration.condition.class) public class hazelcastcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/hazelcastcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/hazelcastcomponentconfiguration.java index a6a8fec ..abda166 /platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/hazelcastcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/hazelcastcomponentconfiguration.java package org .apache.camel.component.hazelcast.springboot; +import javax .annotation.generated; import com .hazelcast.core.hazelcastinstance; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.hazelcast"") public class hazelcastcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/hbasecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/hbasecomponentautoconfiguration.java index ..3ce6fae /platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/hbasecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/hbasecomponentautoconfiguration.java package org .apache.camel.component.hbase.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.hbase.hbasecomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(hbasecomponentautoconfiguration.condition.class) public class hbasecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/hbasecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/hbasecomponentconfiguration.java index 74eff3f ..a9540d4 /platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/hbasecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/hbasecomponentconfiguration.java package org .apache.camel.component.hbase.springboot; +import javax .annotation.generated; import org .apache.hadoop.conf.configuration; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.hbase"") public class hbasecomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/hdfscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/hdfscomponentautoconfiguration.java index d128b0f ..2da832e /platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/hdfscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/hdfscomponentautoconfiguration.java package org .apache.camel.component.hdfs.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.hdfs.hdfscomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(hdfscomponentautoconfiguration.condition.class) public class hdfscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/hdfscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/hdfscomponentconfiguration.java index 324f869 ..83f62eb /platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/hdfscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/hdfscomponentconfiguration.java package org .apache.camel.component.hdfs.springboot; +import javax .annotation.generated; import javax .security.auth.login.configuration; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.hdfs"") public class hdfscomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/hdfscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/hdfscomponentautoconfiguration.java index 88b86d2 ..5e7cc06 /platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/hdfscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/hdfscomponentautoconfiguration.java import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file -@generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:03:41.690z"") +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(hdfscomponentautoconfiguration.condition.class) public class hdfscomponentautoconfiguration return component @generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:03:41.738z"") @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/hdfscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/hdfscomponentconfiguration.java index 29d8a56 ..4c45bf1 /platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/hdfscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/hdfscomponentconfiguration.java import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file -@generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:03:41.545z"") +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.hdfs2"") public class hdfscomponentconfiguration",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C399093a95cdb4277b5c497f2e80c60a3%40git.apache.org%3E,2017-04-19 08:35:53,commits,392.0,camel git commit camel add @generated annotation code g
153,239,239,195.0,393.0,zregv...@apache.org,"diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/simplelanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/simplelanguageautoconfiguration.java index e793c92 ..dadfb85 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/simplelanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/simplelanguageautoconfiguration.java package org .apache.camel.language.simple.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.simple.simplelanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(simplelanguageautoconfiguration.condition.class) public class simplelanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/simplelanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/simplelanguageconfiguration.java index 4c1e2e9 ..f987583 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/simplelanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/simplelanguageconfiguration.java package org .apache.camel.language.simple.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.simple"") public class simplelanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/tokenizelanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/tokenizelanguageautoconfiguration.java index 1dbb098 ..41c56f6 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/tokenizelanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/tokenizelanguageautoconfiguration.java package org .apache.camel.language.tokenizer.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.tokenizer.tokenizelanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(tokenizelanguageautoconfiguration.condition.class) public class tokenizelanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/tokenizelanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/tokenizelanguageconfiguration.java index 9a30c9b ..e74795d /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/tokenizelanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/tokenizelanguageconfiguration.java package org .apache.camel.language.tokenizer.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.tokenize"") public class tokenizelanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/xmltokenizelanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/xmltokenizelanguageautoconfiguration.java index d346612 ..52ca01e /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/xmltokenizelanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/xmltokenizelanguageautoconfiguration.java package org .apache.camel.language.tokenizer.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.tokenizer.xmltokenizelanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(xmltokenizelanguageautoconfiguration.condition.class) public class xmltokenizelanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/xmltokenizelanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/xmltokenizelanguageconfiguration.java index 10f37c7 ..0c00c48 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/xmltokenizelanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/xmltokenizelanguageconfiguration.java package org .apache.camel.language.tokenizer.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.xtokenize"") public class xmltokenizelanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/xpathlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/xpathlanguageautoconfiguration.java index dc8526d ..30b2c06 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/xpathlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/xpathlanguageautoconfiguration.java package org .apache.camel.language.xpath.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.xpath.xpathlanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(xpathlanguageautoconfiguration.condition.class) public class xpathlanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/xpathlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/xpathlanguageconfiguration.java index efa0046 ..ae8e690 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/xpathlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/xpathlanguageconfiguration.java package org .apache.camel.language.xpath.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.xpath"") public class xpathlanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/consulservicecallservicediscoveryconfigurationcommon.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/consulservicecallservicediscoveryconfigurationcommon.java index cc8ae52 ..f0212f7 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/consulservicecallservicediscoveryconfigurationcommon.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/consulservicecallservicediscoveryconfigurationcommon.java package org .apache.camel.model.cloud.springboot; import java .util.map; +import javax .annotation.generated; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public class consulservicecallservicediscoveryconfigurationcommon diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/consulservicecallservicediscoveryconfigurationproperties.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/consulservicecallservicediscoveryconfigurationproperties.java index 57d2588 ..3df09fb /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/consulservicecallservicediscoveryconfigurationproperties.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/consulservicecallservicediscoveryconfigurationproperties.java package org .apache.camel.model.cloud.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.cloud.consul.service-discovery"") public class consulservicecallservicediscoveryconfigurationproperties extends diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/dnsservicecallservicediscoveryconfigurationcommon.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/dnsservicecallservicediscoveryconfigurationcommon.java index 42fe393 ..8a9bc7a /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/dnsservicecallservicediscoveryconfigurationcommon.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/dnsservicecallservicediscoveryconfigurationcommon.java package org .apache.camel.model.cloud.springboot; import java .util.map; +import javax .annotation.generated; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public class dnsservicecallservicediscoveryconfigurationcommon diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/dnsservicecallservicediscoveryconfigurationproperties.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/dnsservicecallservicediscoveryconfigurationproperties.java index 76f9c7a ..1d83f91 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/dnsservicecallservicediscoveryconfigurationproperties.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/dnsservicecallservicediscoveryconfigurationproperties.java package org .apache.camel.model.cloud.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.cloud.dns.service-discovery"") public class dnsservicecallservicediscoveryconfigurationproperties extends diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/etcdservicecallservicediscoveryconfigurationcommon.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/etcdservicecallservicediscoveryconfigurationcommon.java index ..4f7f946 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/etcdservicecallservicediscoveryconfigurationcommon.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/etcdservicecallservicediscoveryconfigurationcommon.java package org .apache.camel.model.cloud.springboot; import java .util.map; +import javax .annotation.generated; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public class etcdservicecallservicediscoveryconfigurationcommon diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/etcdservicecallservicediscoveryconfigurationproperties.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/etcdservicecallservicediscoveryconfigurationproperties.java index 9d6353d ..357863d /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/etcdservicecallservicediscoveryconfigurationproperties.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/etcdservicecallservicediscoveryconfigurationproperties.java package org .apache.camel.model.cloud.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.cloud.etcd.service-discovery"") public class etcdservicecallservicediscoveryconfigurationproperties extends diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/kubernetesservicecallservicediscoveryconfigurationcommon.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/kubernetesservicecallservicediscoveryconfigurationcommon.java index 5ffac09 ..cdfd5a9 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/kubernetesservicecallservicediscoveryconfigurationcommon.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/kubernetesservicecallservicediscoveryconfigurationcommon.java package org .apache.camel.model.cloud.springboot; import java .util.map; +import javax .annotation.generated; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public class kubernetesservicecallservicediscoveryconfigurationcommon diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/kubernetesservicecallservicediscoveryconfigurationproperties.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/kubernetesservicecallservicediscoveryconfigurationproperties.java index 4807d33 ..76db8f9 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/kubernetesservicecallservicediscoveryconfigurationproperties.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/kubernetesservicecallservicediscoveryconfigurationproperties.java package org .apache.camel.model.cloud.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.cloud.kubernetes.service-discovery"") public class kubernetesservicecallservicediscoveryconfigurationproperties extends diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ribbonservicecallloadbalancerconfigurationcommon.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ribbonservicecallloadbalancerconfigurationcommon.java index d45c3cc ..d25dc3d /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ribbonservicecallloadbalancerconfigurationcommon.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ribbonservicecallloadbalancerconfigurationcommon.java package org .apache.camel.model.cloud.springboot; import java .util.map; +import javax .annotation.generated; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public class ribbonservicecallloadbalancerconfigurationcommon diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ribbonservicecallloadbalancerconfigurationproperties.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ribbonservicecallloadbalancerconfigurationproperties.java index a826984 ..d0f230a /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ribbonservicecallloadbalancerconfigurationproperties.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ribbonservicecallloadbalancerconfigurationproperties.java package org .apache.camel.model.cloud.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.cloud.ribbon.load-balancer"") public class ribbonservicecallloadbalancerconfigurationproperties extends diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/restconfigurationdefinitionautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/restconfigurationdefinitionautoconfiguration.java index 3ea9cbe ..067858c /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/restconfigurationdefinitionautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/restconfigurationdefinitionautoconfiguration.java package org .apache.camel.model.rest.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.model.rest.restconstants; import org .apache.camel.spi.restconfiguration; import org .springframework.context.annotation.lazy; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditionalonproperty(name ""camel.rest.enabled"", matchifmissing true diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/restconfigurationdefinitionproperties.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/restconfigurationdefinitionproperties.java index ec134c2 ..174134e /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/restconfigurationdefinitionproperties.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/restconfigurationdefinitionproperties.java package org .apache.camel.model.rest.springboot; import java .util.list; +import javax .annotation.generated; import org .apache.camel.model.rest.restbindingmode; import org .apache.camel.model.rest.resthostnameresolver; import org .apache.camel.model.rest.restpropertydefinition; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.rest"") public class restconfigurationdefinitionproperties diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/hystrixconfigurationdefinitioncommon.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/hystrixconfigurationdefinitioncommon.java index ..acf095b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/hystrixconfigurationdefinitioncommon.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/hystrixconfigurationdefinitioncommon.java limitation license package org .apache.camel.model.springboot; +import javax .annotation.generated; hystrix circuit breaker eip configuration generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public class hystrixconfigurationdefinitioncommon diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/hystrixconfigurationdefinitionproperties.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/hystrixconfigurationdefinitionproperties.java index 5cf7c99 ..706b8a7 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/hystrixconfigurationdefinitionproperties.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/hystrixconfigurationdefinitionproperties.java package org .apache.camel.model.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.hystrix"") public class hystrixconfigurationdefinitionproperties extends diff --git /platforms/spring-boot/components-starter/camel-couchbase-starter/src/main/java/org/apache/camel/component/couchbase/springboot/couchbasecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-couchbase-starter/src/main/java/org/apache/camel/component/couchbase/springboot/couchbasecomponentautoconfiguration.java index e9bdd3b ..2c5f4c8 /platforms/spring-boot/components-starter/camel-couchbase-starter/src/main/java/org/apache/camel/component/couchbase/springboot/couchbasecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-couchbase-starter/src/main/java/org/apache/camel/component/couchbase/springboot/couchbasecomponentautoconfiguration.java package org .apache.camel.component.couchbase.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.couchbase.couchbasecomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(couchbasecomponentautoconfiguration.condition.class) public class couchbasecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-couchdb-starter/src/main/java/org/apache/camel/component/couchdb/springboot/couchdbcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-couchdb-starter/src/main/java/org/apache/camel/component/couchdb/springboot/couchdbcomponentautoconfiguration.java index e5ebbc6 ..dbd2332 /platforms/spring-boot/components-starter/camel-couchdb-starter/src/main/java/org/apache/camel/component/couchdb/springboot/couchdbcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-couchdb-starter/src/main/java/org/apache/camel/component/couchdb/springboot/couchdbcomponentautoconfiguration.java package org .apache.camel.component.couchdb.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.couchdb.couchdbcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(couchdbcomponentautoconfiguration.condition.class) public class couchdbcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/digitalsignaturecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/digitalsignaturecomponentautoconfiguration.java index 59a7117 ..403dbeb /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/digitalsignaturecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/digitalsignaturecomponentautoconfiguration.java package org .apache.camel.component.crypto.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.crypto.digitalsignaturecomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(digitalsignaturecomponentautoconfiguration.condition.class) public class digitalsignaturecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/digitalsignaturecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/digitalsignaturecomponentconfiguration.java index 34a0e4c ..8c314a6 /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/digitalsignaturecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/digitalsignaturecomponentconfiguration.java import java .security.privatekey; import java .security.publickey; import java .security.securerandom; import java .security.cert.certificate; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.crypto.cryptooperation; import org .apache.camel.util.jsse.keystoreparameters; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.crypto"") public class digitalsignaturecomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/cryptodataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/cryptodataformatautoconfiguration.java index 4b13322 ..62d9a5f /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/cryptodataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/cryptodataformatautoconfiguration.java package org .apache.camel.converter.crypto.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(cryptodataformatautoconfiguration.condition.class) public class cryptodataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/cryptodataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/cryptodataformatconfiguration.java index 867db4b ..855c3dd /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/cryptodataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/cryptodataformatconfiguration.java package org .apache.camel.converter.crypto.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.crypto"") public class cryptodataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/pgpdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/pgpdataformatautoconfiguration.java index 8dd787a ..7b0d209 /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/pgpdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/pgpdataformatautoconfiguration.java package org .apache.camel.converter.crypto.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(pgpdataformatautoconfiguration.condition.class) public class pgpdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/pgpdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/pgpdataformatconfiguration.java index 4e39f7f ..5f55ec7 /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/pgpdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/pgpdataformatconfiguration.java package org .apache.camel.converter.crypto.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.pgp"") public class pgpdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/csvdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/csvdataformatautoconfiguration.java index 0eccf24 /platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/csvdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/csvdataformatautoconfiguration.java package org .apache.camel.dataformat.csv.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(csvdataformatautoconfiguration.condition.class) public class csvdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/csvdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/csvdataformatconfiguration.java index bf5f8c4 ..0d08c6f /platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/csvdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/csvdataformatconfiguration.java package org .apache.camel.dataformat.csv.springboot; import java .util.list; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.csv"") public class csvdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/cxfrscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/cxfrscomponentautoconfiguration.java index 370db9a ..395254b /platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/cxfrscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/cxfrscomponentautoconfiguration.java package org .apache.camel.component.cxf.jaxrs.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.cxf.jaxrs.cxfrscomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(cxfrscomponentautoconfiguration.condition.class) public class cxfrscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/cxfrscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/cxfrscomponentconfiguration.java index 3667f87 ..8f2d390 /platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/cxfrscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/cxfrscomponentconfiguration.java package org .apache.camel.component.cxf.jaxrs.springboot; +import javax .annotation.generated; import org .apache.camel.spi.headerfilterstrategy; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.cxfrs"") public class cxfrscomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/cxfcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/cxfcomponentautoconfiguration.java index 1a569d1 ..f0d939a /platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/cxfcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/cxfcomponentautoconfiguration.java package org .apache.camel.component.cxf.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.cxf.cxfcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(cxfcomponentautoconfiguration.condition.class) public class cxfcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/cxfcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/cxfcomponentconfiguration.java index 740acf0 ..7d7d474 /platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/cxfcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/cxfcomponentconfiguration.java package org .apache.camel.component.cxf.springboot; +import javax .annotation.generated; import org .apache.camel.spi.headerfilterstrategy; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.cxf"") public class cxfcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-digitalocean-starter/src/main/java/org/apache/camel/component/digitalocean/springboot/digitaloceancomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-digitalocean-starter/src/main/java/org/apache/camel/component/digitalocean/springboot/digitaloceancomponentautoconfiguration.java index c095a33 ..d9995b3 /platforms/spring-boot/components-starter/camel-digitalocean-starter/src/main/java/org/apache/camel/component/digitalocean/springboot/digitaloceancomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-digitalocean-starter/src/main/java/org/apache/camel/component/digitalocean/springboot/digitaloceancomponentautoconfiguration.java package org .apache.camel.component.digitalocean.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.digitalocean.digitaloceancomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(digitaloceancomponentautoconfiguration.condition.class) public class digitaloceancomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/disruptorcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/disruptorcomponentautoconfiguration.java index 2ede6c8 ..9e25274 /platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/disruptorcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/disruptorcomponentautoconfiguration.java package org .apache.camel.component.disruptor.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.disruptor.disruptorcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(disruptorcomponentautoconfiguration.condition.class) public class disruptorcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/disruptorcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/disruptorcomponentconfiguration.java index cea8f0c ..4456cf0 /platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/disruptorcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/disruptorcomponentconfiguration.java package org .apache.camel.component.disruptor.springboot; +import javax .annotation.generated; import org .apache.camel.component.disruptor.disruptorcomponent; import org .apache.camel.component.disruptor.disruptorproducertype; import org .apache.camel.component.disruptor.disruptorwaitstrategy; import org .springframework.boot.context.properties.deprecatedconfigurationproper generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.disruptor"") public class disruptorcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/disruptorvmcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/disruptorvmcomponentautoconfiguration.java index 6b9fc29 ..bd68968 /platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/disruptorvmcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/disruptorvmcomponentautoconfiguration.java package org .apache.camel.component.disruptor.vm.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.disruptor.vm.disruptorvmcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(disruptorvmcomponentautoconfiguration.condition.class) public class disruptorvmcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/disruptorvmcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/disruptorvmcomponentconfiguration.java index 3c025af ..ca9bac0 /platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/disruptorvmcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/disruptorvmcomponentconfiguration.java package org .apache.camel.component.disruptor.vm.springboot; +import javax .annotation.generated; import org .apache.camel.component.disruptor.disruptorproducertype; import org .apache.camel.component.disruptor.disruptorwaitstrategy; import org .apache.camel.component.disruptor.vm.disruptorvmcomponent; import org .springframework.boot.context.properties.deprecatedconfigurationproper generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.disruptor-vm"") public class disruptorvmcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-dns-starter/src/main/java/org/apache/camel/component/dns/springboot/dnscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-dns-starter/src/main/java/org/apache/camel/component/dns/springboot/dnscomponentautoconfiguration.java index 5925f5e ..c5006a3 /platforms/spring-boot/components-starter/camel-dns-starter/src/main/java/org/apache/camel/component/dns/springboot/dnscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-dns-starter/src/main/java/org/apache/camel/component/dns/springboot/dnscomponentautoconfiguration.java package org .apache.camel.component.dns.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.dns.dnscomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(dnscomponentautoconfiguration.condition.class) public class dnscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/dockercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/dockercomponentautoconfiguration.java index 4412ce2 ..29c7f7a /platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/dockercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/dockercomponentautoconfiguration.java package org .apache.camel.component.docker.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.docker.dockercomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(dockercomponentautoconfiguration.condition.class) public class dockercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/dockercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/dockercomponentconfiguration.java index b788091 ..5c55879 /platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/dockercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/dockercomponentconfiguration.java package org .apache.camel.component.docker.springboot; import java .util.map; +import javax .annotation.generated; import org .apache.camel.component.docker.dockeroperation; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.docker"") public class dockercomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-dozer-starter/src/main/java/org/apache/camel/component/dozer/springboot/dozercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-dozer-starter/src/main/java/org/apache/camel/component/dozer/springboot/dozercomponentautoconfiguration.java index df0348d ..21d94c0 /platforms/spring-boot/components-starter/camel-dozer-starter/src/main/java/org/apache/camel/component/dozer/springboot/dozercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-dozer-starter/src/main/java/org/apache/camel/component/dozer/springboot/dozercomponentautoconfiguration.java package org .apache.camel.component.dozer.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.dozer.dozercomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(dozercomponentautoconfiguration.condition.class) public class dozercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-drill-starter/src/main/java/org/apache/camel/component/drill/springboot/drillcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-drill-starter/src/main/java/org/apache/camel/component/drill/springboot/drillcomponentautoconfiguration.java index fdfdc09 ..e0c8b63 /platforms/spring-boot/components-starter/camel-drill-starter/src/main/java/org/apache/camel/component/drill/springboot/drillcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-drill-starter/src/main/java/org/apache/camel/component/drill/springboot/drillcomponentautoconfiguration.java package org .apache.camel.component.drill.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.drill.drillcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(drillcomponentautoconfiguration.condition.class) public class drillcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-dropbox-starter/src/main/java/org/apache/camel/component/dropbox/springboot/dropboxcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-dropbox-starter/src/main/java/org/apache/camel/component/dropbox/springboot/dropboxcomponentautoconfiguration.java index 53b7c8a ..9d498f0 /platforms/spring-boot/components-starter/camel-dropbox-starter/src/main/java/org/apache/camel/component/dropbox/springboot/dropboxcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-dropbox-starter/src/main/java/org/apache/camel/component/dropbox/springboot/dropboxcomponentautoconfiguration.java package org .apache.camel.component.dropbox.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.dropbox.dropboxcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(dropboxcomponentautoconfiguration.condition.class) public class dropboxcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-ehcache-starter/src/main/java/org/apache/camel/component/ehcache/springboot/ehcachecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ehcache-starter/src/main/java/org/apache/camel/component/ehcache/springboot/ehcachecomponentautoconfiguration.java index 00e8355 ..ece5cf2 /platforms/spring-boot/components-starter/camel-ehcache-starter/src/main/java/org/apache/camel/component/ehcache/springboot/ehcachecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ehcache-starter/src/main/java/org/apache/camel/component/ehcache/springboot/ehcachecomponentautoconfiguration.java package org .apache.camel.component.ehcache.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.ehcache.ehcachecomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(ehcachecomponentautoconfiguration.condition.class) public class ehcachecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/elasticsearchcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/elasticsearchcomponentautoconfiguration.java index 3d1cade ..d8cf1b7 /platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/elasticsearchcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/elasticsearchcomponentautoconfiguration.java package org .apache.camel.component.elasticsearch.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.elasticsearch.elasticsearchcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(elasticsearchcomponentautoconfiguration.condition.class) public class elasticsearchcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/elasticsearchcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/elasticsearchcomponentconfiguration.java index 50fb329 ..830b97e /platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/elasticsearchcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/elasticsearchcomponentconfiguration.java package org .apache.camel.component.elasticsearch.springboot; +import javax .annotation.generated; import org .elasticsearch.client.client; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.elasticsearch"") public class elasticsearchcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-elasticsearch5-starter/src/main/java/org/apache/camel/component/elasticsearch5/springboot/elasticsearchcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-elasticsearch5-starter/src/main/java/org/apache/camel/component/elasticsearch5/springboot/elasticsearchcomponentautoconfiguration.java index 3e9a70b ..34cfc66 /platforms/spring-boot/components-starter/camel-elasticsearch5-starter/src/main/java/org/apache/camel/component/elasticsearch5/springboot/elasticsearchcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-elasticsearch5-starter/src/main/java/org/apache/camel/component/elasticsearch5/springboot/elasticsearchcomponentautoconfiguration.java package org .apache.camel.component.elasticsearch5.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.elasticsearch5.elasticsearchcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(elasticsearchcomponentautoconfiguration.condition.class) public class elasticsearchcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cba063c0840a44aa5902d9ed7d584880a%40git.apache.org%3E,2017-04-19 08:35:54,commits,393.0,camel git commit camel add @generated annotation code g
154,240,240,196.0,394.0,zregv...@apache.org,"diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataset/springboot/datasetcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataset/springboot/datasetcomponentautoconfiguration.java index e3d205c ..98405d6 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataset/springboot/datasetcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataset/springboot/datasetcomponentautoconfiguration.java package org .apache.camel.component.dataset.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.dataset.datasetcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(datasetcomponentautoconfiguration.condition.class) public class datasetcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/directcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/directcomponentautoconfiguration.java index 07aa4d9 ..fd59a16 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/directcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/directcomponentautoconfiguration.java package org .apache.camel.component.direct.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.direct.directcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(directcomponentautoconfiguration.condition.class) public class directcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/directcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/directcomponentconfiguration.java index ..4ba792c /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/directcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/directcomponentconfiguration.java package org .apache.camel.component.direct.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.direct"") public class directcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/directvmcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/directvmcomponentautoconfiguration.java index 33a1e2a ..bb636d1 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/directvmcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/directvmcomponentautoconfiguration.java package org .apache.camel.component.directvm.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.directvm.directvmcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(directvmcomponentautoconfiguration.condition.class) public class directvmcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/directvmcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/directvmcomponentconfiguration.java index 2f4383b ..ae30a25 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/directvmcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/directvmcomponentconfiguration.java package org .apache.camel.component.directvm.springboot; +import javax .annotation.generated; import org .apache.camel.spi.headerfilterstrategy; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.direct-vm"") public class directvmcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/file/springboot/filecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/file/springboot/filecomponentautoconfiguration.java index 8b82256 ..4558d3b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/file/springboot/filecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/file/springboot/filecomponentautoconfiguration.java package org .apache.camel.component.file.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.file.filecomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(filecomponentautoconfiguration.condition.class) public class filecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/language/springboot/languagecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/language/springboot/languagecomponentautoconfiguration.java index a67110a ..6980be2 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/language/springboot/languagecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/language/springboot/languagecomponentautoconfiguration.java package org .apache.camel.component.language.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.language.languagecomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(languagecomponentautoconfiguration.condition.class) public class languagecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/logcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/logcomponentautoconfiguration.java index 5a95fce ..cb885fa /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/logcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/logcomponentautoconfiguration.java package org .apache.camel.component.log.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.log.logcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(logcomponentautoconfiguration.condition.class) public class logcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/logcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/logcomponentconfiguration.java index 22b2301 ..5318bc7 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/logcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/logcomponentconfiguration.java package org .apache.camel.component.log.springboot; +import javax .annotation.generated; import org .apache.camel.spi.exchangeformatter; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.log"") public class logcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/mock/springboot/mockcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/mock/springboot/mockcomponentautoconfiguration.java index 73167f4 ..dc9389f /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/mock/springboot/mockcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/mock/springboot/mockcomponentautoconfiguration.java package org .apache.camel.component.mock.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.mock.mockcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(mockcomponentautoconfiguration.condition.class) public class mockcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/propertiescomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/propertiescomponentautoconfiguration.java index a6ee450 ..b1d0e85 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/propertiescomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/propertiescomponentautoconfiguration.java package org .apache.camel.component.properties.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.properties.propertiescomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(propertiescomponentautoconfiguration.condition.class) public class propertiescomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/propertiescomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/propertiescomponentconfiguration.java index fcb8096 ..b62dc67 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/propertiescomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/propertiescomponentconfiguration.java package org .apache.camel.component.properties.springboot; import java .util.list; import java .util.properties; +import javax .annotation.generated; import org .apache.camel.component.properties.propertieslocation; import org .apache.camel.component.properties.propertiesparser; import org .apache.camel.component.properties.propertiesresolver; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.properties"") public class propertiescomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/ref/springboot/refcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/ref/springboot/refcomponentautoconfiguration.java index c30907a ..270d960 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/ref/springboot/refcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/ref/springboot/refcomponentautoconfiguration.java package org .apache.camel.component.ref.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.ref.refcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(refcomponentautoconfiguration.condition.class) public class refcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/restapicomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/restapicomponentautoconfiguration.java index 2567fb7 ..c113cce /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/restapicomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/restapicomponentautoconfiguration.java package org .apache.camel.component.rest.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.rest.restapicomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(restapicomponentautoconfiguration.condition.class) public class restapicomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/restcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/restcomponentautoconfiguration.java index 7fb213b ..e99b813 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/restcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/restcomponentautoconfiguration.java package org .apache.camel.component.rest.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.rest.restcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(restcomponentautoconfiguration.condition.class) public class restcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/restcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/restcomponentconfiguration.java index 03c6870 ..ce06f5e /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/restcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/restcomponentconfiguration.java package org .apache.camel.component.rest.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.rest"") public class restcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/schedulercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/schedulercomponentautoconfiguration.java index ..5ebf274 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/schedulercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/schedulercomponentautoconfiguration.java package org .apache.camel.component.scheduler.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.scheduler.schedulercomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(schedulercomponentautoconfiguration.condition.class) public class schedulercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/schedulercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/schedulercomponentconfiguration.java index f186f9c ..60d0e61 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/schedulercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/schedulercomponentconfiguration.java package org .apache.camel.component.scheduler.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.scheduler"") public class schedulercomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/sedacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/sedacomponentautoconfiguration.java index 60ce140 ..acd3d48 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/sedacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/sedacomponentautoconfiguration.java package org .apache.camel.component.seda.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.seda.sedacomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(sedacomponentautoconfiguration.condition.class) public class sedacomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/sedacomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/sedacomponentconfiguration.java index 761d7af ..456ad90 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/sedacomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/sedacomponentconfiguration.java package org .apache.camel.component.seda.springboot; +import javax .annotation.generated; import org .apache.camel.exchange; import org .apache.camel.component.seda.blockingqueuefactory; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.seda"") public class sedacomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/stubcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/stubcomponentautoconfiguration.java index 5b75ade ..fe4dcf5 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/stubcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/stubcomponentautoconfiguration.java package org .apache.camel.component.stub.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.stub.stubcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(stubcomponentautoconfiguration.condition.class) public class stubcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/stubcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/stubcomponentconfiguration.java index bf9a6d0 ..a3a027f /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/stubcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/stubcomponentconfiguration.java package org .apache.camel.component.stub.springboot; +import javax .annotation.generated; import org .apache.camel.exchange; import org .apache.camel.component.seda.blockingqueuefactory; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.stub"") public class stubcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/test/springboot/testcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/test/springboot/testcomponentautoconfiguration.java index fe4f022 ..12f253b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/test/springboot/testcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/test/springboot/testcomponentautoconfiguration.java package org .apache.camel.component.test.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.test.testcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(testcomponentautoconfiguration.condition.class) public class testcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/timer/springboot/timercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/timer/springboot/timercomponentautoconfiguration.java index e65f565 ..e26ba57 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/timer/springboot/timercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/timer/springboot/timercomponentautoconfiguration.java package org .apache.camel.component.timer.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.timer.timercomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(timercomponentautoconfiguration.condition.class) public class timercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/validatorcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/validatorcomponentautoconfiguration.java index 0f0bf25 ..c97549c /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/validatorcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/validatorcomponentautoconfiguration.java package org .apache.camel.component.validator.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.validator.validatorcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(validatorcomponentautoconfiguration.condition.class) public class validatorcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/validatorcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/validatorcomponentconfiguration.java index 1e607af ..49ee967 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/validatorcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/validatorcomponentconfiguration.java package org .apache.camel.component.validator.springboot; +import javax .annotation.generated; import org .apache.camel.component.validator.validatorresourceresolverfactory; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.validator"") public class validatorcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/vmcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/vmcomponentautoconfiguration.java index 4761f78 ..fb19cf1 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/vmcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/vmcomponentautoconfiguration.java package org .apache.camel.component.vm.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.vm.vmcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(vmcomponentautoconfiguration.condition.class) public class vmcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/vmcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/vmcomponentconfiguration.java index 3ac9f03 ..c1ad19d /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/vmcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/vmcomponentconfiguration.java package org .apache.camel.component.vm.springboot; +import javax .annotation.generated; import org .apache.camel.exchange; import org .apache.camel.component.seda.blockingqueuefactory; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.vm"") public class vmcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/xsltcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/xsltcomponentautoconfiguration.java index ce4e9f7 ..10d3ba3 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/xsltcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/xsltcomponentautoconfiguration.java package org .apache.camel.component.xslt.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.xslt.xsltcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(xsltcomponentautoconfiguration.condition.class) public class xsltcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/xsltcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/xsltcomponentconfiguration.java index 040e229 ..2fbcb14 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/xsltcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/xsltcomponentconfiguration.java package org .apache.camel.component.xslt.springboot; import java .util.list; import java .util.map; +import javax .annotation.generated; import javax .xml.parsers.documentbuilderfactory; import javax .xml.transform.transformerfactory; import javax .xml.transform.uriresolver; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.xslt"") public class xsltcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/gzipdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/gzipdataformatautoconfiguration.java index 81c052e ..229aaf3 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/gzipdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/gzipdataformatautoconfiguration.java package org .apache.camel.impl.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(gzipdataformatautoconfiguration.condition.class) public class gzipdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/gzipdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/gzipdataformatconfiguration.java index 4953a5c ..3eee5db /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/gzipdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/gzipdataformatconfiguration.java package org .apache.camel.impl.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.gzip"") public class gzipdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/serializationdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/serializationdataformatautoconfiguration.java index 27f6dbb ..149119f /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/serializationdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/serializationdataformatautoconfiguration.java package org .apache.camel.impl.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(serializationdataformatautoconfiguration.condition.class) public class serializationdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/serializationdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/serializationdataformatconfiguration.java index 5cf28d4 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/serializationdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/serializationdataformatconfiguration.java package org .apache.camel.impl.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.serialization"") public class serializationdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/stringdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/stringdataformatautoconfiguration.java index d699e97 ..087a643 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/stringdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/stringdataformatautoconfiguration.java package org .apache.camel.impl.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(stringdataformatautoconfiguration.condition.class) public class stringdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/stringdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/stringdataformatconfiguration.java index aeccfac ..64c4ed7 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/stringdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/stringdataformatconfiguration.java package org .apache.camel.impl.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.string"") public class stringdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/zipdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/zipdataformatautoconfiguration.java index 26ea5fe ..653b189 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/zipdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/zipdataformatautoconfiguration.java package org .apache.camel.impl.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(zipdataformatautoconfiguration.condition.class) public class zipdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/zipdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/zipdataformatconfiguration.java index 401acb9 ..6a3a6ba /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/zipdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/zipdataformatconfiguration.java package org .apache.camel.impl.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.zip"") public class zipdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/beanlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/beanlanguageautoconfiguration.java index 6f93fd8 ..810bd2d /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/beanlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/beanlanguageautoconfiguration.java package org .apache.camel.language.bean.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.bean.beanlanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(beanlanguageautoconfiguration.condition.class) public class beanlanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/beanlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/beanlanguageconfiguration.java index b39a7ac ..aa65384 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/beanlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/beanlanguageconfiguration.java package org .apache.camel.language.bean.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.bean"") public class beanlanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/constantlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/constantlanguageautoconfiguration.java index 50a4b7a ..a5a00d4 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/constantlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/constantlanguageautoconfiguration.java package org .apache.camel.language.constant.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.constant.constantlanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(constantlanguageautoconfiguration.condition.class) public class constantlanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/constantlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/constantlanguageconfiguration.java index cec0509 ..7d0ad77 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/constantlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/constantlanguageconfiguration.java package org .apache.camel.language.constant.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.constant"") public class constantlanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/headerlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/headerlanguageautoconfiguration.java index d49c098 ..0d75034 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/headerlanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/headerlanguageautoconfiguration.java package org .apache.camel.language.header.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.header.headerlanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(headerlanguageautoconfiguration.condition.class) public class headerlanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/headerlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/headerlanguageconfiguration.java index bf00d3a ..6a3d67a /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/headerlanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/headerlanguageconfiguration.java package org .apache.camel.language.header.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.header"") public class headerlanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/exchangepropertylanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/exchangepropertylanguageautoconfiguration.java index e4456cb ..15e1508 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/exchangepropertylanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/exchangepropertylanguageautoconfiguration.java package org .apache.camel.language.property.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.property.exchangepropertylanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(exchangepropertylanguageautoconfiguration.condition.class) public class exchangepropertylanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/exchangepropertylanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/exchangepropertylanguageconfiguration.java index ef7a21c ..8e58600 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/exchangepropertylanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/exchangepropertylanguageconfiguration.java package org .apache.camel.language.property.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.exchangeproperty"") public class exchangepropertylanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/reflanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/reflanguageautoconfiguration.java index 4c64f98 ..f73dffe /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/reflanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/reflanguageautoconfiguration.java package org .apache.camel.language.ref.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.ref.reflanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(reflanguageautoconfiguration.condition.class) public class reflanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/reflanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/reflanguageconfiguration.java index 7893b91 ..f1fbc7e /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/reflanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/reflanguageconfiguration.java package org .apache.camel.language.ref.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.ref"") public class reflanguageconfiguration diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/filelanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/filelanguageautoconfiguration.java index 4891f8a ..1345dc8 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/filelanguageautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/filelanguageautoconfiguration.java package org .apache.camel.language.simple.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.language.simple.filelanguage; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(filelanguageautoconfiguration.condition.class) public class filelanguageautoconfiguration return language @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/filelanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/filelanguageconfiguration.java index f80a9e4 ..13f0756 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/filelanguageconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/filelanguageconfiguration.java package org .apache.camel.language.simple.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.language.file"") public class filelanguageconfiguration",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cc306b1f3c4214122ace43dc8d3f23170%40git.apache.org%3E,2017-04-19 08:35:55,commits,394.0,camel git commit camel add @generated annotation code g
155,241,241,197.0,395.0,zregv...@apache.org,"diff --git /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/swf/springboot/swfcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/swf/springboot/swfcomponentautoconfiguration.java index 41c5993 ..a2f24ce /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/swf/springboot/swfcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/swf/springboot/swfcomponentautoconfiguration.java package org .apache.camel.component.aws.swf.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.aws.swf.swfcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(swfcomponentautoconfiguration.condition.class) public class swfcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/blob/springboot/blobservicecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/blob/springboot/blobservicecomponentautoconfiguration.java index fdb4dfc ..5e8ee71 /platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/blob/springboot/blobservicecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/blob/springboot/blobservicecomponentautoconfiguration.java package org .apache.camel.component.azure.blob.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.azure.blob.blobservicecomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(blobservicecomponentautoconfiguration.condition.class) public class blobservicecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/queue/springboot/queueservicecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/queue/springboot/queueservicecomponentautoconfiguration.java index a929af0 ..691ab09 /platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/queue/springboot/queueservicecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/queue/springboot/queueservicecomponentautoconfiguration.java package org .apache.camel.component.azure.queue.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.azure.queue.queueservicecomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(queueservicecomponentautoconfiguration.condition.class) public class queueservicecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/barcodedataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/barcodedataformatautoconfiguration.java index ce76822 ..d7cafd9 /platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/barcodedataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/barcodedataformatautoconfiguration.java package org .apache.camel.dataformat.barcode.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(barcodedataformatautoconfiguration.condition.class) public class barcodedataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/barcodedataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/barcodedataformatconfiguration.java index 1cdb0c1 ..d8539be /platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/barcodedataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/barcodedataformatconfiguration.java package org .apache.camel.dataformat.barcode.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.barcode"") public class barcodedataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/base64dataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/base64dataformatautoconfiguration.java index 11b6c7a ..f0b1387 /platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/base64dataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/base64dataformatautoconfiguration.java package org .apache.camel.dataformat.base64.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(base64dataformatautoconfiguration.condition.class) public class base64dataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/base64dataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/base64dataformatconfiguration.java index 26bda5e ..e0d52d3 /platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/base64dataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/base64dataformatconfiguration.java package org .apache.camel.dataformat.base64.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.base64"") public class base64dataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-bean-validator-starter/src/main/java/org/apache/camel/component/bean/validator/springboot/beanvalidatorcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-bean-validator-starter/src/main/java/org/apache/camel/component/bean/validator/springboot/beanvalidatorcomponentautoconfiguration.java index 2aef002 ..731fb15 /platforms/spring-boot/components-starter/camel-bean-validator-starter/src/main/java/org/apache/camel/component/bean/validator/springboot/beanvalidatorcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-bean-validator-starter/src/main/java/org/apache/camel/component/bean/validator/springboot/beanvalidatorcomponentautoconfiguration.java package org .apache.camel.component.bean.validator.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.bean.validator.beanvalidatorcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(beanvalidatorcomponentautoconfiguration.condition.class) public class beanvalidatorcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/beaniodataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/beaniodataformatautoconfiguration.java index dc93bab ..04d3b3b /platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/beaniodataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/beaniodataformatautoconfiguration.java package org .apache.camel.dataformat.beanio.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(beaniodataformatautoconfiguration.condition.class) public class beaniodataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/beaniodataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/beaniodataformatconfiguration.java index 2f1922d ..2a32468 /platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/beaniodataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/beaniodataformatconfiguration.java package org .apache.camel.dataformat.beanio.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.beanio"") public class beaniodataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/beanstalkcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/beanstalkcomponentautoconfiguration.java index 9f283d2 ..ed4684b /platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/beanstalkcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/beanstalkcomponentautoconfiguration.java package org .apache.camel.component.beanstalk.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.beanstalk.beanstalkcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(beanstalkcomponentautoconfiguration.condition.class) public class beanstalkcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/beanstalkcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/beanstalkcomponentconfiguration.java index e4eaf7e ..6aae498 /platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/beanstalkcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/beanstalkcomponentconfiguration.java package org .apache.camel.component.beanstalk.springboot; +import javax .annotation.generated; import org .apache.camel.component.beanstalk.connectionsettingsfactory; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.beanstalk"") public class beanstalkcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/bindycsvdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/bindycsvdataformatautoconfiguration.java index e2583ee ..4ed920a /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/bindycsvdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/bindycsvdataformatautoconfiguration.java package org .apache.camel.dataformat.bindy.csv.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(bindycsvdataformatautoconfiguration.condition.class) public class bindycsvdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/bindycsvdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/bindycsvdataformatconfiguration.java index 8589bf0 ..5c3db44 /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/bindycsvdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/bindycsvdataformatconfiguration.java package org .apache.camel.dataformat.bindy.csv.springboot; +import javax .annotation.generated; import org .apache.camel.model.dataformat.bindytype; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.bindy-csv"") public class bindycsvdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/bindyfixedlengthdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/bindyfixedlengthdataformatautoconfiguration.java index 64a547a ..50cd7cf /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/bindyfixedlengthdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/bindyfixedlengthdataformatautoconfiguration.java package org .apache.camel.dataformat.bindy.fixed.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(bindyfixedlengthdataformatautoconfiguration.condition.class) public class bindyfixedlengthdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/bindyfixedlengthdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/bindyfixedlengthdataformatconfiguration.java index 91ef2f5 ..0292d8f /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/bindyfixedlengthdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/bindyfixedlengthdataformatconfiguration.java package org .apache.camel.dataformat.bindy.fixed.springboot; +import javax .annotation.generated; import org .apache.camel.model.dataformat.bindytype; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.bindy-fixed"") public class bindyfixedlengthdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/bindykeyvaluepairdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/bindykeyvaluepairdataformatautoconfiguration.java index 733e14c ..77de985 /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/bindykeyvaluepairdataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/bindykeyvaluepairdataformatautoconfiguration.java package org .apache.camel.dataformat.bindy.kvp.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(bindykeyvaluepairdataformatautoconfiguration.condition.class) public class bindykeyvaluepairdataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/bindykeyvaluepairdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/bindykeyvaluepairdataformatconfiguration.java index a26c9fa ..f812e60 /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/bindykeyvaluepairdataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/bindykeyvaluepairdataformatconfiguration.java package org .apache.camel.dataformat.bindy.kvp.springboot; +import javax .annotation.generated; import org .apache.camel.model.dataformat.bindytype; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.bindy-kvp"") public class bindykeyvaluepairdataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/bonitacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/bonitacomponentautoconfiguration.java index 776f6b2 ..8bfa8d8 /platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/bonitacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/bonitacomponentautoconfiguration.java package org .apache.camel.component.bonita.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.bonita.bonitacomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(bonitacomponentautoconfiguration.condition.class) public class bonitacomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/boondataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/boondataformatautoconfiguration.java index 5d6702f ..e4b60ac /platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/boondataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/boondataformatautoconfiguration.java package org .apache.camel.component.boon.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(boondataformatautoconfiguration.condition.class) public class boondataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/boondataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/boondataformatconfiguration.java index ..0531b94 /platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/boondataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/boondataformatconfiguration.java package org .apache.camel.component.boon.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.boon"") public class boondataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/boxcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/boxcomponentautoconfiguration.java index c71e9e1 ..d5e4c15 /platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/boxcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/boxcomponentautoconfiguration.java package org .apache.camel.component.box.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.box.boxcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(boxcomponentautoconfiguration.condition.class) public class boxcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/boxcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/boxcomponentconfiguration.java index d60ba98 ..e65b88f /platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/boxcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/boxcomponentconfiguration.java package org .apache.camel.component.box.springboot; import java .util.map; +import javax .annotation.generated; import com .box.sdk.iaccesstokencache; import org .apache.camel.component.box.internal.boxapiname; import org .apache.camel.util.jsse.sslcontextparameters; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.box"") public class boxcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/braintreecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/braintreecomponentautoconfiguration.java index ..74c6170 /platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/braintreecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/braintreecomponentautoconfiguration.java package org .apache.camel.component.braintree.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.braintree.braintreecomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(braintreecomponentautoconfiguration.condition.class) public class braintreecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/braintreecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/braintreecomponentconfiguration.java index a040f05 ..036509e /platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/braintreecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/braintreecomponentconfiguration.java package org .apache.camel.component.braintree.springboot; import java .util.logging.level; +import javax .annotation.generated; import org .apache.camel.component.braintree.internal.braintreeapiname; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.braintree"") public class braintreecomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/cachecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/cachecomponentautoconfiguration.java index e2f577e ..cb42905 /platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/cachecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/cachecomponentautoconfiguration.java package org .apache.camel.component.cache.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.cache.cachecomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(cachecomponentautoconfiguration.condition.class) public class cachecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/cachecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/cachecomponentconfiguration.java index 1872e64 ..57a9ae5 /platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/cachecomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/cachecomponentconfiguration.java package org .apache.camel.component.cache.springboot; +import javax .annotation.generated; import net .sf.ehcache.store.memorystoreevictionpolicy; import org .apache.camel.component.cache.cacheeventlistenerregistry; import org .apache.camel.component.cache.cacheloaderregistry; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.cache"") public class cachecomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-cassandraql-starter/src/main/java/org/apache/camel/component/cassandra/springboot/cassandracomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-cassandraql-starter/src/main/java/org/apache/camel/component/cassandra/springboot/cassandracomponentautoconfiguration.java index 40cb722 ..041ba28 /platforms/spring-boot/components-starter/camel-cassandraql-starter/src/main/java/org/apache/camel/component/cassandra/springboot/cassandracomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-cassandraql-starter/src/main/java/org/apache/camel/component/cassandra/springboot/cassandracomponentautoconfiguration.java package org .apache.camel.component.cassandra.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.cassandra.cassandracomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(cassandracomponentautoconfiguration.condition.class) public class cassandracomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/castordataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/castordataformatautoconfiguration.java index f4588e1 ..22c6cb0 /platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/castordataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/castordataformatautoconfiguration.java package org .apache.camel.dataformat.castor.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(castordataformatautoconfiguration.condition.class) public class castordataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/castordataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/castordataformatconfiguration.java index 7f566af ..5eac61a /platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/castordataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/castordataformatconfiguration.java package org .apache.camel.dataformat.castor.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.castor"") public class castordataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-chronicle-starter/src/main/java/org/apache/camel/component/chronicle/engine/springboot/chronicleenginecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-chronicle-starter/src/main/java/org/apache/camel/component/chronicle/engine/springboot/chronicleenginecomponentautoconfiguration.java index 416b32f ..1cc30ab /platforms/spring-boot/components-starter/camel-chronicle-starter/src/main/java/org/apache/camel/component/chronicle/engine/springboot/chronicleenginecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-chronicle-starter/src/main/java/org/apache/camel/component/chronicle/engine/springboot/chronicleenginecomponentautoconfiguration.java package org .apache.camel.component.chronicle.engine.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.chronicle.engine.chronicleenginecomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(chronicleenginecomponentautoconfiguration.condition.class) public class chronicleenginecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-chunk-starter/src/main/java/org/apache/camel/component/chunk/springboot/chunkcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-chunk-starter/src/main/java/org/apache/camel/component/chunk/springboot/chunkcomponentautoconfiguration.java index 76a5ef4 ..6f90de0 /platforms/spring-boot/components-starter/camel-chunk-starter/src/main/java/org/apache/camel/component/chunk/springboot/chunkcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-chunk-starter/src/main/java/org/apache/camel/component/chunk/springboot/chunkcomponentautoconfiguration.java package org .apache.camel.component.chunk.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.chunk.chunkcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(chunkcomponentautoconfiguration.condition.class) public class chunkcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-cm-sms-starter/src/main/java/org/apache/camel/component/cm/springboot/cmcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-cm-sms-starter/src/main/java/org/apache/camel/component/cm/springboot/cmcomponentautoconfiguration.java index 96f44e6 ..0816d87 /platforms/spring-boot/components-starter/camel-cm-sms-starter/src/main/java/org/apache/camel/component/cm/springboot/cmcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-cm-sms-starter/src/main/java/org/apache/camel/component/cm/springboot/cmcomponentautoconfiguration.java package org .apache.camel.component.cm.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.cm.cmcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(cmcomponentautoconfiguration.condition.class) public class cmcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/cmiscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/cmiscomponentautoconfiguration.java index 484a69a ..592c974 /platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/cmiscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/cmiscomponentautoconfiguration.java package org .apache.camel.component.cmis.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.cmis.cmiscomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(cmiscomponentautoconfiguration.condition.class) public class cmiscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/cmiscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/cmiscomponentconfiguration.java index ..624fb09 /platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/cmiscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/cmiscomponentconfiguration.java package org .apache.camel.component.cmis.springboot; +import javax .annotation.generated; import org .apache.camel.component.cmis.cmissessionfacadefactory; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.cmis"") public class cmiscomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-coap-starter/src/main/java/org/apache/camel/coap/springboot/coapcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-coap-starter/src/main/java/org/apache/camel/coap/springboot/coapcomponentautoconfiguration.java index 30eb83c ..fa1ccfc /platforms/spring-boot/components-starter/camel-coap-starter/src/main/java/org/apache/camel/coap/springboot/coapcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-coap-starter/src/main/java/org/apache/camel/coap/springboot/coapcomponentautoconfiguration.java package org .apache.camel.coap.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.coap.coapcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(coapcomponentautoconfiguration.condition.class) public class coapcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/cometdcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/cometdcomponentautoconfiguration.java index 5bfcdce ..33a15ef /platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/cometdcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/cometdcomponentautoconfiguration.java package org .apache.camel.component.cometd.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.cometd.cometdcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(cometdcomponentautoconfiguration.condition.class) public class cometdcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/cometdcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/cometdcomponentconfiguration.java index eacf933 ..1ad2c2c /platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/cometdcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/cometdcomponentconfiguration.java package org .apache.camel.component.cometd.springboot; import java .util.list; +import javax .annotation.generated; import org .apache.camel.util.jsse.sslcontextparameters; import org .cometd.bayeux.server.bayeuxserver.extension; import org .cometd.bayeux.server.securitypolicy; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.cometd"") public class cometdcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/consulcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/consulcomponentautoconfiguration.java index cd7fbbf ..15c197b /platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/consulcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/consulcomponentautoconfiguration.java package org .apache.camel.component.consul.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.consul.consulcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(consulcomponentautoconfiguration.condition.class) public class consulcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/consulcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/consulcomponentconfiguration.java index 9e8b957 ..a763d9c /platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/consulcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/consulcomponentconfiguration.java package org .apache.camel.component.consul.springboot; import java .util.list; import java .util.set; +import javax .annotation.generated; import com .orbitz.consul.option.consistencymode; import org .apache.camel.camelcontext; import org .apache.camel.util.jsse.sslcontextparameters; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.consul"") public class consulcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-context-starter/src/main/java/org/apache/camel/component/context/springboot/qualifiedcontextcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-context-starter/src/main/java/org/apache/camel/component/context/springboot/qualifiedcontextcomponentautoconfiguration.java index c1ac8a6 ..b45987c /platforms/spring-boot/components-starter/camel-context-starter/src/main/java/org/apache/camel/component/context/springboot/qualifiedcontextcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-context-starter/src/main/java/org/apache/camel/component/context/springboot/qualifiedcontextcomponentautoconfiguration.java package org .apache.camel.component.context.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.context.qualifiedcontextcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(qualifiedcontextcomponentautoconfiguration.condition.class) public class qualifiedcontextcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/bean/springboot/beancomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/bean/springboot/beancomponentautoconfiguration.java index 53abd7e /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/bean/springboot/beancomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/bean/springboot/beancomponentautoconfiguration.java package org .apache.camel.component.bean.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.bean.beancomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(beancomponentautoconfiguration.condition.class) public class beancomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/beanclass/springboot/classcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/beanclass/springboot/classcomponentautoconfiguration.java index d75da6f ..3a77bc3 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/beanclass/springboot/classcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/beanclass/springboot/classcomponentautoconfiguration.java package org .apache.camel.component.beanclass.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.beanclass.classcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(classcomponentautoconfiguration.condition.class) public class classcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/binding/springboot/bindingnamecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/binding/springboot/bindingnamecomponentautoconfiguration.java index ce78eb1 ..9be6807 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/binding/springboot/bindingnamecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/binding/springboot/bindingnamecomponentautoconfiguration.java package org .apache.camel.component.binding.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.binding.bindingnamecomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(bindingnamecomponentautoconfiguration.condition.class) public class bindingnamecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/browse/springboot/browsecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/browse/springboot/browsecomponentautoconfiguration.java index 9aa85c0 ..1cbe088 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/browse/springboot/browsecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/browse/springboot/browsecomponentautoconfiguration.java package org .apache.camel.component.browse.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.browse.browsecomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(browsecomponentautoconfiguration.condition.class) public class browsecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/controlbus/springboot/controlbuscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/controlbus/springboot/controlbuscomponentautoconfiguration.java index d9a7aaa ..1b572b5 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/controlbus/springboot/controlbuscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/controlbus/springboot/controlbuscomponentautoconfiguration.java package org .apache.camel.component.controlbus.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.controlbus.controlbuscomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(controlbuscomponentautoconfiguration.condition.class) public class controlbuscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataformat/springboot/dataformatcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataformat/springboot/dataformatcomponentautoconfiguration.java index c574bdc ..02091d5 /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataformat/springboot/dataformatcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataformat/springboot/dataformatcomponentautoconfiguration.java package org .apache.camel.component.dataformat.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.dataformat.dataformatcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(dataformatcomponentautoconfiguration.condition.class) public class dataformatcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C1416f95a4e8e40f0b5371c16ce2d83b1%40git.apache.org%3E,2017-04-19 08:35:56,commits,395.0,camel git commit camel add @generated annotation code g
156,242,242,198.0,396.0,zregv...@apache.org,"camel add @generated annotation code g ...enerated springbootautoconfigurationmojo regenerates spring boot auto configuration source file include `@generated` annotation project commit tree diff branch ref /heads/master commit 2297128fc16a93e08f9e09fc2c8e64bbfb5a8387 parent 583d6dc author zoran regvart <zregvart@apache.org> authored wed apr committer zoran regvart <zregvart@apache.org> committed wed apr .../component/ahc/springboot/ahccomponentautoconfiguration.java .../component/ahc/springboot/ahccomponentconfiguration.java .../ahc/ws/springboot/wscomponentautoconfiguration.java .../component/ahc/ws/springboot/wscomponentconfiguration.java .../amqp/springboot/amqpcomponentautoconfiguration.java .../component/amqp/springboot/amqpcomponentconfiguration.java .../apns/springboot/apnscomponentautoconfiguration.java .../component/apns/springboot/apnscomponentconfiguration.java .../asterisk/springboot/asteriskcomponentautoconfiguration.java .../atmos/springboot/atmoscomponentautoconfiguration.java .../springboot/websocketcomponentautoconfiguration.java .../websocket/springboot/websocketcomponentconfiguration.java .../atom/springboot/atomcomponentautoconfiguration.java .../avro/springboot/avrocomponentautoconfiguration.java .../component/avro/springboot/avrocomponentconfiguration.java .../avro/springboot/avrodataformatautoconfiguration.java .../dataformat/avro/springboot/avrodataformatconfiguration.java .../aws/cw/springboot/cwcomponentautoconfiguration.java .../aws/ddb/springboot/ddbcomponentautoconfiguration.java .../springboot/ddbstreamcomponentautoconfiguration.java .../aws/ec2/springboot/ec2componentautoconfiguration.java .../springboot/kinesisfirehosecomponentautoconfiguration.java .../kinesis/springboot/kinesiscomponentautoconfiguration.java .../aws/s3/springboot/s3componentautoconfiguration.java .../aws/sdb/springboot/sdbcomponentautoconfiguration.java .../aws/ses/springboot/sescomponentautoconfiguration.java .../aws/sns/springboot/snscomponentautoconfiguration.java .../aws/sqs/springboot/sqscomponentautoconfiguration.java .../aws/swf/springboot/swfcomponentautoconfiguration.java .../blob/springboot/blobservicecomponentautoconfiguration.java .../queue/springboot/queueservicecomponentautoconfiguration.java .../barcode/springboot/barcodedataformatautoconfiguration.java .../barcode/springboot/barcodedataformatconfiguration.java .../base64/springboot/base64dataformatautoconfiguration.java .../base64/springboot/base64dataformatconfiguration.java .../springboot/beanvalidatorcomponentautoconfiguration.java .../beanio/springboot/beaniodataformatautoconfiguration.java .../beanio/springboot/beaniodataformatconfiguration.java .../springboot/beanstalkcomponentautoconfiguration.java .../beanstalk/springboot/beanstalkcomponentconfiguration.java .../csv/springboot/bindycsvdataformatautoconfiguration.java .../bindy/csv/springboot/bindycsvdataformatconfiguration.java .../springboot/bindyfixedlengthdataformatautoconfiguration.java .../springboot/bindyfixedlengthdataformatconfiguration.java .../springboot/bindykeyvaluepairdataformatautoconfiguration.java .../kvp/springboot/bindykeyvaluepairdataformatconfiguration.java .../bonita/springboot/bonitacomponentautoconfiguration.java .../boon/springboot/boondataformatautoconfiguration.java .../component/boon/springboot/boondataformatconfiguration.java .../component/box/springboot/boxcomponentautoconfiguration.java .../component/box/springboot/boxcomponentconfiguration.java .../springboot/braintreecomponentautoconfiguration.java .../braintree/springboot/braintreecomponentconfiguration.java .../cache/springboot/cachecomponentautoconfiguration.java .../component/cache/springboot/cachecomponentconfiguration.java .../springboot/cassandracomponentautoconfiguration.java .../castor/springboot/castordataformatautoconfiguration.java .../castor/springboot/castordataformatconfiguration.java .../springboot/chronicleenginecomponentautoconfiguration.java .../chunk/springboot/chunkcomponentautoconfiguration.java .../component/cm/springboot/cmcomponentautoconfiguration.java .../cmis/springboot/cmiscomponentautoconfiguration.java .../component/cmis/springboot/cmiscomponentconfiguration.java .../camel/coap/springboot/coapcomponentautoconfiguration.java .../cometd/springboot/cometdcomponentautoconfiguration.java .../cometd/springboot/cometdcomponentconfiguration.java .../consul/springboot/consulcomponentautoconfiguration.java .../consul/springboot/consulcomponentconfiguration.java .../springboot/qualifiedcontextcomponentautoconfiguration.java .../bean/springboot/beancomponentautoconfiguration.java .../beanclass/springboot/classcomponentautoconfiguration.java .../springboot/bindingnamecomponentautoconfiguration.java .../browse/springboot/browsecomponentautoconfiguration.java .../springboot/controlbuscomponentautoconfiguration.java .../springboot/dataformatcomponentautoconfiguration.java .../dataset/springboot/datasetcomponentautoconfiguration.java .../direct/springboot/directcomponentautoconfiguration.java .../direct/springboot/directcomponentconfiguration.java .../directvm/springboot/directvmcomponentautoconfiguration.java .../directvm/springboot/directvmcomponentconfiguration.java .../file/springboot/filecomponentautoconfiguration.java .../language/springboot/languagecomponentautoconfiguration.java .../component/log/springboot/logcomponentautoconfiguration.java .../component/log/springboot/logcomponentconfiguration.java .../mock/springboot/mockcomponentautoconfiguration.java .../springboot/propertiescomponentautoconfiguration.java .../properties/springboot/propertiescomponentconfiguration.java .../component/ref/springboot/refcomponentautoconfiguration.java .../rest/springboot/restapicomponentautoconfiguration.java .../rest/springboot/restcomponentautoconfiguration.java .../component/rest/springboot/restcomponentconfiguration.java .../springboot/schedulercomponentautoconfiguration.java .../scheduler/springboot/schedulercomponentconfiguration.java .../seda/springboot/sedacomponentautoconfiguration.java .../component/seda/springboot/sedacomponentconfiguration.java .../stub/springboot/stubcomponentautoconfiguration.java .../component/stub/springboot/stubcomponentconfiguration.java .../test/springboot/testcomponentautoconfiguration.java .../timer/springboot/timercomponentautoconfiguration.java .../springboot/validatorcomponentautoconfiguration.java .../validator/springboot/validatorcomponentconfiguration.java .../component/vm/springboot/vmcomponentautoconfiguration.java .../camel/component/vm/springboot/vmcomponentconfiguration.java .../xslt/springboot/xsltcomponentautoconfiguration.java .../component/xslt/springboot/xsltcomponentconfiguration.java .../camel/impl/springboot/gzipdataformatautoconfiguration.java .../camel/impl/springboot/gzipdataformatconfiguration.java .../springboot/serializationdataformatautoconfiguration.java .../impl/springboot/serializationdataformatconfiguration.java .../camel/impl/springboot/stringdataformatautoconfiguration.java .../camel/impl/springboot/stringdataformatconfiguration.java .../camel/impl/springboot/zipdataformatautoconfiguration.java .../apache/camel/impl/springboot/zipdataformatconfiguration.java .../language/bean/springboot/beanlanguageautoconfiguration.java .../language/bean/springboot/beanlanguageconfiguration.java .../constant/springboot/constantlanguageautoconfiguration.java .../constant/springboot/constantlanguageconfiguration.java .../header/springboot/headerlanguageautoconfiguration.java .../language/header/springboot/headerlanguageconfiguration.java .../springboot/exchangepropertylanguageautoconfiguration.java .../springboot/exchangepropertylanguageconfiguration.java .../language/ref/springboot/reflanguageautoconfiguration.java .../camel/language/ref/springboot/reflanguageconfiguration.java .../simple/springboot/filelanguageautoconfiguration.java .../language/simple/springboot/filelanguageconfiguration.java .../simple/springboot/simplelanguageautoconfiguration.java .../language/simple/springboot/simplelanguageconfiguration.java .../tokenizer/springboot/tokenizelanguageautoconfiguration.java .../tokenizer/springboot/tokenizelanguageconfiguration.java .../springboot/xmltokenizelanguageautoconfiguration.java .../tokenizer/springboot/xmltokenizelanguageconfiguration.java .../xpath/springboot/xpathlanguageautoconfiguration.java .../language/xpath/springboot/xpathlanguageconfiguration.java .../consulservicecallservicediscoveryconfigurationcommon.java ...consulservicecallservicediscoveryconfigurationproperties.java .../dnsservicecallservicediscoveryconfigurationcommon.java .../dnsservicecallservicediscoveryconfigurationproperties.java .../etcdservicecallservicediscoveryconfigurationcommon.java .../etcdservicecallservicediscoveryconfigurationproperties.java ...kubernetesservicecallservicediscoveryconfigurationcommon.java ...rnetesservicecallservicediscoveryconfigurationproperties.java .../ribbonservicecallloadbalancerconfigurationcommon.java .../ribbonservicecallloadbalancerconfigurationproperties.java .../springboot/restconfigurationdefinitionautoconfiguration.java .../rest/springboot/restconfigurationdefinitionproperties.java .../model/springboot/hystrixconfigurationdefinitioncommon.java .../springboot/hystrixconfigurationdefinitionproperties.java .../springboot/couchbasecomponentautoconfiguration.java .../couchdb/springboot/couchdbcomponentautoconfiguration.java .../springboot/digitalsignaturecomponentautoconfiguration.java .../springboot/digitalsignaturecomponentconfiguration.java .../crypto/springboot/cryptodataformatautoconfiguration.java .../crypto/springboot/cryptodataformatconfiguration.java .../crypto/springboot/pgpdataformatautoconfiguration.java .../converter/crypto/springboot/pgpdataformatconfiguration.java .../csv/springboot/csvdataformatautoconfiguration.java .../dataformat/csv/springboot/csvdataformatconfiguration.java .../cxf/jaxrs/springboot/cxfrscomponentautoconfiguration.java .../cxf/jaxrs/springboot/cxfrscomponentconfiguration.java .../component/cxf/springboot/cxfcomponentautoconfiguration.java .../component/cxf/springboot/cxfcomponentconfiguration.java .../springboot/digitaloceancomponentautoconfiguration.java .../springboot/disruptorcomponentautoconfiguration.java .../disruptor/springboot/disruptorcomponentconfiguration.java .../vm/springboot/disruptorvmcomponentautoconfiguration.java .../vm/springboot/disruptorvmcomponentconfiguration.java .../component/dns/springboot/dnscomponentautoconfiguration.java .../docker/springboot/dockercomponentautoconfiguration.java .../docker/springboot/dockercomponentconfiguration.java .../dozer/springboot/dozercomponentautoconfiguration.java .../drill/springboot/drillcomponentautoconfiguration.java .../dropbox/springboot/dropboxcomponentautoconfiguration.java .../ehcache/springboot/ehcachecomponentautoconfiguration.java .../springboot/elasticsearchcomponentautoconfiguration.java .../springboot/elasticsearchcomponentconfiguration.java .../springboot/elasticsearchcomponentautoconfiguration.java .../elsql/springboot/elsqlcomponentautoconfiguration.java .../component/elsql/springboot/elsqlcomponentconfiguration.java .../etcd/springboot/etcdcomponentautoconfiguration.java .../component/etcd/springboot/etcdcomponentconfiguration.java .../exec/springboot/execcomponentautoconfiguration.java .../facebook/springboot/facebookcomponentautoconfiguration.java .../facebook/springboot/facebookcomponentconfiguration.java .../flatpack/springboot/flatpackcomponentautoconfiguration.java .../flatpack/springboot/flatpackdataformatautoconfiguration.java .../flatpack/springboot/flatpackdataformatconfiguration.java .../flink/springboot/flinkcomponentautoconfiguration.java .../component/flink/springboot/flinkcomponentconfiguration.java .../component/fop/springboot/fopcomponentautoconfiguration.java .../springboot/freemarkercomponentautoconfiguration.java .../freemarker/springboot/freemarkercomponentconfiguration.java .../file/remote/springboot/ftpcomponentautoconfiguration.java .../file/remote/springboot/ftpscomponentautoconfiguration.java .../file/remote/springboot/ftpscomponentconfiguration.java .../file/remote/springboot/sftpcomponentautoconfiguration.java .../ganglia/springboot/gangliacomponentautoconfiguration.java .../ganglia/springboot/gangliacomponentconfiguration.java .../geocoder/springboot/geocodercomponentautoconfiguration.java .../component/git/springboot/gitcomponentautoconfiguration.java .../github/springboot/githubcomponentautoconfiguration.java .../springboot/googlecalendarcomponentautoconfiguration.java .../springboot/googlecalendarcomponentconfiguration.java .../drive/springboot/googledrivecomponentautoconfiguration.java .../drive/springboot/googledrivecomponentconfiguration.java .../mail/springboot/googlemailcomponentautoconfiguration.java .../google/mail/springboot/googlemailcomponentconfiguration.java .../springboot/googlepubsubcomponentautoconfiguration.java .../pubsub/springboot/googlepubsubcomponentconfiguration.java .../gora/springboot/goracomponentautoconfiguration.java .../groovy/springboot/groovylanguageautoconfiguration.java .../language/groovy/springboot/groovylanguageconfiguration.java .../grpc/springboot/grpccomponentautoconfiguration.java .../gson/springboot/gsondataformatautoconfiguration.java .../component/gson/springboot/gsondataformatconfiguration.java .../springboot/guavaeventbuscomponentautoconfiguration.java .../eventbus/springboot/guavaeventbuscomponentconfiguration.java .../springboot/hazelcastcomponentautoconfiguration.java .../hazelcast/springboot/hazelcastcomponentconfiguration.java .../hbase/springboot/hbasecomponentautoconfiguration.java .../component/hbase/springboot/hbasecomponentconfiguration.java .../hdfs/springboot/hdfscomponentautoconfiguration.java .../component/hdfs/springboot/hdfscomponentconfiguration.java .../hdfs2/springboot/hdfscomponentautoconfiguration.java .../component/hdfs2/springboot/hdfscomponentconfiguration.java .../hessian/springboot/hessiandataformatautoconfiguration.java .../hessian/springboot/hessiandataformatconfiguration.java .../hipchat/springboot/hipchatcomponentautoconfiguration.java .../component/hl7/springboot/hl7dataformatautoconfiguration.java .../component/hl7/springboot/hl7dataformatconfiguration.java .../hl7/springboot/terserlanguageautoconfiguration.java .../component/hl7/springboot/terserlanguageconfiguration.java .../http/springboot/httpcomponentautoconfiguration.java .../component/http/springboot/httpcomponentconfiguration.java .../http4/springboot/httpcomponentautoconfiguration.java .../component/http4/springboot/httpcomponentconfiguration.java .../ical/springboot/icaldataformatautoconfiguration.java .../component/ical/springboot/icaldataformatconfiguration.java .../springboot/infinispancomponentautoconfiguration.java .../infinispan/springboot/infinispancomponentconfiguration.java .../influxdb/springboot/influxdbcomponentautoconfiguration.java .../component/irc/springboot/irccomponentautoconfiguration.java .../component/irc/springboot/irccomponentconfiguration.java .../ironmq/springboot/ironmqcomponentautoconfiguration.java .../jackson/springboot/jacksondataformatautoconfiguration.java .../jackson/springboot/jacksondataformatconfiguration.java .../springboot/jacksonxmldataformatautoconfiguration.java .../jacksonxml/springboot/jacksonxmldataformatconfiguration.java .../springboot/javaspacecomponentautoconfiguration.java .../jaxb/springboot/jaxbdataformatautoconfiguration.java .../converter/jaxb/springboot/jaxbdataformatconfiguration.java .../jbpm/springboot/jbpmcomponentautoconfiguration.java .../jcache/springboot/jcachecomponentautoconfiguration.java .../jcache/springboot/jcachecomponentconfiguration.java .../component/jcr/springboot/jcrcomponentautoconfiguration.java .../jdbc/springboot/jdbccomponentautoconfiguration.java .../component/jdbc/springboot/jdbccomponentconfiguration.java .../jetty9/springboot/jettyhttpcomponentautoconfiguration9.java .../jetty9/springboot/jettyhttpcomponentconfiguration9.java .../jgroups/springboot/jgroupscomponentautoconfiguration.java .../jgroups/springboot/jgroupscomponentconfiguration.java .../jibx/springboot/jibxdataformatautoconfiguration.java .../dataformat/jibx/springboot/jibxdataformatconfiguration.java .../jing/springboot/jingcomponentautoconfiguration.java .../jira/springboot/jiracomponentautoconfiguration.java .../component/jms/springboot/jmscomponentautoconfiguration.java .../component/jms/springboot/jmscomponentconfiguration.java .../component/jmx/springboot/jmxcomponentautoconfiguration.java .../johnzon/springboot/johnzondataformatautoconfiguration.java .../johnzon/springboot/johnzondataformatconfiguration.java .../jolt/springboot/joltcomponentautoconfiguration.java .../component/jolt/springboot/joltcomponentconfiguration.java .../language/sql/springboot/sqllanguageautoconfiguration.java .../camel/language/sql/springboot/sqllanguageconfiguration.java .../component/jpa/springboot/jpacomponentautoconfiguration.java .../component/jpa/springboot/jpacomponentconfiguration.java .../component/scp/springboot/scpcomponentautoconfiguration.java .../component/scp/springboot/scpcomponentconfiguration.java .../jsonpath/springboot/jsonpathlanguageautoconfiguration.java .../camel/jsonpath/springboot/jsonpathlanguageconfiguration.java .../jt400/springboot/jt400componentautoconfiguration.java .../component/jt400/springboot/jt400componentconfiguration.java .../language/juel/springboot/juellanguageautoconfiguration.java .../language/juel/springboot/juellanguageconfiguration.java .../jxpath/springboot/jxpathlanguageautoconfiguration.java .../language/jxpath/springboot/jxpathlanguageconfiguration.java .../kafka/springboot/kafkacomponentautoconfiguration.java .../component/kafka/springboot/kafkacomponentconfiguration.java .../kestrel/springboot/kestrelcomponentautoconfiguration.java .../kestrel/springboot/kestrelcomponentconfiguration.java .../krati/springboot/kraticomponentautoconfiguration.java .../springboot/kubernetescomponentautoconfiguration.java .../ldap/springboot/ldapcomponentautoconfiguration.java .../linkedin/springboot/linkedincomponentautoconfiguration.java .../linkedin/springboot/linkedincomponentconfiguration.java .../lucene/springboot/lucenecomponentautoconfiguration.java .../lucene/springboot/lucenecomponentconfiguration.java .../springboot/lumberjackcomponentautoconfiguration.java .../lumberjack/springboot/lumberjackcomponentconfiguration.java .../lzf/springboot/lzfdataformatautoconfiguration.java .../dataformat/lzf/springboot/lzfdataformatconfiguration.java .../mail/springboot/mailcomponentautoconfiguration.java .../component/mail/springboot/mailcomponentconfiguration.java .../springboot/mimemultipartdataformatautoconfiguration.java .../springboot/mimemultipartdataformatconfiguration.java .../metrics/springboot/metricscomponentautoconfiguration.java .../metrics/springboot/metricscomponentconfiguration.java .../client/springboot/miloclientcomponentautoconfiguration.java .../milo/client/springboot/miloclientcomponentconfiguration.java .../server/springboot/miloservercomponentautoconfiguration.java .../milo/server/springboot/miloservercomponentconfiguration.java .../mina2/springboot/mina2componentautoconfiguration.java .../component/mina2/springboot/mina2componentconfiguration.java .../mllp/springboot/mllpcomponentautoconfiguration.java .../gridfs/springboot/gridfscomponentautoconfiguration.java .../mongodb/springboot/mongodbcomponentautoconfiguration.java .../mongodb3/springboot/mongodbcomponentautoconfiguration.java .../mqtt/springboot/mqttcomponentautoconfiguration.java .../component/mqtt/springboot/mqttcomponentconfiguration.java .../validator/msv/springboot/msvcomponentautoconfiguration.java .../validator/msv/springboot/msvcomponentconfiguration.java .../mustache/springboot/mustachecomponentautoconfiguration.java .../mustache/springboot/mustachecomponentconfiguration.java .../mvel/springboot/mvelcomponentautoconfiguration.java .../language/mvel/springboot/mvellanguageautoconfiguration.java .../language/mvel/springboot/mvellanguageconfiguration.java .../mybatis/springboot/mybatiscomponentautoconfiguration.java .../mybatis/springboot/mybatiscomponentconfiguration.java .../nagios/springboot/nagioscomponentautoconfiguration.java .../nagios/springboot/nagioscomponentconfiguration.java .../nats/springboot/natscomponentautoconfiguration.java .../component/nats/springboot/natscomponentconfiguration.java .../http/springboot/nettyhttpcomponentautoconfiguration.java .../netty/http/springboot/nettyhttpcomponentconfiguration.java .../netty/springboot/nettycomponentautoconfiguration.java .../component/netty/springboot/nettycomponentconfiguration.java .../http/springboot/nettyhttpcomponentautoconfiguration.java .../netty4/http/springboot/nettyhttpcomponentconfiguration.java .../netty4/springboot/nettycomponentautoconfiguration.java .../component/netty4/springboot/nettycomponentconfiguration.java .../language/ognl/springboot/ognllanguageautoconfiguration.java .../language/ognl/springboot/ognllanguageconfiguration.java .../olingo2/springboot/olingo2componentautoconfiguration.java .../olingo2/springboot/olingo2componentconfiguration.java .../olingo4/springboot/olingo4componentautoconfiguration.java .../olingo4/springboot/olingo4componentconfiguration.java .../springboot/openshiftcomponentautoconfiguration.java .../openshift/springboot/openshiftcomponentconfiguration.java .../cinder/springboot/cindercomponentautoconfiguration.java .../glance/springboot/glancecomponentautoconfiguration.java .../keystone/springboot/keystonecomponentautoconfiguration.java .../neutron/springboot/neutroncomponentautoconfiguration.java .../nova/springboot/novacomponentautoconfiguration.java .../swift/springboot/swiftcomponentautoconfiguration.java .../springboot/optaplannercomponentautoconfiguration.java .../paho/springboot/pahocomponentautoconfiguration.java .../component/paho/springboot/pahocomponentconfiguration.java .../component/pdf/springboot/pdfcomponentautoconfiguration.java .../pgevent/springboot/pgeventcomponentautoconfiguration.java .../printer/springboot/printercomponentautoconfiguration.java .../protobuf/springboot/protobufdataformatautoconfiguration.java .../protobuf/springboot/protobufdataformatconfiguration.java .../pubnub/springboot/pubnubcomponentautoconfiguration.java .../quartz2/springboot/quartzcomponentautoconfiguration.java .../quartz2/springboot/quartzcomponentconfiguration.java .../springboot/quickfixjcomponentautoconfiguration.java .../quickfixj/springboot/quickfixjcomponentconfiguration.java .../rabbitmq/springboot/rabbitmqcomponentautoconfiguration.java .../springboot/reactivestreamscomponentautoconfiguration.java .../springboot/reactivestreamscomponentconfiguration.java .../springboot/restswaggercomponentautoconfiguration.java .../swagger/springboot/restswaggercomponentconfiguration.java .../restlet/springboot/restletcomponentautoconfiguration.java .../restlet/springboot/restletcomponentconfiguration.java .../component/rmi/springboot/rmicomponentautoconfiguration.java .../routebox/springboot/routeboxcomponentautoconfiguration.java .../component/rss/springboot/rsscomponentautoconfiguration.java .../rss/springboot/rssdataformatautoconfiguration.java .../dataformat/rss/springboot/rssdataformatconfiguration.java .../springboot/salesforcecomponentautoconfiguration.java .../salesforce/springboot/salesforcecomponentconfiguration.java .../springboot/netweavercomponentautoconfiguration.java .../xquery/springboot/xquerycomponentautoconfiguration.java .../xquery/springboot/xquerycomponentconfiguration.java .../xquery/springboot/xquerylanguageautoconfiguration.java .../language/xquery/springboot/xquerylanguageconfiguration.java .../springboot/schematroncomponentautoconfiguration.java .../script/springboot/javascriptlanguageautoconfiguration.java .../script/springboot/javascriptlanguageconfiguration.java .../builder/script/springboot/phplanguageautoconfiguration.java .../builder/script/springboot/phplanguageconfiguration.java .../script/springboot/pythonlanguageautoconfiguration.java .../builder/script/springboot/pythonlanguageconfiguration.java .../builder/script/springboot/rubylanguageautoconfiguration.java .../builder/script/springboot/rubylanguageconfiguration.java .../springboot/servicenowcomponentautoconfiguration.java .../servicenow/springboot/servicenowcomponentconfiguration.java .../servlet/springboot/servletcomponentautoconfiguration.java .../servlet/springboot/servletcomponentconfiguration.java .../component/sip/springboot/sipcomponentautoconfiguration.java .../batch/springboot/sjmsbatchcomponentautoconfiguration.java .../sjms/batch/springboot/sjmsbatchcomponentconfiguration.java .../sjms/springboot/sjmscomponentautoconfiguration.java .../component/sjms/springboot/sjmscomponentconfiguration.java .../sjms2/springboot/sjms2componentautoconfiguration.java .../component/sjms2/springboot/sjms2componentconfiguration.java .../slack/springboot/slackcomponentautoconfiguration.java .../component/slack/springboot/slackcomponentconfiguration.java .../smpp/springboot/smppcomponentautoconfiguration.java .../component/smpp/springboot/smppcomponentconfiguration.java .../springboot/snakeyamldataformatautoconfiguration.java .../snakeyaml/springboot/snakeyamldataformatconfiguration.java .../snmp/springboot/snmpcomponentautoconfiguration.java .../soap/springboot/soapjaxbdataformatautoconfiguration.java .../soap/springboot/soapjaxbdataformatconfiguration.java .../solr/springboot/solrcomponentautoconfiguration.java .../spark/springboot/sparkcomponentautoconfiguration.java .../component/spark/springboot/sparkcomponentconfiguration.java .../splunk/springboot/splunkcomponentautoconfiguration.java .../splunk/springboot/splunkcomponentconfiguration.java .../batch/springboot/springbatchcomponentautoconfiguration.java .../batch/springboot/springbatchcomponentconfiguration.java .../springboot/springintegrationcomponentautoconfiguration.java .../springboot/springldapcomponentautoconfiguration.java .../redis/springboot/rediscomponentautoconfiguration.java .../event/springboot/eventcomponentautoconfiguration.java .../language/spel/springboot/spellanguageautoconfiguration.java .../language/spel/springboot/spellanguageconfiguration.java .../springboot/springwebservicecomponentautoconfiguration.java .../ws/springboot/springwebservicecomponentconfiguration.java .../component/sql/springboot/sqlcomponentautoconfiguration.java .../component/sql/springboot/sqlcomponentconfiguration.java .../stored/springboot/sqlstoredcomponentautoconfiguration.java .../sql/stored/springboot/sqlstoredcomponentconfiguration.java .../component/ssh/springboot/sshcomponentautoconfiguration.java .../component/ssh/springboot/sshcomponentconfiguration.java .../stax/springboot/staxcomponentautoconfiguration.java .../stomp/springboot/stompcomponentautoconfiguration.java .../component/stomp/springboot/stompcomponentconfiguration.java .../stream/springboot/streamcomponentautoconfiguration.java .../springboot/stringtemplatecomponentautoconfiguration.java .../syslog/springboot/syslogdataformatautoconfiguration.java .../syslog/springboot/syslogdataformatconfiguration.java .../springboot/tidymarkupdataformatautoconfiguration.java .../tagsoup/springboot/tidymarkupdataformatconfiguration.java .../tarfile/springboot/tarfiledataformatautoconfiguration.java .../tarfile/springboot/tarfiledataformatconfiguration.java .../telegram/springboot/telegramcomponentautoconfiguration.java .../telegram/springboot/telegramcomponentconfiguration.java .../tika/springboot/tikacomponentautoconfiguration.java .../twitter/springboot/twittercomponentautoconfiguration.java .../twitter/springboot/twittercomponentconfiguration.java .../undertow/springboot/undertowcomponentautoconfiguration.java .../undertow/springboot/undertowcomponentconfiguration.java .../springboot/univocitycsvdataformatautoconfiguration.java .../springboot/univocitycsvdataformatconfiguration.java .../univocityfixedwidthdataformatautoconfiguration.java .../springboot/univocityfixedwidthdataformatconfiguration.java .../springboot/univocitytsvdataformatautoconfiguration.java .../springboot/univocitytsvdataformatconfiguration.java .../velocity/springboot/velocitycomponentautoconfiguration.java .../velocity/springboot/velocitycomponentconfiguration.java .../vertx/springboot/vertxcomponentautoconfiguration.java .../component/vertx/springboot/vertxcomponentconfiguration.java .../weather/springboot/weathercomponentautoconfiguration.java .../springboot/websocketcomponentautoconfiguration.java .../websocket/springboot/websocketcomponentconfiguration.java .../xmlbeans/springboot/xmlbeansdataformatautoconfiguration.java .../xmlbeans/springboot/xmlbeansdataformatconfiguration.java .../xmljson/springboot/xmljsondataformatautoconfiguration.java .../xmljson/springboot/xmljsondataformatconfiguration.java .../xmlrpc/springboot/xmlrpccomponentautoconfiguration.java .../xmlrpc/springboot/xmlrpcdataformatautoconfiguration.java .../xmlrpc/springboot/xmlrpcdataformatconfiguration.java .../springboot/xmlsignaturecomponentautoconfiguration.java .../springboot/xmlsignaturecomponentconfiguration.java .../springboot/xmlsecuritydataformatautoconfiguration.java .../springboot/xmlsecuritydataformatconfiguration.java .../xmpp/springboot/xmppcomponentautoconfiguration.java .../xstream/springboot/jsondataformatautoconfiguration.java .../xstream/springboot/jsondataformatconfiguration.java .../xstream/springboot/xstreamdataformatautoconfiguration.java .../xstream/springboot/xstreamdataformatconfiguration.java .../yammer/springboot/yammercomponentautoconfiguration.java .../yammer/springboot/yammercomponentconfiguration.java .../zendesk/springboot/zendeskcomponentautoconfiguration.java .../zendesk/springboot/zendeskcomponentconfiguration.java .../zipfile/springboot/zipfiledataformatautoconfiguration.java .../zipfile/springboot/zipfiledataformatconfiguration.java .../springboot/mastercomponentautoconfiguration.java .../zookeepermaster/springboot/mastercomponentconfiguration.java .../springboot/zookeepercomponentautoconfiguration.java .../zookeeper/springboot/zookeepercomponentconfiguration.java file changed insertion deletion diff --git /platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/ahccomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/ahccomponentautoconfiguration.java index 9ecf975 ..671810a /platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/ahccomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/ahccomponentautoconfiguration.java package org .apache.camel.component.ahc.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.ahc.ahccomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(ahccomponentautoconfiguration.condition.class) public class ahccomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/ahccomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/ahccomponentconfiguration.java index d48437f ..b810679 /platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/ahccomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/ahccomponentconfiguration.java package org .apache.camel.component.ahc.springboot; +import javax .annotation.generated; import org .apache.camel.component.ahc.ahcbinding; import org .apache.camel.spi.headerfilterstrategy; import org .apache.camel.util.jsse.sslcontextparameters; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.ahc"") public class ahccomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/wscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/wscomponentautoconfiguration.java index f63cc7c ..d370983 /platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/wscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/wscomponentautoconfiguration.java package org .apache.camel.component.ahc.ws.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.ahc.ws.wscomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(wscomponentautoconfiguration.condition.class) public class wscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/wscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/wscomponentconfiguration.java index 160a961 ..25dea26 /platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/wscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/wscomponentconfiguration.java package org .apache.camel.component.ahc.ws.springboot; +import javax .annotation.generated; import org .apache.camel.component.ahc.ahcbinding; import org .apache.camel.spi.headerfilterstrategy; import org .apache.camel.util.jsse.sslcontextparameters; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.ahc-ws"") public class wscomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/amqpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/amqpcomponentautoconfiguration.java index d425353 ..1805ce2 /platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/amqpcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/amqpcomponentautoconfiguration.java package org .apache.camel.component.amqp.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.amqp.amqpcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(amqpcomponentautoconfiguration.condition.class) public class amqpcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/amqpcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/amqpcomponentconfiguration.java index f30c727 ..ff88503 /platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/amqpcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/amqpcomponentconfiguration.java package org .apache.camel.component.amqp.springboot; +import javax .annotation.generated; import javax .jms.connectionfactory; import javax .jms.exceptionlistener; import org .apache.camel.logginglevel; import org .springframework.util.errorhandler; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.amqp"") public class amqpcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/apnscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/apnscomponentautoconfiguration.java index 4f7ba5b ..c2233ce /platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/apnscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/apnscomponentautoconfiguration.java package org .apache.camel.component.apns.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.apns.apnscomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(apnscomponentautoconfiguration.condition.class) public class apnscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/apnscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/apnscomponentconfiguration.java index a5f9e0a ..93fc197 /platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/apnscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/apnscomponentconfiguration.java package org .apache.camel.component.apns.springboot; +import javax .annotation.generated; import com .notnoop.apns.apnsservice; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.apns"") public class apnscomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-asterisk-starter/src/main/java/org/apache/camel/component/asterisk/springboot/asteriskcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-asterisk-starter/src/main/java/org/apache/camel/component/asterisk/springboot/asteriskcomponentautoconfiguration.java index 1faa558 ..ce8b6f9 /platforms/spring-boot/components-starter/camel-asterisk-starter/src/main/java/org/apache/camel/component/asterisk/springboot/asteriskcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-asterisk-starter/src/main/java/org/apache/camel/component/asterisk/springboot/asteriskcomponentautoconfiguration.java package org .apache.camel.component.asterisk.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.asterisk.asteriskcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(asteriskcomponentautoconfiguration.condition.class) public class asteriskcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-atmos-starter/src/main/java/org/apache/camel/component/atmos/springboot/atmoscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-atmos-starter/src/main/java/org/apache/camel/component/atmos/springboot/atmoscomponentautoconfiguration.java index c1d7b1f ..faca500 /platforms/spring-boot/components-starter/camel-atmos-starter/src/main/java/org/apache/camel/component/atmos/springboot/atmoscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-atmos-starter/src/main/java/org/apache/camel/component/atmos/springboot/atmoscomponentautoconfiguration.java package org .apache.camel.component.atmos.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.atmos.atmoscomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(atmoscomponentautoconfiguration.condition.class) public class atmoscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/websocketcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/websocketcomponentautoconfiguration.java index 99a12f6 ..9b56ba1 /platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/websocketcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/websocketcomponentautoconfiguration.java package org .apache.camel.component.atmosphere.websocket.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.atmosphere.websocket.websocketcomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(websocketcomponentautoconfiguration.condition.class) public class websocketcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/websocketcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/websocketcomponentconfiguration.java index af474e8 ..753dac0 /platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/websocketcomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/websocketcomponentconfiguration.java package org .apache.camel.component.atmosphere.websocket.springboot; +import javax .annotation.generated; import org .apache.camel.component.servlet.httpregistry; import org .apache.camel.http.common.httpbinding; import org .apache.camel.http.common.httpconfiguration; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.atmosphere-websocket"") public class websocketcomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-atom-starter/src/main/java/org/apache/camel/component/atom/springboot/atomcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-atom-starter/src/main/java/org/apache/camel/component/atom/springboot/atomcomponentautoconfiguration.java index c39a6c4 ..1d41386 /platforms/spring-boot/components-starter/camel-atom-starter/src/main/java/org/apache/camel/component/atom/springboot/atomcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-atom-starter/src/main/java/org/apache/camel/component/atom/springboot/atomcomponentautoconfiguration.java package org .apache.camel.component.atom.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.atom.atomcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(atomcomponentautoconfiguration.condition.class) public class atomcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/avrocomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/avrocomponentautoconfiguration.java index 1b60f16 ..7ce7934 /platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/avrocomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/avrocomponentautoconfiguration.java package org .apache.camel.component.avro.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.avro.avrocomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(avrocomponentautoconfiguration.condition.class) public class avrocomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/avrocomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/avrocomponentconfiguration.java index ca10519 ..42a61fb /platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/avrocomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/avrocomponentconfiguration.java package org .apache.camel.component.avro.springboot; +import javax .annotation.generated; import org .apache.avro.protocol; import org .apache.camel.component.avro.avrotransport; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.nestedconfigurationproperty; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.avro"") public class avrocomponentconfiguration diff --git /platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/avrodataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/avrodataformatautoconfiguration.java index f4e6093 ..4d5debf /platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/avrodataformatautoconfiguration.java b /platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/avrodataformatautoconfiguration.java package org .apache.camel.dataformat.avro.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.camelcontextaware; import org .apache.camel.runtimecamelexception; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(avrodataformatautoconfiguration.condition.class) public class avrodataformatautoconfiguration @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/avrodataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/avrodataformatconfiguration.java index 2f5a6a0 ..54db754 /platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/avrodataformatconfiguration.java b /platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/avrodataformatconfiguration.java package org .apache.camel.dataformat.avro.springboot; +import javax .annotation.generated; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.dataformat.avro"") public class avrodataformatconfiguration diff --git /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/cw/springboot/cwcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/cw/springboot/cwcomponentautoconfiguration.java index 6a1bc5d ..4f195f6 /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/cw/springboot/cwcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/cw/springboot/cwcomponentautoconfiguration.java package org .apache.camel.component.aws.cw.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.aws.cw.cwcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(cwcomponentautoconfiguration.condition.class) public class cwcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddb/springboot/ddbcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddb/springboot/ddbcomponentautoconfiguration.java index ..b34ab33 /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddb/springboot/ddbcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddb/springboot/ddbcomponentautoconfiguration.java package org .apache.camel.component.aws.ddb.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.aws.ddb.ddbcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(ddbcomponentautoconfiguration.condition.class) public class ddbcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddbstream/springboot/ddbstreamcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddbstream/springboot/ddbstreamcomponentautoconfiguration.java index 51d8ef5 ..35cc24e /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddbstream/springboot/ddbstreamcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddbstream/springboot/ddbstreamcomponentautoconfiguration.java package org .apache.camel.component.aws.ddbstream.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.aws.ddbstream.ddbstreamcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(ddbstreamcomponentautoconfiguration.condition.class) public class ddbstreamcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ec2/springboot/ec2componentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ec2/springboot/ec2componentautoconfiguration.java index 5ec7a17 ..914b9f1 /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ec2/springboot/ec2componentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ec2/springboot/ec2componentautoconfiguration.java package org .apache.camel.component.aws.ec2.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.aws.ec2.ec2component; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(ec2componentautoconfiguration.condition.class) public class ec2componentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/firehose/springboot/kinesisfirehosecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/firehose/springboot/kinesisfirehosecomponentautoconfiguration.java index 7f60733 ..2f91996 /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/firehose/springboot/kinesisfirehosecomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/firehose/springboot/kinesisfirehosecomponentautoconfiguration.java package org .apache.camel.component.aws.firehose.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.aws.firehose.kinesisfirehosecomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(kinesisfirehosecomponentautoconfiguration.condition.class) public class kinesisfirehosecomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/kinesis/springboot/kinesiscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/kinesis/springboot/kinesiscomponentautoconfiguration.java index 402f43d ..043a07c /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/kinesis/springboot/kinesiscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/kinesis/springboot/kinesiscomponentautoconfiguration.java package org .apache.camel.component.aws.kinesis.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.aws.kinesis.kinesiscomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(kinesiscomponentautoconfiguration.condition.class) public class kinesiscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/s3/springboot/s3componentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/s3/springboot/s3componentautoconfiguration.java index 192ebf0 ..eff632b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/s3/springboot/s3componentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/s3/springboot/s3componentautoconfiguration.java package org .apache.camel.component.aws.s3.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.aws.s3.s3component; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(s3componentautoconfiguration.condition.class) public class s3componentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sdb/springboot/sdbcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sdb/springboot/sdbcomponentautoconfiguration.java index 784b48d ..17de781 /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sdb/springboot/sdbcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sdb/springboot/sdbcomponentautoconfiguration.java package org .apache.camel.component.aws.sdb.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.aws.sdb.sdbcomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(sdbcomponentautoconfiguration.condition.class) public class sdbcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ses/springboot/sescomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ses/springboot/sescomponentautoconfiguration.java index da577b8 ..472b4f8 /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ses/springboot/sescomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ses/springboot/sescomponentautoconfiguration.java package org .apache.camel.component.aws.ses.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.aws.ses.sescomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(sescomponentautoconfiguration.condition.class) public class sescomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sns/springboot/snscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sns/springboot/snscomponentautoconfiguration.java index 3a89352 ..e7edf7f /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sns/springboot/snscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sns/springboot/snscomponentautoconfiguration.java package org .apache.camel.component.aws.sns.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.aws.sns.snscomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(snscomponentautoconfiguration.condition.class) public class snscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sqs/springboot/sqscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sqs/springboot/sqscomponentautoconfiguration.java index d898529 ..f8a6650 /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sqs/springboot/sqscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sqs/springboot/sqscomponentautoconfiguration.java package org .apache.camel.component.aws.sqs.springboot; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.aws.sqs.sqscomponent; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(sqscomponentautoconfiguration.condition.class) public class sqscomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C6d252065a71e4141a84805e9335dda2f%40git.apache.org%3E,2017-04-19 08:35:57,commits,396.0,camel git commit camel add @generated annotation code g
157,245,245,211.0,400.0,zregv...@apache.org,"camel add @generated annotation code g ...enerated springbootautoconfigurationmojo remove `date` annotation member additional component missed first run project commit tree diff branch ref /heads/master commit e1cc3a2cf12ec08e84c3d0f5e9fb08f813980ae1 parent 40c2a75 author zoran regvart <zregvart@apache.org> authored wed apr committer zoran regvart <zregvart@apache.org> committed wed apr .../bonita/springboot/bonitacomponentautoconfiguration.java .../pubnub/springboot/pubnubcomponentautoconfiguration.java .../springboot/restswaggercomponentautoconfiguration.java .../swagger/springboot/restswaggercomponentconfiguration.java file changed insertion deletion diff --git /platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/bonitacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/bonitacomponentautoconfiguration.java index deee612 ..8bfa8d8 /platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/bonitacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/bonitacomponentautoconfiguration.java import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file -@generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:39:00.866z"") +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(bonitacomponentautoconfiguration.condition.class) public class bonitacomponentautoconfiguration return component @generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:39:00.940z"") @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/pubnubcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/pubnubcomponentautoconfiguration.java index c649698 ..671c1ce /platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/pubnubcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/pubnubcomponentautoconfiguration.java import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file -@generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:39:35.390z"") +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(pubnubcomponentautoconfiguration.condition.class) public class pubnubcomponentautoconfiguration return component @generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:39:35.455z"") @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentautoconfiguration.java index 694bc3f ..56064f2 /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentautoconfiguration.java import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file -@generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:40:54.730z"") +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(restswaggercomponentautoconfiguration.condition.class) public class restswaggercomponentautoconfiguration return component @generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:40:54.785z"") @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentconfiguration.java index 205fcfd ..cf01faa /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentconfiguration.java import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file -@generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:40:54.520z"") +@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @configurationproperties(prefix ""camel.component.rest-swagger"") public class restswaggercomponentconfiguration",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cc5e172ece7e04f46bc0fbf0a0941c90d%40git.apache.org%3E,2017-04-19 09:14:38,commits,400.0,camel git commit camel add @generated annotation code g
158,246,246,151.0,379.0,lburgazz...@apache.org,"repository camel updated branch ref /heads/master 110d1c9d6 567dff400 service call allow confgire ribbon load balancer using ribbon specific property project commit tree diff branch ref /heads/master commit 567dff4003e146ae1b0364dca4fbc2d126ca219b parent 110d1c9 author lburgazzoli <lburgazzoli@gmail.com> authored tue apr committer lburgazzoli <lburgazzoli@gmail.com> committed tue apr .../camel-ribbon/src/main/docs/ribbon.adoc .../component/ribbon/ribbonconfiguration.java .../ribbon/cloud/ribbonloadbalancer.java .../ribbon/cloud/ribbonloadbalancerfactory.java .../cloud/ribbonservicecallupdateroutetest.java ...dslribbonpropertiesservicecallroutetest.java ...gdslribbonpropertiesservicecallroutetest.xml ...vicecallloadbalancerconfigurationcommon.java ...callloadbalancerconfigurationproperties.java .../cloud/etcdservicediscoverydisabledtest.java .../cloud/ribboncloudautoconfiguration.java .../cloud/ribboncloudconfiguration.java .../src/main/resources/application.properties .../cloud/ribbonloadbalancerdisabledtest.java .../cloud/ribbonloadbalancerenabledtest.java .../src/test/resources/logback.xml .../springbootautoconfigurationmojo.java file changed insertion deletion diff --git /components/camel-ribbon/src/main/docs/ribbon.adoc b /components/camel-ribbon/src/main/docs/ribbon.adoc index ceb2e0e ..b4dc6c9 /components/camel-ribbon/src/main/docs/ribbon.adoc b /components/camel-ribbon/src/main/docs/ribbon.adoc component help applying load balancing feature client side usi [source,java] ribbonconfiguration configuration new ribbonconfiguration -configuration.setclientconfig(collections.singletonmap(""serverlistrefreshinterval"", +configuration.addproperties(""serverlistrefreshinterval"", ribbonloadbalancer loadbalancer new ribbonloadbalancer (configuration); (""direct:start"") [source,properties] .application.properties -camel.cloud.ribbon.client-config[serverlistrefreshinterval] +camel.cloud.ribbon.properties[serverlistrefreshinterval] [source,java] diff --git /components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/ribbonconfiguration.java b /components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/ribbonconfiguration.java index 40bcb31 ..41ac473 /components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/ribbonconfiguration.java b /components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/ribbonconfiguration.java package org .apache.camel.component.ribbon; +import java .util.hashmap; import java .util.map; import java .util.function.supplier; public class ribbonconfiguration private irule rule private iping ping private string clientname private map <string, string clientconfig private map <string, string property public string getnamespace return namespace public class ribbonconfiguration .clientname clientname public map <string, string getclientconfig return clientconfig public map <string, string getproperties return property public void setclientconfig (map<string, string clientconfig .clientconfig clientconfig public void setproperties (map<string, string clientconfig .properties clientconfig public void addproperty (string key string value (this.properties null .properties new hashmap .properties.put(key, value diff --git /components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/ribbonloadbalancer.java b /components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/ribbonloadbalancer.java index b867eea ..759a602 /components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/ribbonloadbalancer.java b /components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/ribbonloadbalancer.java import com .netflix.loadbalancer.dummyping; import com .netflix.loadbalancer.iloadbalancer; import com .netflix.loadbalancer.pollingserverlistupdater; import com .netflix.loadbalancer.roundrobinrule; +import com .netflix.loadbalancer.server; import com .netflix.loadbalancer.serverlist; import com .netflix.loadbalancer.zoneawareloadbalancer; import org .apache.camel.camelcontext; public class ribbonloadbalancer protected void dostart throw exception objecthelper .notnull(configuration, ""configuration""); objecthelper .notnull(camelcontext, ""camel context objecthelper .notnull(servicediscovery, ""service discovery objecthelper .notnull(servicefilter, ""service filter logger .info(""servicecall using ribbon load balancer service discovery type service filter type servicediscovery .getclass(), servicefilter .getclass()); (servicediscovery null logger .info(""servicecall using ribbon load balancer service discovery type service filter servicediscovery .getclass(), servicediscovery null servicefilter .getclass() ""none""); else logger .info(""servicecall using ribbon load balancer servicehelper .startservice(servicediscovery); public class ribbonloadbalancer @override public <t> process (string servicename loadbalancerfunction <t> request throw exception iloadbalancer loadbalancer loadbalancers .computeifabsent(servicename, key createloadbalancer (key, servicediscovery ribbonservicedefinition service (ribbonservicedefinition)loadbalancer.chooseserver(servicename); iloadbalancer loadbalancer loadbalancers .computeifabsent(servicename, key createloadbalancer (key)); server server loadbalancer .chooseserver(servicename); (service null (server null throw new rejectedexecutionexception (""no active service name servicename return request .apply(service); servicedefinition definition (server instanceof servicedefinition service discovery one camel provides definition already expected type definition (servicedefinition)server; else ribbon server list configured client config property .e. listofservers property instance provided load balancer type server conversion needed definition new ribbonservicedefinition servicename server .gethost(), server .getport() string zone server .getzone(); (zone null server .setzone(zone); return request .apply(definition); helper private zoneawareloadbalancer <ribbonservicedefinition> createloadbalancer (string servicename servicediscovery servicediscovery private zoneawareloadbalancer <ribbonservicedefinition> createloadbalancer (string servicename setup client config iclientconfig config configuration .getclientname() null iclientconfig .builder.newbuilder(configuration.getclientname()).build() iclientconfig .builder.newbuilder().build(); (configuration.getclientconfig() null (map.entry<string, string entry configuration .getclientconfig().entryset()) (configuration.getproperties() null (map.entry<string, string entry configuration .getproperties().entryset()) iclientconfigkey key iclientconfigkey .keys.valueof(entry.getkey()); string value entry .getvalue(); public class ribbonloadbalancer return new zoneawareloadbalancer config configuration .getruleordefault(roundrobinrule::new), configuration .getpingordefault(dummyping::new), new ribbonserverlist (servicename, servicediscovery servicefilter null new pollingserverlistupdater (config)); zoneawareloadbalancer <ribbonservicedefinition> loadbalancer (servicediscovery null loadbalancer new zoneawareloadbalancer config configuration .getruleordefault(roundrobinrule::new), configuration .getpingordefault(dummyping::new), new ribbonserverlist (servicename, servicediscovery servicefilter null new pollingserverlistupdater (config)); else loadbalancer new zoneawareloadbalancer <>(config); return loadbalancer static final class ribbonserverlist implement serverlist <ribbonservicedefinition> diff --git /components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/ribbonloadbalancerfactory.java b /components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/ribbonloadbalancerfactory.java index 5a211fc ..f166011 /components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/ribbonloadbalancerfactory.java b /components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/ribbonloadbalancerfactory.java public class ribbonloadbalancerfactory implement loadbalancerfactory configuration .setclientname(clientname); public map <string, string getclientconfig return configuration .getclientconfig(); public map <string, string getproperties return configuration .getproperties(); public void setclientconfig (map<string, string clientconfig configuration .setclientconfig(clientconfig); public void setproperties (map<string, string clientconfig configuration .setproperties(clientconfig); diff --git /components/camel-ribbon/src/test/java/org/apache/camel/component/ribbon/cloud/ribbonservicecallupdateroutetest.java b /components/camel-ribbon/src/test/java/org/apache/camel/component/ribbon/cloud/ribbonservicecallupdateroutetest.java index c00f1c7 ..27aba3e /components/camel-ribbon/src/test/java/org/apache/camel/component/ribbon/cloud/ribbonservicecallupdateroutetest.java b /components/camel-ribbon/src/test/java/org/apache/camel/component/ribbon/cloud/ribbonservicecallupdateroutetest.java package org .apache.camel.component.ribbon.cloud; -import java .util.collections; import org .apache.camel.routesbuilder; import org .apache.camel.builder.routebuilder; import org .apache.camel.component.ribbon.ribbonconfiguration; public class ribbonservicecallupdateroutetest extends cameltestsupport public void configure throw exception ribbonconfiguration configuration new ribbonconfiguration let update quick sleep much test configuration .setclientconfig(collections.singletonmap(""serverlistrefreshinterval"", configuration .addproperty(""serverlistrefreshinterval"", ribbonloadbalancer loadbalancer new ribbonloadbalancer (configuration); (""direct:start"") diff --git /components/camel-ribbon/src/test/java/org/apache/camel/component/ribbon/cloud/springdslribbonpropertiesservicecallroutetest.java b /components/camel-ribbon/src/test/java/org/apache/camel/component/ribbon/cloud/springdslribbonpropertiesservicecallroutetest.java new file mode index ..9456b7a /dev/null b /components/camel-ribbon/src/test/java/org/apache/camel/component/ribbon/cloud/springdslribbonpropertiesservicecallroutetest.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.component.ribbon.cloud; +import org .springframework.context.support.abstractapplicationcontext; +import org .springframework.context.support.classpathxmlapplicationcontext; +import org .springframework.test.annotation.dirtiescontext; +@dirtiescontext +public class springdslribbonpropertiesservicecallroutetest extends springribbonservicecallroutetest @override protected abstractapplicationcontext createapplicationcontext return new classpathxmlapplicationcontext (""org/apache/camel/component/ribbon/cloud/springdslribbonpropertiesservicecallroutetest.xml""); diff --git /components/camel-ribbon/src/test/resources/org/apache/camel/component/ribbon/cloud/springdslribbonpropertiesservicecallroutetest.xml b /components/camel-ribbon/src/test/resources/org/apache/camel/component/ribbon/cloud/springdslribbonpropertiesservicecallroutetest.xml new file mode index ..b182bc2 /dev/null b /components/camel-ribbon/src/test/resources/org/apache/camel/component/ribbon/cloud/springdslribbonpropertiesservicecallroutetest.xml +<?xml version encoding =""utf-8""?> licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +<beans xmlns xmlns :xsi="" xsi :schemalocation="" <camelcontext xmlns <route> <from uri =""direct:start""/> <servicecall name =""myservice""> enable ribbon load balancer <ribbonloadbalancer clientname =""myclient""> <properties key =""listofservers"" value =""localhost:9090,localhost:9091""/> </ribbonloadbalancer> </servicecall> <to uri =""mock:result""/> </route> <route> <from uri =""jetty: <to uri =""mock:9090""/> <transform> <constant>9090</constant> </transform> </route> <route> <from uri =""jetty: <to uri =""mock:9091""/> <transform> <constant>9091</constant> </transform> </route> </camelcontext> +</beans> diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ribbonservicecallloadbalancerconfigurationcommon.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ribbonservicecallloadbalancerconfigurationcommon.java new file mode index ..d45c3cc /dev/null b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ribbonservicecallloadbalancerconfigurationcommon.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.model.cloud.springboot; +import java .util.map; generated camel -package-maven-plugin edit file +public class ribbonservicecallloadbalancerconfigurationcommon namespace private string namespace username private string username password private string password set ribbon client name private string clientname set client property use property specific service call implementation use example using ribbon client property define com .netflix.client.config.commonclientconfigkey. private map <string, string property public string getnamespace return namespace public void setnamespace (string namespace .namespace namespace public string getusername return username public void setusername (string username .username username public string getpassword return password public void setpassword (string password .password password public string getclientname return clientname public void setclientname (string clientname .clientname clientname public map <string, string getproperties return property public void setproperties (map<string, string property .properties property newline end file diff --git /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ribbonservicecallloadbalancerconfigurationproperties.java b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ribbonservicecallloadbalancerconfigurationproperties.java new file mode index ..a826984 /dev/null b /platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ribbonservicecallloadbalancerconfigurationproperties.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.model.cloud.springboot; +import java .util.hashmap; +import java .util.map; +import org .springframework.boot.context.properties.configurationproperties; +@configurationproperties(prefix ""camel.cloud.ribbon.load-balancer"") +public class ribbonservicecallloadbalancerconfigurationproperties extends ribbonservicecallloadbalancerconfigurationcommon enable component private boolean enabled true define additional configuration definition private map <string, ribbonservicecallloadbalancerconfigurationcommon configuration new hashmap public map <string, ribbonservicecallloadbalancerconfigurationcommon getconfigurations return configuration public boolean isenabled return enabled public void setenabled (boolean enabled .enabled enabled newline end file diff --git /platforms/spring-boot/components-starter/camel-etcd-starter/src/test/java/org/apache/camel/component/etcd/springboot/cloud/etcdservicediscoverydisabledtest.java b /platforms/spring-boot/components-starter/camel-etcd-starter/src/test/java/org/apache/camel/component/etcd/springboot/cloud/etcdservicediscoverydisabledtest.java index 5ca84bf ..3d3548a /platforms/spring-boot/components-starter/camel-etcd-starter/src/test/java/org/apache/camel/component/etcd/springboot/cloud/etcdservicediscoverydisabledtest.java b /platforms/spring-boot/components-starter/camel-etcd-starter/src/test/java/org/apache/camel/component/etcd/springboot/cloud/etcdservicediscoverydisabledtest.java import org .springframework.test.context.junit4.springrunner; @springbootapplication @springboottest( class etcdservicediscoveryenabledtest .testconfiguration.class etcdservicediscoverydisabledtest .testconfiguration.class property ""debug=false"", diff --git /platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/java/org/apache/camel/component/ribbon/springboot/cloud/ribboncloudautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/java/org/apache/camel/component/ribbon/springboot/cloud/ribboncloudautoconfiguration.java index fc6a4fd ..8a58108 /platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/java/org/apache/camel/component/ribbon/springboot/cloud/ribboncloudautoconfiguration.java b /platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/java/org/apache/camel/component/ribbon/springboot/cloud/ribboncloudautoconfiguration.java package org .apache.camel.component.ribbon.springboot.cloud; import java .util.hashmap; import java .util.map; +import javax .annotation.postconstruct; import org .apache.camel.camelcontext; import org .apache.camel.cloud.loadbalancer; import org .apache.camel.component.ribbon.cloud.ribbonloadbalancerfactory; +import org .apache.camel.model.cloud.springboot.ribbonservicecallloadbalancerconfigurationcommon; +import org .apache.camel.model.cloud.springboot.ribbonservicecallloadbalancerconfigurationproperties; import org .apache.camel.spring.boot.camelautoconfiguration; import org .apache.camel.spring.boot.util.groupcondition; import org .apache.camel.util.introspectionsupport; +import org .springframework.beans.factory.beancreationexception; +import org .springframework.beans.factory.annotation.autowired; +import org .springframework.beans.factory.config.configurablebeanfactory; import org .springframework.boot.autoconfigure.autoconfigureafter; import org .springframework.boot.autoconfigure.condition.conditionalonbean; import org .springframework.boot.autoconfigure.condition.conditionalonclass; import org .springframework.context.annotation.lazy; @conditionalonbean(camelautoconfiguration.class) @conditional(ribboncloudautoconfiguration.condition.class) @autoconfigureafter(camelautoconfiguration.class) -@enableconfigurationproperties(ribboncloudconfiguration.class) +@enableconfigurationproperties(ribbonservicecallloadbalancerconfigurationproperties.class) public class ribboncloudautoconfiguration @autowired private camelcontext camelcontext @autowired private ribbonservicecallloadbalancerconfigurationproperties configuration @autowired private configurablebeanfactory beanfactory @lazy @bean(name ""ribbon-load-balancer"") @conditionalonclass(camelcontext.class) public loadbalancer configureservicediscoveryfactory (camelcontext camelcontext ribboncloudconfiguration configuration throw exception public loadbalancer configureloadbalancerfactory throw exception ribbonloadbalancerfactory factory new ribbonloadbalancerfactory map <string, object parameter new hashmap introspectionsupport .getproperties(configuration, parameter null false introspectionsupport .setproperties(camelcontext, camelcontext .gettypeconverter(), factory parameter introspectionsupport .setproperties( camelcontext camelcontext .gettypeconverter(), factory introspectionsupport .getnonnullproperties(configuration)); return factory .newinstance(camelcontext); @postconstruct public void postconstruct (beanfactory null map <string, object parameter new hashmap (map.entry<string, ribbonservicecallloadbalancerconfigurationcommon entry configuration .getconfigurations().entryset()) clean params parameter .clear(); instance factory ribbonloadbalancerfactory factory new ribbonloadbalancerfactory try introspectionsupport .getproperties(entry.getvalue(), parameter null false introspectionsupport .setproperties(camelcontext, camelcontext .gettypeconverter(), factory parameter beanfactory .registersingleton(entry.getkey(), factory .newinstance(camelcontext)); catch (exception e throw new beancreationexception (entry.getkey(), e .getmessage(), e condition public class ribboncloudautoconfiguration public static class condition extends groupcondition public condition super ""camel.cloud"", ""camel.cloud.ribbon"" ""camel.cloud.ribbon"", ""camel.cloud.ribbon.load-balancer"" diff --git /platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/java/org/apache/camel/component/ribbon/springboot/cloud/ribboncloudconfiguration.java b /platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/java/org/apache/camel/component/ribbon/springboot/cloud/ribboncloudconfiguration.java deleted file mode index dd31bea /platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/java/org/apache/camel/component/ribbon/springboot/cloud/ribboncloudconfiguration.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.component.ribbon.springboot.cloud; -import org .apache.camel.component.ribbon.ribbonconfiguration; -import org .springframework.boot.context.properties.configurationproperties; -@configurationproperties(prefix ""camel.cloud.ribbon"") -public class ribboncloudconfiguration private boolean enabled true private loadbalancerconfiguration loadbalancer new loadbalancerconfiguration public boolean isenabled return enabled public void setenabled (boolean enabled .enabled enabled public loadbalancerconfiguration getloadbalancer return loadbalancer public class loadbalancerconfiguration extends ribbonconfiguration diff --git /platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/resources/application.properties b /platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/resources/application.properties deleted file mode index 024710e /platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/resources/application.properties /dev/null -camel.cloud.ribbon.load-balancer. newline end file diff --git /platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/java/org/apache/camel/component/ribbon/springboot/cloud/ribbonloadbalancerdisabledtest.java b /platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/java/org/apache/camel/component/ribbon/springboot/cloud/ribbonloadbalancerdisabledtest.java new file mode index ..e2e322f /dev/null b /platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/java/org/apache/camel/component/ribbon/springboot/cloud/ribbonloadbalancerdisabledtest.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.component.ribbon.springboot.cloud; +import java .util.map; +import org .apache.camel.cloud.loadbalancer; +import org .apache.camel.model.cloud.springboot.ribbonservicecallloadbalancerconfigurationproperties; +import org .junit.assert; +import org .junit.test; +import org .junit.runner.runwith; +import org .springframework.beans.factory.annotation.autowired; +import org .springframework.boot.autoconfigure.springbootapplication; +import org .springframework.boot.test.context.springboottest; +import org .springframework.context.applicationcontext; +import org .springframework.context.annotation.configuration; +import org .springframework.test.annotation.dirtiescontext; +import org .springframework.test.context.junit4.springrunner; +@runwith(springrunner.class) +@dirtiescontext +@springbootapplication +@springboottest( class ribbonloadbalancerdisabledtest .testconfiguration.class property ""debug=false"", ""camel.cloud.ribbon.load-balancer.enabled=false"" +public class ribbonloadbalancerdisabledtest @autowired applicationcontext context @test public void testconfiguration throw exception map <string, bean bean context .getbeansoftype(ribbonservicecallloadbalancerconfigurationproperties.class); assert .asserttrue(beans.isempty()); bean context .getbeansoftype(loadbalancer.class); assert .asserttrue(beans.isempty()); assert .assertfalse(beans.containskey(""ribbon-load-balancer"")); @configuration public static class testconfiguration diff --git /platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/java/org/apache/camel/component/ribbon/springboot/cloud/ribbonloadbalancerenabledtest.java b /platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/java/org/apache/camel/component/ribbon/springboot/cloud/ribbonloadbalancerenabledtest.java new file mode index ..b7e2780 /dev/null b /platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/java/org/apache/camel/component/ribbon/springboot/cloud/ribbonloadbalancerenabledtest.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.component.ribbon.springboot.cloud; +import java .util.map; +import org .apache.camel.cloud.loadbalancer; +import org .apache.camel.model.cloud.springboot.ribbonservicecallloadbalancerconfigurationproperties; +import org .junit.assert; +import org .junit.test; +import org .junit.runner.runwith; +import org .springframework.beans.factory.annotation.autowired; +import org .springframework.boot.autoconfigure.springbootapplication; +import org .springframework.boot.test.context.springboottest; +import org .springframework.context.applicationcontext; +import org .springframework.context.annotation.configuration; +import org .springframework.test.annotation.dirtiescontext; +import org .springframework.test.context.junit4.springrunner; +@runwith(springrunner.class) +@dirtiescontext +@springbootapplication +@springboottest( class ribbonloadbalancerenabledtest .testconfiguration.class property ""debug=false"", ""camel.cloud.ribbon.load-balancer.enabled=true"" +public class ribbonloadbalancerenabledtest @autowired applicationcontext context @test public void testconfiguration throw exception map <string, bean bean context .getbeansoftype(ribbonservicecallloadbalancerconfigurationproperties.class); assert .assertfalse(beans.isempty()); assert .assertequals(1, bean .size()); bean context .getbeansoftype(loadbalancer.class); assert .assertfalse(beans.isempty()); assert .asserttrue(beans.containskey(""ribbon-load-balancer"")); @configuration public static class testconfiguration diff --git /platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/resources/logback.xml b /platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/resources/logback.xml new file mode index ..6fb40a6 /dev/null b /platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/resources/logback.xml +<?xml version encoding =""utf-8""?> licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +<configuration> <appender name =""stdout"" class =""ch.qos.logback.core.consoleappender""> encoders assigned type ch .qos.logback.classic.encoder.patternlayoutencoder default <encoder> <pattern>%d{hh:mm:ss.sss} [%-15.15thread] %-5level %-30.30logger %msg%n</pattern> </encoder> </appender> <appender name =""file"" class =""ch.qos.logback.core.fileappender""> <encoder> <pattern>%d{hh:mm:ss.sss} [%-15.15thread] %-5level %-30.30logger %msg%n</pattern> </encoder> <file>target/camel-ribbon-starter-test.log</file> </appender> <root level =""info""> <appender-ref ref =""file""/> </root> +</configuration> newline end file diff --git /tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/springbootautoconfigurationmojo.java b /tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/springbootautoconfigurationmojo.java index a2f5fcd ..bba8ecf /tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/springbootautoconfigurationmojo.java b /tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/springbootautoconfigurationmojo.java public class springbootautoconfigurationmojo extends abstractmojo createothermodelconfigurationsource (pkg, model ""camel.cloud.kubernetes.service-discovery"", true ribbon json loadmodeljson (files, ""ribbonloadbalancer""); (json null othermodel model generateothermodel (json); int po model .getjavatype().lastindexof("".""); string pkg model .getjavatype().substring(0, po "".springboot""; generate property auto -configuration happens camel -kubernetes-starter createothermodelconfigurationsource (pkg, model ""camel.cloud.ribbon.load-balancer"", true rest json loadmodeljson (files, ""restconfiguration""); (json null",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cc8d0fd8998ec4abe846a29d9d1d99a06%40git.apache.org%3E,2017-04-18 14:53:26,commits,379.0,camel git commit service call allow confgire ribbon load balancer using ribbon specific property
159,247,247,157.0,601.0,Lyuben Milev (JIRA),lyuben milev commented camel hello issue running hdfs test reportedly also fails ci although sure -fire 't treat error irc log zregvart oneoneoneone think line removed rc /main/java/org/apache/camel/component/hdfs2/hdfsendpoint.java#l44 camel -hdfs2: initialdelay option overwritten default value key camel url project camel issue type bug component camel -hdfs2 reporter andrea cosentino assignee andrea cosentino priority minor fix need use trick mail component consumer side message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13048508.1488802579000.311106.1492550021739%40Atlassian.JIRA%3E,2017-04-18 21:13:41,issues,605.0,[jira] [commented] (camel-10948) camel -hdfs2: initialdelay option overwritten default value
160,248,248,158.0,602.0,Zoran Regvart (JIRA),zoran regvart commented camel [~ancosen] seems overwrite uri parameter value given default value think [hdfsendpoint.java#l44| line need removed {{initialdelay}} already set {{hdfsconsumer.default_consumer_initial_delay}} field initialization [hdfsconfiguration.java#l74| test actually fail ci (see [build console output reported failed strange fails {{\[error\] timeout error fork camel -hdfs2: initialdelay option overwritten default value key camel url project camel issue type bug component camel -hdfs2 reporter andrea cosentino assignee andrea cosentino priority minor fix need use trick mail component consumer side message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13048508.1488802579000.311151.1492550142188%40Atlassian.JIRA%3E,2017-04-18 21:15:42,issues,606.0,[jira] [commented] (camel-10948) camel -hdfs2: initialdelay option overwritten default value
161,249,249,159.0,603.0,Andrea Cosentino (JIRA),andrea cosentino commented camel thanks spotting fix tomorrow camel -hdfs2: initialdelay option overwritten default value key camel url project camel issue type bug component camel -hdfs2 reporter andrea cosentino assignee andrea cosentino priority minor fix need use trick mail component consumer side message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13048508.1488802579000.311168.1492550321660%40Atlassian.JIRA%3E,2017-04-18 21:18:41,issues,607.0,[jira] [commented] (camel-10948) camel -hdfs2: initialdelay option overwritten default value
162,250,250,182.0,382.0,acosent...@apache.org,"repository camel updated branch ref /heads/master 9f126aab7 dd940e926 camel camel -hdfs2: initialdelay option overwritten default value project commit tree diff branch ref /heads/master commit dd940e926c947f1e9ab915a8e523b30fab65566e parent 9f126aa author andrea cosentino <ancosen@gmail.com> authored wed apr committer andrea cosentino <ancosen@gmail.com> committed wed apr .../main/java/org/apache/camel/component/hdfs2/hdfsendpoint.java .../hdfs2/springboot/hdfscomponentautoconfiguration.java .../component/hdfs2/springboot/hdfscomponentconfiguration.java file changed insertion deletion diff --git /components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/hdfsendpoint.java b /components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/hdfsendpoint.java index 6b29475 ..7224d37 /components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/hdfsendpoint.java b /components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/hdfsendpoint.java public class hdfsendpoint extends scheduledpollendpoint super (endpointuri, context .config new hdfsconfiguration .config.parseuri(new uri (endpointuri)); setinitialdelay (hdfsconsumer.default_consumer_initial_delay); @override diff --git /platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/hdfscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/hdfscomponentautoconfiguration.java index 47da1fc ..88b86d2 /platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/hdfscomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/hdfscomponentautoconfiguration.java package org .apache.camel.component.hdfs2.springboot; import java .util.hashmap; import java .util.map; +import javax .annotation.generated; import org .apache.camel.camelcontext; import org .apache.camel.component.hdfs2.hdfscomponent; import org .apache.camel.util.introspectionsupport; import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file +@generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:03:41.690z"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(hdfscomponentautoconfiguration.condition.class) public class hdfscomponentautoconfiguration return component @generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:03:41.738z"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/hdfscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/hdfscomponentconfiguration.java index d2cfd9d ..29d8a56 /platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/hdfscomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/hdfscomponentconfiguration.java package org .apache.camel.component.hdfs2.springboot; +import javax .annotation.generated; import javax .security.auth.login.configuration; import org .springframework.boot.context.properties.configurationproperties; import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file +@generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:03:41.545z"") @configurationproperties(prefix ""camel.component.hdfs2"") public class hdfscomponentconfiguration",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C98d3b7827ccb49678f54bca9d6814bb8%40git.apache.org%3E,2017-04-19 08:05:09,commits,382.0,camel git commit camel camel -hdfs2: initialdelay option overwritten default value
163,251,251,183.0,383.0,acosent...@apache.org,"repository camel updated branch ref /heads/camel-2.18.x 4765927aa 4f1b6539e camel camel -hdfs2: initialdelay option overwritten default value project commit tree diff branch ref /heads/camel-2.18.x commit 4f1b6539e07f1069357947d432ffa5392e43ca57 parent author andrea cosentino <ancosen@gmail.com> authored wed apr committer andrea cosentino <ancosen@gmail.com> committed wed apr .../main/java/org/apache/camel/component/hdfs2/hdfsendpoint.java file changed deletion diff --git /components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/hdfsendpoint.java b /components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/hdfsendpoint.java index 3e9d81d ..baecdcc /components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/hdfsendpoint.java b /components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/hdfsendpoint.java public class hdfsendpoint extends scheduledpollendpoint super (endpointuri, context .config new hdfsconfiguration .config.parseuri(new uri (endpointuri)); setinitialdelay (hdfsconsumer.default_consumer_initial_delay); @override",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C5032f17311004106b02fd4777e9fc6bb%40git.apache.org%3E,2017-04-19 08:08:27,commits,383.0,camel git commit camel camel -hdfs2: initialdelay option overwritten default value
164,254,254,185.0,384.0,acosent...@apache.org,"repository camel updated branch ref /heads/camel-2.17.x 96fc48c3e 82bf20aef camel camel -hdfs2: initialdelay option overwritten default value project commit tree diff branch ref /heads/camel-2.17.x commit 82bf20aef311af8611e5e62a4b759a21452716bd parent 96fc48c author andrea cosentino <ancosen@gmail.com> authored wed apr committer andrea cosentino <ancosen@gmail.com> committed wed apr .../main/java/org/apache/camel/component/hdfs2/hdfsendpoint.java file changed deletion diff --git /components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/hdfsendpoint.java b /components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/hdfsendpoint.java index 3e9d81d ..baecdcc /components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/hdfsendpoint.java b /components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/hdfsendpoint.java public class hdfsendpoint extends scheduledpollendpoint super (endpointuri, context .config new hdfsconfiguration .config.parseuri(new uri (endpointuri)); setinitialdelay (hdfsconsumer.default_consumer_initial_delay); @override",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cf39ca6e740e94fcc898efe0188ffb0d0%40git.apache.org%3E,2017-04-19 08:10:44,commits,384.0,camel git commit camel camel -hdfs2: initialdelay option overwritten default value
165,255,255,161.0,201.0,sadiq,"'m experiencing parsing issue using bindy unmarshal csv file list pojos (my pojo class annotated @csvrecord). csv file contains following partnumber ,longdescription,status windshield washer jar multi application "",available cyl small block clutch bellcrank assembly "",available fan blade blade "",available 's fourth line causing issue java .lang.illegalargumentexception: position defined field available line must specified (it say line believe 's csvrecord class skipfirstline =true) csv parsing seems handling comma within field surrounded double quote since 2nd line okay 's also handling escaping double quote correctly within field since 3rd line fine issue comma present escaped double quote within field surrounded double quote seems want separate comma new field treating single field 'm using latest version camel still observing issue route (""sftp://me@myhost.com?sortby=file:modified&antinclude=*.csv&password=xxxx"") .unmarshal() .bindy(bindytype.csv, productdeltacsvdatamodel .class) //throwing exception .to(""direct:processcsv""); csvrecord pojo class @csvrecord(separator skipfirstline true quote quoting true public class productdeltacsvdatamodel @datafield(pos required true private string partnumber @datafield(pos private string longdescription @datafield(pos private string status //setters getters believe bug unless configuration need set someone confirm bug go logging bug thanks sadiq view message context sent camel user mailing list archive nabble .com.",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492578616894-5797871.post%40n5.nabble.com%3E,2017-04-19 05:10:16,users,202.0,parsing issue unmarshal bindy .csv double quote comma single field
166,256,256,230.0,621.0,onder sezgin (JIRA),"onder sezgin reassigned camel assignee onder sezgin camel -bindy csv unbinding escape embedded quote character key camel url project camel issue type improvement component camel -bindy reporter james birchfield assignee onder sezgin fix future string field contains character (string) quote character quoting set true embedded character escaped val :string ""\""foo\"""" bindy unmarshal csv stream """"foo"""",""..."",""..."",""..."",... ""\""foo\"""",""..."",""..."",""..."",... message sent atlassian jira (v6.3.15#6346)",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.12721833.1403061820000.316732.1492601861573%40Atlassian.JIRA%3E,2017-04-19 11:37:41,issues,625.0,[jira] [assigned] (camel-7519) camel -bindy csv unbinding escape embedded quote character
167,257,257,231.0,219.0,onders86,github user onders86 opened pull request camel new option quotingescaped added marshalling /unmarsha… …lling escape char fix typo merge pull request git repository running git pull camel alternatively review apply change patch close pull request make commit master /trunk branch (at least following commit message close commit dea74cc06c6aca27102c8e4dfa0c3b5737892756 author onders86 <ondersezgin@gmail.com> date -04-19t11:34:05z camel new option quotingescaped added marshalling /unmarshalling escape char fix typo project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3Cgit-pr-1640-camel%40git.apache.org%3E,2017-04-19 11:38:12,mail,219.0,[github] camel pull request camel new option quotingescaped added
168,258,258,232.0,622.0,ASF GitHub Bot (JIRA),"asf github bot commented camel github user onders86 opened pull request camel new option quotingescaped added marshalling /unmarsha… …lling escape char fix typo merge pull request git repository running git pull camel alternatively review apply change patch close pull request make commit master /trunk branch (at least following commit message close commit dea74cc06c6aca27102c8e4dfa0c3b5737892756 author onders86 <ondersezgin@gmail.com> date -04-19t11:34:05z camel new option quotingescaped added marshalling /unmarshalling escape char fix typo camel -bindy csv unbinding escape embedded quote character key camel url project camel issue type improvement component camel -bindy reporter james birchfield assignee onder sezgin fix future string field contains character (string) quote character quoting set true embedded character escaped val :string ""\""foo\"""" bindy unmarshal csv stream """"foo"""",""..."",""..."",""..."",... ""\""foo\"""",""..."",""..."",""..."",... message sent atlassian jira (v6.3.15#6346)",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.12721833.1403061820000.316738.1492601921678%40Atlassian.JIRA%3E,2017-04-19 11:38:41,issues,626.0,[jira] [commented] (camel-7519) camel -bindy csv unbinding escape embedded quote character
169,259,259,173.0,606.0,Claus Ibsen (JIRA),claus ibsen created camel summary @generated annotation java problem key camel url project camel issue type task reporter claus ibsen noticed jdk9 build [error] [help org .apache.maven.lifecycle.lifecycleexecutionexception: failed execute goal org .apache.camel:camel-package-maven-plugin:2.19.0-snapshot:prepare-spring-boot-auto-configuration (validate) project camel -core: execution validate goal org .apache.camel:camel-package-maven-plugin:2.19.0-snapshot:prepare-spring-boot-auto-configuration failed required class missing executing org .apache.camel:camel-package-maven-plugin:2.19.0-snapshot:prepare-spring-boot-auto-configuration: javax /annotation/generated [~jpoth] time help look fails building camel -core due recent addition adding `@generated` annotation generated source code spring -boot starter whatnot message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13065011.1492588059000.315416.1492588061900%40Atlassian.JIRA%3E,2017-04-19 07:47:41,issues,610.0,[jira] [created] (camel-11166) @generated annotation java problem
170,260,260,175.0,607.0,Zoran Regvart (JIRA),zoran regvart reassigned camel assignee zoran regvart @generated annotation java problem key camel url project camel issue type task reporter claus ibsen assignee zoran regvart noticed jdk9 build [error] [help org .apache.maven.lifecycle.lifecycleexecutionexception: failed execute goal org .apache.camel:camel-package-maven-plugin:2.19.0-snapshot:prepare-spring-boot-auto-configuration (validate) project camel -core: execution validate goal org .apache.camel:camel-package-maven-plugin:2.19.0-snapshot:prepare-spring-boot-auto-configuration failed required class missing executing org .apache.camel:camel-package-maven-plugin:2.19.0-snapshot:prepare-spring-boot-auto-configuration: javax /annotation/generated [~jpoth] time help look fails building camel -core due recent addition adding `@generated` annotation generated source code spring -boot starter whatnot message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13065011.1492588059000.315466.1492588601548%40Atlassian.JIRA%3E,2017-04-19 07:56:41,issues,611.0,[jira] [assigned] (camel-11166) @generated annotation java problem
171,261,261,178.0,608.0,John Poth (JIRA),john poth commented camel sure try latest build @generated annotation java problem key camel url project camel issue type task reporter claus ibsen assignee zoran regvart noticed jdk9 build [error] [help org .apache.maven.lifecycle.lifecycleexecutionexception: failed execute goal org .apache.camel:camel-package-maven-plugin:2.19.0-snapshot:prepare-spring-boot-auto-configuration (validate) project camel -core: execution validate goal org .apache.camel:camel-package-maven-plugin:2.19.0-snapshot:prepare-spring-boot-auto-configuration failed required class missing executing org .apache.camel:camel-package-maven-plugin:2.19.0-snapshot:prepare-spring-boot-auto-configuration: javax /annotation/generated [~jpoth] time help look fails building camel -core due recent addition adding `@generated` annotation generated source code spring -boot starter whatnot message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13065011.1492588059000.315526.1492588901781%40Atlassian.JIRA%3E,2017-04-19 08:01:41,issues,612.0,[jira] [commented] (camel-11166) @generated annotation java problem
172,262,262,220.0,217.0,johnpoth,github user johnpoth opened pull request camel make camel -package-maven-plugin work java merge pull request git repository running git pull camel alternatively review apply change patch close pull request make commit master /trunk branch (at least following commit message close commit 4f415029d7fb58976264ce22654b290053a84949 author jpoth <poth.john@gmail.com> date -04-19t10:32:06z camel make camel -package-maven-plugin work java project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3Cgit-pr-1639-camel%40git.apache.org%3E,2017-04-19 10:33:12,mail,217.0,[github] camel pull request camel make camel -package-maven-plugin work
173,263,263,221.0,609.0,ASF GitHub Bot (JIRA),asf github bot commented camel github user johnpoth opened pull request camel make camel -package-maven-plugin work java merge pull request git repository running git pull camel alternatively review apply change patch close pull request make commit master /trunk branch (at least following commit message close commit 4f415029d7fb58976264ce22654b290053a84949 author jpoth <poth.john@gmail.com> date -04-19t10:32:06z camel make camel -package-maven-plugin work java @generated annotation java problem key camel url project camel issue type task reporter claus ibsen assignee zoran regvart noticed jdk9 build [error] [help org .apache.maven.lifecycle.lifecycleexecutionexception: failed execute goal org .apache.camel:camel-package-maven-plugin:2.19.0-snapshot:prepare-spring-boot-auto-configuration (validate) project camel -core: execution validate goal org .apache.camel:camel-package-maven-plugin:2.19.0-snapshot:prepare-spring-boot-auto-configuration failed required class missing executing org .apache.camel:camel-package-maven-plugin:2.19.0-snapshot:prepare-spring-boot-auto-configuration: javax /annotation/generated [~jpoth] time help look fails building camel -core due recent addition adding `@generated` annotation generated source code spring -boot starter whatnot message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13065011.1492588059000.316492.1492598021594%40Atlassian.JIRA%3E,2017-04-19 10:33:41,issues,613.0,[jira] [commented] (camel-11166) @generated annotation java problem
174,264,264,222.0,404.0,davscl...@apache.org,repository camel updated branch ref /heads/master d9f4ff922 4f415029d camel make camel -package-maven-plugin work java project commit tree diff branch ref /heads/master commit 4f415029d7fb58976264ce22654b290053a84949 parent d9f4ff9 author jpoth <poth.john@gmail.com> authored wed apr committer jpoth <poth.john@gmail.com> committed wed apr parent /pom.xml file changed insertion diff --git /parent/pom.xml b /parent/pom.xml index 79bd2fa ..578d968 /parent/pom.xml b /parent/pom.xml </dependencies> </plugin> <plugin> <groupid>org.apache.camel</groupid> <artifactid>camel-package-maven-plugin</artifactid> <dependencies> <dependency> <groupid>javax.xml.ws</groupid> <artifactid>jaxws-api</artifactid> <version>2.2.11</version> </dependency> </dependencies> </plugin> <plugin> <groupid>org.apache.maven.plugins</groupid> <artifactid>maven-compiler-plugin</artifactid> <version>${maven-compiler-plugin-version}</version>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Ccdfe21ec3baf4e32bcbcaa34c6a0824f%40git.apache.org%3E,2017-04-19 10:52:10,commits,404.0,camel git commit camel make camel -package-maven-plugin work java
175,265,265,223.0,218.0,asfgit,github user asfgit closed pull request project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170419105229.5050CDFC31%40git1-us-west.apache.org%3E,2017-04-19 10:52:29,mail,218.0,[github] camel pull request camel make camel -package-maven-plugin work
176,266,266,224.0,610.0,ASF GitHub Bot (JIRA),asf github bot commented camel github user asfgit closed pull request @generated annotation java problem key camel url project camel issue type task reporter claus ibsen assignee zoran regvart noticed jdk9 build [error] [help org .apache.maven.lifecycle.lifecycleexecutionexception: failed execute goal org .apache.camel:camel-package-maven-plugin:2.19.0-snapshot:prepare-spring-boot-auto-configuration (validate) project camel -core: execution validate goal org .apache.camel:camel-package-maven-plugin:2.19.0-snapshot:prepare-spring-boot-auto-configuration failed required class missing executing org .apache.camel:camel-package-maven-plugin:2.19.0-snapshot:prepare-spring-boot-auto-configuration: javax /annotation/generated [~jpoth] time help look fails building camel -core due recent addition adding `@generated` annotation generated source code spring -boot starter whatnot message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13065011.1492588059000.316528.1492599161616%40Atlassian.JIRA%3E,2017-04-19 10:52:41,issues,614.0,[jira] [commented] (camel-11166) @generated annotation java problem
177,271,271,186.0,212.0,Apache Jenkins Server,apache jenkins build system built camel .2.17.x.notest (build status failure check console output view result,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C1100248025.1350.1492590675219.JavaMail.jenkins%40crius%3E,2017-04-19 08:31:14,mail,212.0,camel .2.17.x.notest build failure
178,274,274,180.0,211.0,asfgit,github user asfgit closed pull request project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170419080244.DB02FDFC31%40git1-us-west.apache.org%3E,2017-04-19 08:02:44,mail,211.0,[github] camel pull request camel improve performance caseinsensiti
179,277,277,199.0,397.0,zregv...@apache.org,"regenerate component documentation list update component list documentation project commit tree diff branch ref /heads/master commit 492bef3432349317f95622c0528e38f2e72ea866 parent author zoran regvart <zregvart@apache.org> authored wed apr committer zoran regvart <zregvart@apache.org> committed wed apr component /readme.adoc doc /user-manual/en/summary.md file changed insertion deletion diff --git /components/readme.adoc b /components/readme.adoc index 09c9bf1 ..a3990e7 /components/readme.adoc b /components/readme.adoc component component start -number component jar artifact deprecated +number component jar artifact deprecated [width=""100%"",cols=""4,1,5"",options=""header""] number component jar artifact deprecated link :camel-google-drive/src/main/docs/google-drive-component.adoc[google drive (camel-google-drive) `google-drive:apiname/methodname` google -drive component provides access google drive file storage service link :camel-gae/src/main/docs/gauth-component.adoc[google gauth (camel-gae) +`gauth:name` gauth component used web application implement google -specific oauth consumer link :camel-gae/src/main/docs/ghttp-component.adoc[google http (camel-gae) +`ghttp:httpuri` ghttp component provides http connectivity gae link :camel-gae/src/main/docs/glogin-component.adoc[google login (camel-gae) +`glogin:hostname` glogin component used camel application outside google app engine (gae) programmatic login gae application link :camel-gae/src/main/docs/gmail-component.adoc[google mail (camel-gae) +`gmail:sender` gmail component used sending email gae link :camel-google-mail/src/main/docs/google-mail-component.adoc[google mail (camel-google-mail) `google-mail:apiname/methodname` google -mail component provides access google mail link :camel-google-pubsub/src/main/docs/google-pubsub-component.adoc[google pubsub (camel-google-pubsub) `google-pubsub:projectid:destinationname` messaging client google cloud platform pubsub service link :camel-gae/src/main/docs/gtask-component.adoc[google task (camel-gae) +`gtask:queuename` gtask component used sending message gae task queue service link :camel-gora/src/main/docs/gora-component.adoc[gora] (camel-gora) `gora:name` gora component allows work nosql database using apache gora framework diff --git /docs/user-manual/en/summary.md b /docs/user-manual/en/summary.md index 25968df ..62f43ac /docs/user-manual/en/summary.md b /docs/user-manual/en/summary.md [github](github-component.adoc) [google calendar ](google-calendar-component.adoc) [google drive ](google-drive-component.adoc) [google gauth ](gauth-component.adoc) [google http ](ghttp-component.adoc) [google login ](glogin-component.adoc) [google mail ](gmail-component.adoc) [google mail ](google-mail-component.adoc) [google pubsub ](google-pubsub-component.adoc) [google task ](gtask-component.adoc) [gora](gora-component.adoc) [grape](grape-component.adoc) [grpc](grpc-component.adoc)",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C67063c4f85164873b823bcc9de18e923%40git.apache.org%3E,2017-04-19 08:35:58,commits,397.0,camel git commit regenerate component documentation list
180,278,278,210.0,399.0,zregv...@apache.org,"repository camel updated branch ref /heads/master 30308c9f9 e1cc3a2cf regenerate component documentation list update component list documentation without removed component project commit tree diff branch ref /heads/master commit 40c2a759b9ce534a96fe9ef572eec733914702cc parent 30308c9 author zoran regvart <zregvart@apache.org> authored wed apr committer zoran regvart <zregvart@apache.org> committed wed apr component /readme.adoc doc /user-manual/en/summary.md file changed insertion deletion diff --git /components/readme.adoc b /components/readme.adoc index a3990e7 ..09c9bf1 /components/readme.adoc b /components/readme.adoc component component start -number component jar artifact deprecated +number component jar artifact deprecated [width=""100%"",cols=""4,1,5"",options=""header""] number component jar artifact deprecated link :camel-google-drive/src/main/docs/google-drive-component.adoc[google drive (camel-google-drive) `google-drive:apiname/methodname` google -drive component provides access google drive file storage service link :camel-gae/src/main/docs/gauth-component.adoc[google gauth (camel-gae) -`gauth:name` gauth component used web application implement google -specific oauth consumer link :camel-gae/src/main/docs/ghttp-component.adoc[google http (camel-gae) -`ghttp:httpuri` ghttp component provides http connectivity gae link :camel-gae/src/main/docs/glogin-component.adoc[google login (camel-gae) -`glogin:hostname` glogin component used camel application outside google app engine (gae) programmatic login gae application link :camel-gae/src/main/docs/gmail-component.adoc[google mail (camel-gae) -`gmail:sender` gmail component used sending email gae link :camel-google-mail/src/main/docs/google-mail-component.adoc[google mail (camel-google-mail) `google-mail:apiname/methodname` google -mail component provides access google mail link :camel-google-pubsub/src/main/docs/google-pubsub-component.adoc[google pubsub (camel-google-pubsub) `google-pubsub:projectid:destinationname` messaging client google cloud platform pubsub service link :camel-gae/src/main/docs/gtask-component.adoc[google task (camel-gae) -`gtask:queuename` gtask component used sending message gae task queue service link :camel-gora/src/main/docs/gora-component.adoc[gora] (camel-gora) `gora:name` gora component allows work nosql database using apache gora framework diff --git /docs/user-manual/en/summary.md b /docs/user-manual/en/summary.md index 62f43ac ..25968df /docs/user-manual/en/summary.md b /docs/user-manual/en/summary.md [github](github-component.adoc) [google calendar ](google-calendar-component.adoc) [google drive ](google-drive-component.adoc) [google gauth ](gauth-component.adoc) [google http ](ghttp-component.adoc) [google login ](glogin-component.adoc) [google mail ](gmail-component.adoc) [google mail ](google-mail-component.adoc) [google pubsub ](google-pubsub-component.adoc) [google task ](gtask-component.adoc) [gora](gora-component.adoc) [grape](grape-component.adoc) [grpc](grpc-component.adoc)",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C452caf51bc644dec9a1330ee14d0a092%40git.apache.org%3E,2017-04-19 09:14:37,commits,399.0,camel git commit regenerate component documentation list
181,279,279,202.0,208.0,Nico159,hi everyone 'm looking way check folder exists route started startup usually use autecreate inbound folder problem inbound yet somebody (or something delete created inbound folder (while route running route check forever non -existing folder (deadlock). 've tried use autecreate =false startingdirectorymustexist =true (while input folder therefore get error start route way check periodically input folder -autocreate necessary (or throw error thx advance kind help view message context sent camel user mailing list archive nabble .com.,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492591369447-5797895.post%40n5.nabble.com%3E,2017-04-19 08:42:49,users,209.0,check startup folder exists
182,280,280,207.0,209.0,Claus Ibsen,write code wed apr nico159 <nicolas.gehling@adesso.de> wrote hi everyone 'm looking way check folder exists route started startup usually use autecreate inbound folder problem inbound yet somebody (or something delete created inbound folder (while route running route check forever non -existing folder (deadlock). 've tried use autecreate =false startingdirectorymustexist =true (while input folder therefore get error start route way check periodically input folder -autocreate necessary (or throw error thx advance kind help view message context sent camel user mailing list archive nabble .com. claus ibsen @davsclaus camel action,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yNmDgycu91-DSKM6pKx%2BWq62JM3-TTZ7J%3DPy2KRb8q49aw%40mail.gmail.com%3E,2017-04-19 09:05:02,users,210.0,check startup folder exists
183,281,281,243.0,210.0,Nico159,thank fast confirmation 'll try use timer bean solve problem view message context sent camel user mailing list archive nabble .com.,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492605024646-5797922.post%40n5.nabble.com%3E,2017-04-19 12:30:24,users,211.0,check startup folder exists
184,282,282,203.0,398.0,acosent...@apache.org,"repository camel updated branch ref /heads/master 492bef343 9cf875246 upgrade wiremock version project commit tree diff branch ref /heads/master commit 9cf875246e91ee74baab2c78cc5d846c6e3ab8fb parent 492bef3 author andrea cosentino <ancosen@gmail.com> authored wed apr committer andrea cosentino <ancosen@gmail.com> committed wed apr parent /pom.xml .../bonita/springboot/bonitacomponentautoconfiguration.java .../pubnub/springboot/pubnubcomponentautoconfiguration.java .../springboot/restswaggercomponentautoconfiguration.java .../swagger/springboot/restswaggercomponentconfiguration.java file changed insertion deletion diff --git /parent/pom.xml b /parent/pom.xml index b3284be ..79bd2fa /parent/pom.xml b /parent/pom.xml <weld2-version>2.4.2.final</weld2-version> <weld3-version>3.0.0.cr2</weld3-version> <werken-xpath-bundle-version>0.9.4_5</werken-xpath-bundle-version> <wiremock-version>2.5.1</wiremock-version> <wiremock-version>2.6.0</wiremock-version> <woodstox-version>4.4.1</woodstox-version> <ws-commons-util-bundle-version>1.0.2_2</ws-commons-util-bundle-version> <wsdl4j-bundle-version>1.6.2_6</wsdl4j-bundle-version> diff --git /platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/bonitacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/bonitacomponentautoconfiguration.java index 8bfa8d8 ..deee612 /platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/bonitacomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/bonitacomponentautoconfiguration.java import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file -@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") +@generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:39:00.866z"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(bonitacomponentautoconfiguration.condition.class) public class bonitacomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:39:00.940z"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/pubnubcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/pubnubcomponentautoconfiguration.java index 671c1ce ..c649698 /platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/pubnubcomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/pubnubcomponentautoconfiguration.java import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file -@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") +@generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:39:35.390z"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(pubnubcomponentautoconfiguration.condition.class) public class pubnubcomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:39:35.455z"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentautoconfiguration.java index 56064f2 ..694bc3f /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentautoconfiguration.java b /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentautoconfiguration.java import org .springframework.core.type.annotatedtypemetadata; generated camel -package-maven-plugin edit file -@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") +@generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:40:54.730z"") @configuration @conditionalonbean(type ""org.apache.camel.spring.boot.camelautoconfiguration"") @conditional(restswaggercomponentautoconfiguration.condition.class) public class restswaggercomponentautoconfiguration return component @generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") @generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:40:54.785z"") public static class condition extends springbootcondition @override public conditionoutcome getmatchoutcome diff --git /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentconfiguration.java index cf01faa ..205fcfd /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentconfiguration.java b /platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/restswaggercomponentconfiguration.java import org .springframework.boot.context.properties.configurationproperties; generated camel -package-maven-plugin edit file -@generated(""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"") +@generated(value ""org.apache.camel.maven.packaging.springbootautoconfigurationmojo"", date ""2017-04-19t08:40:54.520z"") @configurationproperties(prefix ""camel.component.rest-swagger"") public class restswaggercomponentconfiguration",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C06f2b9c6afc34951a730ca0c74f1f1a6%40git.apache.org%3E,2017-04-19 08:44:54,commits,398.0,camel git commit upgrade wiremock version
185,283,283,206.0,214.0,Apache Jenkins Server,apache jenkins build system built camel .2.18.x.notest (build status failure check console output view result,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C2077918246.1360.1492591909964.JavaMail.jenkins%40crius%3E,2017-04-19 08:51:49,mail,214.0,camel .2.18.x.notest build failure
186,284,284,208.0,616.0,Claus Ibsen (JIRA),claus ibsen created camel summary include camel name spring boot health check key camel url project camel issue type improvement component camel -spring-boot reporter claus ibsen assignee claus ibsen fix help see camel checked currently see version message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13065026.1492592863000.315923.1492592921617%40Atlassian.JIRA%3E,2017-04-19 09:08:41,issues,620.0,[jira] [created] (camel-11167) include camel name spring boot health check
187,285,285,212.0,401.0,davscl...@apache.org,"repository camel updated branch ref /heads/master e1cc3a2cf e09180940 camel include camel name spring boot health check project commit tree diff branch ref /heads/master commit e09180940d967164f509e85e83f5eab04f24444b parent e1cc3a2 author claus ibsen <davsclaus@apache.org> authored wed apr committer claus ibsen <davsclaus@apache.org> committed wed apr .../org/apache/camel/spring/boot/health/camelhealthindicator.java file changed insertion diff --git /components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/health/camelhealthindicator.java b /components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/health/camelhealthindicator.java index 7a9feb9 ..67ca02d /components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/health/camelhealthindicator.java b /components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/health/camelhealthindicator.java public class camelhealthindicator extends abstracthealthindicator (camelcontext null builder .unknown(); else builder .withdetail(""name"", camelcontext .getname()); builder .withdetail(""version"", camelcontext .getversion()); builder .withdetail(""contextstatus"", camelcontext .getstatus().name()); (camelcontext.getstatus().isstarted())",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C48ddebc7cb2244a18482e1c9ea9c4121%40git.apache.org%3E,2017-04-19 09:15:57,commits,401.0,camel git commit camel include camel name spring boot health check
188,288,288,219.0,399.0,Tomohisa Igarashi (JIRA),"tomohisa igarashi reassigned camel assignee tomohisa igarashi camel -twitter, camel -ignite make uri endpoint separated key camel url project camel issue type improvement reporter claus ibsen assignee tomohisa igarashi fix currently @uriendpoint represents possible endpoint combination usually work fine camel component component twitter ignite hazelcast etc many different endpoint specific option per different endpoint split different component separated twitter -status twitter -search twitter -direct something also help tooling documentation et clearly separated confusion example twitter mention support delay option twitter search us etc message sent atlassian jira (v6.3.15#6346)",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13040956.1486469339000.316436.1492597121554%40Atlassian.JIRA%3E,2017-04-19 10:18:41,issues,402.0,"[jira] [assigned] (camel-10798) camel -twitter, camel -ignite make uri endpoint separated"
189,289,289,228.0,491.0,Claus Ibsen (JIRA),claus ibsen updated camel estimated complexity novice (was: unknown update description data format language big readme file key camel url project camel issue type task component documentation reporter claus ibsen fix page improve description data format language informative short description like component message sent atlassian jira (v6.3.15#6346),http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13063766.1492083402000.316625.1492600301528%40Atlassian.JIRA%3E,2017-04-19 11:11:41,issues,494.0,[jira] [updated] (camel-11146) update description data format language big readme file
190,292,292,235.0,405.0,davscl...@apache.org,repository camel updated branch ref /heads/master 1d1daefe8 db2556580 upgrade spring project commit tree diff branch ref /heads/master commit f31abac1d1203dc02e3a527ecd790db6318ad8ca parent 1d1daef author claus ibsen <davsclaus@apache.org> authored wed apr committer claus ibsen <davsclaus@apache.org> committed wed apr parent /pom.xml file changed insertion deletion diff --git /parent/pom.xml b /parent/pom.xml index 578d968 ..24069e4 /parent/pom.xml b /parent/pom.xml <spring40-version>4.0.9.release</spring40-version> <spring41-version>4.1.9.release</spring41-version> <spring42-version>4.2.9.release</spring42-version> <spring43-version>4.3.7.release</spring43-version> <spring4-version>4.3.7.release</spring4-version> <spring43-version>4.3.8.release</spring43-version> <spring4-version>4.3.8.release</spring4-version> <spring-osgi-version>1.2.1</spring-osgi-version> <spring-security-version>4.1.4.release</spring-security-version> <spring-security-bundle-version>4.1.4.release_1</spring-security-bundle-version>,http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C87f507e3493c4bd384bdb1fd73fdceba%40git.apache.org%3E,2017-04-19 11:53:09,commits,405.0,camel git commit upgrade spring
191,295,295,237.0,408.0,davscl...@apache.org,"repository camel updated branch ref /heads/master db2556580 28fa5cf61 upgrade cxf project commit tree diff branch ref /heads/master commit 28fa5cf61e8ff9f8ed298af00815d952129059b7 parent db25565 author claus ibsen <davsclaus@apache.org> authored wed apr committer claus ibsen <davsclaus@apache.org> committed wed apr parent /pom.xml file changed insertion deletion diff --git /parent/pom.xml b /parent/pom.xml index 2f9ee7a ..9b9013b /parent/pom.xml b /parent/pom.xml <cobertura-maven-plugin-version>2.7</cobertura-maven-plugin-version> <couchbase-client-version>1.4.12</couchbase-client-version> <curator-version>2.11.1</curator-version> <cxf-version>3.1.10</cxf-version> <cxf-version>3.1.11</cxf-version> <cxf-version-range>[3.0,4.0)</cxf-version-range> <cxf-xjc-plugin-version>3.0.5</cxf-xjc-plugin-version> <cxf-xjc-utils-version>3.0.5</cxf-xjc-utils-version>",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cda3c1ad4ffe3491dbb246b87ca5280b5%40git.apache.org%3E,2017-04-19 11:57:57,commits,408.0,camel git commit upgrade cxf
192,296,296,240.0,409.0,davscl...@apache.org,"repository camel updated branch ref /heads/camel-2.18.x 4f1b6539e 2964c72b7 upgrade cxf project commit tree diff branch ref /heads/camel-2.18.x commit 2964c72b70471c18872fc57c9b908f7d0b611891 parent 4f1b653 author claus ibsen <davsclaus@apache.org> authored wed apr committer claus ibsen <davsclaus@apache.org> committed wed apr parent /pom.xml file changed insertion deletion diff --git /parent/pom.xml b /parent/pom.xml index c3c52d1 ..5beab1d /parent/pom.xml b /parent/pom.xml <consul-client-version>0.12.4</consul-client-version> <consul-client-bundle-version>0.12.4_1</consul-client-bundle-version> <cobertura-maven-plugin-version>2.7</cobertura-maven-plugin-version> <cxf-version>3.1.10</cxf-version> <cxf-version>3.1.11</cxf-version> <cxf-version-range>[3.0,4.0)</cxf-version-range> <cxf-xjc-plugin-version>3.0.5</cxf-xjc-plugin-version> <cxf-xjc-utils-version>3.0.5</cxf-xjc-utils-version>",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C9cbb82ef817f42dd959e07ed7e84b41b%40git.apache.org%3E,2017-04-19 12:26:53,commits,409.0,camel git commit upgrade cxf
193,297,297,238.0,223.0,ctron,github user ctron opened pull request clean example application change clean example application provided show simple route camel -milo. signed -off-by: jens reimann <jreimann@redhat.com> merge pull request git repository running git pull feature /milo_cleanup_samples_1 alternatively review apply change patch close pull request make commit master /trunk branch (at least following commit message close commit 56f2b24a2d4dbb408b71610bfe90fbfa2e9f7147 author jens reimann <jreimann@redhat.com> date -04-19t12:14:54z clean example application change clean example application provided show simple route camel -milo. signed -off-by: jens reimann <jreimann@redhat.com> project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3Cgit-pr-1641-camel%40git.apache.org%3E,2017-04-19 12:21:29,mail,223.0,[github] camel pull request clean example application
194,298,298,245.0,410.0,davscl...@apache.org,"repository camel updated branch ref /heads/master 28fa5cf61 56f2b24a2 clean example application change clean example application provided show simple route camel -milo. signed -off-by: jens reimann <jreimann@redhat.com> project commit tree diff branch ref /heads/master commit 56f2b24a2d4dbb408b71610bfe90fbfa2e9f7147 parent 28fa5cf author jens reimann <jreimann@redhat.com> authored wed apr committer jens reimann <jreimann@redhat.com> committed wed apr .../component/milo/testing/application.java .../milo/testing/application2client.java .../milo/testing/application2server.java .../component/milo/testing/exampleclient.java .../component/milo/testing/exampleserver.java file changed insertion deletion diff --git /components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/application.java b /components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/application.java deleted file mode index a78efbf /components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/application.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.component.milo.testing; -import org .apache.camel.camelcontext; -import org .apache.camel.builder.routebuilder; -import org .apache.camel.impl.defaultcamelcontext; -public final class application private application public static void main (final string args throw exception camel conext final camelcontext context new defaultcamelcontext add paho need register get auto detected context .addcomponent(""paho"", new pahocomponent need register get auto detected context .addcomponent(""milo-server"", new miloclientcomponent context .addcomponent(""milo-client"", new miloclientcomponent add route context .addroutes(new routebuilder @override public void configure throw exception (""paho:javaonedemo/eclipse-greenhouse-9home/sensors/temperature?brokerurl=tcp://iot.eclipse.org:1883"").log(""temp update ${body}"").convertbodyto(string.class) .to(""milo-server:myitem""); (""milo-server:myitem"").log(""myitem: ${body}""); (""milo-server:myitem2"").log(""myitem2 ${body}"").to(""paho:de/dentrassi/camel/milo/test1?brokerurl=tcp://iot.eclipse.org:1883""); (""milo-client:tcp://foo:bar@localhost:12685?nodeid=items-myitem&namespaceuri=urn:camel"").log(""from opc ua ${body}"") .to(""milo-client:tcp://localhost:12685?nodeid=items-myitem2&namespaceuri=urn:camel""); (""paho:de/dentrassi/camel/milo/test1?brokerurl=tcp://iot.eclipse.org:1883"").log(""back mqtt ${body}""); start context .start(); sleep (true) thread .sleep(long.max_value); diff --git /components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/application2client.java b /components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/application2client.java deleted file mode index d613a18 /components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/application2client.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.component.milo.testing; -import org .apache.camel.camelcontext; -import org .apache.camel.builder.routebuilder; -import org .apache.camel.impl.defaultcamelcontext; -public final class application2client private application2client public static void main (final string args throw exception camel conext final camelcontext context new defaultcamelcontext add paho need register get auto detected context .addcomponent(""paho"", new pahocomponent add opc ua add route context .addroutes(new routebuilder @override public void configure throw exception (""milo-client:tcp://foo:bar@localhost:12685?nodeid=items-myitem&namespaceuri=urn:org:apache:camel"").log(""from opc ua ${body}"") .to(""milo-client:tcp://foo:bar@localhost:12685?nodeid=items-myitem2&namespaceuri=urn:org:apache:camel""); start context .start(); sleep (true) thread .sleep(long.max_value); diff --git /components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/application2server.java b /components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/application2server.java deleted file mode index ae85890 /components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/application2server.java /dev/null licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license -package org .apache.camel.component.milo.testing; -import org .apache.camel.camelcontext; -import org .apache.camel.builder.routebuilder; -import org .apache.camel.component.milo.server.miloservercomponent; -import org .apache.camel.impl.defaultcamelcontext; -public final class application2server private application2server public static void main (final string args throw exception camel conext final camelcontext context new defaultcamelcontext add paho need register get auto detected context .addcomponent(""paho"", new pahocomponent ((miloservercomponent)context.getcomponent(""milo-server"")).setuserauthenticationcredentials(""foo:bar""); add route context .addroutes(new routebuilder @override public void configure throw exception ""paho:javaonedemo/eclipse-greenhouse-9home/sensors/temperature?brokerurl=tcp://iot.eclipse.org:1883"") .log(""temp update ${body}"").convertbodyto(string.class).to( ""milo-server:myitem""); (""paho:my/foo/bar?brokerurl=tcp://iot.eclipse.org:1883"").log(""temp update ${body}"").convertbodyto(string.class).to(""milo-server:myitem""); (""milo-server:myitem"").log(""myitem: ${body}""); (""milo-server:myitem2"").log(""myitem2: ${body}"").convertbodyto(string.class).to(""paho:de/dentrassi/camel/milo/temperature?brokerurl=tcp://iot.eclipse.org:1883""); (""paho:de/dentrassi/camel/milo/temperature?brokerurl=tcp://iot.eclipse.org:1883"").log(""back mqtt ${body}""); start context .start(); sleep (true) thread .sleep(long.max_value); diff --git /components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/exampleclient.java b /components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/exampleclient.java new file mode index ..38c0a06 /dev/null b /components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/exampleclient.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.component.milo.testing; +import org .apache.camel.camelcontext; +import org .apache.camel.builder.routebuilder; +import org .apache.camel.component.milo.nodeids; +import org .apache.camel.impl.defaultcamelcontext; example application focusing opc ua client endpoint +public final class exampleclient private exampleclient public static void main (final string args throw exception camel conext final camelcontext context new defaultcamelcontext add route context .addroutes(new routebuilder @override public void configure throw exception bridge item1 item2 final string item1 nodeids .nodevalue(""urn:org:apache:camel"", ""items-myitem""); final string item2 nodeids .nodevalue(""urn:org:apache:camel"", ""items-myitem2""); (""milo-client:tcp://foo:bar@localhost:12685?node="" item1 ).log(""from opc ua ${body}"") .to(""milo-client:tcp://foo:bar@localhost:12685?node"" item2 start context .start(); sleep (true) thread .sleep(long.max_value); diff --git /components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/exampleserver.java b /components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/exampleserver.java new file mode index ..2f39a91 /dev/null b /components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/exampleserver.java licensed apache software foundation (asf) one contributor license agreement see notice file distributed work additional information regarding copyright ownership asf license file apache license version (the ""license""); may use file except compliance license may obtain copy license unless required applicable law agreed writing software distributed license distributed ""as basis without warranty condition kind either express implied see license specific language governing permission limitation license +package org .apache.camel.component.milo.testing; +import org .apache.camel.camelcontext; +import org .apache.camel.builder.routebuilder; +import org .apache.camel.component.milo.server.miloservercomponent; +import org .apache.camel.impl.defaultcamelcontext; simple example application test way mapping data opc ua server instance +public final class exampleserver private exampleserver public static void main (final string args throw exception camel conext final camelcontext context new defaultcamelcontext configure milo ((miloservercomponent)context.getcomponent(""milo-server"")) .setuserauthenticationcredentials(""foo:bar""); add route context .addroutes(new routebuilder @override public void configure throw exception take mqtt topic forward content opc ua server item e .g. take mqtt application opc ua client connect application topic /items. write mqtt item pop opc ua item (""paho:my/foo/bar?brokerurl=tcp://iot.eclipse.org:1883"").log(""temp update ${body}"") .convertbodyto(string.class).to(""milo-server:myitem""); creating simple item data log anything get written opc ua write call (""milo-server:myitem"").log(""myitem: ${body}""); creating item take write command forward mqtt topic (""milo-server:myitem2"").log(""myitem2: ${body}"").convertbodyto(string.class) .to(""paho:de/dentrassi/camel/milo/temperature?brokerurl=tcp://iot.eclipse.org:1883""); -read output previous route mqtt local logging (""paho:de/dentrassi/camel/milo/temperature?brokerurl=tcp://iot.eclipse.org:1883"") .log(""back mqtt ${body}""); start context .start(); sleep (true) thread .sleep(long.max_value);",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cbb45a03b62f84179bfa0c9459c595698%40git.apache.org%3E,2017-04-19 12:31:03,commits,410.0,camel git commit clean example application
195,299,299,246.0,224.0,asfgit,github user asfgit closed pull request project set reply email reply appear github well project feature enabled wish feature enabled working please contact infrastructure infrastructure @apache.org file jira ticket infra,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170419123117.C3A25DFBB7%40git1-us-west.apache.org%3E,2017-04-19 12:31:17,mail,224.0,[github] camel pull request clean example application
196,300,300,241.0,211.0,Thomas Weinschenk,hi tried update spring boot web service example .5.2.release fails camel -swagger-java place caused org .springframework.beans.beaninstantiationexception: failed instantiate [javax.validation.validator]: factory method 'jsr303validator' threw exception nested exception java .lang.noclassdeffounderror: could initialize class org .hibernate.validator.internal.engine.configurationimpl org .springframework.beans.factory.support.simpleinstantiationstrategy.instantiate(simpleinstantiationstrategy.java:189) org .springframework.beans.factory.support.constructorresolver.instantiateusingfactorymethod(constructorresolver.java:588) caused java .lang.noclassdeffounderror: could initialize class org .hibernate.validator.internal.engine.configurationimpl org .hibernate.validator.hibernatevalidator.creategenericconfiguration(hibernatevalidator.java:33) javax .validation.validation$genericbootstrapimpl.configure(validation.java:276) org .springframework.boot.validation.messageinterpolatorfactory.getobject(messageinterpolatorfactory.java:53) exclude camel -swagger-java dependency work seems camel -swagger-java includes jsr303 validation cause problem spring boot us hibernate -validator .3.4.final (jsr might cause failure expert bean validation idea solve issue regard thomas view message context sent camel user mailing list archive nabble .com.,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492604855885-5797920.post%40n5.nabble.com%3E,2017-04-19 12:27:35,users,212.0,spring boot fails camel -swagger-java place
197,301,301,242.0,212.0,Claus Ibsen,camel version use wed apr pm thomas weinschenk <thomas.weinschenk@infoserve.endress.com> wrote hi tried update spring boot web service example .5.2.release fails camel -swagger-java place caused org .springframework.beans.beaninstantiationexception: failed instantiate [javax.validation.validator]: factory method 'jsr303validator' threw exception nested exception java .lang.noclassdeffounderror: could initialize class org .hibernate.validator.internal.engine.configurationimpl org .springframework.beans.factory.support.simpleinstantiationstrategy.instantiate(simpleinstantiationstrategy.java:189) org .springframework.beans.factory.support.constructorresolver.instantiateusingfactorymethod(constructorresolver.java:588) caused java .lang.noclassdeffounderror: could initialize class org .hibernate.validator.internal.engine.configurationimpl org .hibernate.validator.hibernatevalidator.creategenericconfiguration(hibernatevalidator.java:33) javax .validation.validation$genericbootstrapimpl.configure(validation.java:276) org .springframework.boot.validation.messageinterpolatorfactory.getobject(messageinterpolatorfactory.java:53) exclude camel -swagger-java dependency work seems camel -swagger-java includes jsr303 validation cause problem spring boot us hibernate -validator .3.4.final (jsr might cause failure expert bean validation idea solve issue regard thomas view message context sent camel user mailing list archive nabble .com. claus ibsen @davsclaus camel action,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yNmRaOEs3y%2BoEja9V_OAM3pzPZVz2cV1NB6t-sip1oJdxg%40mail.gmail.com%3E,2017-04-19 12:29:00,users,213.0,spring boot fails camel -swagger-java place
198,302,302,244.0,213.0,Thomas Weinschenk,right forgot mention version view message context sent camel user mailing list archive nabble .com.,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492605059042-5797923.post%40n5.nabble.com%3E,2017-04-19 12:30:59,users,214.0,spring boot fails camel -swagger-java place
199,303,303,247.0,216.0,Zoran Regvart,"hi thomas exception quoted noclassdeffounderror look log first exception might related perhaps classnotfoundexception preceeding 't need jsr validation turn setting `javax.persistence.validation.mode` `none`, zoran wed apr pm thomas weinschenk <thomas.weinschenk@infoserve.endress.com> wrote hi tried update spring boot web service example .5.2.release fails camel -swagger-java place caused org .springframework.beans.beaninstantiationexception: failed instantiate [javax.validation.validator]: factory method 'jsr303validator' threw exception nested exception java .lang.noclassdeffounderror: could initialize class org .hibernate.validator.internal.engine.configurationimpl org .springframework.beans.factory.support.simpleinstantiationstrategy.instantiate(simpleinstantiationstrategy.java:189) org .springframework.beans.factory.support.constructorresolver.instantiateusingfactorymethod(constructorresolver.java:588) caused java .lang.noclassdeffounderror: could initialize class org .hibernate.validator.internal.engine.configurationimpl org .hibernate.validator.hibernatevalidator.creategenericconfiguration(hibernatevalidator.java:33) javax .validation.validation$genericbootstrapimpl.configure(validation.java:276) org .springframework.boot.validation.messageinterpolatorfactory.getobject(messageinterpolatorfactory.java:53) exclude camel -swagger-java dependency work seems camel -swagger-java includes jsr303 validation cause problem spring boot us hibernate -validator .3.4.final (jsr might cause failure expert bean validation idea solve issue regard thomas view message context sent camel user mailing list archive nabble .com. zoran regvart",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCABD_Zr8C3y7Zn_kGomKOJimCpfTjj24HJyPGqR3pZ87MjH1tnA%40mail.gmail.com%3E,2017-04-19 12:35:40,users,217.0,spring boot fails camel -swagger-java place
200,304,304,248.0,217.0,Thomas Weinschenk,hi zoran put validation mode setting property pom application .yml environment variable tried three still get error log ouptut related failure exception encountered context initialization cancelling refresh attempt org .springframework.beans.factory.unsatisfieddependencyexception: error creating bean name 'methodvalidationpostprocessor' defined class path resource [org/springframework/boot/autoconfigure/validation/validationautoconfiguration.class]: unsatisfied dependency expressed method 'methodvalidationpostprocessor' parameter nested exception org .springframework.beans.factory.beancreationexception: error creating bean name 'jsr303validator' defined class path resource [org/springframework/boot/autoconfigure/validation/validationautoconfiguration.class]: bean instantiation via factory method failed nested exception org .springframework.beans.beaninstantiationexception: failed instantiate [javax.validation.validator]: factory method 'jsr303validator' threw exception nested exception java .lang.noclassdeffounderror: could initialize class org .hibernate.validator.internal.engine.configurationimpl really verbose ...the complete stack trace info main ationconfigembeddedwebapplicationcontext refreshing org .springframework.boot.context.embedded.annotationconfigembeddedwebapplicationcontext@6e083721: startup date [wed apr cest root context hierarchy warn main ationconfigembeddedwebapplicationcontext exception encountered context initialization cancelling refresh attempt org .springframework.beans.factory.unsatisfieddependencyexception: error creating bean name 'methodvalidationpostprocessor' defined class path resource [org/springframework/boot/autoconfigure/validation/validationautoconfiguration.class]: unsatisfied dependency expressed method 'methodvalidationpostprocessor' parameter nested exception org .springframework.beans.factory.beancreationexception: error creating bean name 'jsr303validator' defined class path resource [org/springframework/boot/autoconfigure/validation/validationautoconfiguration.class]: bean instantiation via factory method failed nested exception org .springframework.beans.beaninstantiationexception: failed instantiate [javax.validation.validator]: factory method 'jsr303validator' threw exception nested exception java .lang.noclassdeffounderror: could initialize class org .hibernate.validator.internal.engine.configurationimpl error main .s.b.f.s.defaultlistablebeanfactory destroy method bean name 'org.springframework.boot.context.properties.configurationpropertiesbindingpostprocessor' threw exception java .lang.illegalstateexception: applicationeventmulticaster initialized call 'refresh' multicasting event via context org .springframework.boot.context.embedded.annotationconfigembeddedwebapplicationcontext@6e083721: startup date [wed apr cest root context hierarchy org .springframework.context.support.abstractapplicationcontext.getapplicationeventmulticaster(abstractapplicationcontext.java:404) [spring-context-4.3.7.release.jar:4.3.7.release] org .springframework.context.support.applicationlistenerdetector.postprocessbeforedestruction(applicationlistenerdetector.java:97) ~[spring-context-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.disposablebeanadapter.destroy(disposablebeanadapter.java:253) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.defaultsingletonbeanregistry.destroybean(defaultsingletonbeanregistry.java:578) [spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.defaultsingletonbeanregistry.destroysingleton(defaultsingletonbeanregistry.java:554) [spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.defaultlistablebeanfactory.destroysingleton(defaultlistablebeanfactory.java:961) [spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.defaultsingletonbeanregistry.destroysingletons(defaultsingletonbeanregistry.java:523) [spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.defaultlistablebeanfactory.destroysingletons(defaultlistablebeanfactory.java:968) [spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.context.support.abstractapplicationcontext.destroybeans(abstractapplicationcontext.java:1033) [spring-context-4.3.7.release.jar:4.3.7.release] org .springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:555) [spring-context-4.3.7.release.jar:4.3.7.release] org .springframework.boot.context.embedded.embeddedwebapplicationcontext.refresh(embeddedwebapplicationcontext.java:122) [spring-boot-1.5.2.release.jar:1.5.2.release] org .springframework.boot.springapplication.refresh(springapplication.java:737) [spring-boot-1.5.2.release.jar:1.5.2.release] org .springframework.boot.springapplication.refreshcontext(springapplication.java:370) [spring-boot-1.5.2.release.jar:1.5.2.release] org .springframework.boot.springapplication.run(springapplication.java:314) [spring-boot-1.5.2.release.jar:1.5.2.release] org .springframework.boot.springapplication.run(springapplication.java:1162) [spring-boot-1.5.2.release.jar:1.5.2.release] org .springframework.boot.springapplication.run(springapplication.java:1151) [spring-boot-1.5.2.release.jar:1.5.2.release] sample .camel.application.main(application.java:19) [classes/:na] sun .reflect.nativemethodaccessorimpl.invoke0(native method ~[na:1.8.0_112] sun .reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:62) ~[na:1.8.0_112] sun .reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) ~[na:1.8.0_112] java .lang.reflect.method.invoke(method.java:498) ~[na:1.8.0_112] org .springframework.boot.maven.abstractrunmojo$launchrunner.run(abstractrunmojo.java:527) [spring-boot-maven-plugin-1.5.2.release.jar:1.5.2.release] java .lang.thread.run(thread.java:745) [na:1.8.0_112] error main .s.b.f.s.defaultlistablebeanfactory destroy method bean name 'org.springframework.boot.autoconfigure.internalcachingmetadatareaderfactory' threw exception java .lang.illegalstateexception: applicationeventmulticaster initialized call 'refresh' multicasting event via context org .springframework.boot.context.embedded.annotationconfigembeddedwebapplicationcontext@6e083721: startup date [wed apr cest root context hierarchy org .springframework.context.support.abstractapplicationcontext.getapplicationeventmulticaster(abstractapplicationcontext.java:404) [spring-context-4.3.7.release.jar:4.3.7.release] org .springframework.context.support.applicationlistenerdetector.postprocessbeforedestruction(applicationlistenerdetector.java:97) ~[spring-context-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.disposablebeanadapter.destroy(disposablebeanadapter.java:253) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.defaultsingletonbeanregistry.destroybean(defaultsingletonbeanregistry.java:578) [spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.defaultsingletonbeanregistry.destroysingleton(defaultsingletonbeanregistry.java:554) [spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.defaultlistablebeanfactory.destroysingleton(defaultlistablebeanfactory.java:961) [spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.defaultsingletonbeanregistry.destroysingletons(defaultsingletonbeanregistry.java:523) [spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.defaultlistablebeanfactory.destroysingletons(defaultlistablebeanfactory.java:968) [spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.context.support.abstractapplicationcontext.destroybeans(abstractapplicationcontext.java:1033) [spring-context-4.3.7.release.jar:4.3.7.release] org .springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:555) [spring-context-4.3.7.release.jar:4.3.7.release] org .springframework.boot.context.embedded.embeddedwebapplicationcontext.refresh(embeddedwebapplicationcontext.java:122) [spring-boot-1.5.2.release.jar:1.5.2.release] org .springframework.boot.springapplication.refresh(springapplication.java:737) [spring-boot-1.5.2.release.jar:1.5.2.release] org .springframework.boot.springapplication.refreshcontext(springapplication.java:370) [spring-boot-1.5.2.release.jar:1.5.2.release] org .springframework.boot.springapplication.run(springapplication.java:314) [spring-boot-1.5.2.release.jar:1.5.2.release] org .springframework.boot.springapplication.run(springapplication.java:1162) [spring-boot-1.5.2.release.jar:1.5.2.release] org .springframework.boot.springapplication.run(springapplication.java:1151) [spring-boot-1.5.2.release.jar:1.5.2.release] sample .camel.application.main(application.java:19) [classes/:na] sun .reflect.nativemethodaccessorimpl.invoke0(native method ~[na:1.8.0_112] sun .reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:62) ~[na:1.8.0_112] sun .reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) ~[na:1.8.0_112] java .lang.reflect.method.invoke(method.java:498) ~[na:1.8.0_112] org .springframework.boot.maven.abstractrunmojo$launchrunner.run(abstractrunmojo.java:527) [spring-boot-maven-plugin-1.5.2.release.jar:1.5.2.release] java .lang.thread.run(thread.java:745) [na:1.8.0_112] error main .s.boot.springapplication application startup failed org .springframework.beans.factory.unsatisfieddependencyexception: error creating bean name 'methodvalidationpostprocessor' defined class path resource [org/springframework/boot/autoconfigure/validation/validationautoconfiguration.class]: unsatisfied dependency expressed method 'methodvalidationpostprocessor' parameter nested exception org .springframework.beans.factory.beancreationexception: error creating bean name 'jsr303validator' defined class path resource [org/springframework/boot/autoconfigure/validation/validationautoconfiguration.class]: bean instantiation via factory method failed nested exception org .springframework.beans.beaninstantiationexception: failed instantiate [javax.validation.validator]: factory method 'jsr303validator' threw exception nested exception java .lang.noclassdeffounderror: could initialize class org .hibernate.validator.internal.engine.configurationimpl org .springframework.beans.factory.support.constructorresolver.createargumentarray(constructorresolver.java:749) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.constructorresolver.instantiateusingfactorymethod(constructorresolver.java:467) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.abstractautowirecapablebeanfactory.instantiateusingfactorymethod(abstractautowirecapablebeanfactory.java:1173) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbeaninstance(abstractautowirecapablebeanfactory.java:1067) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.abstractautowirecapablebeanfactory.docreatebean(abstractautowirecapablebeanfactory.java:513) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbean(abstractautowirecapablebeanfactory.java:483) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.abstractbeanfactory$1.getobject(abstractbeanfactory.java:306) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.defaultsingletonbeanregistry.getsingleton(defaultsingletonbeanregistry.java:230) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.abstractbeanfactory.dogetbean(abstractbeanfactory.java:302) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.abstractbeanfactory.getbean(abstractbeanfactory.java:202) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.context.support.postprocessorregistrationdelegate.registerbeanpostprocessors(postprocessorregistrationdelegate.java:223) ~[spring-context-4.3.7.release.jar:4.3.7.release] org .springframework.context.support.abstractapplicationcontext.registerbeanpostprocessors(abstractapplicationcontext.java:702) ~[spring-context-4.3.7.release.jar:4.3.7.release] org .springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:527) ~[spring-context-4.3.7.release.jar:4.3.7.release] org .springframework.boot.context.embedded.embeddedwebapplicationcontext.refresh(embeddedwebapplicationcontext.java:122) ~[spring-boot-1.5.2.release.jar:1.5.2.release] org .springframework.boot.springapplication.refresh(springapplication.java:737) [spring-boot-1.5.2.release.jar:1.5.2.release] org .springframework.boot.springapplication.refreshcontext(springapplication.java:370) [spring-boot-1.5.2.release.jar:1.5.2.release] org .springframework.boot.springapplication.run(springapplication.java:314) [spring-boot-1.5.2.release.jar:1.5.2.release] org .springframework.boot.springapplication.run(springapplication.java:1162) [spring-boot-1.5.2.release.jar:1.5.2.release] org .springframework.boot.springapplication.run(springapplication.java:1151) [spring-boot-1.5.2.release.jar:1.5.2.release] sample .camel.application.main(application.java:19) [classes/:na] sun .reflect.nativemethodaccessorimpl.invoke0(native method ~[na:1.8.0_112] sun .reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:62) ~[na:1.8.0_112] sun .reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) ~[na:1.8.0_112] java .lang.reflect.method.invoke(method.java:498) ~[na:1.8.0_112] org .springframework.boot.maven.abstractrunmojo$launchrunner.run(abstractrunmojo.java:527) [spring-boot-maven-plugin-1.5.2.release.jar:1.5.2.release] java .lang.thread.run(thread.java:745) [na:1.8.0_112] caused org .springframework.beans.factory.beancreationexception: error creating bean name 'jsr303validator' defined class path resource [org/springframework/boot/autoconfigure/validation/validationautoconfiguration.class]: bean instantiation via factory method failed nested exception org .springframework.beans.beaninstantiationexception: failed instantiate [javax.validation.validator]: factory method 'jsr303validator' threw exception nested exception java .lang.noclassdeffounderror: could initialize class org .hibernate.validator.internal.engine.configurationimpl org .springframework.beans.factory.support.constructorresolver.instantiateusingfactorymethod(constructorresolver.java:599) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.abstractautowirecapablebeanfactory.instantiateusingfactorymethod(abstractautowirecapablebeanfactory.java:1173) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbeaninstance(abstractautowirecapablebeanfactory.java:1067) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.abstractautowirecapablebeanfactory.docreatebean(abstractautowirecapablebeanfactory.java:513) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbean(abstractautowirecapablebeanfactory.java:483) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.abstractbeanfactory$1.getobject(abstractbeanfactory.java:306) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.defaultsingletonbeanregistry.getsingleton(defaultsingletonbeanregistry.java:230) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.abstractbeanfactory.dogetbean(abstractbeanfactory.java:302) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.abstractbeanfactory.getbean(abstractbeanfactory.java:202) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.config.dependencydescriptor.resolvecandidate(dependencydescriptor.java:208) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.defaultlistablebeanfactory.doresolvedependency(defaultlistablebeanfactory.java:1138) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.defaultlistablebeanfactory.resolvedependency(defaultlistablebeanfactory.java:1066) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.constructorresolver.resolveautowiredargument(constructorresolver.java:835) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.constructorresolver.createargumentarray(constructorresolver.java:741) ~[spring-beans-4.3.7.release.jar:4.3.7.release] common frame omitted caused org .springframework.beans.beaninstantiationexception: failed instantiate [javax.validation.validator]: factory method 'jsr303validator' threw exception nested exception java .lang.noclassdeffounderror: could initialize class org .hibernate.validator.internal.engine.configurationimpl org .springframework.beans.factory.support.simpleinstantiationstrategy.instantiate(simpleinstantiationstrategy.java:189) ~[spring-beans-4.3.7.release.jar:4.3.7.release] org .springframework.beans.factory.support.constructorresolver.instantiateusingfactorymethod(constructorresolver.java:588) ~[spring-beans-4.3.7.release.jar:4.3.7.release] common frame omitted caused java .lang.noclassdeffounderror: could initialize class org .hibernate.validator.internal.engine.configurationimpl org .hibernate.validator.hibernatevalidator.creategenericconfiguration(hibernatevalidator.java:33) ~[hibernate-validator-5.3.4.final.jar:5.3.4.final] javax .validation.validation$genericbootstrapimpl.configure(validation.java:276) ~[validation-api-1.1.0.final.jar:na] org .springframework.boot.validation.messageinterpolatorfactory.getobject(messageinterpolatorfactory.java:53) ~[spring-boot-1.5.2.release.jar:1.5.2.release] org .springframework.boot.autoconfigure.validation.validationautoconfiguration.jsr303validator(validationautoconfiguration.java:52) ~[spring-boot-autoconfigure-1.5.2.release.jar:1.5.2.release] sun .reflect.nativemethodaccessorimpl.invoke0(native method ~[na:1.8.0_112] sun .reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:62) ~[na:1.8.0_112] sun .reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) ~[na:1.8.0_112] java .lang.reflect.method.invoke(method.java:498) ~[na:1.8.0_112] org .springframework.beans.factory.support.simpleinstantiationstrategy.instantiate(simpleinstantiationstrategy.java:162) ~[spring-beans-4.3.7.release.jar:4.3.7.release] common frame omitted [warning] java .lang.reflect.invocationtargetexception sun .reflect.nativemethodaccessorimpl.invoke0(native method sun .reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:62) sun .reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java .lang.reflect.method.invoke(method.java:498) org .springframework.boot.maven.abstractrunmojo$launchrunner.run(abstractrunmojo.java:527) java .lang.thread.run(thread.java:745) caused org .springframework.beans.factory.unsatisfieddependencyexception: error creating bean name 'methodvalidationpostprocessor' defined class path resource [org/springframework/boot/autoconfigure/validation/validationautoconfiguration.class]: unsatisfied dependency expressed method 'methodvalidationpostprocessor' parameter nested exception org .springframework.beans.factory.beancreationexception: error creating bean name 'jsr303validator' defined class path resource [org/springframework/boot/autoconfigure/validation/validationautoconfiguration.class]: bean instantiation via factory method failed nested exception org .springframework.beans.beaninstantiationexception: failed instantiate [javax.validation.validator]: factory method 'jsr303validator' threw exception nested exception java .lang.noclassdeffounderror: could initialize class org .hibernate.validator.internal.engine.configurationimpl org .springframework.beans.factory.support.constructorresolver.createargumentarray(constructorresolver.java:749) org .springframework.beans.factory.support.constructorresolver.instantiateusingfactorymethod(constructorresolver.java:467) org .springframework.beans.factory.support.abstractautowirecapablebeanfactory.instantiateusingfactorymethod(abstractautowirecapablebeanfactory.java:1173) org .springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbeaninstance(abstractautowirecapablebeanfactory.java:1067) org .springframework.beans.factory.support.abstractautowirecapablebeanfactory.docreatebean(abstractautowirecapablebeanfactory.java:513) org .springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbean(abstractautowirecapablebeanfactory.java:483) org .springframework.beans.factory.support.abstractbeanfactory$1.getobject(abstractbeanfactory.java:306) org .springframework.beans.factory.support.defaultsingletonbeanregistry.getsingleton(defaultsingletonbeanregistry.java:230) org .springframework.beans.factory.support.abstractbeanfactory.dogetbean(abstractbeanfactory.java:302) org .springframework.beans.factory.support.abstractbeanfactory.getbean(abstractbeanfactory.java:202) org .springframework.context.support.postprocessorregistrationdelegate.registerbeanpostprocessors(postprocessorregistrationdelegate.java:223) org .springframework.context.support.abstractapplicationcontext.registerbeanpostprocessors(abstractapplicationcontext.java:702) org .springframework.context.support.abstractapplicationcontext.refresh(abstractapplicationcontext.java:527) org .springframework.boot.context.embedded.embeddedwebapplicationcontext.refresh(embeddedwebapplicationcontext.java:122) org .springframework.boot.springapplication.refresh(springapplication.java:737) org .springframework.boot.springapplication.refreshcontext(springapplication.java:370) org .springframework.boot.springapplication.run(springapplication.java:314) org .springframework.boot.springapplication.run(springapplication.java:1162) org .springframework.boot.springapplication.run(springapplication.java:1151) sample .camel.application.main(application.java:19) caused org .springframework.beans.factory.beancreationexception: error creating bean name 'jsr303validator' defined class path resource [org/springframework/boot/autoconfigure/validation/validationautoconfiguration.class]: bean instantiation via factory method failed nested exception org .springframework.beans.beaninstantiationexception: failed instantiate [javax.validation.validator]: factory method 'jsr303validator' threw exception nested exception java .lang.noclassdeffounderror: could initialize class org .hibernate.validator.internal.engine.configurationimpl org .springframework.beans.factory.support.constructorresolver.instantiateusingfactorymethod(constructorresolver.java:599) org .springframework.beans.factory.support.abstractautowirecapablebeanfactory.instantiateusingfactorymethod(abstractautowirecapablebeanfactory.java:1173) org .springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbeaninstance(abstractautowirecapablebeanfactory.java:1067) org .springframework.beans.factory.support.abstractautowirecapablebeanfactory.docreatebean(abstractautowirecapablebeanfactory.java:513) org .springframework.beans.factory.support.abstractautowirecapablebeanfactory.createbean(abstractautowirecapablebeanfactory.java:483) org .springframework.beans.factory.support.abstractbeanfactory$1.getobject(abstractbeanfactory.java:306) org .springframework.beans.factory.support.defaultsingletonbeanregistry.getsingleton(defaultsingletonbeanregistry.java:230) org .springframework.beans.factory.support.abstractbeanfactory.dogetbean(abstractbeanfactory.java:302) org .springframework.beans.factory.support.abstractbeanfactory.getbean(abstractbeanfactory.java:202) org .springframework.beans.factory.config.dependencydescriptor.resolvecandidate(dependencydescriptor.java:208) org .springframework.beans.factory.support.defaultlistablebeanfactory.doresolvedependency(defaultlistablebeanfactory.java:1138) org .springframework.beans.factory.support.defaultlistablebeanfactory.resolvedependency(defaultlistablebeanfactory.java:1066) org .springframework.beans.factory.support.constructorresolver.resolveautowiredargument(constructorresolver.java:835) org .springframework.beans.factory.support.constructorresolver.createargumentarray(constructorresolver.java:741) caused org .springframework.beans.beaninstantiationexception: failed instantiate [javax.validation.validator]: factory method 'jsr303validator' threw exception nested exception java .lang.noclassdeffounderror: could initialize class org .hibernate.validator.internal.engine.configurationimpl org .springframework.beans.factory.support.simpleinstantiationstrategy.instantiate(simpleinstantiationstrategy.java:189) org .springframework.beans.factory.support.constructorresolver.instantiateusingfactorymethod(constructorresolver.java:588) caused java .lang.noclassdeffounderror: could initialize class org .hibernate.validator.internal.engine.configurationimpl org .hibernate.validator.hibernatevalidator.creategenericconfiguration(hibernatevalidator.java:33) javax .validation.validation$genericbootstrapimpl.configure(validation.java:276) org .springframework.boot.validation.messageinterpolatorfactory.getobject(messageinterpolatorfactory.java:53) org .springframework.boot.autoconfigure.validation.validationautoconfiguration.jsr303validator(validationautoconfiguration.java:52) sun .reflect.nativemethodaccessorimpl.invoke0(native method sun .reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:62) sun .reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) java .lang.reflect.method.invoke(method.java:498) org .springframework.beans.factory.support.simpleinstantiationstrategy.instantiate(simpleinstantiationstrategy.java:162) view message context sent camel user mailing list archive nabble .com.,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492607304155-5797927.post%40n5.nabble.com%3E,2017-04-19 13:08:24,users,218.0,spring boot fails camel -swagger-java place
201,305,305,249.0,214.0,Claus Ibsen,ticket related swagger -java-starter hibernate -validate dependency .18.x need additional dependency besides hibernate -validator? wed apr pm thomas weinschenk <thomas.weinschenk@solutions.endress.com> wrote right forgot mention version view message context sent camel user mailing list archive nabble .com. claus ibsen @davsclaus camel action,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yN%3DYijbdMGNv1tL1YhCpoQn4aE9QyahmsEdzcFy02C1r%2Bg%40mail.gmail.com%3E,2017-04-19 13:27:36,users,215.0,spring boot fails camel -swagger-java place
202,306,306,250.0,167.0,Zoran Regvart,"hi cameleers quick reminder offer help 're interested 't time negotiate taping date let know contact show host arrange something think would super awesome could arrange slot late june early july coincide year anniversary camel release follow show quite regularly help note typical question host inquire (i 't think put front others camel much longer non -native english speaker would best someone else took mantle thank sorry prodding zoran thu apr zoran regvart <zoran@regvart.com> wrote hi cameleers 'm big fan floss weekly podcast twit network would really cool camel would featured one episode air tuesday utc way get show contact randal merlyn @stonehenge.com, list upcoming guest slot need filling anyone zoran zoran regvart zoran regvart",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3CCABD_Zr87rhzR0DrckzdqcfnP6aRepJw9Yv%3DvACw261h8fu8TLA%40mail.gmail.com%3E,2017-04-19 13:27:37,mail,167.0,floss weekly podcast
