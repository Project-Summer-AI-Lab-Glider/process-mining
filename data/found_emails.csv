,Unnamed: 0,Email_ID,Unnamed: 0.1,author,content,content_url,date,dtype,id,subject
0,0,1.0,221.0,lburgazz...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 55a61ed20 -&gt; d72696455&#010;&#010;&#010;HeaderSelectorProducer to support suppliers for header key and default value&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/d7269645&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/d7269645&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/d7269645&#010;&#010;Branch: refs/heads/master&#010;Commit: d7269645508cfd36b716547dab2f2da3ebe364ae&#010;Parents: 55a61ed&#010;Author: lburgazzoli &lt;lburgazzoli@gmail.com&gt;&#010;Authored: Fri Apr 14 12:42:05 2017 +0200&#010;Committer: lburgazzoli &lt;lburgazzoli@gmail.com&gt;&#010;Committed: Fri Apr 14 12:42:33 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../java/org/apache/camel/impl/HeaderSelectorProducer.java    | 7 ++++++-&#010; 1 file changed, 6 insertions(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d7269645/camel-core/src/main/java/org/apache/camel/impl/HeaderSelectorProducer.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/impl/HeaderSelectorProducer.java b/camel-core/src/main/java/org/apache/camel/impl/HeaderSelectorProducer.java&#010;index f91f032..7d4b11e 100644&#010;--- a/camel-core/src/main/java/org/apache/camel/impl/HeaderSelectorProducer.java&#010;+++ b/camel-core/src/main/java/org/apache/camel/impl/HeaderSelectorProducer.java&#010;@@ -48,6 +48,7 @@ public class HeaderSelectorProducer extends BaseSelectorProducer {&#010;     public HeaderSelectorProducer(Endpoint endpoint, Supplier&lt;String&gt; headerSupplier)&#010;{&#010;         this(endpoint, headerSupplier, () -&gt; null, null);&#010;     }&#010;+&#010;     public HeaderSelectorProducer(Endpoint endpoint, String header) {&#010;         this(endpoint, () -&gt; header, () -&gt; null, null);&#010;     }&#010;@@ -64,6 +65,10 @@ public class HeaderSelectorProducer extends BaseSelectorProducer {&#010;         this(endpoint, () -&gt; header, () -&gt; defaultHeaderValue, null);&#010;     }&#010; &#010;+    public HeaderSelectorProducer(Endpoint endpoint, String header, Supplier&lt;String&gt;&#010;defaultHeaderValueSupplier) {&#010;+        this(endpoint, () -&gt; header, defaultHeaderValueSupplier, null);&#010;+    }&#010;+&#010;     public HeaderSelectorProducer(Endpoint endpoint, Supplier&lt;String&gt; headerSupplier,&#010;Supplier&lt;String&gt; defaultHeaderValueSupplier) {&#010;         this(endpoint, headerSupplier, defaultHeaderValueSupplier, null);&#010;     }&#010;@@ -102,7 +107,7 @@ public class HeaderSelectorProducer extends BaseSelectorProducer {&#010;     @Override&#010;     protected Processor getProcessor(Exchange exchange) throws Exception {&#010;         String header = headerSupplier.get();&#010;-        String action = exchange.getIn().getHeader(headerSupplier.get(), String.class);&#010;+        String action = exchange.getIn().getHeader(header, String.class);&#010; &#010;         if (action == null) {&#010;             action = defaultHeaderValueSupplier.get();&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C9d2d740f77794180b53412948340828f%40git.apache.org%3E,2017-04-14 10:42:39,commits,221.0,  camel git commit: HeaderSelectorProducer to support suppliers for header key and default value
1,1,2.0,322.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master d72696455 -&gt; 6b42a3534&#010;&#010;&#010;Rename catalog to runtimecatalog to avoid clash with same package name in camel-catalog.&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/6b42a353&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/6b42a353&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/6b42a353&#010;&#010;Branch: refs/heads/master&#010;Commit: 6b42a3534120f58180e6194e6bf4f1a284707abc&#010;Parents: c66be7a&#010;Author: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Authored: Fri Apr 14 12:17:14 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:52:40 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; platforms/camel-catalog/pom.xml | 40 ++++++++++++++++++++++++++++++++++--&#010; 1 file changed, 38 insertions(+), 2 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/6b42a353/platforms/camel-catalog/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/camel-catalog/pom.xml b/platforms/camel-catalog/pom.xml&#010;index 2be82e0..6c71fcb 100644&#010;--- a/platforms/camel-catalog/pom.xml&#010;+++ b/platforms/camel-catalog/pom.xml&#010;@@ -92,7 +92,7 @@&#010;         &lt;executions&gt;&#010;           &lt;execution&gt;&#010;             &lt;id&gt;copy-resources&lt;/id&gt;&#010;-            &lt;phase&gt;process-sources&lt;/phase&gt;&#010;+            &lt;phase&gt;generate-sources&lt;/phase&gt;&#010;             &lt;goals&gt;&#010;               &lt;goal&gt;copy-resources&lt;/goal&gt;&#010;             &lt;/goals&gt;&#010;@@ -101,7 +101,7 @@&#010;               &lt;overwrite&gt;true&lt;/overwrite&gt;&#010;               &lt;resources&gt;&#010;                 &lt;resource&gt;&#010;-                  &lt;directory&gt;../../camel-core/src/main/java/org/apache/camel/catalog&lt;/directory&gt;&#010;+                  &lt;directory&gt;../../camel-core/src/main/java/org/apache/camel/runtimecatalog&lt;/directory&gt;&#010;                   &lt;!-- the following files are maintained in camel-core and not here,&#010;so they are copied over --&gt;&#010;                   &lt;includes&gt;&#010;                     &lt;include&gt;AbstractCamelCatalog.java&lt;/include&gt;&#010;@@ -123,6 +123,42 @@&#010;           &lt;/execution&gt;&#010;         &lt;/executions&gt;&#010;       &lt;/plugin&gt;&#010;+      &lt;!-- rename runtimecatalog to catalog which is the package name we use here --&gt;&#010;+      &lt;plugin&gt;&#010;+        &lt;groupId&gt;com.google.code.maven-replacer-plugin&lt;/groupId&gt;&#010;+        &lt;artifactId&gt;replacer&lt;/artifactId&gt;&#010;+        &lt;version&gt;1.5.3&lt;/version&gt;&#010;+        &lt;executions&gt;&#010;+          &lt;execution&gt;&#010;+            &lt;phase&gt;process-sources&lt;/phase&gt;&#010;+            &lt;goals&gt;&#010;+              &lt;goal&gt;replace&lt;/goal&gt;&#010;+            &lt;/goals&gt;&#010;+          &lt;/execution&gt;&#010;+        &lt;/executions&gt;&#010;+        &lt;configuration&gt;&#010;+          &lt;includes&gt;&#010;+            &lt;include&gt;${basedir}/src/main/java/org/apache/camel/catalog/AbstractCamelCatalog.java&lt;/include&gt;&#010;+            &lt;include&gt;${basedir}/src/main/java/org/apache/camel/catalog/CatalogHelper.java&lt;/include&gt;&#010;+            &lt;include&gt;${basedir}/src/main/java/org/apache/camel/catalog/CollectionStringBuffer.java&lt;/include&gt;&#010;+            &lt;include&gt;${basedir}/src/main/java/org/apache/camel/catalog/EndpointValidationResult.java&lt;/include&gt;&#010;+            &lt;include&gt;${basedir}/src/main/java/org/apache/camel/catalog/JSonSchemaHelper.java&lt;/include&gt;&#010;+            &lt;include&gt;${basedir}/src/main/java/org/apache/camel/catalog/JSonSchemaResolver.java&lt;/include&gt;&#010;+            &lt;include&gt;${basedir}/src/main/java/org/apache/camel/catalog/LanguageValidationResult.java&lt;/include&gt;&#010;+            &lt;include&gt;${basedir}/src/main/java/org/apache/camel/catalog/SimpleValidationResult.java&lt;/include&gt;&#010;+            &lt;include&gt;${basedir}/src/main/java/org/apache/camel/catalog/SuggestionStrategy.java&lt;/include&gt;&#010;+            &lt;include&gt;${basedir}/src/main/java/org/apache/camel/catalog/TimePatternConverter.java&lt;/include&gt;&#010;+            &lt;include&gt;${basedir}/src/main/java/org/apache/camel/catalog/UnsafeUriCharactersEncoder.java&lt;/include&gt;&#010;+            &lt;include&gt;${basedir}/src/main/java/org/apache/camel/catalog/URISupport.java&lt;/include&gt;&#010;+          &lt;/includes&gt;&#010;+          &lt;replacements&gt;&#010;+            &lt;replacement&gt;&#010;+              &lt;token&gt;org.apache.camel.runtimecatalog&lt;/token&gt;&#010;+              &lt;value&gt;org.apache.camel.catalog&lt;/value&gt;&#010;+            &lt;/replacement&gt;&#010;+          &lt;/replacements&gt;&#010;+        &lt;/configuration&gt;&#010;+      &lt;/plugin&gt;&#010; &#010;       &lt;!-- generate and include all components in the catalog --&gt;&#010;       &lt;plugin&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cde5de0a2e2ca40e6bcaa03835723a40e%40git.apache.org%3E,2017-04-14 10:52:55,commits,322.0,[1/6] camel git commit: Rename catalog to runtimecatalog to avoid clash with same package name in camel-catalog.
2,2,3.0,323.0,davscl...@apache.org,"http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/test/java/org/apache/camel/runtimecatalog/AbstractCamelCatalogTest.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/test/java/org/apache/camel/runtimecatalog/AbstractCamelCatalogTest.java&#010;b/camel-core/src/test/java/org/apache/camel/runtimecatalog/AbstractCamelCatalogTest.java&#010;new file mode 100644&#010;index 0000000..309fb8e&#010;--- /dev/null&#010;+++ b/camel-core/src/test/java/org/apache/camel/runtimecatalog/AbstractCamelCatalogTest.java&#010;@@ -0,0 +1,104 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.runtimecatalog;&#010;+&#010;+import java.net.URISyntaxException;&#010;+import java.util.HashMap;&#010;+import java.util.Map;&#010;+&#010;+import org.junit.Before;&#010;+import org.junit.Test;&#010;+&#010;+import static org.easymock.EasyMock.expect;&#010;+import static org.easymock.EasyMock.mock;&#010;+import static org.easymock.EasyMock.replay;&#010;+import static org.junit.Assert.assertEquals;&#010;+&#010;+public class AbstractCamelCatalogTest {&#010;+&#010;+    AbstractCamelCatalog catalog = new AbstractCamelCatalog() {&#010;+    };&#010;+&#010;+    JSonSchemaResolver resolver;&#010;+&#010;+    @Before&#010;+    public void setupMockCatalog() {&#010;+        resolver = mock(JSonSchemaResolver.class);&#010;+&#010;+        catalog.setJSonSchemaResolver(resolver);&#010;+    }&#010;+&#010;+    @Test&#010;+    public void shouldConstructEndpointUris() throws URISyntaxException {&#010;+        expect(resolver.getComponentJSonSchema(""comp"")).andReturn(""{\n""//&#010;+            + ""  \""component\"": {\n""//&#010;+            + ""    \""syntax\"": \""comp:param1:param2\""\n""//&#010;+            + ""  }\n""//&#010;+            + ""}"");&#010;+&#010;+        replay(resolver);&#010;+&#010;+        final Map&lt;String, String&gt; properties = new HashMap&lt;&gt;();&#010;+        properties.put(""param1"", ""value1"");&#010;+        properties.put(""param2"", ""value2"");&#010;+        properties.put(""param3"", ""value3"");&#010;+&#010;+        final String endpointUri = catalog.doAsEndpointUri(""comp"", properties, ""&amp;"", false);&#010;+&#010;+        assertEquals(""comp:value1:value2?param3=value3"", endpointUri);&#010;+    }&#010;+&#010;+    @Test&#010;+    public void shouldConstructEndpointUrisWithPropertyPlaceholders() throws URISyntaxException&#010;{&#010;+        expect(resolver.getComponentJSonSchema(""comp"")).andReturn(""{\n""//&#010;+            + ""  \""component\"": {\n""//&#010;+            + ""    \""syntax\"": \""comp:param1:param2\""\n""//&#010;+            + ""  }\n""//&#010;+            + ""}"");&#010;+&#010;+        replay(resolver);&#010;+&#010;+        final Map&lt;String, String&gt; properties = new HashMap&lt;&gt;();&#010;+        properties.put(""param1"", ""{{prop1}}"");&#010;+        properties.put(""param2"", ""{{prop2}}"");&#010;+        properties.put(""param3"", ""{{prop3}}"");&#010;+&#010;+        final String endpointUri = catalog.doAsEndpointUri(""comp"", properties, ""&amp;"", false);&#010;+&#010;+        assertEquals(""comp:{{prop1}}:{{prop2}}?param3={{prop3}}"", endpointUri);&#010;+    }&#010;+&#010;+    @Test&#010;+    public void shouldConstructEndpointUrisWhenValuesContainTokens() throws URISyntaxException&#010;{&#010;+        expect(resolver.getComponentJSonSchema(""comp"")).andReturn(""{\n""//&#010;+            + ""  \""component\"": {\n""//&#010;+            + ""    \""syntax\"": \""comp:param1:param2\""\n""//&#010;+            + ""  }\n""//&#010;+            + ""}"");&#010;+&#010;+        replay(resolver);&#010;+&#010;+        final Map&lt;String, String&gt; properties = new HashMap&lt;&gt;();&#010;+        properties.put(""param1"", ""{value1}"");&#010;+        properties.put(""param2"", ""/value2/"");&#010;+        properties.put(""param3"", ""/value3/{param}"");&#010;+&#010;+        final String endpointUri = catalog.doAsEndpointUri(""comp"", properties, ""&amp;"", false);&#010;+&#010;+        assertEquals(""comp:{value1}:/value2/?param3=/value3/{param}"", endpointUri);&#010;+    }&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/test/java/org/apache/camel/runtimecatalog/RuntimeCamelCatalogTest.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/test/java/org/apache/camel/runtimecatalog/RuntimeCamelCatalogTest.java&#010;b/camel-core/src/test/java/org/apache/camel/runtimecatalog/RuntimeCamelCatalogTest.java&#010;new file mode 100644&#010;index 0000000..dfdd5c5&#010;--- /dev/null&#010;+++ b/camel-core/src/test/java/org/apache/camel/runtimecatalog/RuntimeCamelCatalogTest.java&#010;@@ -0,0 +1,393 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.runtimecatalog;&#010;+&#010;+import java.util.HashMap;&#010;+import java.util.Map;&#010;+&#010;+import org.apache.camel.impl.DefaultCamelContext;&#010;+import org.junit.BeforeClass;&#010;+import org.junit.Test;&#010;+import org.slf4j.Logger;&#010;+import org.slf4j.LoggerFactory;&#010;+&#010;+import static org.junit.Assert.assertEquals;&#010;+import static org.junit.Assert.assertFalse;&#010;+import static org.junit.Assert.assertNotNull;&#010;+import static org.junit.Assert.assertTrue;&#010;+&#010;+public class RuntimeCamelCatalogTest {&#010;+&#010;+    static RuntimeCamelCatalog catalog;&#010;+&#010;+    private static final Logger LOG = LoggerFactory.getLogger(RuntimeCamelCatalogTest.class);&#010;+&#010;+    @BeforeClass&#010;+    public static void createCamelCatalog() {&#010;+        catalog = new DefaultRuntimeCamelCatalog(new DefaultCamelContext());&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testFromCamelContext() throws Exception {&#010;+        String schema = new DefaultCamelContext().getRuntimeCamelCatalog().modelJSonSchema(""choice"");&#010;+        assertNotNull(schema);&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testJsonSchema() throws Exception {&#010;+        String schema = catalog.modelJSonSchema(""aggregate"");&#010;+        assertNotNull(schema);&#010;+&#010;+        // lets make it possible to find bean/method using both names&#010;+        schema = catalog.modelJSonSchema(""method"");&#010;+        assertNotNull(schema);&#010;+        schema = catalog.modelJSonSchema(""bean"");&#010;+        assertNotNull(schema);&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testAsEndpointUriMapFile() throws Exception {&#010;+        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();&#010;+        map.put(""directoryName"", ""src/data/inbox"");&#010;+        map.put(""noop"", ""true"");&#010;+        map.put(""delay"", ""5000"");&#010;+&#010;+        String uri = catalog.asEndpointUri(""file"", map, true);&#010;+        assertEquals(""file:src/data/inbox?delay=5000&amp;noop=true"", uri);&#010;+&#010;+        String uri2 = catalog.asEndpointUriXml(""file"", map, true);&#010;+        assertEquals(""file:src/data/inbox?delay=5000&amp;amp;noop=true"", uri2);&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testAsEndpointUriTimer() throws Exception {&#010;+        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();&#010;+        map.put(""timerName"", ""foo"");&#010;+        map.put(""period"", ""5000"");&#010;+&#010;+        String uri = catalog.asEndpointUri(""timer"", map, true);&#010;+        assertEquals(""timer:foo?period=5000"", uri);&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testAsEndpointUriPropertiesPlaceholders() throws Exception {&#010;+        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();&#010;+        map.put(""timerName"", ""foo"");&#010;+        map.put(""period"", ""{{howoften}}"");&#010;+        map.put(""repeatCount"", ""5"");&#010;+&#010;+        String uri = catalog.asEndpointUri(""timer"", map, true);&#010;+        assertEquals(""timer:foo?period=%7B%7Bhowoften%7D%7D&amp;repeatCount=5"", uri);&#010;+&#010;+        uri = catalog.asEndpointUri(""timer"", map, false);&#010;+        assertEquals(""timer:foo?period={{howoften}}&amp;repeatCount=5"", uri);&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testAsEndpointUriBeanLookup() throws Exception {&#010;+        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();&#010;+        map.put(""resourceUri"", ""foo.xslt"");&#010;+        map.put(""converter"", ""#myConverter"");&#010;+&#010;+        String uri = catalog.asEndpointUri(""xslt"", map, true);&#010;+        assertEquals(""xslt:foo.xslt?converter=%23myConverter"", uri);&#010;+&#010;+        uri = catalog.asEndpointUri(""xslt"", map, false);&#010;+        assertEquals(""xslt:foo.xslt?converter=#myConverter"", uri);&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testEndpointPropertiesPlaceholders() throws Exception {&#010;+        Map&lt;String, String&gt; map = catalog.endpointProperties(""timer:foo?period={{howoften}}&amp;repeatCount=5"");&#010;+        assertNotNull(map);&#010;+        assertEquals(3, map.size());&#010;+&#010;+        assertEquals(""foo"", map.get(""timerName""));&#010;+        assertEquals(""{{howoften}}"", map.get(""period""));&#010;+        assertEquals(""5"", map.get(""repeatCount""));&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testAsEndpointUriLog() throws Exception {&#010;+        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();&#010;+        map.put(""loggerName"", ""foo"");&#010;+        map.put(""loggerLevel"", ""WARN"");&#010;+        map.put(""multiline"", ""true"");&#010;+        map.put(""showAll"", ""true"");&#010;+        map.put(""showBody"", ""false"");&#010;+        map.put(""showBodyType"", ""false"");&#010;+        map.put(""showExchangePattern"", ""false"");&#010;+        map.put(""style"", ""Tab"");&#010;+&#010;+        assertEquals(""log:foo?loggerLevel=WARN&amp;multiline=true&amp;showAll=true&amp;style=Tab"",&#010;catalog.asEndpointUri(""log"", map, false));&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testAsEndpointUriLogShort() throws Exception {&#010;+        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();&#010;+        map.put(""loggerName"", ""foo"");&#010;+        map.put(""loggerLevel"", ""DEBUG"");&#010;+&#010;+        assertEquals(""log:foo?loggerLevel=DEBUG"", catalog.asEndpointUri(""log"", map, false));&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testAsEndpointUriWithplaceholder() throws Exception {&#010;+        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();&#010;+        map.put(""name"", ""foo"");&#010;+        map.put(""blockWhenFull"", ""{{block}}"");&#010;+        assertEquals(""seda:foo?blockWhenFull={{block}}"", catalog.asEndpointUri(""seda"", map,&#010;false));&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testEndpointPropertiesSedaRequired() throws Exception {&#010;+        Map&lt;String, String&gt; map = catalog.endpointProperties(""seda:foo"");&#010;+        assertNotNull(map);&#010;+        assertEquals(1, map.size());&#010;+&#010;+        assertEquals(""foo"", map.get(""name""));&#010;+&#010;+        map = catalog.endpointProperties(""seda:foo?blockWhenFull=true"");&#010;+        assertNotNull(map);&#010;+        assertEquals(2, map.size());&#010;+&#010;+        assertEquals(""foo"", map.get(""name""));&#010;+        assertEquals(""true"", map.get(""blockWhenFull""));&#010;+    }&#010;+&#010;+    @Test&#010;+    public void validateProperties() throws Exception {&#010;+        // valid&#010;+        EndpointValidationResult result = catalog.validateEndpointProperties(""log:mylog"");&#010;+        assertTrue(result.isSuccess());&#010;+&#010;+        // unknown&#010;+        result = catalog.validateEndpointProperties(""log:mylog?level=WARN&amp;foo=bar"");&#010;+        assertFalse(result.isSuccess());&#010;+        assertTrue(result.getUnknown().contains(""foo""));&#010;+        assertEquals(1, result.getNumberOfErrors());&#010;+&#010;+        // enum&#010;+        result = catalog.validateEndpointProperties(""seda:foo?waitForTaskToComplete=blah"");&#010;+        assertFalse(result.isSuccess());&#010;+        assertEquals(""blah"", result.getInvalidEnum().get(""waitForTaskToComplete""));&#010;+        assertEquals(1, result.getNumberOfErrors());&#010;+&#010;+        // reference okay&#010;+        result = catalog.validateEndpointProperties(""seda:foo?queue=#queue"");&#010;+        assertTrue(result.isSuccess());&#010;+        assertEquals(0, result.getNumberOfErrors());&#010;+&#010;+        // unknown component&#010;+        result = catalog.validateEndpointProperties(""foo:bar?me=you"");&#010;+        assertFalse(result.isSuccess());&#010;+        assertTrue(result.getUnknownComponent().equals(""foo""));&#010;+        assertEquals(1, result.getNumberOfErrors());&#010;+&#010;+        // invalid boolean but default value&#010;+        result = catalog.validateEndpointProperties(""log:output?showAll=ggg"");&#010;+        assertFalse(result.isSuccess());&#010;+        assertEquals(""ggg"", result.getInvalidBoolean().get(""showAll""));&#010;+        assertEquals(1, result.getNumberOfErrors());&#010;+&#010;+        // dataset&#010;+        result = catalog.validateEndpointProperties(""dataset:foo?minRate=50"");&#010;+        assertTrue(result.isSuccess());&#010;+&#010;+        // time pattern&#010;+        result = catalog.validateEndpointProperties(""timer://foo?fixedRate=true&amp;delay=0&amp;period=2s"");&#010;+        assertTrue(result.isSuccess());&#010;+&#010;+        // reference lookup&#010;+        result = catalog.validateEndpointProperties(""timer://foo?fixedRate=#fixed&amp;delay=#myDelay"");&#010;+        assertTrue(result.isSuccess());&#010;+&#010;+        // optional consumer. prefix&#010;+        result = catalog.validateEndpointProperties(""file:inbox?consumer.delay=5000&amp;consumer.greedy=true"");&#010;+        assertTrue(result.isSuccess());&#010;+&#010;+        // optional without consumer. prefix&#010;+        result = catalog.validateEndpointProperties(""file:inbox?delay=5000&amp;greedy=true"");&#010;+        assertTrue(result.isSuccess());&#010;+&#010;+        // mixed optional without consumer. prefix&#010;+        result = catalog.validateEndpointProperties(""file:inbox?delay=5000&amp;consumer.greedy=true"");&#010;+        assertTrue(result.isSuccess());&#010;+&#010;+        // prefix&#010;+        result = catalog.validateEndpointProperties(""file:inbox?delay=5000&amp;scheduler.foo=123&amp;scheduler.bar=456"");&#010;+        assertTrue(result.isSuccess());&#010;+&#010;+        // stub&#010;+        result = catalog.validateEndpointProperties(""stub:foo?me=123&amp;you=456"");&#010;+        assertTrue(result.isSuccess());&#010;+&#010;+        // lenient on&#010;+        result = catalog.validateEndpointProperties(""dataformat:string:marshal?foo=bar"");&#010;+        assertTrue(result.isSuccess());&#010;+&#010;+        // lenient off&#010;+        result = catalog.validateEndpointProperties(""dataformat:string:marshal?foo=bar"",&#010;true);&#010;+        assertFalse(result.isSuccess());&#010;+        assertTrue(result.getUnknown().contains(""foo""));&#010;+&#010;+        // data format&#010;+        result = catalog.validateEndpointProperties(""dataformat:string:marshal?charset=utf-8"",&#010;true);&#010;+        assertTrue(result.isSuccess());&#010;+&#010;+        // incapable to parse&#010;+        result = catalog.validateEndpointProperties(""{{getFtpUrl}}?recursive=true"");&#010;+        assertFalse(result.isSuccess());&#010;+        assertTrue(result.getIncapable() != null);&#010;+    }&#010;+&#010;+    @Test&#010;+    public void validatePropertiesSummary() throws Exception {&#010;+        EndpointValidationResult result = catalog.validateEndpointProperties(""yammer:MESSAGES?blah=yada&amp;accessToken=aaa&amp;consumerKey=&amp;useJson=no&amp;initialDelay=five&amp;pollStrategy=myStrategy"");&#010;+        assertFalse(result.isSuccess());&#010;+        String reason = result.summaryErrorMessage(true);&#010;+        LOG.info(reason);&#010;+&#010;+        result = catalog.validateEndpointProperties(""jms:unknown:myqueue"");&#010;+        assertFalse(result.isSuccess());&#010;+        reason = result.summaryErrorMessage(false);&#010;+        LOG.info(reason);&#010;+    }&#010;+&#010;+    @Test&#010;+    public void validateTimePattern() throws Exception {&#010;+        assertTrue(catalog.validateTimePattern(""0""));&#010;+        assertTrue(catalog.validateTimePattern(""500""));&#010;+        assertTrue(catalog.validateTimePattern(""10000""));&#010;+        assertTrue(catalog.validateTimePattern(""5s""));&#010;+        assertTrue(catalog.validateTimePattern(""5sec""));&#010;+        assertTrue(catalog.validateTimePattern(""5secs""));&#010;+        assertTrue(catalog.validateTimePattern(""3m""));&#010;+        assertTrue(catalog.validateTimePattern(""3min""));&#010;+        assertTrue(catalog.validateTimePattern(""3minutes""));&#010;+        assertTrue(catalog.validateTimePattern(""5m15s""));&#010;+        assertTrue(catalog.validateTimePattern(""1h""));&#010;+        assertTrue(catalog.validateTimePattern(""1hour""));&#010;+        assertTrue(catalog.validateTimePattern(""2hours""));&#010;+&#010;+        assertFalse(catalog.validateTimePattern(""bla""));&#010;+        assertFalse(catalog.validateTimePattern(""2year""));&#010;+        assertFalse(catalog.validateTimePattern(""60darn""));&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testEndpointComponentName() throws Exception {&#010;+        String name = catalog.endpointComponentName(""jms:queue:foo"");&#010;+        assertEquals(""jms"", name);&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testSimpleExpression() throws Exception {&#010;+        SimpleValidationResult result = catalog.validateSimpleExpression(null, ""${body}"");&#010;+        assertTrue(result.isSuccess());&#010;+        assertEquals(""${body}"", result.getSimple());&#010;+&#010;+        result = catalog.validateSimpleExpression(null, ""${body"");&#010;+        assertFalse(result.isSuccess());&#010;+        assertEquals(""${body"", result.getSimple());&#010;+        LOG.info(result.getError());&#010;+        assertTrue(result.getError().startsWith(""expected symbol functionEnd but was eol&#010;at location 5""));&#010;+        assertEquals(""expected symbol functionEnd but was eol"", result.getShortError());&#010;+        assertEquals(5, result.getIndex());&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testSimplePredicate() throws Exception {&#010;+        SimpleValidationResult result = catalog.validateSimplePredicate(null, ""${body} ==&#010;'abc'"");&#010;+        assertTrue(result.isSuccess());&#010;+        assertEquals(""${body} == 'abc'"", result.getSimple());&#010;+&#010;+        result = catalog.validateSimplePredicate(null, ""${body} &gt; ${header.size"");&#010;+        assertFalse(result.isSuccess());&#010;+        assertEquals(""${body} &gt; ${header.size"", result.getSimple());&#010;+        LOG.info(result.getError());&#010;+        assertTrue(result.getError().startsWith(""expected symbol functionEnd but was eol&#010;at location 22""));&#010;+        assertEquals(""expected symbol functionEnd but was eol"", result.getShortError());&#010;+        assertEquals(22, result.getIndex());&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testSimplePredicatePlaceholder() throws Exception {&#010;+        SimpleValidationResult result = catalog.validateSimplePredicate(null, ""${body} contains&#010;'{{danger}}'"");&#010;+        assertTrue(result.isSuccess());&#010;+        assertEquals(""${body} contains '{{danger}}'"", result.getSimple());&#010;+&#010;+        result = catalog.validateSimplePredicate(null, ""${bdy} contains '{{danger}}'"");&#010;+        assertFalse(result.isSuccess());&#010;+        assertEquals(""${bdy} contains '{{danger}}'"", result.getSimple());&#010;+        LOG.info(result.getError());&#010;+        assertTrue(result.getError().startsWith(""Unknown function: bdy at location 0""));&#010;+        assertTrue(result.getError().contains(""'{{danger}}'""));&#010;+        assertEquals(""Unknown function: bdy"", result.getShortError());&#010;+        assertEquals(0, result.getIndex());&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testValidateLanguage() throws Exception {&#010;+        LanguageValidationResult result = catalog.validateLanguageExpression(null, ""simple"",&#010;""${body}"");&#010;+        assertTrue(result.isSuccess());&#010;+        assertEquals(""${body}"", result.getText());&#010;+&#010;+        result = catalog.validateLanguageExpression(null, ""header"", ""foo"");&#010;+        assertTrue(result.isSuccess());&#010;+        assertEquals(""foo"", result.getText());&#010;+&#010;+        result = catalog.validateLanguagePredicate(null, ""simple"", ""${body} &gt; 10"");&#010;+        assertTrue(result.isSuccess());&#010;+        assertEquals(""${body} &gt; 10"", result.getText());&#010;+&#010;+        result = catalog.validateLanguagePredicate(null, ""header"", ""bar"");&#010;+        assertTrue(result.isSuccess());&#010;+        assertEquals(""bar"", result.getText());&#010;+&#010;+        result = catalog.validateLanguagePredicate(null, ""foobar"", ""bar"");&#010;+        assertFalse(result.isSuccess());&#010;+        assertEquals(""Unknown language foobar"", result.getError());&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testValidateEndpointConsumerOnly() throws Exception {&#010;+        String uri = ""file:inbox?bufferSize=4096&amp;readLock=changed&amp;delete=true"";&#010;+        EndpointValidationResult result = catalog.validateEndpointProperties(uri, false,&#010;true, false);&#010;+        assertTrue(result.isSuccess());&#010;+&#010;+        uri = ""file:inbox?bufferSize=4096&amp;readLock=changed&amp;delete=true&amp;fileExist=Append"";&#010;+        result = catalog.validateEndpointProperties(uri, false, true, false);&#010;+        assertFalse(result.isSuccess());&#010;+&#010;+        assertEquals(""fileExist"", result.getNotConsumerOnly().iterator().next());&#010;+    }&#010;+&#010;+    @Test&#010;+    public void testValidateEndpointProducerOnly() throws Exception {&#010;+        String uri = ""file:outbox?bufferSize=4096&amp;fileExist=Append"";&#010;+        EndpointValidationResult result = catalog.validateEndpointProperties(uri, false,&#010;false, true);&#010;+        assertTrue(result.isSuccess());&#010;+&#010;+        uri = ""file:outbox?bufferSize=4096&amp;fileExist=Append&amp;delete=true"";&#010;+        result = catalog.validateEndpointProperties(uri, false, false, true);&#010;+        assertFalse(result.isSuccess());&#010;+&#010;+        assertEquals(""delete"", result.getNotProducerOnly().iterator().next());&#010;+    }&#010;+&#010;+}&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C9e3f964e77d045cf840b002cc3565efe%40git.apache.org%3E,2017-04-14 10:52:56,commits,323.0,  [2/6] camel git commit: Rename catalog to runtimecatalog to avoid clash with same package name in camel-catalog.
3,3,4.0,324.0,davscl...@apache.org,"http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/runtimecatalog/JSonSchemaHelper.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/runtimecatalog/JSonSchemaHelper.java b/camel-core/src/main/java/org/apache/camel/runtimecatalog/JSonSchemaHelper.java&#010;new file mode 100644&#010;index 0000000..1e69269&#010;--- /dev/null&#010;+++ b/camel-core/src/main/java/org/apache/camel/runtimecatalog/JSonSchemaHelper.java&#010;@@ -0,0 +1,424 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.runtimecatalog;&#010;+&#010;+import java.util.ArrayList;&#010;+import java.util.LinkedHashMap;&#010;+import java.util.LinkedHashSet;&#010;+import java.util.List;&#010;+import java.util.Map;&#010;+import java.util.Set;&#010;+import java.util.regex.Matcher;&#010;+import java.util.regex.Pattern;&#010;+&#010;+public final class JSonSchemaHelper {&#010;+&#010;+    // 0 = text, 1 = enum, 2 = boolean, 3 = integer or number&#010;+    private static final Pattern PATTERN = Pattern.compile(""\""(.+?)\""|\\[(.+)\\]|(true|false)|(-?\\d+\\.?\\d*)"");&#010;+    private static final String QUOT = ""&amp;quot;"";&#010;+&#010;+    private JSonSchemaHelper() {&#010;+    }&#010;+&#010;+    /**&#010;+     * Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata&#010;+     *&#010;+     * @param group the group to parse from such as &lt;tt&gt;component&lt;/tt&gt;, &lt;tt&gt;componentProperties&lt;/tt&gt;, or &lt;tt&gt;properties&lt;/tt&gt;.&#010;+     * @param json the json&#010;+     * @return a list of all the rows, where each row is a set of key value pairs with metadata&#010;+     */&#010;+    public static List&lt;Map&lt;String, String&gt;&gt; parseJsonSchema(String group, String json, boolean parseProperties) {&#010;+        List&lt;Map&lt;String, String&gt;&gt; answer = new ArrayList&lt;Map&lt;String, String&gt;&gt;();&#010;+        if (json == null) {&#010;+            return answer;&#010;+        }&#010;+&#010;+        boolean found = false;&#010;+&#010;+        // parse line by line&#010;+        String[] lines = json.split(""\n"");&#010;+        for (String line : lines) {&#010;+            // we need to find the group first&#010;+            if (!found) {&#010;+                String s = line.trim();&#010;+                found = s.startsWith(""\"""" + group + ""\"":"") &amp;&amp; s.endsWith(""{"");&#010;+                continue;&#010;+            }&#010;+&#010;+            // we should stop when we end the group&#010;+            if (line.equals(""  },"") || line.equals(""  }"")) {&#010;+                break;&#010;+            }&#010;+&#010;+            // need to safe encode \"" so we can parse the line&#010;+            line = line.replaceAll(""\""\\\\\""\"""", '""' + QUOT + '""');&#010;+&#010;+            Map&lt;String, String&gt; row = new LinkedHashMap&lt;String, String&gt;();&#010;+            Matcher matcher = PATTERN.matcher(line);&#010;+&#010;+            String key;&#010;+            if (parseProperties) {&#010;+                // when parsing properties the first key is given as name, so the first parsed token is the value of the name&#010;+                key = ""name"";&#010;+            } else {&#010;+                key = null;&#010;+            }&#010;+            while (matcher.find()) {&#010;+                if (key == null) {&#010;+                    key = matcher.group(1);&#010;+                } else {&#010;+                    String value = matcher.group(1);&#010;+                    if (value != null) {&#010;+                        // its text based&#010;+                        value = value.trim();&#010;+                        // decode&#010;+                        value = value.replaceAll(QUOT, ""\"""");&#010;+                        value = decodeJson(value);&#010;+                    }&#010;+                    if (value == null) {&#010;+                        // not text then its maybe an enum?&#010;+                        value = matcher.group(2);&#010;+                        if (value != null) {&#010;+                            // its an enum so strip out "" and trim spaces after comma&#010;+                            value = value.replaceAll(""\"""", """");&#010;+                            value = value.replaceAll("", "", "","");&#010;+                            value = value.trim();&#010;+                        }&#010;+                    }&#010;+                    if (value == null) {&#010;+                        // not text then its maybe a boolean?&#010;+                        value = matcher.group(3);&#010;+                    }&#010;+                    if (value == null) {&#010;+                        // not text then its maybe a integer?&#010;+                        value = matcher.group(4);&#010;+                    }&#010;+                    if (value != null) {&#010;+                        row.put(key, value);&#010;+                    }&#010;+                    // reset&#010;+                    key = null;&#010;+                }&#010;+            }&#010;+            if (!row.isEmpty()) {&#010;+                answer.add(row);&#010;+            }&#010;+        }&#010;+&#010;+        return answer;&#010;+    }&#010;+&#010;+    private static String decodeJson(String value) {&#010;+        // json encodes a \ as \\ so we need to decode from \\ back to \&#010;+        if (""\\\\"".equals(value)) {&#010;+            value = ""\\"";&#010;+        }&#010;+        return value;&#010;+    }&#010;+&#010;+    public static boolean isComponentLenientProperties(List&lt;Map&lt;String, String&gt;&gt; rows) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            if (row.containsKey(""lenientProperties"")) {&#010;+                return ""true"".equals(row.get(""lenientProperties""));&#010;+            }&#010;+        }&#010;+        return false;&#010;+    }&#010;+&#010;+    public static boolean isComponentConsumerOnly(List&lt;Map&lt;String, String&gt;&gt; rows) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            if (row.containsKey(""consumerOnly"")) {&#010;+                return ""true"".equals(row.get(""consumerOnly""));&#010;+            }&#010;+        }&#010;+        return false;&#010;+    }&#010;+&#010;+    public static boolean isComponentProducerOnly(List&lt;Map&lt;String, String&gt;&gt; rows) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            if (row.containsKey(""producerOnly"")) {&#010;+                return ""true"".equals(row.get(""producerOnly""));&#010;+            }&#010;+        }&#010;+        return false;&#010;+    }&#010;+&#010;+    public static boolean isPropertyConsumerOnly(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            String labels = null;&#010;+            boolean found = false;&#010;+            if (row.containsKey(""name"")) {&#010;+                found = name.equals(row.get(""name""));&#010;+            }&#010;+            if (row.containsKey(""label"")) {&#010;+                labels = row.get(""label"");&#010;+            }&#010;+            if (found) {&#010;+                return labels != null &amp;&amp; labels.contains(""consumer"");&#010;+            }&#010;+        }&#010;+        return false;&#010;+    }&#010;+&#010;+    public static boolean isPropertyProducerOnly(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            String labels = null;&#010;+            boolean found = false;&#010;+            if (row.containsKey(""name"")) {&#010;+                found = name.equals(row.get(""name""));&#010;+            }&#010;+            if (row.containsKey(""label"")) {&#010;+                labels = row.get(""label"");&#010;+            }&#010;+            if (found) {&#010;+                return labels != null &amp;&amp; labels.contains(""producer"");&#010;+            }&#010;+        }&#010;+        return false;&#010;+    }&#010;+&#010;+    public static boolean isPropertyRequired(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            boolean required = false;&#010;+            boolean found = false;&#010;+            if (row.containsKey(""name"")) {&#010;+                found = name.equals(row.get(""name""));&#010;+            }&#010;+            if (row.containsKey(""required"")) {&#010;+                required = ""true"".equals(row.get(""required""));&#010;+            }&#010;+            if (found) {&#010;+                return required;&#010;+            }&#010;+        }&#010;+        return false;&#010;+    }&#010;+&#010;+    public static String getPropertyKind(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            String kind = null;&#010;+            boolean found = false;&#010;+            if (row.containsKey(""name"")) {&#010;+                found = name.equals(row.get(""name""));&#010;+            }&#010;+            if (row.containsKey(""kind"")) {&#010;+                kind = row.get(""kind"");&#010;+            }&#010;+            if (found) {&#010;+                return kind;&#010;+            }&#010;+        }&#010;+        return null;&#010;+    }&#010;+&#010;+    public static boolean isPropertyBoolean(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            String type = null;&#010;+            boolean found = false;&#010;+            if (row.containsKey(""name"")) {&#010;+                found = name.equals(row.get(""name""));&#010;+            }&#010;+            if (row.containsKey(""type"")) {&#010;+                type = row.get(""type"");&#010;+            }&#010;+            if (found) {&#010;+                return ""boolean"".equals(type);&#010;+            }&#010;+        }&#010;+        return false;&#010;+    }&#010;+&#010;+    public static boolean isPropertyInteger(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            String type = null;&#010;+            boolean found = false;&#010;+            if (row.containsKey(""name"")) {&#010;+                found = name.equals(row.get(""name""));&#010;+            }&#010;+            if (row.containsKey(""type"")) {&#010;+                type = row.get(""type"");&#010;+            }&#010;+            if (found) {&#010;+                return ""integer"".equals(type);&#010;+            }&#010;+        }&#010;+        return false;&#010;+    }&#010;+&#010;+    public static boolean isPropertyNumber(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            String type = null;&#010;+            boolean found = false;&#010;+            if (row.containsKey(""name"")) {&#010;+                found = name.equals(row.get(""name""));&#010;+            }&#010;+            if (row.containsKey(""type"")) {&#010;+                type = row.get(""type"");&#010;+            }&#010;+            if (found) {&#010;+                return ""number"".equals(type);&#010;+            }&#010;+        }&#010;+        return false;&#010;+    }&#010;+&#010;+    public static boolean isPropertyObject(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            String type = null;&#010;+            boolean found = false;&#010;+            if (row.containsKey(""name"")) {&#010;+                found = name.equals(row.get(""name""));&#010;+            }&#010;+            if (row.containsKey(""type"")) {&#010;+                type = row.get(""type"");&#010;+            }&#010;+            if (found) {&#010;+                return ""object"".equals(type);&#010;+            }&#010;+        }&#010;+        return false;&#010;+    }&#010;+&#010;+    public static String getPropertyDefaultValue(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            String defaultValue = null;&#010;+            boolean found = false;&#010;+            if (row.containsKey(""name"")) {&#010;+                found = name.equals(row.get(""name""));&#010;+            }&#010;+            if (row.containsKey(""defaultValue"")) {&#010;+                defaultValue = row.get(""defaultValue"");&#010;+            }&#010;+            if (found) {&#010;+                return defaultValue;&#010;+            }&#010;+        }&#010;+        return null;&#010;+    }&#010;+&#010;+    public static String stripOptionalPrefixFromName(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            String optionalPrefix = null;&#010;+            boolean found = false;&#010;+            if (row.containsKey(""optionalPrefix"")) {&#010;+                optionalPrefix = row.get(""optionalPrefix"");&#010;+            }&#010;+            if (row.containsKey(""name"")) {&#010;+                if (optionalPrefix != null &amp;&amp; name.startsWith(optionalPrefix)) {&#010;+                    name = name.substring(optionalPrefix.length());&#010;+                    // try again&#010;+                    return stripOptionalPrefixFromName(rows, name);&#010;+                } else {&#010;+                    found = name.equals(row.get(""name""));&#010;+                }&#010;+            }&#010;+            if (found) {&#010;+                return name;&#010;+            }&#010;+        }&#010;+        return name;&#010;+    }&#010;+&#010;+    public static String getPropertyEnum(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            String enums = null;&#010;+            boolean found = false;&#010;+            if (row.containsKey(""name"")) {&#010;+                found = name.equals(row.get(""name""));&#010;+            }&#010;+            if (row.containsKey(""enum"")) {&#010;+                enums = row.get(""enum"");&#010;+            }&#010;+            if (found) {&#010;+                return enums;&#010;+            }&#010;+        }&#010;+        return null;&#010;+    }&#010;+&#010;+    public static String getPropertyPrefix(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            String prefix = null;&#010;+            boolean found = false;&#010;+            if (row.containsKey(""name"")) {&#010;+                found = name.equals(row.get(""name""));&#010;+            }&#010;+            if (row.containsKey(""prefix"")) {&#010;+                prefix = row.get(""prefix"");&#010;+            }&#010;+            if (found) {&#010;+                return prefix;&#010;+            }&#010;+        }&#010;+        return null;&#010;+    }&#010;+&#010;+    public static boolean isPropertyMultiValue(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            boolean multiValue = false;&#010;+            boolean found = false;&#010;+            if (row.containsKey(""name"")) {&#010;+                found = name.equals(row.get(""name""));&#010;+            }&#010;+            if (row.containsKey(""multiValue"")) {&#010;+                multiValue = ""true"".equals(row.get(""multiValue""));&#010;+            }&#010;+            if (found) {&#010;+                return multiValue;&#010;+            }&#010;+        }&#010;+        return false;&#010;+    }&#010;+&#010;+    public static String getPropertyNameFromNameWithPrefix(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            String propertyName = null;&#010;+            boolean found = false;&#010;+            if (row.containsKey(""name"")) {&#010;+                propertyName = row.get(""name"");&#010;+            }&#010;+            if (row.containsKey(""prefix"")) {&#010;+                String preifx = row.get(""prefix"");&#010;+                found = name.startsWith(preifx);&#010;+            }&#010;+            if (found) {&#010;+                return propertyName;&#010;+            }&#010;+        }&#010;+        return null;&#010;+    }&#010;+&#010;+    public static Map&lt;String, String&gt; getRow(List&lt;Map&lt;String, String&gt;&gt; rows, String key) {&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            if (key.equals(row.get(""name""))) {&#010;+                return row;&#010;+            }&#010;+        }&#010;+        return null;&#010;+    }&#010;+&#010;+    public static Set&lt;String&gt; getNames(List&lt;Map&lt;String, String&gt;&gt; rows) {&#010;+        Set&lt;String&gt; answer = new LinkedHashSet&lt;String&gt;();&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            if (row.containsKey(""name"")) {&#010;+                answer.add(row.get(""name""));&#010;+            }&#010;+        }&#010;+        return answer;&#010;+    }&#010;+&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/runtimecatalog/JSonSchemaResolver.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/runtimecatalog/JSonSchemaResolver.java b/camel-core/src/main/java/org/apache/camel/runtimecatalog/JSonSchemaResolver.java&#010;new file mode 100644&#010;index 0000000..dbd6f45&#010;--- /dev/null&#010;+++ b/camel-core/src/main/java/org/apache/camel/runtimecatalog/JSonSchemaResolver.java&#010;@@ -0,0 +1,64 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.runtimecatalog;&#010;+&#010;+/**&#010;+ * Pluggable resolver to load JSon schema files for components, data formats, languages etc.&#010;+ */&#010;+public interface JSonSchemaResolver {&#010;+&#010;+    /**&#010;+     * Returns the component information as JSon format.&#010;+     *&#010;+     * @param name the component name&#010;+     * @return component details in JSon&#010;+     */&#010;+    String getComponentJSonSchema(String name);&#010;+&#010;+    /**&#010;+     * Returns the data format information as JSon format.&#010;+     *&#010;+     * @param name the data format name&#010;+     * @return data format details in JSon&#010;+     */&#010;+    String getDataFormatJSonSchema(String name);&#010;+&#010;+    /**&#010;+     * Returns the language information as JSon format.&#010;+     *&#010;+     * @param name the language name&#010;+     * @return language details in JSon&#010;+     */&#010;+    String getLanguageJSonSchema(String name);&#010;+&#010;+    /**&#010;+     * Returns the other (miscellaneous) information as JSon format.&#010;+     *&#010;+     * @param name the other (miscellaneous) name&#010;+     * @return other (miscellaneous) details in JSon&#010;+     */&#010;+    String getOtherJSonSchema(String name);&#010;+&#010;+    /**&#010;+     * Returns the model information as JSon format.&#010;+     *&#010;+     * @param name the model name&#010;+     * @return model details in JSon&#010;+     */&#010;+    String getModelJSonSchema(String name);&#010;+&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/runtimecatalog/LanguageValidationResult.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/runtimecatalog/LanguageValidationResult.java b/camel-core/src/main/java/org/apache/camel/runtimecatalog/LanguageValidationResult.java&#010;new file mode 100644&#010;index 0000000..dbb5525&#010;--- /dev/null&#010;+++ b/camel-core/src/main/java/org/apache/camel/runtimecatalog/LanguageValidationResult.java&#010;@@ -0,0 +1,65 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.runtimecatalog;&#010;+&#010;+import java.io.Serializable;&#010;+&#010;+/**&#010;+ * Validation result of parsing a language expression or predicate&#010;+ */&#010;+public class LanguageValidationResult implements Serializable {&#010;+    private final String text;&#010;+    private String error;&#010;+    private String shortError;&#010;+    private int index;&#010;+&#010;+    public LanguageValidationResult(String text) {&#010;+        this.text = text;&#010;+    }&#010;+&#010;+    public String getText() {&#010;+        return text;&#010;+    }&#010;+&#010;+    public boolean isSuccess() {&#010;+        return error == null;&#010;+    }&#010;+&#010;+    public void setError(String error) {&#010;+        this.error = error;&#010;+    }&#010;+&#010;+    public String getError() {&#010;+        return error;&#010;+    }&#010;+&#010;+    public String getShortError() {&#010;+        return shortError;&#010;+    }&#010;+&#010;+    public void setShortError(String shortError) {&#010;+        this.shortError = shortError;&#010;+    }&#010;+&#010;+    public int getIndex() {&#010;+        return index;&#010;+    }&#010;+&#010;+    public void setIndex(int index) {&#010;+        this.index = index;&#010;+    }&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/runtimecatalog/RuntimeCamelCatalog.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/runtimecatalog/RuntimeCamelCatalog.java b/camel-core/src/main/java/org/apache/camel/runtimecatalog/RuntimeCamelCatalog.java&#010;new file mode 100644&#010;index 0000000..86c4b53&#010;--- /dev/null&#010;+++ b/camel-core/src/main/java/org/apache/camel/runtimecatalog/RuntimeCamelCatalog.java&#010;@@ -0,0 +1,234 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.runtimecatalog;&#010;+&#010;+import java.net.URISyntaxException;&#010;+import java.util.Map;&#010;+&#010;+import org.apache.camel.StaticService;&#010;+&#010;+/**&#010;+ * Runtime based CamelCatalog which are included in camel-core that can provided limit CamelCatalog capabilities&#010;+ */&#010;+public interface RuntimeCamelCatalog extends StaticService {&#010;+&#010;+    /**&#010;+     * Returns the component information as JSon format.&#010;+     *&#010;+     * @param name the component name&#010;+     * @return component details in JSon&#010;+     */&#010;+    String componentJSonSchema(String name);&#010;+&#010;+    /**&#010;+     * Returns the data format information as JSon format.&#010;+     *&#010;+     * @param name the data format name&#010;+     * @return data format details in JSon&#010;+     */&#010;+    String dataFormatJSonSchema(String name);&#010;+&#010;+    /**&#010;+     * Returns the language information as JSon format.&#010;+     *&#010;+     * @param name the language name&#010;+     * @return language details in JSon&#010;+     */&#010;+    String languageJSonSchema(String name);&#010;+&#010;+    /**&#010;+     * Returns the model information as JSon format.&#010;+     *&#010;+     * @param name the model name&#010;+     * @return model details in JSon&#010;+     */&#010;+    String modelJSonSchema(String name);&#010;+&#010;+    /**&#010;+     * Parses the endpoint uri and constructs a key/value properties of each option&#010;+     *&#010;+     * @param uri  the endpoint uri&#010;+     * @return properties as key value pairs of each endpoint option&#010;+     */&#010;+    Map&lt;String, String&gt; endpointProperties(String uri) throws URISyntaxException;&#010;+&#010;+    /**&#010;+     * Parses the endpoint uri and constructs a key/value properties of only the lenient properties (eg custom options)&#010;+     * &lt;p/&gt;&#010;+     * For example using the HTTP components to provide query parameters in the endpoint uri.&#010;+     *&#010;+     * @param uri  the endpoint uri&#010;+     * @return properties as key value pairs of each lenient properties&#010;+     */&#010;+    Map&lt;String, String&gt; endpointLenientProperties(String uri) throws URISyntaxException;&#010;+&#010;+    /**&#010;+     * Validates the pattern whether its a valid time pattern.&#010;+     *&#010;+     * @param pattern  the pattern such as 5000, 5s, 5sec, 4min, 4m30s, 1h, etc.&#010;+     * @return &lt;tt&gt;true&lt;/tt&gt; if valid, &lt;tt&gt;false&lt;/tt&gt; if invalid&#010;+     */&#010;+    boolean validateTimePattern(String pattern);&#010;+&#010;+    /**&#010;+     * Validates the properties for the given scheme against component and endpoint&#010;+     *&#010;+     * @param scheme  the endpoint scheme&#010;+     * @param properties  the endpoint properties&#010;+     * @return validation result&#010;+     */&#010;+    EndpointValidationResult validateProperties(String scheme, Map&lt;String, String&gt; properties);&#010;+&#010;+    /**&#010;+     * Parses and validates the endpoint uri and constructs a key/value properties of each option.&#010;+     *&#010;+     * @param uri  the endpoint uri&#010;+     * @return validation result&#010;+     */&#010;+    EndpointValidationResult validateEndpointProperties(String uri);&#010;+&#010;+    /**&#010;+     * Parses and validates the endpoint uri and constructs a key/value properties of each option.&#010;+     * &lt;p/&gt;&#010;+     * The option ignoreLenientProperties can be used to ignore components that uses lenient properties.&#010;+     * When this is true, then the uri validation is stricter but would fail on properties that are not part of the component&#010;+     * but in the uri because of using lenient properties.&#010;+     * For example using the HTTP components to provide query parameters in the endpoint uri.&#010;+     *&#010;+     * @param uri  the endpoint uri&#010;+     * @param ignoreLenientProperties  whether to ignore components that uses lenient properties.&#010;+     * @return validation result&#010;+     */&#010;+    EndpointValidationResult validateEndpointProperties(String uri, boolean ignoreLenientProperties);&#010;+&#010;+    /**&#010;+     * Parses and validates the endpoint uri and constructs a key/value properties of each option.&#010;+     * &lt;p/&gt;&#010;+     * The option ignoreLenientProperties can be used to ignore components that uses lenient properties.&#010;+     * When this is true, then the uri validation is stricter but would fail on properties that are not part of the component&#010;+     * but in the uri because of using lenient properties.&#010;+     * For example using the HTTP components to provide query parameters in the endpoint uri.&#010;+     *&#010;+     * @param uri  the endpoint uri&#010;+     * @param ignoreLenientProperties  whether to ignore components that uses lenient properties.&#010;+     * @param consumerOnly whether the endpoint is only used as a consumer&#010;+     * @param producerOnly whether the endpoint is only used as a producer&#010;+     * @return validation result&#010;+     */&#010;+    EndpointValidationResult validateEndpointProperties(String uri, boolean ignoreLenientProperties, boolean consumerOnly, boolean producerOnly);&#010;+&#010;+    /**&#010;+     * Parses and validates the simple expression.&#010;+     * &lt;p/&gt;&#010;+     * &lt;b&gt;Important:&lt;/b&gt; This requires having &lt;tt&gt;camel-core&lt;/tt&gt; on the classpath&#010;+     *&#010;+     * @param simple  the simple expression&#010;+     * @return validation result&#010;+     * @deprecated use {@link #validateSimpleExpression(ClassLoader, String)}&#010;+     */&#010;+    @Deprecated&#010;+    SimpleValidationResult validateSimpleExpression(String simple);&#010;+&#010;+    /**&#010;+     * Parses and validates the simple expression.&#010;+     * &lt;p/&gt;&#010;+     * &lt;b&gt;Important:&lt;/b&gt; This requires having &lt;tt&gt;camel-core&lt;/tt&gt; on the classpath&#010;+     *&#010;+     * @param classLoader a custom classloader to use for loading the language from the classpath, or &lt;tt&gt;null&lt;/tt&gt; for using default classloader&#010;+     * @param simple  the simple expression&#010;+     * @return validation result&#010;+     */&#010;+    SimpleValidationResult validateSimpleExpression(ClassLoader classLoader, String simple);&#010;+&#010;+    /**&#010;+     * Parses and validates the simple predicate&#010;+     * &lt;p/&gt;&#010;+     * &lt;b&gt;Important:&lt;/b&gt; This requires having &lt;tt&gt;camel-core&lt;/tt&gt; on the classpath&#010;+     *&#010;+     * @param simple  the simple predicate&#010;+     * @return validation result&#010;+     * @deprecated use {@link #validateSimplePredicate(ClassLoader, String)}&#010;+     */&#010;+    @Deprecated&#010;+    SimpleValidationResult validateSimplePredicate(String simple);&#010;+&#010;+    /**&#010;+     * Parses and validates the simple predicate&#010;+     * &lt;p/&gt;&#010;+     * &lt;b&gt;Important:&lt;/b&gt; This requires having &lt;tt&gt;camel-core&lt;/tt&gt; on the classpath&#010;+     *&#010;+     * @param classLoader a custom classloader to use for loading the language from the classpath, or &lt;tt&gt;null&lt;/tt&gt; for using default classloader&#010;+     * @param simple  the simple predicate&#010;+     * @return validation result&#010;+     */&#010;+    SimpleValidationResult validateSimplePredicate(ClassLoader classLoader, String simple);&#010;+&#010;+    /**&#010;+     * Parses and validates the language as a predicate&#010;+     * &lt;p/&gt;&#010;+     * &lt;b&gt;Important:&lt;/b&gt; This requires having &lt;tt&gt;camel-core&lt;/tt&gt; and the language dependencies on the classpath&#010;+     *&#010;+     * @param classLoader a custom classloader to use for loading the language from the classpath, or &lt;tt&gt;null&lt;/tt&gt; for using default classloader&#010;+     * @param language the name of the language&#010;+     * @param text  the predicate text&#010;+     * @return validation result&#010;+     */&#010;+    LanguageValidationResult validateLanguagePredicate(ClassLoader classLoader, String language, String text);&#010;+&#010;+    /**&#010;+     * Parses and validates the language as an expression&#010;+     * &lt;p/&gt;&#010;+     * &lt;b&gt;Important:&lt;/b&gt; This requires having &lt;tt&gt;camel-core&lt;/tt&gt; and the language dependencies on the classpath&#010;+     *&#010;+     * @param classLoader a custom classloader to use for loading the language from the classpath, or &lt;tt&gt;null&lt;/tt&gt; for using default classloader&#010;+     * @param language the name of the language&#010;+     * @param text  the expression text&#010;+     * @return validation result&#010;+     */&#010;+    LanguageValidationResult validateLanguageExpression(ClassLoader classLoader, String language, String text);&#010;+&#010;+    /**&#010;+     * Returns the component name from the given endpoint uri&#010;+     *&#010;+     * @param uri  the endpoint uri&#010;+     * @return the component name (aka scheme), or &lt;tt&gt;null&lt;/tt&gt; if not possible to determine&#010;+     */&#010;+    String endpointComponentName(String uri);&#010;+&#010;+    /**&#010;+     * Creates an endpoint uri in Java style from the information from the properties&#010;+     *&#010;+     * @param scheme the endpoint schema&#010;+     * @param properties the properties as key value pairs&#010;+     * @param encode whether to URL encode the returned uri or not&#010;+     * @return the constructed endpoint uri&#010;+     * @throws java.net.URISyntaxException is thrown if there is encoding error&#010;+     */&#010;+    String asEndpointUri(String scheme, Map&lt;String, String&gt; properties, boolean encode) throws URISyntaxException;&#010;+&#010;+    /**&#010;+     * Creates an endpoint uri in XML style (eg escape &amp; as &amp;ampl;) from the information from the properties&#010;+     *&#010;+     * @param scheme the endpoint schema&#010;+     * @param properties the properties as key value pairs&#010;+     * @param encode whether to URL encode the returned uri or not&#010;+     * @return the constructed endpoint uri&#010;+     * @throws java.net.URISyntaxException is thrown if there is encoding error&#010;+     */&#010;+    String asEndpointUriXml(String scheme, Map&lt;String, String&gt; properties, boolean encode) throws URISyntaxException;&#010;+&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/runtimecatalog/SimpleValidationResult.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/runtimecatalog/SimpleValidationResult.java b/camel-core/src/main/java/org/apache/camel/runtimecatalog/SimpleValidationResult.java&#010;new file mode 100644&#010;index 0000000..1b8dd0e&#010;--- /dev/null&#010;+++ b/camel-core/src/main/java/org/apache/camel/runtimecatalog/SimpleValidationResult.java&#010;@@ -0,0 +1,32 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.runtimecatalog;&#010;+&#010;+/**&#010;+ * To be backwards compatible, but favor using {@link LanguageValidationResult} instead.&#010;+ */&#010;+public class SimpleValidationResult extends LanguageValidationResult {&#010;+&#010;+    public SimpleValidationResult(String text) {&#010;+        super(text);&#010;+    }&#010;+&#010;+    public String getSimple() {&#010;+        return getText();&#010;+    }&#010;+&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/runtimecatalog/SuggestionStrategy.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/runtimecatalog/SuggestionStrategy.java b/camel-core/src/main/java/org/apache/camel/runtimecatalog/SuggestionStrategy.java&#010;new file mode 100644&#010;index 0000000..e29afc6&#010;--- /dev/null&#010;+++ b/camel-core/src/main/java/org/apache/camel/runtimecatalog/SuggestionStrategy.java&#010;@@ -0,0 +1,34 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.runtimecatalog;&#010;+&#010;+import java.util.Set;&#010;+&#010;+/**&#010;+ * Strategy to provide suggestions for unknown endpoint options&#010;+ */&#010;+public interface SuggestionStrategy {&#010;+&#010;+    /**&#010;+     * Provides a list of valid option names for a did you mean function.&#010;+     *&#010;+     * @param names         valid names&#010;+     * @param unknownOption unknown option name&#010;+     * @return a list of suggested names (did you mean)&#010;+     */&#010;+    String[] suggestEndpointOptions(Set&lt;String&gt; names, String unknownOption);&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/runtimecatalog/TimePatternConverter.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/runtimecatalog/TimePatternConverter.java b/camel-core/src/main/java/org/apache/camel/runtimecatalog/TimePatternConverter.java&#010;new file mode 100644&#010;index 0000000..ed5585c&#010;--- /dev/null&#010;+++ b/camel-core/src/main/java/org/apache/camel/runtimecatalog/TimePatternConverter.java&#010;@@ -0,0 +1,120 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.runtimecatalog;&#010;+&#010;+import java.util.regex.Matcher;&#010;+import java.util.regex.Pattern;&#010;+&#010;+/**&#010;+ * This class is a copy from camel-core so we can use it independent to validate uris with time patterns&#010;+ */&#010;+public final class TimePatternConverter {&#010;+    private static final Pattern NUMBERS_ONLY_STRING_PATTERN = Pattern.compile(""^[-]?(\\d)+$"", Pattern.CASE_INSENSITIVE);&#010;+    private static final Pattern HOUR_REGEX_PATTERN = Pattern.compile(""((\\d)*(\\d))h(our(s)?)?"", Pattern.CASE_INSENSITIVE);&#010;+    private static final Pattern MINUTES_REGEX_PATTERN = Pattern.compile(""((\\d)*(\\d))m(in(ute(s)?)?)?"", Pattern.CASE_INSENSITIVE);&#010;+    private static final Pattern SECONDS_REGEX_PATTERN = Pattern.compile(""((\\d)*(\\d))s(ec(ond)?(s)?)?"", Pattern.CASE_INSENSITIVE);&#010;+&#010;+    /**&#010;+     * Utility classes should not have a public constructor.&#010;+     */&#010;+    private TimePatternConverter() {&#010;+    }&#010;+&#010;+    public static long toMilliSeconds(String source) throws IllegalArgumentException {&#010;+        long milliseconds = 0;&#010;+        boolean foundFlag = false;&#010;+&#010;+        checkCorrectnessOfPattern(source);&#010;+        Matcher matcher;&#010;+&#010;+        matcher = createMatcher(NUMBERS_ONLY_STRING_PATTERN, source);&#010;+        if (matcher.find()) {&#010;+            // Note: This will also be used for regular numeric strings.&#010;+            //       This String -&gt; long converter will be used for all strings.&#010;+            milliseconds = Long.valueOf(source);&#010;+        } else {&#010;+            matcher = createMatcher(HOUR_REGEX_PATTERN, source);&#010;+            if (matcher.find()) {&#010;+                milliseconds = milliseconds + (3600000 * Long.valueOf(matcher.group(1)));&#010;+                foundFlag = true;&#010;+            }&#010;+&#010;+            matcher = createMatcher(MINUTES_REGEX_PATTERN, source);&#010;+            if (matcher.find()) {&#010;+                long minutes = Long.valueOf(matcher.group(1));&#010;+                if ((minutes &gt; 59) &amp;&amp; foundFlag) {&#010;+                    throw new IllegalArgumentException(""Minutes should contain a valid value between 0 and 59: "" + source);&#010;+                }&#010;+                foundFlag = true;&#010;+                milliseconds = milliseconds + (60000 * minutes);&#010;+            }&#010;+&#010;+            matcher = createMatcher(SECONDS_REGEX_PATTERN, source);&#010;+            if (matcher.find()) {&#010;+                long seconds = Long.valueOf(matcher.group(1));&#010;+                if ((seconds &gt; 59) &amp;&amp; foundFlag) {&#010;+                    throw new IllegalArgumentException(""Seconds should contain a valid value between 0 and 59: "" + source);&#010;+                }&#010;+                foundFlag = true;&#010;+                milliseconds = milliseconds + (1000 * seconds);&#010;+            }&#010;+&#010;+            // No pattern matched... initiating fallback check and conversion (if required).&#010;+            // The source at this point may contain illegal values or special characters&#010;+            if (!foundFlag) {&#010;+                milliseconds = Long.valueOf(source);&#010;+            }&#010;+        }&#010;+&#010;+        return milliseconds;&#010;+    }&#010;+&#010;+    private static void checkCorrectnessOfPattern(String source) {&#010;+        //replace only numbers once&#010;+        Matcher matcher = createMatcher(NUMBERS_ONLY_STRING_PATTERN, source);&#010;+        String replaceSource = matcher.replaceFirst("""");&#010;+&#010;+        //replace hour string once&#010;+        matcher = createMatcher(HOUR_REGEX_PATTERN, replaceSource);&#010;+        if (matcher.find() &amp;&amp; matcher.find()) {&#010;+            throw new IllegalArgumentException(""Hours should not be specified more then once: "" + source);&#010;+        }&#010;+        replaceSource = matcher.replaceFirst("""");&#010;+&#010;+        //replace minutes once&#010;+        matcher = createMatcher(MINUTES_REGEX_PATTERN, replaceSource);&#010;+        if (matcher.find() &amp;&amp; matcher.find()) {&#010;+            throw new IllegalArgumentException(""Minutes should not be specified more then once: "" + source);&#010;+        }&#010;+        replaceSource = matcher.replaceFirst("""");&#010;+&#010;+        //replace seconds once&#010;+        matcher = createMatcher(SECONDS_REGEX_PATTERN, replaceSource);&#010;+        if (matcher.find() &amp;&amp; matcher.find()) {&#010;+            throw new IllegalArgumentException(""Seconds should not be specified more then once: "" + source);&#010;+        }&#010;+        replaceSource = matcher.replaceFirst("""");&#010;+&#010;+        if (replaceSource.length() &gt; 0) {&#010;+            throw new IllegalArgumentException(""Illegal characters: "" + source);&#010;+        }&#010;+    }&#010;+&#010;+    private static Matcher createMatcher(Pattern pattern, String source) {&#010;+        return pattern.matcher(source);&#010;+    }&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/runtimecatalog/URISupport.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/runtimecatalog/URISupport.java b/camel-core/src/main/java/org/apache/camel/runtimecatalog/URISupport.java&#010;new file mode 100644&#010;index 0000000..8389590&#010;--- /dev/null&#010;+++ b/camel-core/src/main/java/org/apache/camel/runtimecatalog/URISupport.java&#010;@@ -0,0 +1,392 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.runtimecatalog;&#010;+&#010;+import java.io.UnsupportedEncodingException;&#010;+import java.net.URI;&#010;+import java.net.URISyntaxException;&#010;+import java.net.URLDecoder;&#010;+import java.net.URLEncoder;&#010;+import java.util.ArrayList;&#010;+import java.util.Iterator;&#010;+import java.util.LinkedHashMap;&#010;+import java.util.List;&#010;+import java.util.Map;&#010;+&#010;+/**&#010;+ * Copied from org.apache.camel.util.URISupport&#010;+ */&#010;+public final class URISupport {&#010;+&#010;+    public static final String RAW_TOKEN_START = ""RAW("";&#010;+    public static final String RAW_TOKEN_END = "")"";&#010;+&#010;+    private static final String CHARSET = ""UTF-8"";&#010;+&#010;+    private URISupport() {&#010;+        // Helper class&#010;+    }&#010;+&#010;+    /**&#010;+     * Normalizes the URI so unsafe characters is encoded&#010;+     *&#010;+     * @param uri the input uri&#010;+     * @return as URI instance&#010;+     * @throws URISyntaxException is thrown if syntax error in the input uri&#010;+     */&#010;+    public static URI normalizeUri(String uri) throws URISyntaxException {&#010;+        return new URI(UnsafeUriCharactersEncoder.encode(uri, true));&#010;+    }&#010;+&#010;+    public static Map&lt;String, Object&gt; extractProperties(Map&lt;String, Object&gt; properties, String optionPrefix) {&#010;+        Map&lt;String, Object&gt; rc = new LinkedHashMap&lt;String, Object&gt;(properties.size());&#010;+&#010;+        for (Iterator&lt;Map.Entry&lt;String, Object&gt;&gt; it = properties.entrySet().iterator(); it.hasNext();) {&#010;+            Map.Entry&lt;String, Object&gt; entry = it.next();&#010;+            String name = entry.getKey();&#010;+            if (name.startsWith(optionPrefix)) {&#010;+                Object value = properties.get(name);&#010;+                name = name.substring(optionPrefix.length());&#010;+                rc.put(name, value);&#010;+                it.remove();&#010;+            }&#010;+        }&#010;+&#010;+        return rc;&#010;+    }&#010;+&#010;+    /**&#010;+     * Strips the query parameters from the uri&#010;+     *&#010;+     * @param uri  the uri&#010;+     * @return the uri without the query parameter&#010;+     */&#010;+    public static String stripQuery(String uri) {&#010;+        int idx = uri.indexOf('?');&#010;+        if (idx &gt; -1) {&#010;+            uri = uri.substring(0, idx);&#010;+        }&#010;+        return uri;&#010;+    }&#010;+&#010;+    /**&#010;+     * Parses the query parameters of the uri (eg the query part).&#010;+     *&#010;+     * @param uri the uri&#010;+     * @return the parameters, or an empty map if no parameters (eg never null)&#010;+     * @throws URISyntaxException is thrown if uri has invalid syntax.&#010;+     */&#010;+    public static Map&lt;String, Object&gt; parseParameters(URI uri) throws URISyntaxException {&#010;+        String query = uri.getQuery();&#010;+        if (query == null) {&#010;+            String schemeSpecificPart = uri.getSchemeSpecificPart();&#010;+            int idx = schemeSpecificPart.indexOf('?');&#010;+            if (idx &lt; 0) {&#010;+                // return an empty map&#010;+                return new LinkedHashMap&lt;String, Object&gt;(0);&#010;+            } else {&#010;+                query = schemeSpecificPart.substring(idx + 1);&#010;+            }&#010;+        } else {&#010;+            query = stripPrefix(query, ""?"");&#010;+        }&#010;+        return parseQuery(query);&#010;+    }&#010;+&#010;+    /**&#010;+     * Strips the prefix from the value.&#010;+     * &lt;p/&gt;&#010;+     * Returns the value as-is if not starting with the prefix.&#010;+     *&#010;+     * @param value  the value&#010;+     * @param prefix the prefix to remove from value&#010;+     * @return the value without the prefix&#010;+     */&#010;+    public static String stripPrefix(String value, String prefix) {&#010;+        if (value != null &amp;&amp; value.startsWith(prefix)) {&#010;+            return value.substring(prefix.length());&#010;+        }&#010;+        return value;&#010;+    }&#010;+&#010;+    /**&#010;+     * Parses the query part of the uri (eg the parameters).&#010;+     * &lt;p/&gt;&#010;+     * The URI parameters will by default be URI encoded. However you can define a parameter&#010;+     * values with the syntax: &lt;tt&gt;key=RAW(value)&lt;/tt&gt; which tells Camel to not encode the value,&#010;+     * and use the value as is (eg key=value) and the value has &lt;b&gt;not&lt;/b&gt; been encoded.&#010;+     *&#010;+     * @param uri the uri&#010;+     * @return the parameters, or an empty map if no parameters (eg never null)&#010;+     * @throws URISyntaxException is thrown if uri has invalid syntax.&#010;+     * @see #RAW_TOKEN_START&#010;+     * @see #RAW_TOKEN_END&#010;+     */&#010;+    public static Map&lt;String, Object&gt; parseQuery(String uri) throws URISyntaxException {&#010;+        return parseQuery(uri, false);&#010;+    }&#010;+&#010;+    /**&#010;+     * Parses the query part of the uri (eg the parameters).&#010;+     * &lt;p/&gt;&#010;+     * The URI parameters will by default be URI encoded. However you can define a parameter&#010;+     * values with the syntax: &lt;tt&gt;key=RAW(value)&lt;/tt&gt; which tells Camel to not encode the value,&#010;+     * and use the value as is (eg key=value) and the value has &lt;b&gt;not&lt;/b&gt; been encoded.&#010;+     *&#010;+     * @param uri the uri&#010;+     * @param useRaw whether to force using raw values&#010;+     * @return the parameters, or an empty map if no parameters (eg never null)&#010;+     * @throws URISyntaxException is thrown if uri has invalid syntax.&#010;+     * @see #RAW_TOKEN_START&#010;+     * @see #RAW_TOKEN_END&#010;+     */&#010;+    public static Map&lt;String, Object&gt; parseQuery(String uri, boolean useRaw) throws URISyntaxException {&#010;+        // must check for trailing &amp; as the uri.split(""&amp;"") will ignore those&#010;+        if (uri != null &amp;&amp; uri.endsWith(""&amp;"")) {&#010;+            throw new URISyntaxException(uri, ""Invalid uri syntax: Trailing &amp; marker found. ""&#010;+                    + ""Check the uri and remove the trailing &amp; marker."");&#010;+        }&#010;+&#010;+        if (isEmpty(uri)) {&#010;+            // return an empty map&#010;+            return new LinkedHashMap&lt;String, Object&gt;(0);&#010;+        }&#010;+&#010;+        // need to parse the uri query parameters manually as we cannot rely on splitting by &amp;,&#010;+        // as &amp; can be used in a parameter value as well.&#010;+&#010;+        try {&#010;+            // use a linked map so the parameters is in the same order&#010;+            Map&lt;String, Object&gt; rc = new LinkedHashMap&lt;String, Object&gt;();&#010;+&#010;+            boolean isKey = true;&#010;+            boolean isValue = false;&#010;+            boolean isRaw = false;&#010;+            StringBuilder key = new StringBuilder();&#010;+            StringBuilder value = new StringBuilder();&#010;+&#010;+            // parse the uri parameters char by char&#010;+            for (int i = 0; i &lt; uri.length(); i++) {&#010;+                // current char&#010;+                char ch = uri.charAt(i);&#010;+                // look ahead of the next char&#010;+                char next;&#010;+                if (i &lt;= uri.length() - 2) {&#010;+                    next = uri.charAt(i + 1);&#010;+                } else {&#010;+                    next = '\u0000';&#010;+                }&#010;+&#010;+                // are we a raw value&#010;+                isRaw = value.toString().startsWith(RAW_TOKEN_START);&#010;+&#010;+                // if we are in raw mode, then we keep adding until we hit the end marker&#010;+                if (isRaw) {&#010;+                    if (isKey) {&#010;+                        key.append(ch);&#010;+                    } else if (isValue) {&#010;+                        value.append(ch);&#010;+                    }&#010;+&#010;+                    // we only end the raw marker if its )&amp; or at the end of the value&#010;+&#010;+                    boolean end = ch == RAW_TOKEN_END.charAt(0) &amp;&amp; (next == '&amp;' || next == '\u0000');&#010;+                    if (end) {&#010;+                        // raw value end, so add that as a parameter, and reset flags&#010;+                        addParameter(key.toString(), value.toString(), rc, useRaw || isRaw);&#010;+                        key.setLength(0);&#010;+                        value.setLength(0);&#010;+                        isKey = true;&#010;+                        isValue = false;&#010;+                        isRaw = false;&#010;+                        // skip to next as we are in raw mode and have already added the value&#010;+                        i++;&#010;+                    }&#010;+                    continue;&#010;+                }&#010;+&#010;+                // if its a key and there is a = sign then the key ends and we are in value mode&#010;+                if (isKey &amp;&amp; ch == '=') {&#010;+                    isKey = false;&#010;+                    isValue = true;&#010;+                    isRaw = false;&#010;+                    continue;&#010;+                }&#010;+&#010;+                // the &amp; denote parameter is ended&#010;+                if (ch == '&amp;') {&#010;+                    // parameter is ended, as we hit &amp; separator&#010;+                    String aKey = key.toString();&#010;+                    // the key may be a placeholder of options which we then do not know what is&#010;+                    boolean validKey = !aKey.startsWith(""{{"") &amp;&amp; !aKey.endsWith(""}}"");&#010;+                    if (validKey) {&#010;+                        addParameter(aKey, value.toString(), rc, useRaw || isRaw);&#010;+                    }&#010;+                    key.setLength(0);&#010;+                    value.setLength(0);&#010;+                    isKey = true;&#010;+                    isValue = false;&#010;+                    isRaw = false;&#010;+                    continue;&#010;+                }&#010;+&#010;+                // regular char so add it to the key or value&#010;+                if (isKey) {&#010;+                    key.append(ch);&#010;+                } else if (isValue) {&#010;+                    value.append(ch);&#010;+                }&#010;+            }&#010;+&#010;+            // any left over parameters, then add that&#010;+            if (key.length() &gt; 0) {&#010;+                String aKey = key.toString();&#010;+                // the key may be a placeholder of options which we then do not know what is&#010;+                boolean validKey = !aKey.startsWith(""{{"") &amp;&amp; !aKey.endsWith(""}}"");&#010;+                if (validKey) {&#010;+                    addParameter(aKey, value.toString(), rc, useRaw || isRaw);&#010;+                }&#010;+            }&#010;+&#010;+            return rc;&#010;+&#010;+        } catch (UnsupportedEncodingException e) {&#010;+            URISyntaxException se = new URISyntaxException(e.toString(), ""Invalid encoding"");&#010;+            se.initCause(e);&#010;+            throw se;&#010;+        }&#010;+    }&#010;+&#010;+    @SuppressWarnings(""unchecked"")&#010;+    private static void addParameter(String name, String value, Map&lt;String, Object&gt; map, boolean isRaw) throws UnsupportedEncodingException {&#010;+        name = URLDecoder.decode(name, CHARSET);&#010;+        if (!isRaw) {&#010;+            // need to replace % with %25&#010;+            value = URLDecoder.decode(value.replaceAll(""%"", ""%25""), CHARSET);&#010;+        }&#010;+&#010;+        // does the key already exist?&#010;+        if (map.containsKey(name)) {&#010;+            // yes it does, so make sure we can support multiple values, but using a list&#010;+            // to hold the multiple values&#010;+            Object existing = map.get(name);&#010;+            List&lt;String&gt; list;&#010;+            if (existing instanceof List) {&#010;+                list = (List&lt;String&gt;) existing;&#010;+            } else {&#010;+                // create a new list to hold the multiple values&#010;+                list = new ArrayList&lt;String&gt;();&#010;+                String s = existing != null ? existing.toString() : null;&#010;+                if (s != null) {&#010;+                    list.add(s);&#010;+                }&#010;+            }&#010;+            list.add(value);&#010;+            map.put(name, list);&#010;+        } else {&#010;+            map.put(name, value);&#010;+        }&#010;+    }&#010;+&#010;+    /**&#010;+     * Assembles a query from the given map.&#010;+     *&#010;+     * @param options  the map with the options (eg key/value pairs)&#010;+     * @param ampersand to use &amp; for Java code, and &amp;amp; for XML&#010;+     * @return a query string with &lt;tt&gt;key1=value&amp;key2=value2&amp;...&lt;/tt&gt;, or an empty string if there is no options.&#010;+     * @throws URISyntaxException is thrown if uri has invalid syntax.&#010;+     */&#010;+    public static String createQueryString(Map&lt;String, String&gt; options, String ampersand, boolean encode) throws URISyntaxException {&#010;+        try {&#010;+            if (options.size() &gt; 0) {&#010;+                StringBuilder rc = new StringBuilder();&#010;+                boolean first = true;&#010;+                for (Object o : options.keySet()) {&#010;+                    if (first) {&#010;+                        first = false;&#010;+                    } else {&#010;+                        rc.append(ampersand);&#010;+                    }&#010;+&#010;+                    String key = (String) o;&#010;+                    Object value = options.get(key);&#010;+&#010;+                    // use the value as a String&#010;+                    String s = value != null ? value.toString() : null;&#010;+                    appendQueryStringParameter(key, s, rc, encode);&#010;+                }&#010;+                return rc.toString();&#010;+            } else {&#010;+                return """";&#010;+            }&#010;+        } catch (UnsupportedEncodingException e) {&#010;+            URISyntaxException se = new URISyntaxException(e.toString(), ""Invalid encoding"");&#010;+            se.initCause(e);&#010;+            throw se;&#010;+        }&#010;+    }&#010;+&#010;+    private static void appendQueryStringParameter(String key, String value, StringBuilder rc, boolean encode) throws UnsupportedEncodingException {&#010;+        if (encode) {&#010;+            rc.append(URLEncoder.encode(key, CHARSET));&#010;+        } else {&#010;+            rc.append(key);&#010;+        }&#010;+        // only append if value is not null&#010;+        if (value != null) {&#010;+            rc.append(""="");&#010;+            if (value.startsWith(RAW_TOKEN_START) &amp;&amp; value.endsWith(RAW_TOKEN_END)) {&#010;+                // do not encode RAW parameters&#010;+                rc.append(value);&#010;+            } else {&#010;+                if (encode) {&#010;+                    rc.append(URLEncoder.encode(value, CHARSET));&#010;+                } else {&#010;+                    rc.append(value);&#010;+                }&#010;+            }&#010;+        }&#010;+    }&#010;+&#010;+    /**&#010;+     * Tests whether the value is &lt;tt&gt;null&lt;/tt&gt; or an empty string.&#010;+     *&#010;+     * @param value  the value, if its a String it will be tested for text length as well&#010;+     * @return true if empty&#010;+     */&#010;+    public static boolean isEmpty(Object value) {&#010;+        return !isNotEmpty(value);&#010;+    }&#010;+&#010;+    /**&#010;+     * Tests whether the value is &lt;b&gt;not&lt;/b&gt; &lt;tt&gt;null&lt;/tt&gt; or an empty string.&#010;+     *&#010;+     * @param value  the value, if its a String it will be tested for text length as well&#010;+     * @return true if &lt;b&gt;not&lt;/b&gt; empty&#010;+     */&#010;+    public static boolean isNotEmpty(Object value) {&#010;+        if (value == null) {&#010;+            return false;&#010;+        } else if (value instanceof String) {&#010;+            String text = (String) value;&#010;+            return text.trim().length() &gt; 0;&#010;+        } else {&#010;+            return true;&#010;+        }&#010;+    }&#010;+&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/runtimecatalog/UnsafeUriCharactersEncoder.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/runtimecatalog/UnsafeUriCharactersEncoder.java b/camel-core/src/main/java/org/apache/camel/runtimecatalog/UnsafeUriCharactersEncoder.java&#010;new file mode 100644&#010;index 0000000..a11c810&#010;--- /dev/null&#010;+++ b/camel-core/src/main/java/org/apache/camel/runtimecatalog/UnsafeUriCharactersEncoder.java&#010;@@ -0,0 +1,206 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.runtimecatalog;&#010;+&#010;+import java.util.ArrayList;&#010;+import java.util.BitSet;&#010;+import java.util.List;&#010;+import java.util.regex.Matcher;&#010;+import java.util.regex.Pattern;&#010;+&#010;+/**&#010;+ * Encoder for unsafe URI characters.&#010;+ * &lt;p/&gt;&#010;+ * A good source for details is &lt;a href=""http://en.wikipedia.org/wiki/Url_encode""&gt;wikipedia url encode&lt;/a&gt; article.&#010;+ */&#010;+public final class UnsafeUriCharactersEncoder {&#010;+    private static BitSet unsafeCharactersRfc1738;&#010;+    private static BitSet unsafeCharactersHttp;&#010;+    private static final char[] HEX_DIGITS = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',&#010;+        'D', 'E', 'F', 'a', 'b', 'c', 'd', 'e', 'f'};&#010;+    private static final Pattern RAW_PATTERN = Pattern.compile(""RAW\\([^\\)]+\\)"");&#010;+&#010;+    static {&#010;+        unsafeCharactersRfc1738 = new BitSet(256);&#010;+        unsafeCharactersRfc1738.set(' ');&#010;+        unsafeCharactersRfc1738.set('""');&#010;+        unsafeCharactersRfc1738.set('&lt;');&#010;+        unsafeCharactersRfc1738.set('&gt;');&#010;+        unsafeCharactersRfc1738.set('#');&#010;+        unsafeCharactersRfc1738.set('%');&#010;+        unsafeCharactersRfc1738.set('{');&#010;+        unsafeCharactersRfc1738.set('}');&#010;+        unsafeCharactersRfc1738.set('|');&#010;+        unsafeCharactersRfc1738.set('\\');&#010;+        unsafeCharactersRfc1738.set('^');&#010;+        unsafeCharactersRfc1738.set('~');&#010;+        unsafeCharactersRfc1738.set('[');&#010;+        unsafeCharactersRfc1738.set(']');&#010;+        unsafeCharactersRfc1738.set('`');&#010;+    }&#010;+&#010;+    static {&#010;+        unsafeCharactersHttp = new BitSet(256);&#010;+        unsafeCharactersHttp.set(' ');&#010;+        unsafeCharactersHttp.set('""');&#010;+        unsafeCharactersHttp.set('&lt;');&#010;+        unsafeCharactersHttp.set('&gt;');&#010;+        unsafeCharactersHttp.set('#');&#010;+        unsafeCharactersHttp.set('%');&#010;+        unsafeCharactersHttp.set('{');&#010;+        unsafeCharactersHttp.set('}');&#010;+        unsafeCharactersHttp.set('|');&#010;+        unsafeCharactersHttp.set('\\');&#010;+        unsafeCharactersHttp.set('^');&#010;+        unsafeCharactersHttp.set('~');&#010;+        unsafeCharactersHttp.set('`');&#010;+    }&#010;+&#010;+    private UnsafeUriCharactersEncoder() {&#010;+        // util class&#010;+    }&#010;+&#010;+    public static String encode(String s) {&#010;+        return encode(s, unsafeCharactersRfc1738);&#010;+    }&#010;+&#010;+    public static String encodeHttpURI(String s) {&#010;+        return encode(s, unsafeCharactersHttp);&#010;+    }&#010;+&#010;+    public static String encode(String s, BitSet unsafeCharacters) {&#010;+        return encode(s, unsafeCharacters, false);&#010;+    }&#010;+&#010;+    public static String encode(String s, boolean checkRaw) {&#010;+        return encode(s, unsafeCharactersRfc1738, checkRaw);&#010;+    }&#010;+&#010;+    public static String encodeHttpURI(String s, boolean checkRaw) {&#010;+        return encode(s, unsafeCharactersHttp, checkRaw);&#010;+    }&#010;+&#010;+    private static List&lt;Pair&gt; checkRAW(String s) {&#010;+        Matcher matcher = RAW_PATTERN.matcher(s);&#010;+        List&lt;Pair&gt; answer = new ArrayList&lt;Pair&gt;();&#010;+        // Check all occurrences&#010;+        while (matcher.find()) {&#010;+            answer.add(new Pair(matcher.start(), matcher.end()));&#010;+        }&#010;+        return answer;&#010;+    }&#010;+&#010;+    private static boolean isRaw(int index, List&lt;Pair&gt; pairs) {&#010;+        for (Pair pair : pairs) {&#010;+            if (index &lt; pair.left) {&#010;+                return false;&#010;+            } else {&#010;+                if (index &gt;= pair.left) {&#010;+                    if (index &lt;= pair.right) {&#010;+                        return true;&#010;+                    } else {&#010;+                        continue;&#010;+                    }&#010;+                }&#010;+            }&#010;+        }&#010;+        return false;&#010;+    }&#010;+&#010;+    private static class Pair {&#010;+        int left;&#010;+        int right;&#010;+&#010;+        Pair(int left, int right) {&#010;+            this.left = left;&#010;+            this.right = right;&#010;+        }&#010;+    }&#010;+&#010;+    // Just skip the encode for isRAW part&#010;+    public static String encode(String s, BitSet unsafeCharacters, boolean checkRaw) {&#010;+        List&lt;Pair&gt; rawPairs;&#010;+        if (checkRaw) {&#010;+            rawPairs = checkRAW(s);&#010;+        } else {&#010;+            rawPairs = new ArrayList&lt;Pair&gt;();&#010;+        }&#010;+&#010;+        int n = s == null ? 0 : s.length();&#010;+        if (n == 0) {&#010;+            return s;&#010;+        }&#010;+&#010;+        // First check whether we actually need to encode&#010;+        char chars[] = s.toCharArray();&#010;+        for (int i = 0;;) {&#010;+            // just deal with the ascii character&#010;+            if (chars[i] &gt; 0 &amp;&amp; chars[i] &lt; 128) {&#010;+                if (unsafeCharacters.get(chars[i])) {&#010;+                    break;&#010;+                }&#010;+            }&#010;+            if (++i &gt;= chars.length) {&#010;+                return s;&#010;+            }&#010;+        }&#010;+&#010;+        // okay there are some unsafe characters so we do need to encode&#010;+        // see details at: http://en.wikipedia.org/wiki/Url_encode&#010;+        StringBuilder sb = new StringBuilder();&#010;+        for (int i = 0; i &lt; chars.length; i++) {&#010;+            char ch = chars[i];&#010;+            if (ch &gt; 0 &amp;&amp; ch &lt; 128 &amp;&amp; unsafeCharacters.get(ch)) {&#010;+                // special for % sign as it may be a decimal encoded value&#010;+                if (ch == '%') {&#010;+                    char next = i + 1 &lt; chars.length ? chars[i + 1] : ' ';&#010;+                    char next2 = i + 2 &lt; chars.length ? chars[i + 2] : ' ';&#010;+&#010;+                    if (isHexDigit(next) &amp;&amp; isHexDigit(next2) &amp;&amp; !isRaw(i, rawPairs)) {&#010;+                        // its already encoded (decimal encoded) so just append as is&#010;+                        sb.append(ch);&#010;+                    } else {&#010;+                        // must escape then, as its an unsafe character&#010;+                        appendEscape(sb, (byte) ch);&#010;+                    }&#010;+                } else {&#010;+                    // must escape then, as its an unsafe character&#010;+                    appendEscape(sb, (byte) ch);&#010;+                }&#010;+            } else {&#010;+                sb.append(ch);&#010;+            }&#010;+        }&#010;+        return sb.toString();&#010;+    }&#010;+&#010;+    private static void appendEscape(StringBuilder sb, byte b) {&#010;+        sb.append('%');&#010;+        sb.append(HEX_DIGITS[(b &gt;&gt; 4) &amp; 0x0f]);&#010;+        sb.append(HEX_DIGITS[(b &gt;&gt; 0) &amp; 0x0f]);&#010;+    }&#010;+&#010;+    private static boolean isHexDigit(char ch) {&#010;+        for (char hex : HEX_DIGITS) {&#010;+            if (hex == ch) {&#010;+                return true;&#010;+            }&#010;+        }&#010;+        return false;&#010;+    }&#010;+&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/runtimecatalog/package.html&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/runtimecatalog/package.html b/camel-core/src/main/java/org/apache/camel/runtimecatalog/package.html&#010;new file mode 100644&#010;index 0000000..2f15a04&#010;--- /dev/null&#010;+++ b/camel-core/src/main/java/org/apache/camel/runtimecatalog/package.html&#010;@@ -0,0 +1,25 @@&#010;+&lt;!--&#010;+    Licensed to the Apache Software Foundation (ASF) under one or more&#010;+    contributor license agreements.  See the NOTICE file distributed with&#010;+    this work for additional information regarding copyright ownership.&#010;+    The ASF licenses this file to You under the Apache License, Version 2.0&#010;+    (the ""License""); you may not use this file except in compliance with&#010;+    the License.  You may obtain a copy of the License at&#010;+&#010;+    http://www.apache.org/licenses/LICENSE-2.0&#010;+&#010;+    Unless required by applicable law or agreed to in writing, software&#010;+    distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+    See the License for the specific language governing permissions and&#010;+    limitations under the License.&#010;+--&gt;&#010;+&lt;html&gt;&#010;+&lt;head&gt;&#010;+&lt;/head&gt;&#010;+&lt;body&gt;&#010;+&#010;+Runtime Camel Catalog&#010;+&#010;+&lt;/body&gt;&#010;+&lt;/html&gt;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/util/EndpointHelper.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/util/EndpointHelper.java b/camel-core/src/main/java/org/apache/camel/util/EndpointHelper.java&#010;index fd22f55..a32c109 100644&#010;--- a/camel-core/src/main/java/org/apache/camel/util/EndpointHelper.java&#010;+++ b/camel-core/src/main/java/org/apache/camel/util/EndpointHelper.java&#010;@@ -37,8 +37,8 @@ import org.apache.camel.PollingConsumer;&#010; import org.apache.camel.Processor;&#010; import org.apache.camel.ResolveEndpointFailedException;&#010; import org.apache.camel.Route;&#010;-import org.apache.camel.catalog.DefaultRuntimeCamelCatalog;&#010;-import org.apache.camel.catalog.RuntimeCamelCatalog;&#010;+import org.apache.camel.runtimecatalog.DefaultRuntimeCamelCatalog;&#010;+import org.apache.camel.runtimecatalog.RuntimeCamelCatalog;&#010; import org.apache.camel.spi.BrowsableEndpoint;&#010; import org.slf4j.Logger;&#010; import org.slf4j.LoggerFactory;&#010;@@ -523,7 +523,7 @@ public final class EndpointHelper {&#010;      * @param uri          the endpoint uri&#010;      * @return a map for each option in the uri with the corresponding information from the json&#010;      * @throws Exception is thrown in case of error&#010;-     * @deprecated use {@link org.apache.camel.catalog.RuntimeCamelCatalog#endpointProperties(String)}&#010;+     * @deprecated use {@link org.apache.camel.runtimecatalog.RuntimeCamelCatalog#endpointProperties(String)}&#010;      */&#010;     @Deprecated&#010;     public static Map&lt;String, Object&gt; endpointProperties(CamelContext camelContext, String uri) throws Exception {&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/test/java/org/apache/camel/catalog/AbstractCamelCatalogTest.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/test/java/org/apache/camel/catalog/AbstractCamelCatalogTest.java b/camel-core/src/test/java/org/apache/camel/catalog/AbstractCamelCatalogTest.java&#010;deleted file mode 100644&#010;index ed7e997..0000000&#010;--- a/camel-core/src/test/java/org/apache/camel/catalog/AbstractCamelCatalogTest.java&#010;+++ /dev/null&#010;@@ -1,104 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.catalog;&#010;-&#010;-import java.net.URISyntaxException;&#010;-import java.util.HashMap;&#010;-import java.util.Map;&#010;-&#010;-import org.junit.Before;&#010;-import org.junit.Test;&#010;-&#010;-import static org.easymock.EasyMock.expect;&#010;-import static org.easymock.EasyMock.mock;&#010;-import static org.easymock.EasyMock.replay;&#010;-import static org.junit.Assert.assertEquals;&#010;-&#010;-public class AbstractCamelCatalogTest {&#010;-&#010;-    AbstractCamelCatalog catalog = new AbstractCamelCatalog() {&#010;-    };&#010;-&#010;-    JSonSchemaResolver resolver;&#010;-&#010;-    @Before&#010;-    public void setupMockCatalog() {&#010;-        resolver = mock(JSonSchemaResolver.class);&#010;-&#010;-        catalog.setJSonSchemaResolver(resolver);&#010;-    }&#010;-&#010;-    @Test&#010;-    public void shouldConstructEndpointUris() throws URISyntaxException {&#010;-        expect(resolver.getComponentJSonSchema(""comp"")).andReturn(""{\n""//&#010;-            + ""  \""component\"": {\n""//&#010;-            + ""    \""syntax\"": \""comp:param1:param2\""\n""//&#010;-            + ""  }\n""//&#010;-            + ""}"");&#010;-&#010;-        replay(resolver);&#010;-&#010;-        final Map&lt;String, String&gt; properties = new HashMap&lt;&gt;();&#010;-        properties.put(""param1"", ""value1"");&#010;-        properties.put(""param2"", ""value2"");&#010;-        properties.put(""param3"", ""value3"");&#010;-&#010;-        final String endpointUri = catalog.doAsEndpointUri(""comp"", properties, ""&amp;"", false);&#010;-&#010;-        assertEquals(""comp:value1:value2?param3=value3"", endpointUri);&#010;-    }&#010;-&#010;-    @Test&#010;-    public void shouldConstructEndpointUrisWithPropertyPlaceholders() throws URISyntaxException {&#010;-        expect(resolver.getComponentJSonSchema(""comp"")).andReturn(""{\n""//&#010;-            + ""  \""component\"": {\n""//&#010;-            + ""    \""syntax\"": \""comp:param1:param2\""\n""//&#010;-            + ""  }\n""//&#010;-            + ""}"");&#010;-&#010;-        replay(resolver);&#010;-&#010;-        final Map&lt;String, String&gt; properties = new HashMap&lt;&gt;();&#010;-        properties.put(""param1"", ""{{prop1}}"");&#010;-        properties.put(""param2"", ""{{prop2}}"");&#010;-        properties.put(""param3"", ""{{prop3}}"");&#010;-&#010;-        final String endpointUri = catalog.doAsEndpointUri(""comp"", properties, ""&amp;"", false);&#010;-&#010;-        assertEquals(""comp:{{prop1}}:{{prop2}}?param3={{prop3}}"", endpointUri);&#010;-    }&#010;-&#010;-    @Test&#010;-    public void shouldConstructEndpointUrisWhenValuesContainTokens() throws URISyntaxException {&#010;-        expect(resolver.getComponentJSonSchema(""comp"")).andReturn(""{\n""//&#010;-            + ""  \""component\"": {\n""//&#010;-            + ""    \""syntax\"": \""comp:param1:param2\""\n""//&#010;-            + ""  }\n""//&#010;-            + ""}"");&#010;-&#010;-        replay(resolver);&#010;-&#010;-        final Map&lt;String, String&gt; properties = new HashMap&lt;&gt;();&#010;-        properties.put(""param1"", ""{value1}"");&#010;-        properties.put(""param2"", ""/value2/"");&#010;-        properties.put(""param3"", ""/value3/{param}"");&#010;-&#010;-        final String endpointUri = catalog.doAsEndpointUri(""comp"", properties, ""&amp;"", false);&#010;-&#010;-        assertEquals(""comp:{value1}:/value2/?param3=/value3/{param}"", endpointUri);&#010;-    }&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/test/java/org/apache/camel/catalog/RuntimeCamelCatalogTest.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/test/java/org/apache/camel/catalog/RuntimeCamelCatalogTest.java b/camel-core/src/test/java/org/apache/camel/catalog/RuntimeCamelCatalogTest.java&#010;deleted file mode 100644&#010;index 78e51a2..0000000&#010;--- a/camel-core/src/test/java/org/apache/camel/catalog/RuntimeCamelCatalogTest.java&#010;+++ /dev/null&#010;@@ -1,393 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.catalog;&#010;-&#010;-import java.util.HashMap;&#010;-import java.util.Map;&#010;-&#010;-import org.apache.camel.impl.DefaultCamelContext;&#010;-import org.junit.BeforeClass;&#010;-import org.junit.Test;&#010;-import org.slf4j.Logger;&#010;-import org.slf4j.LoggerFactory;&#010;-&#010;-import static org.junit.Assert.assertEquals;&#010;-import static org.junit.Assert.assertFalse;&#010;-import static org.junit.Assert.assertNotNull;&#010;-import static org.junit.Assert.assertTrue;&#010;-&#010;-public class RuntimeCamelCatalogTest {&#010;-&#010;-    static RuntimeCamelCatalog catalog;&#010;-&#010;-    private static final Logger LOG = LoggerFactory.getLogger(RuntimeCamelCatalogTest.class);&#010;-&#010;-    @BeforeClass&#010;-    public static void createCamelCatalog() {&#010;-        catalog = new DefaultRuntimeCamelCatalog(new DefaultCamelContext());&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testFromCamelContext() throws Exception {&#010;-        String schema = new DefaultCamelContext().getRuntimeCamelCatalog().modelJSonSchema(""choice"");&#010;-        assertNotNull(schema);&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testJsonSchema() throws Exception {&#010;-        String schema = catalog.modelJSonSchema(""aggregate"");&#010;-        assertNotNull(schema);&#010;-&#010;-        // lets make it possible to find bean/method using both names&#010;-        schema = catalog.modelJSonSchema(""method"");&#010;-        assertNotNull(schema);&#010;-        schema = catalog.modelJSonSchema(""bean"");&#010;-        assertNotNull(schema);&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testAsEndpointUriMapFile() throws Exception {&#010;-        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();&#010;-        map.put(""directoryName"", ""src/data/inbox"");&#010;-        map.put(""noop"", ""true"");&#010;-        map.put(""delay"", ""5000"");&#010;-&#010;-        String uri = catalog.asEndpointUri(""file"", map, true);&#010;-        assertEquals(""file:src/data/inbox?delay=5000&amp;noop=true"", uri);&#010;-&#010;-        String uri2 = catalog.asEndpointUriXml(""file"", map, true);&#010;-        assertEquals(""file:src/data/inbox?delay=5000&amp;amp;noop=true"", uri2);&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testAsEndpointUriTimer() throws Exception {&#010;-        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();&#010;-        map.put(""timerName"", ""foo"");&#010;-        map.put(""period"", ""5000"");&#010;-&#010;-        String uri = catalog.asEndpointUri(""timer"", map, true);&#010;-        assertEquals(""timer:foo?period=5000"", uri);&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testAsEndpointUriPropertiesPlaceholders() throws Exception {&#010;-        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();&#010;-        map.put(""timerName"", ""foo"");&#010;-        map.put(""period"", ""{{howoften}}"");&#010;-        map.put(""repeatCount"", ""5"");&#010;-&#010;-        String uri = catalog.asEndpointUri(""timer"", map, true);&#010;-        assertEquals(""timer:foo?period=%7B%7Bhowoften%7D%7D&amp;repeatCount=5"", uri);&#010;-&#010;-        uri = catalog.asEndpointUri(""timer"", map, false);&#010;-        assertEquals(""timer:foo?period={{howoften}}&amp;repeatCount=5"", uri);&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testAsEndpointUriBeanLookup() throws Exception {&#010;-        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();&#010;-        map.put(""resourceUri"", ""foo.xslt"");&#010;-        map.put(""converter"", ""#myConverter"");&#010;-&#010;-        String uri = catalog.asEndpointUri(""xslt"", map, true);&#010;-        assertEquals(""xslt:foo.xslt?converter=%23myConverter"", uri);&#010;-&#010;-        uri = catalog.asEndpointUri(""xslt"", map, false);&#010;-        assertEquals(""xslt:foo.xslt?converter=#myConverter"", uri);&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testEndpointPropertiesPlaceholders() throws Exception {&#010;-        Map&lt;String, String&gt; map = catalog.endpointProperties(""timer:foo?period={{howoften}}&amp;repeatCount=5"");&#010;-        assertNotNull(map);&#010;-        assertEquals(3, map.size());&#010;-&#010;-        assertEquals(""foo"", map.get(""timerName""));&#010;-        assertEquals(""{{howoften}}"", map.get(""period""));&#010;-        assertEquals(""5"", map.get(""repeatCount""));&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testAsEndpointUriLog() throws Exception {&#010;-        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();&#010;-        map.put(""loggerName"", ""foo"");&#010;-        map.put(""loggerLevel"", ""WARN"");&#010;-        map.put(""multiline"", ""true"");&#010;-        map.put(""showAll"", ""true"");&#010;-        map.put(""showBody"", ""false"");&#010;-        map.put(""showBodyType"", ""false"");&#010;-        map.put(""showExchangePattern"", ""false"");&#010;-        map.put(""style"", ""Tab"");&#010;-&#010;-        assertEquals(""log:foo?loggerLevel=WARN&amp;multiline=true&amp;showAll=true&amp;style=Tab"", catalog.asEndpointUri(""log"", map, false));&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testAsEndpointUriLogShort() throws Exception {&#010;-        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();&#010;-        map.put(""loggerName"", ""foo"");&#010;-        map.put(""loggerLevel"", ""DEBUG"");&#010;-&#010;-        assertEquals(""log:foo?loggerLevel=DEBUG"", catalog.asEndpointUri(""log"", map, false));&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testAsEndpointUriWithplaceholder() throws Exception {&#010;-        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();&#010;-        map.put(""name"", ""foo"");&#010;-        map.put(""blockWhenFull"", ""{{block}}"");&#010;-        assertEquals(""seda:foo?blockWhenFull={{block}}"", catalog.asEndpointUri(""seda"", map, false));&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testEndpointPropertiesSedaRequired() throws Exception {&#010;-        Map&lt;String, String&gt; map = catalog.endpointProperties(""seda:foo"");&#010;-        assertNotNull(map);&#010;-        assertEquals(1, map.size());&#010;-&#010;-        assertEquals(""foo"", map.get(""name""));&#010;-&#010;-        map = catalog.endpointProperties(""seda:foo?blockWhenFull=true"");&#010;-        assertNotNull(map);&#010;-        assertEquals(2, map.size());&#010;-&#010;-        assertEquals(""foo"", map.get(""name""));&#010;-        assertEquals(""true"", map.get(""blockWhenFull""));&#010;-    }&#010;-&#010;-    @Test&#010;-    public void validateProperties() throws Exception {&#010;-        // valid&#010;-        EndpointValidationResult result = catalog.validateEndpointProperties(""log:mylog"");&#010;-        assertTrue(result.isSuccess());&#010;-&#010;-        // unknown&#010;-        result = catalog.validateEndpointProperties(""log:mylog?level=WARN&amp;foo=bar"");&#010;-        assertFalse(result.isSuccess());&#010;-        assertTrue(result.getUnknown().contains(""foo""));&#010;-        assertEquals(1, result.getNumberOfErrors());&#010;-&#010;-        // enum&#010;-        result = catalog.validateEndpointProperties(""seda:foo?waitForTaskToComplete=blah"");&#010;-        assertFalse(result.isSuccess());&#010;-        assertEquals(""blah"", result.getInvalidEnum().get(""waitForTaskToComplete""));&#010;-        assertEquals(1, result.getNumberOfErrors());&#010;-&#010;-        // reference okay&#010;-        result = catalog.validateEndpointProperties(""seda:foo?queue=#queue"");&#010;-        assertTrue(result.isSuccess());&#010;-        assertEquals(0, result.getNumberOfErrors());&#010;-&#010;-        // unknown component&#010;-        result = catalog.validateEndpointProperties(""foo:bar?me=you"");&#010;-        assertFalse(result.isSuccess());&#010;-        assertTrue(result.getUnknownComponent().equals(""foo""));&#010;-        assertEquals(1, result.getNumberOfErrors());&#010;-&#010;-        // invalid boolean but default value&#010;-        result = catalog.validateEndpointProperties(""log:output?showAll=ggg"");&#010;-        assertFalse(result.isSuccess());&#010;-        assertEquals(""ggg"", result.getInvalidBoolean().get(""showAll""));&#010;-        assertEquals(1, result.getNumberOfErrors());&#010;-&#010;-        // dataset&#010;-        result = catalog.validateEndpointProperties(""dataset:foo?minRate=50"");&#010;-        assertTrue(result.isSuccess());&#010;-&#010;-        // time pattern&#010;-        result = catalog.validateEndpointProperties(""timer://foo?fixedRate=true&amp;delay=0&amp;period=2s"");&#010;-        assertTrue(result.isSuccess());&#010;-&#010;-        // reference lookup&#010;-        result = catalog.validateEndpointProperties(""timer://foo?fixedRate=#fixed&amp;delay=#myDelay"");&#010;-        assertTrue(result.isSuccess());&#010;-&#010;-        // optional consumer. prefix&#010;-        result = catalog.validateEndpointProperties(""file:inbox?consumer.delay=5000&amp;consumer.greedy=true"");&#010;-        assertTrue(result.isSuccess());&#010;-&#010;-        // optional without consumer. prefix&#010;-        result = catalog.validateEndpointProperties(""file:inbox?delay=5000&amp;greedy=true"");&#010;-        assertTrue(result.isSuccess());&#010;-&#010;-        // mixed optional without consumer. prefix&#010;-        result = catalog.validateEndpointProperties(""file:inbox?delay=5000&amp;consumer.greedy=true"");&#010;-        assertTrue(result.isSuccess());&#010;-&#010;-        // prefix&#010;-        result = catalog.validateEndpointProperties(""file:inbox?delay=5000&amp;scheduler.foo=123&amp;scheduler.bar=456"");&#010;-        assertTrue(result.isSuccess());&#010;-&#010;-        // stub&#010;-        result = catalog.validateEndpointProperties(""stub:foo?me=123&amp;you=456"");&#010;-        assertTrue(result.isSuccess());&#010;-&#010;-        // lenient on&#010;-        result = catalog.validateEndpointProperties(""dataformat:string:marshal?foo=bar"");&#010;-        assertTrue(result.isSuccess());&#010;-&#010;-        // lenient off&#010;-        result = catalog.validateEndpointProperties(""dataformat:string:marshal?foo=bar"", true);&#010;-        assertFalse(result.isSuccess());&#010;-        assertTrue(result.getUnknown().contains(""foo""));&#010;-&#010;-        // data format&#010;-        result = catalog.validateEndpointProperties(""dataformat:string:marshal?charset=utf-8"", true);&#010;-        assertTrue(result.isSuccess());&#010;-&#010;-        // incapable to parse&#010;-        result = catalog.validateEndpointProperties(""{{getFtpUrl}}?recursive=true"");&#010;-        assertFalse(result.isSuccess());&#010;-        assertTrue(result.getIncapable() != null);&#010;-    }&#010;-&#010;-    @Test&#010;-    public void validatePropertiesSummary() throws Exception {&#010;-        EndpointValidationResult result = catalog.validateEndpointProperties(""yammer:MESSAGES?blah=yada&amp;accessToken=aaa&amp;consumerKey=&amp;useJson=no&amp;initialDelay=five&amp;pollStrategy=myStrategy"");&#010;-        assertFalse(result.isSuccess());&#010;-        String reason = result.summaryErrorMessage(true);&#010;-        LOG.info(reason);&#010;-&#010;-        result = catalog.validateEndpointProperties(""jms:unknown:myqueue"");&#010;-        assertFalse(result.isSuccess());&#010;-        reason = result.summaryErrorMessage(false);&#010;-        LOG.info(reason);&#010;-    }&#010;-&#010;-    @Test&#010;-    public void validateTimePattern() throws Exception {&#010;-        assertTrue(catalog.validateTimePattern(""0""));&#010;-        assertTrue(catalog.validateTimePattern(""500""));&#010;-        assertTrue(catalog.validateTimePattern(""10000""));&#010;-        assertTrue(catalog.validateTimePattern(""5s""));&#010;-        assertTrue(catalog.validateTimePattern(""5sec""));&#010;-        assertTrue(catalog.validateTimePattern(""5secs""));&#010;-        assertTrue(catalog.validateTimePattern(""3m""));&#010;-        assertTrue(catalog.validateTimePattern(""3min""));&#010;-        assertTrue(catalog.validateTimePattern(""3minutes""));&#010;-        assertTrue(catalog.validateTimePattern(""5m15s""));&#010;-        assertTrue(catalog.validateTimePattern(""1h""));&#010;-        assertTrue(catalog.validateTimePattern(""1hour""));&#010;-        assertTrue(catalog.validateTimePattern(""2hours""));&#010;-&#010;-        assertFalse(catalog.validateTimePattern(""bla""));&#010;-        assertFalse(catalog.validateTimePattern(""2year""));&#010;-        assertFalse(catalog.validateTimePattern(""60darn""));&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testEndpointComponentName() throws Exception {&#010;-        String name = catalog.endpointComponentName(""jms:queue:foo"");&#010;-        assertEquals(""jms"", name);&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testSimpleExpression() throws Exception {&#010;-        SimpleValidationResult result = catalog.validateSimpleExpression(null, ""${body}"");&#010;-        assertTrue(result.isSuccess());&#010;-        assertEquals(""${body}"", result.getSimple());&#010;-&#010;-        result = catalog.validateSimpleExpression(null, ""${body"");&#010;-        assertFalse(result.isSuccess());&#010;-        assertEquals(""${body"", result.getSimple());&#010;-        LOG.info(result.getError());&#010;-        assertTrue(result.getError().startsWith(""expected symbol functionEnd but was eol at location 5""));&#010;-        assertEquals(""expected symbol functionEnd but was eol"", result.getShortError());&#010;-        assertEquals(5, result.getIndex());&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testSimplePredicate() throws Exception {&#010;-        SimpleValidationResult result = catalog.validateSimplePredicate(null, ""${body} == 'abc'"");&#010;-        assertTrue(result.isSuccess());&#010;-        assertEquals(""${body} == 'abc'"", result.getSimple());&#010;-&#010;-        result = catalog.validateSimplePredicate(null, ""${body} &gt; ${header.size"");&#010;-        assertFalse(result.isSuccess());&#010;-        assertEquals(""${body} &gt; ${header.size"", result.getSimple());&#010;-        LOG.info(result.getError());&#010;-        assertTrue(result.getError().startsWith(""expected symbol functionEnd but was eol at location 22""));&#010;-        assertEquals(""expected symbol functionEnd but was eol"", result.getShortError());&#010;-        assertEquals(22, result.getIndex());&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testSimplePredicatePlaceholder() throws Exception {&#010;-        SimpleValidationResult result = catalog.validateSimplePredicate(null, ""${body} contains '{{danger}}'"");&#010;-        assertTrue(result.isSuccess());&#010;-        assertEquals(""${body} contains '{{danger}}'"", result.getSimple());&#010;-&#010;-        result = catalog.validateSimplePredicate(null, ""${bdy} contains '{{danger}}'"");&#010;-        assertFalse(result.isSuccess());&#010;-        assertEquals(""${bdy} contains '{{danger}}'"", result.getSimple());&#010;-        LOG.info(result.getError());&#010;-        assertTrue(result.getError().startsWith(""Unknown function: bdy at location 0""));&#010;-        assertTrue(result.getError().contains(""'{{danger}}'""));&#010;-        assertEquals(""Unknown function: bdy"", result.getShortError());&#010;-        assertEquals(0, result.getIndex());&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testValidateLanguage() throws Exception {&#010;-        LanguageValidationResult result = catalog.validateLanguageExpression(null, ""simple"", ""${body}"");&#010;-        assertTrue(result.isSuccess());&#010;-        assertEquals(""${body}"", result.getText());&#010;-&#010;-        result = catalog.validateLanguageExpression(null, ""header"", ""foo"");&#010;-        assertTrue(result.isSuccess());&#010;-        assertEquals(""foo"", result.getText());&#010;-&#010;-        result = catalog.validateLanguagePredicate(null, ""simple"", ""${body} &gt; 10"");&#010;-        assertTrue(result.isSuccess());&#010;-        assertEquals(""${body} &gt; 10"", result.getText());&#010;-&#010;-        result = catalog.validateLanguagePredicate(null, ""header"", ""bar"");&#010;-        assertTrue(result.isSuccess());&#010;-        assertEquals(""bar"", result.getText());&#010;-&#010;-        result = catalog.validateLanguagePredicate(null, ""foobar"", ""bar"");&#010;-        assertFalse(result.isSuccess());&#010;-        assertEquals(""Unknown language foobar"", result.getError());&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testValidateEndpointConsumerOnly() throws Exception {&#010;-        String uri = ""file:inbox?bufferSize=4096&amp;readLock=changed&amp;delete=true"";&#010;-        EndpointValidationResult result = catalog.validateEndpointProperties(uri, false, true, false);&#010;-        assertTrue(result.isSuccess());&#010;-&#010;-        uri = ""file:inbox?bufferSize=4096&amp;readLock=changed&amp;delete=true&amp;fileExist=Append"";&#010;-        result = catalog.validateEndpointProperties(uri, false, true, false);&#010;-        assertFalse(result.isSuccess());&#010;-&#010;-        assertEquals(""fileExist"", result.getNotConsumerOnly().iterator().next());&#010;-    }&#010;-&#010;-    @Test&#010;-    public void testValidateEndpointProducerOnly() throws Exception {&#010;-        String uri = ""file:outbox?bufferSize=4096&amp;fileExist=Append"";&#010;-        EndpointValidationResult result = catalog.validateEndpointProperties(uri, false, false, true);&#010;-        assertTrue(result.isSuccess());&#010;-&#010;-        uri = ""file:outbox?bufferSize=4096&amp;fileExist=Append&amp;delete=true"";&#010;-        result = catalog.validateEndpointProperties(uri, false, false, true);&#010;-        assertFalse(result.isSuccess());&#010;-&#010;-        assertEquals(""delete"", result.getNotProducerOnly().iterator().next());&#010;-    }&#010;-&#010;-}&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C392ff0b6a5e9466c9cdb499eabbaf550%40git.apache.org%3E,2017-04-14 10:52:57,commits,324.0,  [3/6] camel git commit: Rename catalog to runtimecatalog to avoid clash with same package name in camel-catalog.
4,4,5.0,325.0,davscl...@apache.org,"http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/runtimecatalog/AbstractCamelCatalog.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/runtimecatalog/AbstractCamelCatalog.java b/camel-core/src/main/java/org/apache/camel/runtimecatalog/AbstractCamelCatalog.java&#010;new file mode 100644&#010;index 0000000..0420708&#010;--- /dev/null&#010;+++ b/camel-core/src/main/java/org/apache/camel/runtimecatalog/AbstractCamelCatalog.java&#010;@@ -0,0 +1,1294 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.runtimecatalog;&#010;+&#010;+import java.lang.reflect.InvocationTargetException;&#010;+import java.lang.reflect.Method;&#010;+import java.net.URI;&#010;+import java.net.URISyntaxException;&#010;+import java.util.ArrayList;&#010;+import java.util.Arrays;&#010;+import java.util.HashMap;&#010;+import java.util.Iterator;&#010;+import java.util.LinkedHashMap;&#010;+import java.util.LinkedHashSet;&#010;+import java.util.List;&#010;+import java.util.Map;&#010;+import java.util.Objects;&#010;+import java.util.Set;&#010;+import java.util.TreeMap;&#010;+import java.util.regex.Matcher;&#010;+import java.util.regex.Pattern;&#010;+&#010;+import static org.apache.camel.runtimecatalog.CatalogHelper.after;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.getNames;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.getPropertyDefaultValue;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.getPropertyEnum;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.getPropertyKind;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.getPropertyNameFromNameWithPrefix;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.getPropertyPrefix;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.getRow;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.isComponentConsumerOnly;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.isComponentLenientProperties;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.isComponentProducerOnly;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.isPropertyBoolean;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.isPropertyConsumerOnly;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.isPropertyInteger;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.isPropertyMultiValue;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.isPropertyNumber;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.isPropertyObject;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.isPropertyProducerOnly;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.isPropertyRequired;&#010;+import static org.apache.camel.runtimecatalog.JSonSchemaHelper.stripOptionalPrefixFromName;&#010;+import static org.apache.camel.runtimecatalog.URISupport.createQueryString;&#010;+import static org.apache.camel.runtimecatalog.URISupport.isEmpty;&#010;+import static org.apache.camel.runtimecatalog.URISupport.normalizeUri;&#010;+import static org.apache.camel.runtimecatalog.URISupport.stripQuery;&#010;+&#010;+/**&#010;+ * Base class for both the runtime RuntimeCamelCatalog from camel-core and the complete CamelCatalog from camel-catalog.&#010;+ */&#010;+public abstract class AbstractCamelCatalog {&#010;+&#010;+    // CHECKSTYLE:OFF&#010;+&#010;+    private static final Pattern SYNTAX_PATTERN = Pattern.compile(""(\\w+)"");&#010;+&#010;+    private SuggestionStrategy suggestionStrategy;&#010;+    private JSonSchemaResolver jsonSchemaResolver;&#010;+&#010;+    public SuggestionStrategy getSuggestionStrategy() {&#010;+        return suggestionStrategy;&#010;+    }&#010;+&#010;+    public void setSuggestionStrategy(SuggestionStrategy suggestionStrategy) {&#010;+        this.suggestionStrategy = suggestionStrategy;&#010;+    }&#010;+&#010;+    public JSonSchemaResolver getJSonSchemaResolver() {&#010;+        return jsonSchemaResolver;&#010;+    }&#010;+&#010;+    public void setJSonSchemaResolver(JSonSchemaResolver resolver) {&#010;+        this.jsonSchemaResolver = resolver;&#010;+    }&#010;+&#010;+    public boolean validateTimePattern(String pattern) {&#010;+        return validateInteger(pattern);&#010;+    }&#010;+&#010;+    public EndpointValidationResult validateEndpointProperties(String uri) {&#010;+        return validateEndpointProperties(uri, false, false, false);&#010;+    }&#010;+&#010;+    public EndpointValidationResult validateEndpointProperties(String uri, boolean ignoreLenientProperties) {&#010;+        return validateEndpointProperties(uri, ignoreLenientProperties, false, false);&#010;+    }&#010;+&#010;+    public EndpointValidationResult validateProperties(String scheme, Map&lt;String, String&gt; properties) {&#010;+        EndpointValidationResult result = new EndpointValidationResult(scheme);&#010;+&#010;+        String json = jsonSchemaResolver.getComponentJSonSchema(scheme);&#010;+        List&lt;Map&lt;String, String&gt;&gt; rows = JSonSchemaHelper.parseJsonSchema(""properties"", json, true);&#010;+        List&lt;Map&lt;String, String&gt;&gt; componentProps = JSonSchemaHelper.parseJsonSchema(""componentProperties"", json, true);&#010;+&#010;+        // endpoint options have higher priority so remove those from component&#010;+        // that may clash&#010;+        componentProps.stream()&#010;+            .filter(c -&gt; rows.stream().noneMatch(e -&gt; Objects.equals(e.get(""name""), c.get(""name""))))&#010;+            .forEach(rows::add);&#010;+&#010;+        boolean lenient = Boolean.getBoolean(properties.getOrDefault(""lenient"", ""false""));&#010;+&#010;+        // the dataformat component refers to a data format so lets add the properties for the selected&#010;+        // data format to the list of rows&#010;+        if (""dataformat"".equals(scheme)) {&#010;+            String dfName = properties.get(""name"");&#010;+            if (dfName != null) {&#010;+                String dfJson = jsonSchemaResolver.getDataFormatJSonSchema(dfName);&#010;+                List&lt;Map&lt;String, String&gt;&gt; dfRows = JSonSchemaHelper.parseJsonSchema(""properties"", dfJson, true);&#010;+                if (dfRows != null &amp;&amp; !dfRows.isEmpty()) {&#010;+                    rows.addAll(dfRows);&#010;+                }&#010;+            }&#010;+        }&#010;+&#010;+        for (Map.Entry&lt;String, String&gt; property : properties.entrySet()) {&#010;+            String value = property.getValue();&#010;+            String originalName = property.getKey();&#010;+            String name = property.getKey();&#010;+            // the name may be using an optional prefix, so lets strip that because the options&#010;+            // in the schema are listed without the prefix&#010;+            name = stripOptionalPrefixFromName(rows, name);&#010;+            // the name may be using a prefix, so lets see if we can find the real property name&#010;+            String propertyName = getPropertyNameFromNameWithPrefix(rows, name);&#010;+            if (propertyName != null) {&#010;+                name = propertyName;&#010;+            }&#010;+&#010;+            String prefix = getPropertyPrefix(rows, name);&#010;+            String kind = getPropertyKind(rows, name);&#010;+            boolean namePlaceholder = name.startsWith(""{{"") &amp;&amp; name.endsWith(""}}"");&#010;+            boolean valuePlaceholder = value.startsWith(""{{"") || value.startsWith(""${"") || value.startsWith(""$simple{"");&#010;+            boolean lookup = value.startsWith(""#"") &amp;&amp; value.length() &gt; 1;&#010;+            // we cannot evaluate multi values as strict as the others, as we don't know their expected types&#010;+            boolean multiValue = prefix != null &amp;&amp; originalName.startsWith(prefix) &amp;&amp; isPropertyMultiValue(rows, name);&#010;+&#010;+            Map&lt;String, String&gt; row = getRow(rows, name);&#010;+            if (row == null) {&#010;+                // unknown option&#010;+&#010;+                // only add as error if the component is not lenient properties, or not stub component&#010;+                // and the name is not a property placeholder for one or more values&#010;+                if (!namePlaceholder &amp;&amp; !""stub"".equals(scheme)) {&#010;+                    if (lenient) {&#010;+                        // as if we are lenient then the option is a dynamic extra option which we cannot validate&#010;+                        result.addLenient(name);&#010;+                    } else {&#010;+                        // its unknown&#010;+                        result.addUnknown(name);&#010;+                        if (suggestionStrategy != null) {&#010;+                            String[] suggestions = suggestionStrategy.suggestEndpointOptions(getNames(rows), name);&#010;+                            if (suggestions != null) {&#010;+                                result.addUnknownSuggestions(name, suggestions);&#010;+                            }&#010;+                        }&#010;+                    }&#010;+                }&#010;+            } else {&#010;+                /* TODO: we may need to add something in the properties to know if they are related to a producer or consumer&#010;+                if (""parameter"".equals(kind)) {&#010;+                    // consumer only or producer only mode for parameters&#010;+                    if (consumerOnly) {&#010;+                        boolean producer = isPropertyProducerOnly(rows, name);&#010;+                        if (producer) {&#010;+                            // the option is only for producer so you cannot use it in consumer mode&#010;+                            result.addNotConsumerOnly(name);&#010;+                        }&#010;+                    } else if (producerOnly) {&#010;+                        boolean consumer = isPropertyConsumerOnly(rows, name);&#010;+                        if (consumer) {&#010;+                            // the option is only for consumer so you cannot use it in producer mode&#010;+                            result.addNotProducerOnly(name);&#010;+                        }&#010;+                    }&#010;+                }&#010;+                */&#010;+&#010;+                // default value&#010;+                String defaultValue = getPropertyDefaultValue(rows, name);&#010;+                if (defaultValue != null) {&#010;+                    result.addDefaultValue(name, defaultValue);&#010;+                }&#010;+&#010;+                // is required but the value is empty&#010;+                boolean required = isPropertyRequired(rows, name);&#010;+                if (required &amp;&amp; isEmpty(value)) {&#010;+                    result.addRequired(name);&#010;+                }&#010;+&#010;+                // is enum but the value is not within the enum range&#010;+                // but we can only check if the value is not a placeholder&#010;+                String enums = getPropertyEnum(rows, name);&#010;+                if (!multiValue &amp;&amp; !valuePlaceholder &amp;&amp; !lookup &amp;&amp; enums != null) {&#010;+                    String[] choices = enums.split("","");&#010;+                    boolean found = false;&#010;+                    for (String s : choices) {&#010;+                        if (value.equalsIgnoreCase(s)) {&#010;+                            found = true;&#010;+                            break;&#010;+                        }&#010;+                    }&#010;+                    if (!found) {&#010;+                        result.addInvalidEnum(name, value);&#010;+                        result.addInvalidEnumChoices(name, choices);&#010;+                        if (suggestionStrategy != null) {&#010;+                            Set&lt;String&gt; names = new LinkedHashSet&lt;&gt;();&#010;+                            names.addAll(Arrays.asList(choices));&#010;+                            String[] suggestions = suggestionStrategy.suggestEndpointOptions(names, value);&#010;+                            if (suggestions != null) {&#010;+                                result.addInvalidEnumSuggestions(name, suggestions);&#010;+                            }&#010;+                        }&#010;+&#010;+                    }&#010;+                }&#010;+&#010;+                // is reference lookup of bean (not applicable for @UriPath, enums, or multi-valued)&#010;+                if (!multiValue &amp;&amp; enums == null &amp;&amp; !""path"".equals(kind) &amp;&amp; isPropertyObject(rows, name)) {&#010;+                    // must start with # and be at least 2 characters&#010;+                    if (!value.startsWith(""#"") || value.length() &lt;= 1) {&#010;+                        result.addInvalidReference(name, value);&#010;+                    }&#010;+                }&#010;+&#010;+                // is boolean&#010;+                if (!multiValue &amp;&amp; !valuePlaceholder &amp;&amp; !lookup &amp;&amp; isPropertyBoolean(rows, name)) {&#010;+                    // value must be a boolean&#010;+                    boolean bool = ""true"".equalsIgnoreCase(value) || ""false"".equalsIgnoreCase(value);&#010;+                    if (!bool) {&#010;+                        result.addInvalidBoolean(name, value);&#010;+                    }&#010;+                }&#010;+&#010;+                // is integer&#010;+                if (!multiValue &amp;&amp; !valuePlaceholder &amp;&amp; !lookup &amp;&amp; isPropertyInteger(rows, name)) {&#010;+                    // value must be an integer&#010;+                    boolean valid = validateInteger(value);&#010;+                    if (!valid) {&#010;+                        result.addInvalidInteger(name, value);&#010;+                    }&#010;+                }&#010;+&#010;+                // is number&#010;+                if (!multiValue &amp;&amp; !valuePlaceholder &amp;&amp; !lookup &amp;&amp; isPropertyNumber(rows, name)) {&#010;+                    // value must be an number&#010;+                    boolean valid = false;&#010;+                    try {&#010;+                        valid = !Double.valueOf(value).isNaN() || !Float.valueOf(value).isNaN();&#010;+                    } catch (Exception e) {&#010;+                        // ignore&#010;+                    }&#010;+                    if (!valid) {&#010;+                        result.addInvalidNumber(name, value);&#010;+                    }&#010;+                }&#010;+            }&#010;+        }&#010;+&#010;+        // now check if all required values are there, and that a default value does not exists&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            String name = row.get(""name"");&#010;+            boolean required = isPropertyRequired(rows, name);&#010;+            if (required) {&#010;+                String value = properties.get(name);&#010;+                if (isEmpty(value)) {&#010;+                    value = getPropertyDefaultValue(rows, name);&#010;+                }&#010;+                if (isEmpty(value)) {&#010;+                    result.addRequired(name);&#010;+                }&#010;+            }&#010;+        }&#010;+&#010;+        return result;&#010;+    }&#010;+&#010;+    public EndpointValidationResult validateEndpointProperties(String uri, boolean ignoreLenientProperties, boolean consumerOnly, boolean producerOnly) {&#010;+        EndpointValidationResult result = new EndpointValidationResult(uri);&#010;+&#010;+        Map&lt;String, String&gt; properties;&#010;+        List&lt;Map&lt;String, String&gt;&gt; rows;&#010;+        boolean lenientProperties;&#010;+        String scheme;&#010;+&#010;+        try {&#010;+            String json = null;&#010;+&#010;+            // parse the uri&#010;+            URI u = normalizeUri(uri);&#010;+            scheme = u.getScheme();&#010;+&#010;+            if (scheme != null) {&#010;+                json = jsonSchemaResolver.getComponentJSonSchema(scheme);&#010;+            }&#010;+            if (json == null) {&#010;+                // if the uri starts with a placeholder then we are also incapable of parsing it as we wasn't able to resolve the component name&#010;+                if (uri.startsWith(""{{"")) {&#010;+                    result.addIncapable(uri);&#010;+                } else if (scheme != null) {&#010;+                    result.addUnknownComponent(scheme);&#010;+                } else {&#010;+                    result.addUnknownComponent(uri);&#010;+                }&#010;+                return result;&#010;+            }&#010;+&#010;+            rows = JSonSchemaHelper.parseJsonSchema(""component"", json, false);&#010;+&#010;+            // is the component capable of both consumer and producer?&#010;+            boolean canConsumeAndProduce = false;&#010;+            if (!isComponentConsumerOnly(rows) &amp;&amp; !isComponentProducerOnly(rows)) {&#010;+                canConsumeAndProduce = true;&#010;+            }&#010;+&#010;+            if (canConsumeAndProduce &amp;&amp; consumerOnly) {&#010;+                // lenient properties is not support in consumer only mode if the component can do both of them&#010;+                lenientProperties = false;&#010;+            } else {&#010;+                // only enable lenient properties if we should not ignore&#010;+                lenientProperties = !ignoreLenientProperties &amp;&amp; isComponentLenientProperties(rows);&#010;+            }&#010;+            rows = JSonSchemaHelper.parseJsonSchema(""properties"", json, true);&#010;+            properties = endpointProperties(uri);&#010;+        } catch (URISyntaxException e) {&#010;+            if (uri.startsWith(""{{"")) {&#010;+                // if the uri starts with a placeholder then we are also incapable of parsing it as we wasn't able to resolve the component name&#010;+                result.addIncapable(uri);&#010;+            } else {&#010;+                result.addSyntaxError(e.getMessage());&#010;+            }&#010;+&#010;+            return result;&#010;+        }&#010;+&#010;+        // the dataformat component refers to a data format so lets add the properties for the selected&#010;+        // data format to the list of rows&#010;+        if (""dataformat"".equals(scheme)) {&#010;+            String dfName = properties.get(""name"");&#010;+            if (dfName != null) {&#010;+                String dfJson = jsonSchemaResolver.getDataFormatJSonSchema(dfName);&#010;+                List&lt;Map&lt;String, String&gt;&gt; dfRows = JSonSchemaHelper.parseJsonSchema(""properties"", dfJson, true);&#010;+                if (dfRows != null &amp;&amp; !dfRows.isEmpty()) {&#010;+                    rows.addAll(dfRows);&#010;+                }&#010;+            }&#010;+        }&#010;+&#010;+        for (Map.Entry&lt;String, String&gt; property : properties.entrySet()) {&#010;+            String value = property.getValue();&#010;+            String originalName = property.getKey();&#010;+            String name = property.getKey();&#010;+            // the name may be using an optional prefix, so lets strip that because the options&#010;+            // in the schema are listed without the prefix&#010;+            name = stripOptionalPrefixFromName(rows, name);&#010;+            // the name may be using a prefix, so lets see if we can find the real property name&#010;+            String propertyName = getPropertyNameFromNameWithPrefix(rows, name);&#010;+            if (propertyName != null) {&#010;+                name = propertyName;&#010;+            }&#010;+&#010;+            String prefix = getPropertyPrefix(rows, name);&#010;+            String kind = getPropertyKind(rows, name);&#010;+            boolean namePlaceholder = name.startsWith(""{{"") &amp;&amp; name.endsWith(""}}"");&#010;+            boolean valuePlaceholder = value.startsWith(""{{"") || value.startsWith(""${"") || value.startsWith(""$simple{"");&#010;+            boolean lookup = value.startsWith(""#"") &amp;&amp; value.length() &gt; 1;&#010;+            // we cannot evaluate multi values as strict as the others, as we don't know their expected types&#010;+            boolean mulitValue = prefix != null &amp;&amp; originalName.startsWith(prefix) &amp;&amp; isPropertyMultiValue(rows, name);&#010;+&#010;+            Map&lt;String, String&gt; row = getRow(rows, name);&#010;+            if (row == null) {&#010;+                // unknown option&#010;+&#010;+                // only add as error if the component is not lenient properties, or not stub component&#010;+                // and the name is not a property placeholder for one or more values&#010;+                if (!namePlaceholder &amp;&amp; !""stub"".equals(scheme)) {&#010;+                    if (lenientProperties) {&#010;+                        // as if we are lenient then the option is a dynamic extra option which we cannot validate&#010;+                        result.addLenient(name);&#010;+                    } else {&#010;+                        // its unknown&#010;+                        result.addUnknown(name);&#010;+                        if (suggestionStrategy != null) {&#010;+                            String[] suggestions = suggestionStrategy.suggestEndpointOptions(getNames(rows), name);&#010;+                            if (suggestions != null) {&#010;+                                result.addUnknownSuggestions(name, suggestions);&#010;+                            }&#010;+                        }&#010;+                    }&#010;+                }&#010;+            } else {&#010;+                if (""parameter"".equals(kind)) {&#010;+                    // consumer only or producer only mode for parameters&#010;+                    if (consumerOnly) {&#010;+                        boolean producer = isPropertyProducerOnly(rows, name);&#010;+                        if (producer) {&#010;+                            // the option is only for producer so you cannot use it in consumer mode&#010;+                            result.addNotConsumerOnly(name);&#010;+                        }&#010;+                    } else if (producerOnly) {&#010;+                        boolean consumer = isPropertyConsumerOnly(rows, name);&#010;+                        if (consumer) {&#010;+                            // the option is only for consumer so you cannot use it in producer mode&#010;+                            result.addNotProducerOnly(name);&#010;+                        }&#010;+                    }&#010;+                }&#010;+&#010;+                // default value&#010;+                String defaultValue = getPropertyDefaultValue(rows, name);&#010;+                if (defaultValue != null) {&#010;+                    result.addDefaultValue(name, defaultValue);&#010;+                }&#010;+&#010;+                // is required but the value is empty&#010;+                boolean required = isPropertyRequired(rows, name);&#010;+                if (required &amp;&amp; isEmpty(value)) {&#010;+                    result.addRequired(name);&#010;+                }&#010;+&#010;+                // is enum but the value is not within the enum range&#010;+                // but we can only check if the value is not a placeholder&#010;+                String enums = getPropertyEnum(rows, name);&#010;+                if (!mulitValue &amp;&amp; !valuePlaceholder &amp;&amp; !lookup &amp;&amp; enums != null) {&#010;+                    String[] choices = enums.split("","");&#010;+                    boolean found = false;&#010;+                    for (String s : choices) {&#010;+                        if (value.equalsIgnoreCase(s)) {&#010;+                            found = true;&#010;+                            break;&#010;+                        }&#010;+                    }&#010;+                    if (!found) {&#010;+                        result.addInvalidEnum(name, value);&#010;+                        result.addInvalidEnumChoices(name, choices);&#010;+                        if (suggestionStrategy != null) {&#010;+                            Set&lt;String&gt; names = new LinkedHashSet&lt;&gt;();&#010;+                            names.addAll(Arrays.asList(choices));&#010;+                            String[] suggestions = suggestionStrategy.suggestEndpointOptions(names, value);&#010;+                            if (suggestions != null) {&#010;+                                result.addInvalidEnumSuggestions(name, suggestions);&#010;+                            }&#010;+                        }&#010;+&#010;+                    }&#010;+                }&#010;+&#010;+                // is reference lookup of bean (not applicable for @UriPath, enums, or multi-valued)&#010;+                if (!mulitValue &amp;&amp; enums == null &amp;&amp; !""path"".equals(kind) &amp;&amp; isPropertyObject(rows, name)) {&#010;+                    // must start with # and be at least 2 characters&#010;+                    if (!value.startsWith(""#"") || value.length() &lt;= 1) {&#010;+                        result.addInvalidReference(name, value);&#010;+                    }&#010;+                }&#010;+&#010;+                // is boolean&#010;+                if (!mulitValue &amp;&amp; !valuePlaceholder &amp;&amp; !lookup &amp;&amp; isPropertyBoolean(rows, name)) {&#010;+                    // value must be a boolean&#010;+                    boolean bool = ""true"".equalsIgnoreCase(value) || ""false"".equalsIgnoreCase(value);&#010;+                    if (!bool) {&#010;+                        result.addInvalidBoolean(name, value);&#010;+                    }&#010;+                }&#010;+&#010;+                // is integer&#010;+                if (!mulitValue &amp;&amp; !valuePlaceholder &amp;&amp; !lookup &amp;&amp; isPropertyInteger(rows, name)) {&#010;+                    // value must be an integer&#010;+                    boolean valid = validateInteger(value);&#010;+                    if (!valid) {&#010;+                        result.addInvalidInteger(name, value);&#010;+                    }&#010;+                }&#010;+&#010;+                // is number&#010;+                if (!mulitValue &amp;&amp; !valuePlaceholder &amp;&amp; !lookup &amp;&amp; isPropertyNumber(rows, name)) {&#010;+                    // value must be an number&#010;+                    boolean valid = false;&#010;+                    try {&#010;+                        valid = !Double.valueOf(value).isNaN() || !Float.valueOf(value).isNaN();&#010;+                    } catch (Exception e) {&#010;+                        // ignore&#010;+                    }&#010;+                    if (!valid) {&#010;+                        result.addInvalidNumber(name, value);&#010;+                    }&#010;+                }&#010;+            }&#010;+        }&#010;+&#010;+        // now check if all required values are there, and that a default value does not exists&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            String name = row.get(""name"");&#010;+            boolean required = isPropertyRequired(rows, name);&#010;+            if (required) {&#010;+                String value = properties.get(name);&#010;+                if (isEmpty(value)) {&#010;+                    value = getPropertyDefaultValue(rows, name);&#010;+                }&#010;+                if (isEmpty(value)) {&#010;+                    result.addRequired(name);&#010;+                }&#010;+            }&#010;+        }&#010;+&#010;+        return result;&#010;+    }&#010;+&#010;+    public Map&lt;String, String&gt; endpointProperties(String uri) throws URISyntaxException {&#010;+        // need to normalize uri first&#010;+        URI u = normalizeUri(uri);&#010;+        String scheme = u.getScheme();&#010;+&#010;+        String json = jsonSchemaResolver.getComponentJSonSchema(scheme);&#010;+        if (json == null) {&#010;+            throw new IllegalArgumentException(""Cannot find endpoint with scheme "" + scheme);&#010;+        }&#010;+&#010;+        // grab the syntax&#010;+        String syntax = null;&#010;+        String alternativeSyntax = null;&#010;+        List&lt;Map&lt;String, String&gt;&gt; rows = JSonSchemaHelper.parseJsonSchema(""component"", json, false);&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            if (row.containsKey(""syntax"")) {&#010;+                syntax = row.get(""syntax"");&#010;+            }&#010;+            if (row.containsKey(""alternativeSyntax"")) {&#010;+                alternativeSyntax = row.get(""alternativeSyntax"");&#010;+            }&#010;+        }&#010;+        if (syntax == null) {&#010;+            throw new IllegalArgumentException(""Endpoint with scheme "" + scheme + "" has no syntax defined in the json schema"");&#010;+        }&#010;+&#010;+        // only if we support alternative syntax, and the uri contains the username and password in the authority&#010;+        // part of the uri, then we would need some special logic to capture that information and strip those&#010;+        // details from the uri, so we can continue parsing the uri using the normal syntax&#010;+        Map&lt;String, String&gt; userInfoOptions = new LinkedHashMap&lt;String, String&gt;();&#010;+        if (alternativeSyntax != null &amp;&amp; alternativeSyntax.contains(""@"")) {&#010;+            // clip the scheme from the syntax&#010;+            alternativeSyntax = after(alternativeSyntax, "":"");&#010;+            // trim so only userinfo&#010;+            int idx = alternativeSyntax.indexOf(""@"");&#010;+            String fields = alternativeSyntax.substring(0, idx);&#010;+            String[] names = fields.split("":"");&#010;+&#010;+            // grab authority part and grab username and/or password&#010;+            String authority = u.getAuthority();&#010;+            if (authority != null &amp;&amp; authority.contains(""@"")) {&#010;+                String username = null;&#010;+                String password = null;&#010;+&#010;+                // grab unserinfo part before @&#010;+                String userInfo = authority.substring(0, authority.indexOf(""@""));&#010;+                String[] parts = userInfo.split("":"");&#010;+                if (parts.length == 2) {&#010;+                    username = parts[0];&#010;+                    password = parts[1];&#010;+                } else {&#010;+                    // only username&#010;+                    username = userInfo;&#010;+                }&#010;+&#010;+                // remember the username and/or password which we add later to the options&#010;+                if (names.length == 2) {&#010;+                    userInfoOptions.put(names[0], username);&#010;+                    if (password != null) {&#010;+                        // password is optional&#010;+                        userInfoOptions.put(names[1], password);&#010;+                    }&#010;+                }&#010;+            }&#010;+        }&#010;+&#010;+        // clip the scheme from the syntax&#010;+        syntax = after(syntax, "":"");&#010;+        // clip the scheme from the uri&#010;+        uri = after(uri, "":"");&#010;+        String uriPath = stripQuery(uri);&#010;+&#010;+        // strip user info from uri path&#010;+        if (!userInfoOptions.isEmpty()) {&#010;+            int idx = uriPath.indexOf('@');&#010;+            if (idx &gt; -1) {&#010;+                uriPath = uriPath.substring(idx + 1);&#010;+            }&#010;+        }&#010;+&#010;+        // strip double slash in the start&#010;+        if (uriPath != null &amp;&amp; uriPath.startsWith(""//"")) {&#010;+            uriPath = uriPath.substring(2);&#010;+        }&#010;+&#010;+        // parse the syntax and find the names of each option&#010;+        Matcher matcher = SYNTAX_PATTERN.matcher(syntax);&#010;+        List&lt;String&gt; word = new ArrayList&lt;String&gt;();&#010;+        while (matcher.find()) {&#010;+            String s = matcher.group(1);&#010;+            if (!scheme.equals(s)) {&#010;+                word.add(s);&#010;+            }&#010;+        }&#010;+        // parse the syntax and find each token between each option&#010;+        String[] tokens = SYNTAX_PATTERN.split(syntax);&#010;+&#010;+        // find the position where each option start/end&#010;+        List&lt;String&gt; word2 = new ArrayList&lt;String&gt;();&#010;+        int prev = 0;&#010;+        int prevPath = 0;&#010;+&#010;+        // special for activemq/jms where the enum for destinationType causes a token issue as it includes a colon&#010;+        // for 'temp:queue' and 'temp:topic' values&#010;+        if (""activemq"".equals(scheme) || ""jms"".equals(scheme)) {&#010;+            if (uriPath.startsWith(""temp:"")) {&#010;+                prevPath = 5;&#010;+            }&#010;+        }&#010;+&#010;+        for (String token : tokens) {&#010;+            if (token.isEmpty()) {&#010;+                continue;&#010;+            }&#010;+&#010;+            // special for some tokens where :// can be used also, eg http://foo&#010;+            int idx = -1;&#010;+            int len = 0;&#010;+            if ("":"".equals(token)) {&#010;+                idx = uriPath.indexOf(""://"", prevPath);&#010;+                len = 3;&#010;+            }&#010;+            if (idx == -1) {&#010;+                idx = uriPath.indexOf(token, prevPath);&#010;+                len = token.length();&#010;+            }&#010;+&#010;+            if (idx &gt; 0) {&#010;+                String option = uriPath.substring(prev, idx);&#010;+                word2.add(option);&#010;+                prev = idx + len;&#010;+                prevPath = prev;&#010;+            }&#010;+        }&#010;+        // special for last or if we did not add anyone&#010;+        if (prev &gt; 0 || word2.isEmpty()) {&#010;+            String option = uriPath.substring(prev);&#010;+            word2.add(option);&#010;+        }&#010;+&#010;+        rows = JSonSchemaHelper.parseJsonSchema(""properties"", json, true);&#010;+&#010;+        boolean defaultValueAdded = false;&#010;+&#010;+        // now parse the uri to know which part isw what&#010;+        Map&lt;String, String&gt; options = new LinkedHashMap&lt;String, String&gt;();&#010;+&#010;+        // include the username and password from the userinfo section&#010;+        if (!userInfoOptions.isEmpty()) {&#010;+            options.putAll(userInfoOptions);&#010;+        }&#010;+&#010;+        // word contains the syntax path elements&#010;+        Iterator&lt;String&gt; it = word2.iterator();&#010;+        for (int i = 0; i &lt; word.size(); i++) {&#010;+            String key = word.get(i);&#010;+&#010;+            boolean allOptions = word.size() == word2.size();&#010;+            boolean required = isPropertyRequired(rows, key);&#010;+            String defaultValue = getPropertyDefaultValue(rows, key);&#010;+&#010;+            // we have all options so no problem&#010;+            if (allOptions) {&#010;+                String value = it.next();&#010;+                options.put(key, value);&#010;+            } else {&#010;+                // we have a little problem as we do not not have all options&#010;+                if (!required) {&#010;+                    String value = null;&#010;+&#010;+                    boolean last = i == word.size() - 1;&#010;+                    if (last) {&#010;+                        // if its the last value then use it instead of the default value&#010;+                        value = it.hasNext() ? it.next() : null;&#010;+                        if (value != null) {&#010;+                            options.put(key, value);&#010;+                        } else {&#010;+                            value = defaultValue;&#010;+                        }&#010;+                    }&#010;+                    if (value != null) {&#010;+                        options.put(key, value);&#010;+                        defaultValueAdded = true;&#010;+                    }&#010;+                } else {&#010;+                    String value = it.hasNext() ? it.next() : null;&#010;+                    if (value != null) {&#010;+                        options.put(key, value);&#010;+                    }&#010;+                }&#010;+            }&#010;+        }&#010;+&#010;+        Map&lt;String, String&gt; answer = new LinkedHashMap&lt;String, String&gt;();&#010;+&#010;+        // remove all options which are using default values and are not required&#010;+        for (Map.Entry&lt;String, String&gt; entry : options.entrySet()) {&#010;+            String key = entry.getKey();&#010;+            String value = entry.getValue();&#010;+&#010;+            if (defaultValueAdded) {&#010;+                boolean required = isPropertyRequired(rows, key);&#010;+                String defaultValue = getPropertyDefaultValue(rows, key);&#010;+&#010;+                if (!required &amp;&amp; defaultValue != null) {&#010;+                    if (defaultValue.equals(value)) {&#010;+                        continue;&#010;+                    }&#010;+                }&#010;+            }&#010;+&#010;+            // we should keep this in the answer&#010;+            answer.put(key, value);&#010;+        }&#010;+&#010;+        // now parse the uri parameters&#010;+        Map&lt;String, Object&gt; parameters = URISupport.parseParameters(u);&#010;+&#010;+        // and covert the values to String so its JMX friendly&#010;+        while (!parameters.isEmpty()) {&#010;+            Map.Entry&lt;String, Object&gt; entry = parameters.entrySet().iterator().next();&#010;+            String key = entry.getKey();&#010;+            String value = entry.getValue() != null ? entry.getValue().toString() : """";&#010;+&#010;+            boolean multiValued = isPropertyMultiValue(rows, key);&#010;+            if (multiValued) {&#010;+                String prefix = getPropertyPrefix(rows, key);&#010;+                // extra all the multi valued options&#010;+                Map&lt;String, Object&gt; values = URISupport.extractProperties(parameters, prefix);&#010;+                // build a string with the extra multi valued options with the prefix and &amp; as separator&#010;+                CollectionStringBuffer csb = new CollectionStringBuffer(""&amp;"");&#010;+                for (Map.Entry&lt;String, Object&gt; multi : values.entrySet()) {&#010;+                    String line = prefix + multi.getKey() + ""="" + (multi.getValue() != null ? multi.getValue().toString() : """");&#010;+                    csb.append(line);&#010;+                }&#010;+                // append the extra multi-values to the existing (which contains the first multi value)&#010;+                if (!csb.isEmpty()) {&#010;+                    value = value + ""&amp;"" + csb.toString();&#010;+                }&#010;+            }&#010;+&#010;+            answer.put(key, value);&#010;+            // remove the parameter as we run in a while loop until no more parameters&#010;+            parameters.remove(key);&#010;+        }&#010;+&#010;+        return answer;&#010;+    }&#010;+&#010;+    public Map&lt;String, String&gt; endpointLenientProperties(String uri) throws URISyntaxException {&#010;+        // need to normalize uri first&#010;+&#010;+        // parse the uri&#010;+        URI u = normalizeUri(uri);&#010;+        String scheme = u.getScheme();&#010;+&#010;+        String json = jsonSchemaResolver.getComponentJSonSchema(scheme);&#010;+        if (json == null) {&#010;+            throw new IllegalArgumentException(""Cannot find endpoint with scheme "" + scheme);&#010;+        }&#010;+&#010;+        List&lt;Map&lt;String, String&gt;&gt; rows = JSonSchemaHelper.parseJsonSchema(""properties"", json, true);&#010;+&#010;+        // now parse the uri parameters&#010;+        Map&lt;String, Object&gt; parameters = URISupport.parseParameters(u);&#010;+&#010;+        // all the known options&#010;+        Set&lt;String&gt; names = getNames(rows);&#010;+&#010;+        Map&lt;String, String&gt; answer = new LinkedHashMap&lt;&gt;();&#010;+&#010;+        // and covert the values to String so its JMX friendly&#010;+        parameters.forEach((k, v) -&gt; {&#010;+            String key = k;&#010;+            String value = v != null ? v.toString() : """";&#010;+&#010;+            // is the key a prefix property&#010;+            int dot = key.indexOf('.');&#010;+            if (dot != -1) {&#010;+                String prefix = key.substring(0, dot + 1); // include dot in prefix&#010;+                String option = getPropertyNameFromNameWithPrefix(rows, prefix);&#010;+                if (option == null || !isPropertyMultiValue(rows, option)) {&#010;+                    answer.put(key, value);&#010;+                }&#010;+            } else if (!names.contains(key)) {&#010;+                answer.put(key, value);&#010;+            }&#010;+        });&#010;+&#010;+        return answer;&#010;+    }&#010;+&#010;+    public String endpointComponentName(String uri) {&#010;+        if (uri != null) {&#010;+            int idx = uri.indexOf("":"");&#010;+            if (idx &gt; 0) {&#010;+                return uri.substring(0, idx);&#010;+            }&#010;+        }&#010;+        return null;&#010;+    }&#010;+&#010;+    public String asEndpointUri(String scheme, String json, boolean encode) throws URISyntaxException {&#010;+        return doAsEndpointUri(scheme, json, ""&amp;"", encode);&#010;+    }&#010;+&#010;+    public String asEndpointUriXml(String scheme, String json, boolean encode) throws URISyntaxException {&#010;+        return doAsEndpointUri(scheme, json, ""&amp;amp;"", encode);&#010;+    }&#010;+&#010;+    private String doAsEndpointUri(String scheme, String json, String ampersand, boolean encode) throws URISyntaxException {&#010;+        List&lt;Map&lt;String, String&gt;&gt; rows = JSonSchemaHelper.parseJsonSchema(""properties"", json, true);&#010;+&#010;+        Map&lt;String, String&gt; copy = new HashMap&lt;String, String&gt;();&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            String name = row.get(""name"");&#010;+            String required = row.get(""required"");&#010;+            String value = row.get(""value"");&#010;+            String defaultValue = row.get(""defaultValue"");&#010;+&#010;+            // only add if either required, or the value is != default value&#010;+            String valueToAdd = null;&#010;+            if (""true"".equals(required)) {&#010;+                valueToAdd = value != null ? value : defaultValue;&#010;+                if (valueToAdd == null) {&#010;+                    valueToAdd = """";&#010;+                }&#010;+            } else {&#010;+                // if we have a value and no default then add it&#010;+                if (value != null &amp;&amp; defaultValue == null) {&#010;+                    valueToAdd = value;&#010;+                }&#010;+                // otherwise only add if the value is != default value&#010;+                if (value != null &amp;&amp; defaultValue != null &amp;&amp; !value.equals(defaultValue)) {&#010;+                    valueToAdd = value;&#010;+                }&#010;+            }&#010;+&#010;+            if (valueToAdd != null) {&#010;+                copy.put(name, valueToAdd);&#010;+            }&#010;+        }&#010;+&#010;+        return doAsEndpointUri(scheme, copy, ampersand, encode);&#010;+    }&#010;+&#010;+    public String asEndpointUri(String scheme, Map&lt;String, String&gt; properties, boolean encode) throws URISyntaxException {&#010;+        return doAsEndpointUri(scheme, properties, ""&amp;"", encode);&#010;+    }&#010;+&#010;+    public String asEndpointUriXml(String scheme, Map&lt;String, String&gt; properties, boolean encode) throws URISyntaxException {&#010;+        return doAsEndpointUri(scheme, properties, ""&amp;amp;"", encode);&#010;+    }&#010;+&#010;+    String doAsEndpointUri(String scheme, Map&lt;String, String&gt; properties, String ampersand, boolean encode) throws URISyntaxException {&#010;+        String json = jsonSchemaResolver.getComponentJSonSchema(scheme);&#010;+        if (json == null) {&#010;+            throw new IllegalArgumentException(""Cannot find endpoint with scheme "" + scheme);&#010;+        }&#010;+&#010;+        // grab the syntax&#010;+        String syntax = null;&#010;+        List&lt;Map&lt;String, String&gt;&gt; rows = JSonSchemaHelper.parseJsonSchema(""component"", json, false);&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            if (row.containsKey(""syntax"")) {&#010;+                syntax = row.get(""syntax"");&#010;+                break;&#010;+            }&#010;+        }&#010;+        if (syntax == null) {&#010;+            throw new IllegalArgumentException(""Endpoint with scheme "" + scheme + "" has no syntax defined in the json schema"");&#010;+        }&#010;+&#010;+        // do any properties filtering which can be needed for some special components&#010;+        properties = filterProperties(scheme, properties);&#010;+&#010;+        rows = JSonSchemaHelper.parseJsonSchema(""properties"", json, true);&#010;+&#010;+        // clip the scheme from the syntax&#010;+        syntax = after(syntax, "":"");&#010;+&#010;+        String originalSyntax = syntax;&#010;+&#010;+        // build at first according to syntax (use a tree map as we want the uri options sorted)&#010;+        Map&lt;String, String&gt; copy = new TreeMap&lt;String, String&gt;();&#010;+        for (Map.Entry&lt;String, String&gt; entry : properties.entrySet()) {&#010;+            String key = entry.getKey();&#010;+            String value = entry.getValue() != null ? entry.getValue() : """";&#010;+            if (syntax != null &amp;&amp; syntax.contains(key)) {&#010;+                syntax = syntax.replace(key, value);&#010;+            } else {&#010;+                copy.put(key, value);&#010;+            }&#010;+        }&#010;+&#010;+        // do we have all the options the original syntax needs (easy way)&#010;+        String[] keys = syntaxKeys(originalSyntax);&#010;+        boolean hasAllKeys = properties.keySet().containsAll(Arrays.asList(keys));&#010;+&#010;+        // build endpoint uri&#010;+        StringBuilder sb = new StringBuilder();&#010;+        sb.append(scheme);&#010;+        sb.append("":"");&#010;+&#010;+        if (hasAllKeys) {&#010;+            // we have all the keys for the syntax so we can build the uri the easy way&#010;+            sb.append(syntax);&#010;+&#010;+            if (!copy.isEmpty()) {&#010;+                boolean hasQuestionmark = sb.toString().contains(""?"");&#010;+                // the last option may already contain a ? char, if so we should use &amp; instead of ?&#010;+                sb.append(hasQuestionmark ? ampersand : '?');&#010;+                String query = createQueryString(copy, ampersand, encode);&#010;+                sb.append(query);&#010;+            }&#010;+        } else {&#010;+            // TODO: revisit this and see if we can do this in another way&#010;+            // oh darn some options is missing, so we need a complex way of building the uri&#010;+&#010;+            // the tokens between the options in the path&#010;+            String[] tokens = syntax.split(""\\w+"");&#010;+&#010;+            // parse the syntax into each options&#010;+            Matcher matcher = SYNTAX_PATTERN.matcher(originalSyntax);&#010;+            List&lt;String&gt; options = new ArrayList&lt;String&gt;();&#010;+            while (matcher.find()) {&#010;+                String s = matcher.group(1);&#010;+                options.add(s);&#010;+            }&#010;+&#010;+            // need to preserve {{ and }} from the syntax&#010;+            // (we need to use words only as its provisional placeholders)&#010;+            syntax = syntax.replaceAll(""\\{\\{"", ""BEGINCAMELPLACEHOLDER"");&#010;+            syntax = syntax.replaceAll(""\\}\\}"", ""ENDCAMELPLACEHOLDER"");&#010;+&#010;+            // parse the syntax into each options&#010;+            Matcher matcher2 = SYNTAX_PATTERN.matcher(syntax);&#010;+            List&lt;String&gt; options2 = new ArrayList&lt;String&gt;();&#010;+            while (matcher2.find()) {&#010;+                String s = matcher2.group(1);&#010;+                s = s.replaceAll(""BEGINCAMELPLACEHOLDER"", ""\\{\\{"");&#010;+                s = s.replaceAll(""ENDCAMELPLACEHOLDER"", ""\\}\\}"");&#010;+                options2.add(s);&#010;+            }&#010;+&#010;+            // build the endpoint&#010;+            int range = 0;&#010;+            boolean first = true;&#010;+            boolean hasQuestionmark = false;&#010;+            for (int i = 0; i &lt; options.size(); i++) {&#010;+                String key = options.get(i);&#010;+                String key2 = options2.get(i);&#010;+                String token = null;&#010;+                if (tokens.length &gt; i) {&#010;+                    token = tokens[i];&#010;+                }&#010;+&#010;+                boolean contains = properties.containsKey(key);&#010;+                if (!contains) {&#010;+                    // if the key are similar we have no explicit value and can try to find a default value if the option is required&#010;+                    if (isPropertyRequired(rows, key)) {&#010;+                        String value = getPropertyDefaultValue(rows, key);&#010;+                        if (value != null) {&#010;+                            properties.put(key, value);&#010;+                            key2 = value;&#010;+                        }&#010;+                    }&#010;+                }&#010;+&#010;+                // was the option provided?&#010;+                if (properties.containsKey(key)) {&#010;+                    if (!first &amp;&amp; token != null) {&#010;+                        sb.append(token);&#010;+                    }&#010;+                    hasQuestionmark |= key.contains(""?"") || (token != null &amp;&amp; token.contains(""?""));&#010;+                    sb.append(key2);&#010;+                    first = false;&#010;+                }&#010;+                range++;&#010;+            }&#010;+            // append any extra options that was in surplus for the last&#010;+            while (range &lt; options2.size()) {&#010;+                String token = null;&#010;+                if (tokens.length &gt; range) {&#010;+                    token = tokens[range];&#010;+                }&#010;+                String key2 = options2.get(range);&#010;+                sb.append(token);&#010;+                sb.append(key2);&#010;+                hasQuestionmark |= key2.contains(""?"") || (token != null &amp;&amp; token.contains(""?""));&#010;+                range++;&#010;+            }&#010;+&#010;+&#010;+            if (!copy.isEmpty()) {&#010;+                // the last option may already contain a ? char, if so we should use &amp; instead of ?&#010;+                sb.append(hasQuestionmark ? ampersand : '?');&#010;+                String query = createQueryString(copy, ampersand, encode);&#010;+                sb.append(query);&#010;+            }&#010;+        }&#010;+&#010;+        return sb.toString();&#010;+    }&#010;+&#010;+    @Deprecated&#010;+    private static String[] syntaxTokens(String syntax) {&#010;+        // build tokens between the words&#010;+        List&lt;String&gt; tokens = new ArrayList&lt;&gt;();&#010;+        // preserve backwards behavior which had an empty token first&#010;+        tokens.add("""");&#010;+&#010;+        String current = """";&#010;+        for (int i = 0; i &lt; syntax.length(); i++) {&#010;+            char ch = syntax.charAt(i);&#010;+            if (Character.isLetterOrDigit(ch)) {&#010;+                // reset for new current tokens&#010;+                if (current.length() &gt; 0) {&#010;+                    tokens.add(current);&#010;+                    current = """";&#010;+                }&#010;+            } else {&#010;+                current += ch;&#010;+            }&#010;+        }&#010;+        // anything left over?&#010;+        if (current.length() &gt; 0) {&#010;+            tokens.add(current);&#010;+        }&#010;+&#010;+        return tokens.toArray(new String[tokens.size()]);&#010;+    }&#010;+&#010;+    private static String[] syntaxKeys(String syntax) {&#010;+        // build tokens between the separators&#010;+        List&lt;String&gt; tokens = new ArrayList&lt;&gt;();&#010;+&#010;+        String current = """";&#010;+        for (int i = 0; i &lt; syntax.length(); i++) {&#010;+            char ch = syntax.charAt(i);&#010;+            if (Character.isLetterOrDigit(ch)) {&#010;+                current += ch;&#010;+            } else {&#010;+                // reset for new current tokens&#010;+                if (current.length() &gt; 0) {&#010;+                    tokens.add(current);&#010;+                    current = """";&#010;+                }&#010;+            }&#010;+        }&#010;+        // anything left over?&#010;+        if (current.length() &gt; 0) {&#010;+            tokens.add(current);&#010;+        }&#010;+&#010;+        return tokens.toArray(new String[tokens.size()]);&#010;+    }&#010;+&#010;+    public SimpleValidationResult validateSimpleExpression(String simple) {&#010;+        return doValidateSimple(null, simple, false);&#010;+    }&#010;+&#010;+    public SimpleValidationResult validateSimpleExpression(ClassLoader classLoader, String simple) {&#010;+        return doValidateSimple(classLoader, simple, false);&#010;+    }&#010;+&#010;+    public SimpleValidationResult validateSimplePredicate(String simple) {&#010;+        return doValidateSimple(null, simple, true);&#010;+    }&#010;+&#010;+    public SimpleValidationResult validateSimplePredicate(ClassLoader classLoader, String simple) {&#010;+        return doValidateSimple(classLoader, simple, true);&#010;+    }&#010;+&#010;+    private SimpleValidationResult doValidateSimple(ClassLoader classLoader, String simple, boolean predicate) {&#010;+        if (classLoader == null) {&#010;+            classLoader = getClass().getClassLoader();&#010;+        }&#010;+&#010;+        // if there are {{ }}} property placeholders then we need to resolve them to something else&#010;+        // as the simple parse cannot resolve them before parsing as we dont run the actual Camel application&#010;+        // with property placeholders setup so we need to dummy this by replace the {{ }} to something else&#010;+        // therefore we use an more unlikely character: {{XXX}} to ~^XXX^~&#010;+        String resolved = simple.replaceAll(""\\{\\{(.+)\\}\\}"", ""~^$1^~"");&#010;+&#010;+        SimpleValidationResult answer = new SimpleValidationResult(simple);&#010;+&#010;+        Object instance = null;&#010;+        Class clazz = null;&#010;+        try {&#010;+            clazz = classLoader.loadClass(""org.apache.camel.language.simple.SimpleLanguage"");&#010;+            instance = clazz.newInstance();&#010;+        } catch (Exception e) {&#010;+            // ignore&#010;+        }&#010;+&#010;+        if (clazz != null &amp;&amp; instance != null) {&#010;+            Throwable cause = null;&#010;+            try {&#010;+                if (predicate) {&#010;+                    instance.getClass().getMethod(""createPredicate"", String.class).invoke(instance, resolved);&#010;+                } else {&#010;+                    instance.getClass().getMethod(""createExpression"", String.class).invoke(instance, resolved);&#010;+                }&#010;+            } catch (InvocationTargetException e) {&#010;+                cause = e.getTargetException();&#010;+            } catch (Exception e) {&#010;+                cause = e;&#010;+            }&#010;+&#010;+            if (cause != null) {&#010;+&#010;+                // reverse ~^XXX^~ back to {{XXX}}&#010;+                String errMsg = cause.getMessage();&#010;+                errMsg = errMsg.replaceAll(""\\~\\^(.+)\\^\\~"", ""{{$1}}"");&#010;+&#010;+                answer.setError(errMsg);&#010;+&#010;+                // is it simple parser exception then we can grab the index where the problem is&#010;+                if (cause.getClass().getName().equals(""org.apache.camel.language.simple.types.SimpleIllegalSyntaxException"")&#010;+                    || cause.getClass().getName().equals(""org.apache.camel.language.simple.types.SimpleParserException"")) {&#010;+                    try {&#010;+                        // we need to grab the index field from those simple parser exceptions&#010;+                        Method method = cause.getClass().getMethod(""getIndex"");&#010;+                        Object result = method.invoke(cause);&#010;+                        if (result != null) {&#010;+                            int index = (int) result;&#010;+                            answer.setIndex(index);&#010;+                        }&#010;+                    } catch (Throwable i) {&#010;+                        // ignore&#010;+                    }&#010;+                }&#010;+&#010;+                // we need to grab the short message field from this simple syntax exception&#010;+                if (cause.getClass().getName().equals(""org.apache.camel.language.simple.types.SimpleIllegalSyntaxException"")) {&#010;+                    try {&#010;+                        Method method = cause.getClass().getMethod(""getShortMessage"");&#010;+                        Object result = method.invoke(cause);&#010;+                        if (result != null) {&#010;+                            String msg = (String) result;&#010;+                            answer.setShortError(msg);&#010;+                        }&#010;+                    } catch (Throwable i) {&#010;+                        // ignore&#010;+                    }&#010;+&#010;+                    if (answer.getShortError() == null) {&#010;+                        // fallback and try to make existing message short instead&#010;+                        String msg = answer.getError();&#010;+                        // grab everything before "" at location "" which would be regarded as the short message&#010;+                        int idx = msg.indexOf("" at location "");&#010;+                        if (idx &gt; 0) {&#010;+                            msg = msg.substring(0, idx);&#010;+                            answer.setShortError(msg);&#010;+                        }&#010;+                    }&#010;+                }&#010;+            }&#010;+        }&#010;+&#010;+        return answer;&#010;+    }&#010;+&#010;+    public LanguageValidationResult validateLanguagePredicate(ClassLoader classLoader, String language, String text) {&#010;+        return doValidateLanguage(classLoader, language, text, true);&#010;+    }&#010;+&#010;+    public LanguageValidationResult validateLanguageExpression(ClassLoader classLoader, String language, String text) {&#010;+        return doValidateLanguage(classLoader, language, text, false);&#010;+    }&#010;+&#010;+    private LanguageValidationResult doValidateLanguage(ClassLoader classLoader, String language, String text, boolean predicate) {&#010;+        if (classLoader == null) {&#010;+            classLoader = getClass().getClassLoader();&#010;+        }&#010;+&#010;+        SimpleValidationResult answer = new SimpleValidationResult(text);&#010;+&#010;+        String json = jsonSchemaResolver.getLanguageJSonSchema(language);&#010;+        if (json == null) {&#010;+            answer.setError(""Unknown language "" + language);&#010;+            return answer;&#010;+        }&#010;+&#010;+        List&lt;Map&lt;String, String&gt;&gt; rows = JSonSchemaHelper.parseJsonSchema(""language"", json, false);&#010;+        String className = null;&#010;+        for (Map&lt;String, String&gt; row : rows) {&#010;+            if (row.containsKey(""javaType"")) {&#010;+                className = row.get(""javaType"");&#010;+            }&#010;+        }&#010;+&#010;+        if (className == null) {&#010;+            answer.setError(""Cannot find javaType for language "" + language);&#010;+            return answer;&#010;+        }&#010;+&#010;+        Object instance = null;&#010;+        Class clazz = null;&#010;+        try {&#010;+            clazz = classLoader.loadClass(className);&#010;+            instance = clazz.newInstance();&#010;+        } catch (Exception e) {&#010;+            // ignore&#010;+        }&#010;+&#010;+        if (clazz != null &amp;&amp; instance != null) {&#010;+            Throwable cause = null;&#010;+            try {&#010;+                if (predicate) {&#010;+                    instance.getClass().getMethod(""createPredicate"", String.class).invoke(instance, text);&#010;+                } else {&#010;+                    instance.getClass().getMethod(""createExpression"", String.class).invoke(instance, text);&#010;+                }&#010;+            } catch (InvocationTargetException e) {&#010;+                cause = e.getTargetException();&#010;+            } catch (Exception e) {&#010;+                cause = e;&#010;+            }&#010;+&#010;+            if (cause != null) {&#010;+                answer.setError(cause.getMessage());&#010;+            }&#010;+        }&#010;+&#010;+        return answer;&#010;+    }&#010;+&#010;+    /**&#010;+     * Special logic for log endpoints to deal when showAll=true&#010;+     */&#010;+    private Map&lt;String, String&gt; filterProperties(String scheme, Map&lt;String, String&gt; options) {&#010;+        if (""log"".equals(scheme)) {&#010;+            String showAll = options.get(""showAll"");&#010;+            if (""true"".equals(showAll)) {&#010;+                Map&lt;String, String&gt; filtered = new LinkedHashMap&lt;String, String&gt;();&#010;+                // remove all the other showXXX options when showAll=true&#010;+                for (Map.Entry&lt;String, String&gt; entry : options.entrySet()) {&#010;+                    String key = entry.getKey();&#010;+                    boolean skip = key.startsWith(""show"") &amp;&amp; !key.equals(""showAll"");&#010;+                    if (!skip) {&#010;+                        filtered.put(key, entry.getValue());&#010;+                    }&#010;+                }&#010;+                return filtered;&#010;+            }&#010;+        }&#010;+        // use as-is&#010;+        return options;&#010;+    }&#010;+&#010;+    private static boolean validateInteger(String value) {&#010;+        boolean valid = false;&#010;+        try {&#010;+            valid = Integer.valueOf(value) != null;&#010;+        } catch (Exception e) {&#010;+            // ignore&#010;+        }&#010;+        if (!valid) {&#010;+            // it may be a time pattern, such as 5s for 5 seconds = 5000&#010;+            try {&#010;+                TimePatternConverter.toMilliSeconds(value);&#010;+                valid = true;&#010;+            } catch (Exception e) {&#010;+                // ignore&#010;+            }&#010;+        }&#010;+        return valid;&#010;+    }&#010;+&#010;+    // CHECKSTYLE:ON&#010;+&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/runtimecatalog/CamelContextJSonSchemaResolver.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/runtimecatalog/CamelContextJSonSchemaResolver.java b/camel-core/src/main/java/org/apache/camel/runtimecatalog/CamelContextJSonSchemaResolver.java&#010;new file mode 100644&#010;index 0000000..d3a448c&#010;--- /dev/null&#010;+++ b/camel-core/src/main/java/org/apache/camel/runtimecatalog/CamelContextJSonSchemaResolver.java&#010;@@ -0,0 +1,80 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.runtimecatalog;&#010;+&#010;+import java.io.IOException;&#010;+&#010;+import org.apache.camel.CamelContext;&#010;+&#010;+/**&#010;+ * Uses runtime {@link CamelContext} to resolve the JSon schema files.&#010;+ */&#010;+public class CamelContextJSonSchemaResolver implements JSonSchemaResolver {&#010;+&#010;+    private final CamelContext camelContext;&#010;+&#010;+    public CamelContextJSonSchemaResolver(CamelContext camelContext) {&#010;+        this.camelContext = camelContext;&#010;+    }&#010;+&#010;+    @Override&#010;+    public String getComponentJSonSchema(String name) {&#010;+        try {&#010;+            return camelContext.getComponentParameterJsonSchema(name);&#010;+        } catch (IOException e) {&#010;+            // ignore&#010;+        }&#010;+        return null;&#010;+    }&#010;+&#010;+    @Override&#010;+    public String getDataFormatJSonSchema(String name) {&#010;+        try {&#010;+            return camelContext.getDataFormatParameterJsonSchema(name);&#010;+        } catch (IOException e) {&#010;+            // ignore&#010;+        }&#010;+        return null;&#010;+    }&#010;+&#010;+    @Override&#010;+    public String getLanguageJSonSchema(String name) {&#010;+        try {&#010;+            return camelContext.getLanguageParameterJsonSchema(name);&#010;+        } catch (IOException e) {&#010;+            // ignore&#010;+        }&#010;+        return null;&#010;+    }&#010;+&#010;+    @Override&#010;+    public String getOtherJSonSchema(String name) {&#010;+        // not supported&#010;+        return null;&#010;+    }&#010;+&#010;+    @Override&#010;+    public String getModelJSonSchema(String name) {&#010;+        try {&#010;+            return camelContext.getEipParameterJsonSchema(name);&#010;+        } catch (IOException e) {&#010;+            // ignore&#010;+        }&#010;+        return null;&#010;+    }&#010;+&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/runtimecatalog/CatalogHelper.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/runtimecatalog/CatalogHelper.java b/camel-core/src/main/java/org/apache/camel/runtimecatalog/CatalogHelper.java&#010;new file mode 100644&#010;index 0000000..1b224df&#010;--- /dev/null&#010;+++ b/camel-core/src/main/java/org/apache/camel/runtimecatalog/CatalogHelper.java&#010;@@ -0,0 +1,179 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.runtimecatalog;&#010;+&#010;+import java.io.BufferedReader;&#010;+import java.io.IOException;&#010;+import java.io.InputStream;&#010;+import java.io.InputStreamReader;&#010;+import java.io.LineNumberReader;&#010;+import java.util.List;&#010;+&#010;+public final class CatalogHelper {&#010;+&#010;+    private CatalogHelper() {&#010;+    }&#010;+&#010;+    /**&#010;+     * Loads the entire stream into memory as a String and returns it.&#010;+     * &lt;p/&gt;&#010;+     * &lt;b&gt;Notice:&lt;/b&gt; This implementation appends a &lt;tt&gt;\n&lt;/tt&gt; as line&#010;+     * terminator at the of the text.&#010;+     * &lt;p/&gt;&#010;+     * Warning, don't use for crazy big streams :)&#010;+     */&#010;+    public static void loadLines(InputStream in, List&lt;String&gt; lines) throws IOException {&#010;+        try (final InputStreamReader isr = new InputStreamReader(in);&#010;+            final BufferedReader reader = new LineNumberReader(isr)) {&#010;+            String line;&#010;+            while ((line = reader.readLine()) != null) {&#010;+                lines.add(line);&#010;+            }&#010;+        }&#010;+    }&#010;+&#010;+    /**&#010;+     * Loads the entire stream into memory as a String and returns it.&#010;+     * &lt;p/&gt;&#010;+     * &lt;b&gt;Notice:&lt;/b&gt; This implementation appends a &lt;tt&gt;\n&lt;/tt&gt; as line&#010;+     * terminator at the of the text.&#010;+     * &lt;p/&gt;&#010;+     * Warning, don't use for crazy big streams :)&#010;+     */&#010;+    public static String loadText(InputStream in) throws IOException {&#010;+        StringBuilder builder = new StringBuilder();&#010;+        try (final InputStreamReader isr = new InputStreamReader(in);&#010;+            final BufferedReader reader = new LineNumberReader(isr)) {&#010;+            String line;&#010;+            while ((line = reader.readLine()) != null) {&#010;+                builder.append(line);&#010;+                builder.append(""\n"");&#010;+            }&#010;+            return builder.toString();&#010;+        }&#010;+    }&#010;+&#010;+    /**&#010;+     * Matches the name with the pattern.&#010;+     *&#010;+     * @param name  the name&#010;+     * @param pattern the pattern&#010;+     * @return &lt;tt&gt;true&lt;/tt&gt; if matched, or &lt;tt&gt;false&lt;/tt&gt; if not&#010;+     */&#010;+    public static boolean matchWildcard(String name, String pattern) {&#010;+        // we have wildcard support in that hence you can match with: file* to match any file endpoints&#010;+        if (pattern.endsWith(""*"") &amp;&amp; name.startsWith(pattern.substring(0, pattern.length() - 1))) {&#010;+            return true;&#010;+        }&#010;+        return false;&#010;+    }&#010;+&#010;+    /**&#010;+     * Returns the string after the given token&#010;+     *&#010;+     * @param text  the text&#010;+     * @param after the token&#010;+     * @return the text after the token, or &lt;tt&gt;null&lt;/tt&gt; if text does not contain the token&#010;+     */&#010;+    public static String after(String text, String after) {&#010;+        if (!text.contains(after)) {&#010;+            return null;&#010;+        }&#010;+        return text.substring(text.indexOf(after) + after.length());&#010;+    }&#010;+&#010;+    /**&#010;+     * Returns the string before the given token&#010;+     *&#010;+     * @param text  the text&#010;+     * @param before the token&#010;+     * @return the text before the token, or &lt;tt&gt;null&lt;/tt&gt; if text does not contain the token&#010;+     */&#010;+    public static String before(String text, String before) {&#010;+        if (!text.contains(before)) {&#010;+            return null;&#010;+        }&#010;+        return text.substring(0, text.indexOf(before));&#010;+    }&#010;+&#010;+    /**&#010;+     * Returns the string between the given tokens&#010;+     *&#010;+     * @param text  the text&#010;+     * @param after the before token&#010;+     * @param before the after token&#010;+     * @return the text between the tokens, or &lt;tt&gt;null&lt;/tt&gt; if text does not contain the tokens&#010;+     */&#010;+    public static String between(String text, String after, String before) {&#010;+        text = after(text, after);&#010;+        if (text == null) {&#010;+            return null;&#010;+        }&#010;+        return before(text, before);&#010;+    }&#010;+&#010;+    /**&#010;+     * Tests whether the value is &lt;tt&gt;null&lt;/tt&gt; or an empty string.&#010;+     *&#010;+     * @param value  the value, if its a String it will be tested for text length as well&#010;+     * @return true if empty&#010;+     */&#010;+    public static boolean isEmpty(Object value) {&#010;+        return !isNotEmpty(value);&#010;+    }&#010;+&#010;+    /**&#010;+     * Tests whether the value is &lt;b&gt;not&lt;/b&gt; &lt;tt&gt;null&lt;/tt&gt; or an empty string.&#010;+     *&#010;+     * @param value  the value, if its a String it will be tested for text length as well&#010;+     * @return true if &lt;b&gt;not&lt;/b&gt; empty&#010;+     */&#010;+    public static boolean isNotEmpty(Object value) {&#010;+        if (value == null) {&#010;+            return false;&#010;+        } else if (value instanceof String) {&#010;+            String text = (String) value;&#010;+            return text.trim().length() &gt; 0;&#010;+        } else {&#010;+            return true;&#010;+        }&#010;+    }&#010;+&#010;+    /**&#010;+     * Removes all leading and ending quotes (single and double) from the string&#010;+     *&#010;+     * @param s  the string&#010;+     * @return the string without leading and ending quotes (single and double)&#010;+     */&#010;+    public static String removeLeadingAndEndingQuotes(String s) {&#010;+        if (isEmpty(s)) {&#010;+            return s;&#010;+        }&#010;+&#010;+        String copy = s.trim();&#010;+        if (copy.startsWith(""'"") &amp;&amp; copy.endsWith(""'"")) {&#010;+            return copy.substring(1, copy.length() - 1);&#010;+        }&#010;+        if (copy.startsWith(""\"""") &amp;&amp; copy.endsWith(""\"""")) {&#010;+            return copy.substring(1, copy.length() - 1);&#010;+        }&#010;+&#010;+        // no quotes, so return as-is&#010;+        return s;&#010;+    }&#010;+&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/runtimecatalog/CollectionStringBuffer.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/runtimecatalog/CollectionStringBuffer.java b/camel-core/src/main/java/org/apache/camel/runtimecatalog/CollectionStringBuffer.java&#010;new file mode 100644&#010;index 0000000..f6484b8&#010;--- /dev/null&#010;+++ b/camel-core/src/main/java/org/apache/camel/runtimecatalog/CollectionStringBuffer.java&#010;@@ -0,0 +1,57 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.runtimecatalog;&#010;+&#010;+public class CollectionStringBuffer {&#010;+    private final StringBuilder buffer = new StringBuilder();&#010;+    private String separator;&#010;+    private boolean first = true;&#010;+&#010;+    public CollectionStringBuffer() {&#010;+        this("", "");&#010;+    }&#010;+&#010;+    public CollectionStringBuffer(String separator) {&#010;+        this.separator = separator;&#010;+    }&#010;+&#010;+    @Override&#010;+    public String toString() {&#010;+        return buffer.toString();&#010;+    }&#010;+&#010;+    public void append(Object value) {&#010;+        if (first) {&#010;+            first = false;&#010;+        } else {&#010;+            buffer.append(separator);&#010;+        }&#010;+        buffer.append(value);&#010;+    }&#010;+&#010;+    public String getSeparator() {&#010;+        return separator;&#010;+    }&#010;+&#010;+    public void setSeparator(String separator) {&#010;+        this.separator = separator;&#010;+    }&#010;+&#010;+    public boolean isEmpty() {&#010;+        return first;&#010;+    }&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/runtimecatalog/DefaultRuntimeCamelCatalog.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/runtimecatalog/DefaultRuntimeCamelCatalog.java b/camel-core/src/main/java/org/apache/camel/runtimecatalog/DefaultRuntimeCamelCatalog.java&#010;new file mode 100644&#010;index 0000000..7648e64&#010;--- /dev/null&#010;+++ b/camel-core/src/main/java/org/apache/camel/runtimecatalog/DefaultRuntimeCamelCatalog.java&#010;@@ -0,0 +1,136 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.runtimecatalog;&#010;+&#010;+import java.util.HashMap;&#010;+import java.util.Map;&#010;+&#010;+import org.apache.camel.CamelContext;&#010;+&#010;+/**&#010;+ * Default {@link RuntimeCamelCatalog}.&#010;+ */&#010;+public class DefaultRuntimeCamelCatalog extends AbstractCamelCatalog implements RuntimeCamelCatalog {&#010;+&#010;+    // cache of operation -&gt; result&#010;+    private final Map&lt;String, Object&gt; cache = new HashMap&lt;String, Object&gt;();&#010;+    private boolean caching;&#010;+&#010;+    /**&#010;+     * Creates the {@link RuntimeCamelCatalog} without caching enabled.&#010;+     *&#010;+     * @param camelContext  the camel context&#010;+     */&#010;+    public DefaultRuntimeCamelCatalog(CamelContext camelContext) {&#010;+        this(camelContext, false);&#010;+    }&#010;+&#010;+    /**&#010;+     * Creates the {@link RuntimeCamelCatalog}&#010;+     *&#010;+     * @param camelContext  the camel context&#010;+     * @param caching  whether to use cache&#010;+     */&#010;+    public DefaultRuntimeCamelCatalog(CamelContext camelContext, boolean caching) {&#010;+        this.caching = caching;&#010;+        setJSonSchemaResolver(new CamelContextJSonSchemaResolver(camelContext));&#010;+    }&#010;+&#010;+    @Override&#010;+    public void start() throws Exception {&#010;+        // noop&#010;+    }&#010;+&#010;+    @Override&#010;+    public void stop() throws Exception {&#010;+        cache.clear();&#010;+    }&#010;+&#010;+    @Override&#010;+    public String modelJSonSchema(String name) {&#010;+        String answer = null;&#010;+        if (caching) {&#010;+            answer = (String) cache.get(""model-"" + name);&#010;+        }&#010;+&#010;+        if (answer == null) {&#010;+            answer = getJSonSchemaResolver().getModelJSonSchema(name);&#010;+            if (caching) {&#010;+                cache.put(""model-"" + name, answer);&#010;+            }&#010;+        }&#010;+&#010;+        return answer;&#010;+    }&#010;+&#010;+    @Override&#010;+    public String componentJSonSchema(String name) {&#010;+        String answer = null;&#010;+        if (caching) {&#010;+            answer = (String) cache.get(""component-"" + name);&#010;+        }&#010;+&#010;+        if (answer == null) {&#010;+            answer = getJSonSchemaResolver().getComponentJSonSchema(name);&#010;+            if (caching) {&#010;+                cache.put(""component-"" + name, answer);&#010;+            }&#010;+        }&#010;+&#010;+        return answer;&#010;+    }&#010;+&#010;+    @Override&#010;+    public String dataFormatJSonSchema(String name) {&#010;+        String answer = null;&#010;+        if (caching) {&#010;+            answer = (String) cache.get(""dataformat-"" + name);&#010;+        }&#010;+&#010;+        if (answer == null) {&#010;+            answer = getJSonSchemaResolver().getDataFormatJSonSchema(name);&#010;+            if (caching) {&#010;+                cache.put(""dataformat-"" + name, answer);&#010;+            }&#010;+        }&#010;+&#010;+        return answer;&#010;+    }&#010;+&#010;+    @Override&#010;+    public String languageJSonSchema(String name) {&#010;+        // if we try to look method then its in the bean.json file&#010;+        if (""method"".equals(name)) {&#010;+            name = ""bean"";&#010;+        }&#010;+&#010;+        String answer = null;&#010;+        if (caching) {&#010;+            answer = (String) cache.get(""language-"" + name);&#010;+        }&#010;+&#010;+        if (answer == null) {&#010;+            answer = getJSonSchemaResolver().getLanguageJSonSchema(name);&#010;+            if (caching) {&#010;+                cache.put(""language-"" + name, answer);&#010;+            }&#010;+        }&#010;+&#010;+        return answer;&#010;+    }&#010;+&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/runtimecatalog/EndpointValidationResult.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/runtimecatalog/EndpointValidationResult.java b/camel-core/src/main/java/org/apache/camel/runtimecatalog/EndpointValidationResult.java&#010;new file mode 100644&#010;index 0000000..7d1c657&#010;--- /dev/null&#010;+++ b/camel-core/src/main/java/org/apache/camel/runtimecatalog/EndpointValidationResult.java&#010;@@ -0,0 +1,451 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.runtimecatalog;&#010;+&#010;+import java.io.Serializable;&#010;+import java.util.Arrays;&#010;+import java.util.Collections;&#010;+import java.util.LinkedHashMap;&#010;+import java.util.LinkedHashSet;&#010;+import java.util.List;&#010;+import java.util.Map;&#010;+import java.util.Set;&#010;+&#010;+import static org.apache.camel.runtimecatalog.URISupport.isEmpty;&#010;+&#010;+/**&#010;+ * Details result of validating endpoint uri.&#010;+ */&#010;+public class EndpointValidationResult implements Serializable {&#010;+&#010;+    private final String uri;&#010;+    private int errors;&#010;+&#010;+    // general&#010;+    private String syntaxError;&#010;+    private String unknownComponent;&#010;+    private String incapable;&#010;+&#010;+    // options&#010;+    private Set&lt;String&gt; unknown;&#010;+    private Map&lt;String, String[]&gt; unknownSuggestions;&#010;+    private Set&lt;String&gt; lenient;&#010;+    private Set&lt;String&gt; notConsumerOnly;&#010;+    private Set&lt;String&gt; notProducerOnly;&#010;+    private Set&lt;String&gt; required;&#010;+    private Map&lt;String, String&gt; invalidEnum;&#010;+    private Map&lt;String, String[]&gt; invalidEnumChoices;&#010;+    private Map&lt;String, String[]&gt; invalidEnumSuggestions;&#010;+    private Map&lt;String, String&gt; invalidReference;&#010;+    private Map&lt;String, String&gt; invalidBoolean;&#010;+    private Map&lt;String, String&gt; invalidInteger;&#010;+    private Map&lt;String, String&gt; invalidNumber;&#010;+    private Map&lt;String, String&gt; defaultValues;&#010;+&#010;+    public EndpointValidationResult() {&#010;+        this(null);&#010;+    }&#010;+&#010;+    public EndpointValidationResult(String uri) {&#010;+        this.uri = uri;&#010;+    }&#010;+&#010;+    public String getUri() {&#010;+        return uri;&#010;+    }&#010;+&#010;+    public boolean hasErrors() {&#010;+        return errors &gt; 0;&#010;+    }&#010;+&#010;+    public int getNumberOfErrors() {&#010;+        return errors;&#010;+    }&#010;+&#010;+    public boolean isSuccess() {&#010;+        boolean ok = syntaxError == null &amp;&amp; unknownComponent == null &amp;&amp; incapable == null&#010;+                &amp;&amp; unknown == null &amp;&amp; required == null;&#010;+        if (ok) {&#010;+            ok = notConsumerOnly == null &amp;&amp; notProducerOnly == null;&#010;+        }&#010;+        if (ok) {&#010;+            ok = invalidEnum == null &amp;&amp; invalidEnumChoices == null &amp;&amp; invalidReference == null&#010;+                &amp;&amp; invalidBoolean == null &amp;&amp; invalidInteger == null &amp;&amp; invalidNumber == null;&#010;+        }&#010;+        return ok;&#010;+    }&#010;+&#010;+    public void addSyntaxError(String syntaxError) {&#010;+        this.syntaxError = syntaxError;&#010;+        errors++;&#010;+    }&#010;+&#010;+    public void addIncapable(String uri) {&#010;+        this.incapable = uri;&#010;+        errors++;&#010;+    }&#010;+&#010;+    public void addUnknownComponent(String name) {&#010;+        this.unknownComponent = name;&#010;+        errors++;&#010;+    }&#010;+&#010;+    public void addUnknown(String name) {&#010;+        if (unknown == null) {&#010;+            unknown = new LinkedHashSet&lt;String&gt;();&#010;+        }&#010;+        if (!unknown.contains(name)) {&#010;+            unknown.add(name);&#010;+            errors++;&#010;+        }&#010;+    }&#010;+&#010;+    public void addUnknownSuggestions(String name, String[] suggestions) {&#010;+        if (unknownSuggestions == null) {&#010;+            unknownSuggestions = new LinkedHashMap&lt;String, String[]&gt;();&#010;+        }&#010;+        unknownSuggestions.put(name, suggestions);&#010;+    }&#010;+&#010;+    public void addLenient(String name) {&#010;+        if (lenient == null) {&#010;+            lenient = new LinkedHashSet&lt;String&gt;();&#010;+        }&#010;+        if (!lenient.contains(name)) {&#010;+            lenient.add(name);&#010;+        }&#010;+    }&#010;+&#010;+    public void addRequired(String name) {&#010;+        if (required == null) {&#010;+            required = new LinkedHashSet&lt;String&gt;();&#010;+        }&#010;+        if (!required.contains(name)) {&#010;+            required.add(name);&#010;+            errors++;&#010;+        }&#010;+    }&#010;+&#010;+    public void addInvalidEnum(String name, String value) {&#010;+        if (invalidEnum == null) {&#010;+            invalidEnum = new LinkedHashMap&lt;String, String&gt;();&#010;+        }&#010;+        if (!invalidEnum.containsKey(name)) {&#010;+            invalidEnum.put(name, value);&#010;+            errors++;&#010;+        }&#010;+    }&#010;+&#010;+    public void addInvalidEnumChoices(String name, String[] choices) {&#010;+        if (invalidEnumChoices == null) {&#010;+            invalidEnumChoices = new LinkedHashMap&lt;String, String[]&gt;();&#010;+        }&#010;+        invalidEnumChoices.put(name, choices);&#010;+    }&#010;+&#010;+    public void addInvalidEnumSuggestions(String name, String[] suggestions) {&#010;+        if (invalidEnumSuggestions == null) {&#010;+            invalidEnumSuggestions = new LinkedHashMap&lt;String, String[]&gt;();&#010;+        }&#010;+        invalidEnumSuggestions.put(name, suggestions);&#010;+    }&#010;+&#010;+    public void addInvalidReference(String name, String value) {&#010;+        if (invalidReference == null) {&#010;+            invalidReference = new LinkedHashMap&lt;String, String&gt;();&#010;+        }&#010;+        if (!invalidReference.containsKey(name)) {&#010;+            invalidReference.put(name, value);&#010;+            errors++;&#010;+        }&#010;+    }&#010;+&#010;+    public void addInvalidBoolean(String name, String value) {&#010;+        if (invalidBoolean == null) {&#010;+            invalidBoolean = new LinkedHashMap&lt;String, String&gt;();&#010;+        }&#010;+        if (!invalidBoolean.containsKey(name)) {&#010;+            invalidBoolean.put(name, value);&#010;+            errors++;&#010;+        }&#010;+    }&#010;+&#010;+    public void addInvalidInteger(String name, String value) {&#010;+        if (invalidInteger == null) {&#010;+            invalidInteger = new LinkedHashMap&lt;String, String&gt;();&#010;+        }&#010;+        if (!invalidInteger.containsKey(name)) {&#010;+            invalidInteger.put(name, value);&#010;+            errors++;&#010;+        }&#010;+    }&#010;+&#010;+    public void addInvalidNumber(String name, String value) {&#010;+        if (invalidNumber == null) {&#010;+            invalidNumber = new LinkedHashMap&lt;String, String&gt;();&#010;+        }&#010;+        if (!invalidNumber.containsKey(name)) {&#010;+            invalidNumber.put(name, value);&#010;+            errors++;&#010;+        }&#010;+    }&#010;+&#010;+    public void addDefaultValue(String name, String value)  {&#010;+        if (defaultValues == null) {&#010;+            defaultValues = new LinkedHashMap&lt;String, String&gt;();&#010;+        }&#010;+        defaultValues.put(name, value);&#010;+    }&#010;+&#010;+    public void addNotConsumerOnly(String name) {&#010;+        if (notConsumerOnly == null) {&#010;+            notConsumerOnly = new LinkedHashSet&lt;String&gt;();&#010;+        }&#010;+        if (!notConsumerOnly.contains(name)) {&#010;+            notConsumerOnly.add(name);&#010;+            errors++;&#010;+        }&#010;+    }&#010;+&#010;+    public void addNotProducerOnly(String name) {&#010;+        if (notProducerOnly == null) {&#010;+            notProducerOnly = new LinkedHashSet&lt;String&gt;();&#010;+        }&#010;+        if (!notProducerOnly.contains(name)) {&#010;+            notProducerOnly.add(name);&#010;+            errors++;&#010;+        }&#010;+    }&#010;+&#010;+    public String getSyntaxError() {&#010;+        return syntaxError;&#010;+    }&#010;+&#010;+    public String getIncapable() {&#010;+        return incapable;&#010;+    }&#010;+&#010;+    public Set&lt;String&gt; getUnknown() {&#010;+        return unknown;&#010;+    }&#010;+&#010;+    public Set&lt;String&gt; getLenient() {&#010;+        return lenient;&#010;+    }&#010;+&#010;+    public Map&lt;String, String[]&gt; getUnknownSuggestions() {&#010;+        return unknownSuggestions;&#010;+    }&#010;+&#010;+    public String getUnknownComponent() {&#010;+        return unknownComponent;&#010;+    }&#010;+&#010;+    public Set&lt;String&gt; getRequired() {&#010;+        return required;&#010;+    }&#010;+&#010;+    public Map&lt;String, String&gt; getInvalidEnum() {&#010;+        return invalidEnum;&#010;+    }&#010;+&#010;+    public Map&lt;String, String[]&gt; getInvalidEnumChoices() {&#010;+        return invalidEnumChoices;&#010;+    }&#010;+&#010;+    public List&lt;String&gt; getEnumChoices(String optionName) {&#010;+        if (invalidEnumChoices != null) {&#010;+            String[] enums = invalidEnumChoices.get(optionName);&#010;+            if (enums != null) {&#010;+                return Arrays.asList(enums);&#010;+            }&#010;+        }&#010;+&#010;+        return Collections.emptyList();&#010;+    }&#010;+&#010;+    public Map&lt;String, String&gt; getInvalidReference() {&#010;+        return invalidReference;&#010;+    }&#010;+&#010;+    public Map&lt;String, String&gt; getInvalidBoolean() {&#010;+        return invalidBoolean;&#010;+    }&#010;+&#010;+    public Map&lt;String, String&gt; getInvalidInteger() {&#010;+        return invalidInteger;&#010;+    }&#010;+&#010;+    public Map&lt;String, String&gt; getInvalidNumber() {&#010;+        return invalidNumber;&#010;+    }&#010;+&#010;+    public Map&lt;String, String&gt; getDefaultValues() {&#010;+        return defaultValues;&#010;+    }&#010;+&#010;+    public Set&lt;String&gt; getNotConsumerOnly() {&#010;+        return notConsumerOnly;&#010;+    }&#010;+&#010;+    public Set&lt;String&gt; getNotProducerOnly() {&#010;+        return notProducerOnly;&#010;+    }&#010;+&#010;+    /**&#010;+     * A human readable summary of the validation errors.&#010;+     *&#010;+     * @param includeHeader whether to include a header&#010;+     * @return the summary, or &lt;tt&gt;null&lt;/tt&gt; if no validation errors&#010;+     */&#010;+    public String summaryErrorMessage(boolean includeHeader) {&#010;+        if (isSuccess()) {&#010;+            return null;&#010;+        }&#010;+&#010;+        if (incapable != null) {&#010;+            return ""\tIncapable of parsing uri: "" + incapable;&#010;+        } else if (syntaxError != null) {&#010;+            return ""\tSyntax error: "" + syntaxError;&#010;+        } else if (unknownComponent != null) {&#010;+            return ""\tUnknown component: "" + unknownComponent;&#010;+        }&#010;+&#010;+        // for each invalid option build a reason message&#010;+        Map&lt;String, String&gt; options = new LinkedHashMap&lt;String, String&gt;();&#010;+        if (unknown != null) {&#010;+            for (String name : unknown) {&#010;+                if (unknownSuggestions != null &amp;&amp; unknownSuggestions.containsKey(name)) {&#010;+                    String[] suggestions = unknownSuggestions.get(name);&#010;+                    if (suggestions != null &amp;&amp; suggestions.length &gt; 0) {&#010;+                        String str = Arrays.asList(suggestions).toString();&#010;+                        options.put(name, ""Unknown option. Did you mean: "" + str);&#010;+                    } else {&#010;+                        options.put(name, ""Unknown option"");&#010;+                    }&#010;+                } else {&#010;+                    options.put(name, ""Unknown option"");&#010;+                }&#010;+            }&#010;+        }&#010;+        if (notConsumerOnly != null) {&#010;+            for (String name : notConsumerOnly) {&#010;+                options.put(name, ""Option not applicable in consumer only mode"");&#010;+            }&#010;+        }&#010;+        if (notProducerOnly != null) {&#010;+            for (String name : notProducerOnly) {&#010;+                options.put(name, ""Option not applicable in producer only mode"");&#010;+            }&#010;+        }&#010;+        if (required != null) {&#010;+            for (String name : required) {&#010;+                options.put(name, ""Missing required option"");&#010;+            }&#010;+        }&#010;+        if (invalidEnum != null) {&#010;+            for (Map.Entry&lt;String, String&gt; entry : invalidEnum.entrySet()) {&#010;+                String name = entry.getKey();&#010;+                String[] choices = invalidEnumChoices.get(name);&#010;+                String defaultValue = defaultValues != null ? defaultValues.get(entry.getKey()) : null;&#010;+                String str = Arrays.asList(choices).toString();&#010;+                String msg = ""Invalid enum value: "" + entry.getValue() + "". Possible values: "" + str;&#010;+                if (invalidEnumSuggestions != null) {&#010;+                    String[] suggestions = invalidEnumSuggestions.get(name);&#010;+                    if (suggestions != null &amp;&amp; suggestions.length &gt; 0) {&#010;+                        str = Arrays.asList(suggestions).toString();&#010;+                        msg += "". Did you mean: "" + str;&#010;+                    }&#010;+                }&#010;+                if (defaultValue != null) {&#010;+                    msg += "". Default value: "" + defaultValue;&#010;+                }&#010;+&#010;+                options.put(entry.getKey(), msg);&#010;+            }&#010;+        }&#010;+        if (invalidReference != null) {&#010;+            for (Map.Entry&lt;String, String&gt; entry : invalidReference.entrySet()) {&#010;+                boolean empty = isEmpty(entry.getValue());&#010;+                if (empty) {&#010;+                    options.put(entry.getKey(), ""Empty reference value"");&#010;+                } else if (!entry.getValue().startsWith(""#"")) {&#010;+                    options.put(entry.getKey(), ""Invalid reference value: "" + entry.getValue() + "" must start with #"");&#010;+                } else {&#010;+                    options.put(entry.getKey(), ""Invalid reference value: "" + entry.getValue());&#010;+                }&#010;+            }&#010;+        }&#010;+        if (invalidBoolean != null) {&#010;+            for (Map.Entry&lt;String, String&gt; entry : invalidBoolean.entrySet()) {&#010;+                boolean empty = isEmpty(entry.getValue());&#010;+                if (empty) {&#010;+                    options.put(entry.getKey(), ""Empty boolean value"");&#010;+                } else {&#010;+                    options.put(entry.getKey(), ""Invalid boolean value: "" + entry.getValue());&#010;+                }&#010;+            }&#010;+        }&#010;+        if (invalidInteger != null) {&#010;+            for (Map.Entry&lt;String, String&gt; entry : invalidInteger.entrySet()) {&#010;+                boolean empty = isEmpty(entry.getValue());&#010;+                if (empty) {&#010;+                    options.put(entry.getKey(), ""Empty integer value"");&#010;+                } else {&#010;+                    options.put(entry.getKey(), ""Invalid integer value: "" + entry.getValue());&#010;+                }&#010;+            }&#010;+        }&#010;+        if (invalidNumber != null) {&#010;+            for (Map.Entry&lt;String, String&gt; entry : invalidNumber.entrySet()) {&#010;+                boolean empty = isEmpty(entry.getValue());&#010;+                if (empty) {&#010;+                    options.put(entry.getKey(), ""Empty number value"");&#010;+                } else {&#010;+                    options.put(entry.getKey(), ""Invalid number value: "" + entry.getValue());&#010;+                }&#010;+            }&#010;+        }&#010;+&#010;+        // build a table with the error summary nicely formatted&#010;+        // lets use 24 as min length&#010;+        int maxLen = 24;&#010;+        for (String key : options.keySet()) {&#010;+            maxLen = Math.max(maxLen, key.length());&#010;+        }&#010;+        String format = ""%"" + maxLen + ""s    %s"";&#010;+&#010;+        // build the human error summary&#010;+        StringBuilder sb = new StringBuilder();&#010;+        if (includeHeader) {&#010;+            sb.append(""Endpoint validator error\n"");&#010;+            sb.append(""---------------------------------------------------------------------------------------------------------------------------------------\n"");&#010;+            sb.append(""\n"");&#010;+        }&#010;+        if (uri != null) {&#010;+            sb.append(""\t"").append(uri).append(""\n"");&#010;+        } else {&#010;+            sb.append(""\n"");&#010;+        }&#010;+        for (Map.Entry&lt;String, String&gt; option : options.entrySet()) {&#010;+            String out = String.format(format, option.getKey(), option.getValue());&#010;+            sb.append(""\n\t"").append(out);&#010;+        }&#010;+&#010;+        return sb.toString();&#010;+    }&#010;+}&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C0ffd278dae9f48d5849d5bd0dc60655f%40git.apache.org%3E,2017-04-14 10:52:58,commits,325.0,  [4/6] camel git commit: Rename catalog to runtimecatalog to avoid clash with same package name in camel-catalog.
5,5,6.0,326.0,davscl...@apache.org,"http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/catalog/EndpointValidationResult.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/catalog/EndpointValidationResult.java b/camel-core/src/main/java/org/apache/camel/catalog/EndpointValidationResult.java&#010;deleted file mode 100644&#010;index 9bb98f0..0000000&#010;--- a/camel-core/src/main/java/org/apache/camel/catalog/EndpointValidationResult.java&#010;+++ /dev/null&#010;@@ -1,451 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.catalog;&#010;-&#010;-import java.io.Serializable;&#010;-import java.util.Arrays;&#010;-import java.util.Collections;&#010;-import java.util.LinkedHashMap;&#010;-import java.util.LinkedHashSet;&#010;-import java.util.List;&#010;-import java.util.Map;&#010;-import java.util.Set;&#010;-&#010;-import static org.apache.camel.catalog.URISupport.isEmpty;&#010;-&#010;-/**&#010;- * Details result of validating endpoint uri.&#010;- */&#010;-public class EndpointValidationResult implements Serializable {&#010;-&#010;-    private final String uri;&#010;-    private int errors;&#010;-&#010;-    // general&#010;-    private String syntaxError;&#010;-    private String unknownComponent;&#010;-    private String incapable;&#010;-&#010;-    // options&#010;-    private Set&lt;String&gt; unknown;&#010;-    private Map&lt;String, String[]&gt; unknownSuggestions;&#010;-    private Set&lt;String&gt; lenient;&#010;-    private Set&lt;String&gt; notConsumerOnly;&#010;-    private Set&lt;String&gt; notProducerOnly;&#010;-    private Set&lt;String&gt; required;&#010;-    private Map&lt;String, String&gt; invalidEnum;&#010;-    private Map&lt;String, String[]&gt; invalidEnumChoices;&#010;-    private Map&lt;String, String[]&gt; invalidEnumSuggestions;&#010;-    private Map&lt;String, String&gt; invalidReference;&#010;-    private Map&lt;String, String&gt; invalidBoolean;&#010;-    private Map&lt;String, String&gt; invalidInteger;&#010;-    private Map&lt;String, String&gt; invalidNumber;&#010;-    private Map&lt;String, String&gt; defaultValues;&#010;-&#010;-    public EndpointValidationResult() {&#010;-        this(null);&#010;-    }&#010;-&#010;-    public EndpointValidationResult(String uri) {&#010;-        this.uri = uri;&#010;-    }&#010;-&#010;-    public String getUri() {&#010;-        return uri;&#010;-    }&#010;-&#010;-    public boolean hasErrors() {&#010;-        return errors &gt; 0;&#010;-    }&#010;-&#010;-    public int getNumberOfErrors() {&#010;-        return errors;&#010;-    }&#010;-&#010;-    public boolean isSuccess() {&#010;-        boolean ok = syntaxError == null &amp;&amp; unknownComponent == null &amp;&amp; incapable == null&#010;-                &amp;&amp; unknown == null &amp;&amp; required == null;&#010;-        if (ok) {&#010;-            ok = notConsumerOnly == null &amp;&amp; notProducerOnly == null;&#010;-        }&#010;-        if (ok) {&#010;-            ok = invalidEnum == null &amp;&amp; invalidEnumChoices == null &amp;&amp; invalidReference == null&#010;-                &amp;&amp; invalidBoolean == null &amp;&amp; invalidInteger == null &amp;&amp; invalidNumber == null;&#010;-        }&#010;-        return ok;&#010;-    }&#010;-&#010;-    public void addSyntaxError(String syntaxError) {&#010;-        this.syntaxError = syntaxError;&#010;-        errors++;&#010;-    }&#010;-&#010;-    public void addIncapable(String uri) {&#010;-        this.incapable = uri;&#010;-        errors++;&#010;-    }&#010;-&#010;-    public void addUnknownComponent(String name) {&#010;-        this.unknownComponent = name;&#010;-        errors++;&#010;-    }&#010;-&#010;-    public void addUnknown(String name) {&#010;-        if (unknown == null) {&#010;-            unknown = new LinkedHashSet&lt;String&gt;();&#010;-        }&#010;-        if (!unknown.contains(name)) {&#010;-            unknown.add(name);&#010;-            errors++;&#010;-        }&#010;-    }&#010;-&#010;-    public void addUnknownSuggestions(String name, String[] suggestions) {&#010;-        if (unknownSuggestions == null) {&#010;-            unknownSuggestions = new LinkedHashMap&lt;String, String[]&gt;();&#010;-        }&#010;-        unknownSuggestions.put(name, suggestions);&#010;-    }&#010;-&#010;-    public void addLenient(String name) {&#010;-        if (lenient == null) {&#010;-            lenient = new LinkedHashSet&lt;String&gt;();&#010;-        }&#010;-        if (!lenient.contains(name)) {&#010;-            lenient.add(name);&#010;-        }&#010;-    }&#010;-&#010;-    public void addRequired(String name) {&#010;-        if (required == null) {&#010;-            required = new LinkedHashSet&lt;String&gt;();&#010;-        }&#010;-        if (!required.contains(name)) {&#010;-            required.add(name);&#010;-            errors++;&#010;-        }&#010;-    }&#010;-&#010;-    public void addInvalidEnum(String name, String value) {&#010;-        if (invalidEnum == null) {&#010;-            invalidEnum = new LinkedHashMap&lt;String, String&gt;();&#010;-        }&#010;-        if (!invalidEnum.containsKey(name)) {&#010;-            invalidEnum.put(name, value);&#010;-            errors++;&#010;-        }&#010;-    }&#010;-&#010;-    public void addInvalidEnumChoices(String name, String[] choices) {&#010;-        if (invalidEnumChoices == null) {&#010;-            invalidEnumChoices = new LinkedHashMap&lt;String, String[]&gt;();&#010;-        }&#010;-        invalidEnumChoices.put(name, choices);&#010;-    }&#010;-&#010;-    public void addInvalidEnumSuggestions(String name, String[] suggestions) {&#010;-        if (invalidEnumSuggestions == null) {&#010;-            invalidEnumSuggestions = new LinkedHashMap&lt;String, String[]&gt;();&#010;-        }&#010;-        invalidEnumSuggestions.put(name, suggestions);&#010;-    }&#010;-&#010;-    public void addInvalidReference(String name, String value) {&#010;-        if (invalidReference == null) {&#010;-            invalidReference = new LinkedHashMap&lt;String, String&gt;();&#010;-        }&#010;-        if (!invalidReference.containsKey(name)) {&#010;-            invalidReference.put(name, value);&#010;-            errors++;&#010;-        }&#010;-    }&#010;-&#010;-    public void addInvalidBoolean(String name, String value) {&#010;-        if (invalidBoolean == null) {&#010;-            invalidBoolean = new LinkedHashMap&lt;String, String&gt;();&#010;-        }&#010;-        if (!invalidBoolean.containsKey(name)) {&#010;-            invalidBoolean.put(name, value);&#010;-            errors++;&#010;-        }&#010;-    }&#010;-&#010;-    public void addInvalidInteger(String name, String value) {&#010;-        if (invalidInteger == null) {&#010;-            invalidInteger = new LinkedHashMap&lt;String, String&gt;();&#010;-        }&#010;-        if (!invalidInteger.containsKey(name)) {&#010;-            invalidInteger.put(name, value);&#010;-            errors++;&#010;-        }&#010;-    }&#010;-&#010;-    public void addInvalidNumber(String name, String value) {&#010;-        if (invalidNumber == null) {&#010;-            invalidNumber = new LinkedHashMap&lt;String, String&gt;();&#010;-        }&#010;-        if (!invalidNumber.containsKey(name)) {&#010;-            invalidNumber.put(name, value);&#010;-            errors++;&#010;-        }&#010;-    }&#010;-&#010;-    public void addDefaultValue(String name, String value)  {&#010;-        if (defaultValues == null) {&#010;-            defaultValues = new LinkedHashMap&lt;String, String&gt;();&#010;-        }&#010;-        defaultValues.put(name, value);&#010;-    }&#010;-&#010;-    public void addNotConsumerOnly(String name) {&#010;-        if (notConsumerOnly == null) {&#010;-            notConsumerOnly = new LinkedHashSet&lt;String&gt;();&#010;-        }&#010;-        if (!notConsumerOnly.contains(name)) {&#010;-            notConsumerOnly.add(name);&#010;-            errors++;&#010;-        }&#010;-    }&#010;-&#010;-    public void addNotProducerOnly(String name) {&#010;-        if (notProducerOnly == null) {&#010;-            notProducerOnly = new LinkedHashSet&lt;String&gt;();&#010;-        }&#010;-        if (!notProducerOnly.contains(name)) {&#010;-            notProducerOnly.add(name);&#010;-            errors++;&#010;-        }&#010;-    }&#010;-&#010;-    public String getSyntaxError() {&#010;-        return syntaxError;&#010;-    }&#010;-&#010;-    public String getIncapable() {&#010;-        return incapable;&#010;-    }&#010;-&#010;-    public Set&lt;String&gt; getUnknown() {&#010;-        return unknown;&#010;-    }&#010;-&#010;-    public Set&lt;String&gt; getLenient() {&#010;-        return lenient;&#010;-    }&#010;-&#010;-    public Map&lt;String, String[]&gt; getUnknownSuggestions() {&#010;-        return unknownSuggestions;&#010;-    }&#010;-&#010;-    public String getUnknownComponent() {&#010;-        return unknownComponent;&#010;-    }&#010;-&#010;-    public Set&lt;String&gt; getRequired() {&#010;-        return required;&#010;-    }&#010;-&#010;-    public Map&lt;String, String&gt; getInvalidEnum() {&#010;-        return invalidEnum;&#010;-    }&#010;-&#010;-    public Map&lt;String, String[]&gt; getInvalidEnumChoices() {&#010;-        return invalidEnumChoices;&#010;-    }&#010;-&#010;-    public List&lt;String&gt; getEnumChoices(String optionName) {&#010;-        if (invalidEnumChoices != null) {&#010;-            String[] enums = invalidEnumChoices.get(optionName);&#010;-            if (enums != null) {&#010;-                return Arrays.asList(enums);&#010;-            }&#010;-        }&#010;-&#010;-        return Collections.emptyList();&#010;-    }&#010;-&#010;-    public Map&lt;String, String&gt; getInvalidReference() {&#010;-        return invalidReference;&#010;-    }&#010;-&#010;-    public Map&lt;String, String&gt; getInvalidBoolean() {&#010;-        return invalidBoolean;&#010;-    }&#010;-&#010;-    public Map&lt;String, String&gt; getInvalidInteger() {&#010;-        return invalidInteger;&#010;-    }&#010;-&#010;-    public Map&lt;String, String&gt; getInvalidNumber() {&#010;-        return invalidNumber;&#010;-    }&#010;-&#010;-    public Map&lt;String, String&gt; getDefaultValues() {&#010;-        return defaultValues;&#010;-    }&#010;-&#010;-    public Set&lt;String&gt; getNotConsumerOnly() {&#010;-        return notConsumerOnly;&#010;-    }&#010;-&#010;-    public Set&lt;String&gt; getNotProducerOnly() {&#010;-        return notProducerOnly;&#010;-    }&#010;-&#010;-    /**&#010;-     * A human readable summary of the validation errors.&#010;-     *&#010;-     * @param includeHeader whether to include a header&#010;-     * @return the summary, or &lt;tt&gt;null&lt;/tt&gt; if no validation errors&#010;-     */&#010;-    public String summaryErrorMessage(boolean includeHeader) {&#010;-        if (isSuccess()) {&#010;-            return null;&#010;-        }&#010;-&#010;-        if (incapable != null) {&#010;-            return ""\tIncapable of parsing uri: "" + incapable;&#010;-        } else if (syntaxError != null) {&#010;-            return ""\tSyntax error: "" + syntaxError;&#010;-        } else if (unknownComponent != null) {&#010;-            return ""\tUnknown component: "" + unknownComponent;&#010;-        }&#010;-&#010;-        // for each invalid option build a reason message&#010;-        Map&lt;String, String&gt; options = new LinkedHashMap&lt;String, String&gt;();&#010;-        if (unknown != null) {&#010;-            for (String name : unknown) {&#010;-                if (unknownSuggestions != null &amp;&amp; unknownSuggestions.containsKey(name)) {&#010;-                    String[] suggestions = unknownSuggestions.get(name);&#010;-                    if (suggestions != null &amp;&amp; suggestions.length &gt; 0) {&#010;-                        String str = Arrays.asList(suggestions).toString();&#010;-                        options.put(name, ""Unknown option. Did you mean: "" + str);&#010;-                    } else {&#010;-                        options.put(name, ""Unknown option"");&#010;-                    }&#010;-                } else {&#010;-                    options.put(name, ""Unknown option"");&#010;-                }&#010;-            }&#010;-        }&#010;-        if (notConsumerOnly != null) {&#010;-            for (String name : notConsumerOnly) {&#010;-                options.put(name, ""Option not applicable in consumer only mode"");&#010;-            }&#010;-        }&#010;-        if (notProducerOnly != null) {&#010;-            for (String name : notProducerOnly) {&#010;-                options.put(name, ""Option not applicable in producer only mode"");&#010;-            }&#010;-        }&#010;-        if (required != null) {&#010;-            for (String name : required) {&#010;-                options.put(name, ""Missing required option"");&#010;-            }&#010;-        }&#010;-        if (invalidEnum != null) {&#010;-            for (Map.Entry&lt;String, String&gt; entry : invalidEnum.entrySet()) {&#010;-                String name = entry.getKey();&#010;-                String[] choices = invalidEnumChoices.get(name);&#010;-                String defaultValue = defaultValues != null ? defaultValues.get(entry.getKey()) : null;&#010;-                String str = Arrays.asList(choices).toString();&#010;-                String msg = ""Invalid enum value: "" + entry.getValue() + "". Possible values: "" + str;&#010;-                if (invalidEnumSuggestions != null) {&#010;-                    String[] suggestions = invalidEnumSuggestions.get(name);&#010;-                    if (suggestions != null &amp;&amp; suggestions.length &gt; 0) {&#010;-                        str = Arrays.asList(suggestions).toString();&#010;-                        msg += "". Did you mean: "" + str;&#010;-                    }&#010;-                }&#010;-                if (defaultValue != null) {&#010;-                    msg += "". Default value: "" + defaultValue;&#010;-                }&#010;-&#010;-                options.put(entry.getKey(), msg);&#010;-            }&#010;-        }&#010;-        if (invalidReference != null) {&#010;-            for (Map.Entry&lt;String, String&gt; entry : invalidReference.entrySet()) {&#010;-                boolean empty = isEmpty(entry.getValue());&#010;-                if (empty) {&#010;-                    options.put(entry.getKey(), ""Empty reference value"");&#010;-                } else if (!entry.getValue().startsWith(""#"")) {&#010;-                    options.put(entry.getKey(), ""Invalid reference value: "" + entry.getValue() + "" must start with #"");&#010;-                } else {&#010;-                    options.put(entry.getKey(), ""Invalid reference value: "" + entry.getValue());&#010;-                }&#010;-            }&#010;-        }&#010;-        if (invalidBoolean != null) {&#010;-            for (Map.Entry&lt;String, String&gt; entry : invalidBoolean.entrySet()) {&#010;-                boolean empty = isEmpty(entry.getValue());&#010;-                if (empty) {&#010;-                    options.put(entry.getKey(), ""Empty boolean value"");&#010;-                } else {&#010;-                    options.put(entry.getKey(), ""Invalid boolean value: "" + entry.getValue());&#010;-                }&#010;-            }&#010;-        }&#010;-        if (invalidInteger != null) {&#010;-            for (Map.Entry&lt;String, String&gt; entry : invalidInteger.entrySet()) {&#010;-                boolean empty = isEmpty(entry.getValue());&#010;-                if (empty) {&#010;-                    options.put(entry.getKey(), ""Empty integer value"");&#010;-                } else {&#010;-                    options.put(entry.getKey(), ""Invalid integer value: "" + entry.getValue());&#010;-                }&#010;-            }&#010;-        }&#010;-        if (invalidNumber != null) {&#010;-            for (Map.Entry&lt;String, String&gt; entry : invalidNumber.entrySet()) {&#010;-                boolean empty = isEmpty(entry.getValue());&#010;-                if (empty) {&#010;-                    options.put(entry.getKey(), ""Empty number value"");&#010;-                } else {&#010;-                    options.put(entry.getKey(), ""Invalid number value: "" + entry.getValue());&#010;-                }&#010;-            }&#010;-        }&#010;-&#010;-        // build a table with the error summary nicely formatted&#010;-        // lets use 24 as min length&#010;-        int maxLen = 24;&#010;-        for (String key : options.keySet()) {&#010;-            maxLen = Math.max(maxLen, key.length());&#010;-        }&#010;-        String format = ""%"" + maxLen + ""s    %s"";&#010;-&#010;-        // build the human error summary&#010;-        StringBuilder sb = new StringBuilder();&#010;-        if (includeHeader) {&#010;-            sb.append(""Endpoint validator error\n"");&#010;-            sb.append(""---------------------------------------------------------------------------------------------------------------------------------------\n"");&#010;-            sb.append(""\n"");&#010;-        }&#010;-        if (uri != null) {&#010;-            sb.append(""\t"").append(uri).append(""\n"");&#010;-        } else {&#010;-            sb.append(""\n"");&#010;-        }&#010;-        for (Map.Entry&lt;String, String&gt; option : options.entrySet()) {&#010;-            String out = String.format(format, option.getKey(), option.getValue());&#010;-            sb.append(""\n\t"").append(out);&#010;-        }&#010;-&#010;-        return sb.toString();&#010;-    }&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/catalog/JSonSchemaHelper.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/catalog/JSonSchemaHelper.java b/camel-core/src/main/java/org/apache/camel/catalog/JSonSchemaHelper.java&#010;deleted file mode 100644&#010;index 774facd..0000000&#010;--- a/camel-core/src/main/java/org/apache/camel/catalog/JSonSchemaHelper.java&#010;+++ /dev/null&#010;@@ -1,424 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.catalog;&#010;-&#010;-import java.util.ArrayList;&#010;-import java.util.LinkedHashMap;&#010;-import java.util.LinkedHashSet;&#010;-import java.util.List;&#010;-import java.util.Map;&#010;-import java.util.Set;&#010;-import java.util.regex.Matcher;&#010;-import java.util.regex.Pattern;&#010;-&#010;-public final class JSonSchemaHelper {&#010;-&#010;-    // 0 = text, 1 = enum, 2 = boolean, 3 = integer or number&#010;-    private static final Pattern PATTERN = Pattern.compile(""\""(.+?)\""|\\[(.+)\\]|(true|false)|(-?\\d+\\.?\\d*)"");&#010;-    private static final String QUOT = ""&amp;quot;"";&#010;-&#010;-    private JSonSchemaHelper() {&#010;-    }&#010;-&#010;-    /**&#010;-     * Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata&#010;-     *&#010;-     * @param group the group to parse from such as &lt;tt&gt;component&lt;/tt&gt;, &lt;tt&gt;componentProperties&lt;/tt&gt;, or &lt;tt&gt;properties&lt;/tt&gt;.&#010;-     * @param json the json&#010;-     * @return a list of all the rows, where each row is a set of key value pairs with metadata&#010;-     */&#010;-    public static List&lt;Map&lt;String, String&gt;&gt; parseJsonSchema(String group, String json, boolean parseProperties) {&#010;-        List&lt;Map&lt;String, String&gt;&gt; answer = new ArrayList&lt;Map&lt;String, String&gt;&gt;();&#010;-        if (json == null) {&#010;-            return answer;&#010;-        }&#010;-&#010;-        boolean found = false;&#010;-&#010;-        // parse line by line&#010;-        String[] lines = json.split(""\n"");&#010;-        for (String line : lines) {&#010;-            // we need to find the group first&#010;-            if (!found) {&#010;-                String s = line.trim();&#010;-                found = s.startsWith(""\"""" + group + ""\"":"") &amp;&amp; s.endsWith(""{"");&#010;-                continue;&#010;-            }&#010;-&#010;-            // we should stop when we end the group&#010;-            if (line.equals(""  },"") || line.equals(""  }"")) {&#010;-                break;&#010;-            }&#010;-&#010;-            // need to safe encode \"" so we can parse the line&#010;-            line = line.replaceAll(""\""\\\\\""\"""", '""' + QUOT + '""');&#010;-&#010;-            Map&lt;String, String&gt; row = new LinkedHashMap&lt;String, String&gt;();&#010;-            Matcher matcher = PATTERN.matcher(line);&#010;-&#010;-            String key;&#010;-            if (parseProperties) {&#010;-                // when parsing properties the first key is given as name, so the first parsed token is the value of the name&#010;-                key = ""name"";&#010;-            } else {&#010;-                key = null;&#010;-            }&#010;-            while (matcher.find()) {&#010;-                if (key == null) {&#010;-                    key = matcher.group(1);&#010;-                } else {&#010;-                    String value = matcher.group(1);&#010;-                    if (value != null) {&#010;-                        // its text based&#010;-                        value = value.trim();&#010;-                        // decode&#010;-                        value = value.replaceAll(QUOT, ""\"""");&#010;-                        value = decodeJson(value);&#010;-                    }&#010;-                    if (value == null) {&#010;-                        // not text then its maybe an enum?&#010;-                        value = matcher.group(2);&#010;-                        if (value != null) {&#010;-                            // its an enum so strip out "" and trim spaces after comma&#010;-                            value = value.replaceAll(""\"""", """");&#010;-                            value = value.replaceAll("", "", "","");&#010;-                            value = value.trim();&#010;-                        }&#010;-                    }&#010;-                    if (value == null) {&#010;-                        // not text then its maybe a boolean?&#010;-                        value = matcher.group(3);&#010;-                    }&#010;-                    if (value == null) {&#010;-                        // not text then its maybe a integer?&#010;-                        value = matcher.group(4);&#010;-                    }&#010;-                    if (value != null) {&#010;-                        row.put(key, value);&#010;-                    }&#010;-                    // reset&#010;-                    key = null;&#010;-                }&#010;-            }&#010;-            if (!row.isEmpty()) {&#010;-                answer.add(row);&#010;-            }&#010;-        }&#010;-&#010;-        return answer;&#010;-    }&#010;-&#010;-    private static String decodeJson(String value) {&#010;-        // json encodes a \ as \\ so we need to decode from \\ back to \&#010;-        if (""\\\\"".equals(value)) {&#010;-            value = ""\\"";&#010;-        }&#010;-        return value;&#010;-    }&#010;-&#010;-    public static boolean isComponentLenientProperties(List&lt;Map&lt;String, String&gt;&gt; rows) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            if (row.containsKey(""lenientProperties"")) {&#010;-                return ""true"".equals(row.get(""lenientProperties""));&#010;-            }&#010;-        }&#010;-        return false;&#010;-    }&#010;-&#010;-    public static boolean isComponentConsumerOnly(List&lt;Map&lt;String, String&gt;&gt; rows) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            if (row.containsKey(""consumerOnly"")) {&#010;-                return ""true"".equals(row.get(""consumerOnly""));&#010;-            }&#010;-        }&#010;-        return false;&#010;-    }&#010;-&#010;-    public static boolean isComponentProducerOnly(List&lt;Map&lt;String, String&gt;&gt; rows) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            if (row.containsKey(""producerOnly"")) {&#010;-                return ""true"".equals(row.get(""producerOnly""));&#010;-            }&#010;-        }&#010;-        return false;&#010;-    }&#010;-&#010;-    public static boolean isPropertyConsumerOnly(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            String labels = null;&#010;-            boolean found = false;&#010;-            if (row.containsKey(""name"")) {&#010;-                found = name.equals(row.get(""name""));&#010;-            }&#010;-            if (row.containsKey(""label"")) {&#010;-                labels = row.get(""label"");&#010;-            }&#010;-            if (found) {&#010;-                return labels != null &amp;&amp; labels.contains(""consumer"");&#010;-            }&#010;-        }&#010;-        return false;&#010;-    }&#010;-&#010;-    public static boolean isPropertyProducerOnly(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            String labels = null;&#010;-            boolean found = false;&#010;-            if (row.containsKey(""name"")) {&#010;-                found = name.equals(row.get(""name""));&#010;-            }&#010;-            if (row.containsKey(""label"")) {&#010;-                labels = row.get(""label"");&#010;-            }&#010;-            if (found) {&#010;-                return labels != null &amp;&amp; labels.contains(""producer"");&#010;-            }&#010;-        }&#010;-        return false;&#010;-    }&#010;-&#010;-    public static boolean isPropertyRequired(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            boolean required = false;&#010;-            boolean found = false;&#010;-            if (row.containsKey(""name"")) {&#010;-                found = name.equals(row.get(""name""));&#010;-            }&#010;-            if (row.containsKey(""required"")) {&#010;-                required = ""true"".equals(row.get(""required""));&#010;-            }&#010;-            if (found) {&#010;-                return required;&#010;-            }&#010;-        }&#010;-        return false;&#010;-    }&#010;-&#010;-    public static String getPropertyKind(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            String kind = null;&#010;-            boolean found = false;&#010;-            if (row.containsKey(""name"")) {&#010;-                found = name.equals(row.get(""name""));&#010;-            }&#010;-            if (row.containsKey(""kind"")) {&#010;-                kind = row.get(""kind"");&#010;-            }&#010;-            if (found) {&#010;-                return kind;&#010;-            }&#010;-        }&#010;-        return null;&#010;-    }&#010;-&#010;-    public static boolean isPropertyBoolean(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            String type = null;&#010;-            boolean found = false;&#010;-            if (row.containsKey(""name"")) {&#010;-                found = name.equals(row.get(""name""));&#010;-            }&#010;-            if (row.containsKey(""type"")) {&#010;-                type = row.get(""type"");&#010;-            }&#010;-            if (found) {&#010;-                return ""boolean"".equals(type);&#010;-            }&#010;-        }&#010;-        return false;&#010;-    }&#010;-&#010;-    public static boolean isPropertyInteger(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            String type = null;&#010;-            boolean found = false;&#010;-            if (row.containsKey(""name"")) {&#010;-                found = name.equals(row.get(""name""));&#010;-            }&#010;-            if (row.containsKey(""type"")) {&#010;-                type = row.get(""type"");&#010;-            }&#010;-            if (found) {&#010;-                return ""integer"".equals(type);&#010;-            }&#010;-        }&#010;-        return false;&#010;-    }&#010;-&#010;-    public static boolean isPropertyNumber(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            String type = null;&#010;-            boolean found = false;&#010;-            if (row.containsKey(""name"")) {&#010;-                found = name.equals(row.get(""name""));&#010;-            }&#010;-            if (row.containsKey(""type"")) {&#010;-                type = row.get(""type"");&#010;-            }&#010;-            if (found) {&#010;-                return ""number"".equals(type);&#010;-            }&#010;-        }&#010;-        return false;&#010;-    }&#010;-&#010;-    public static boolean isPropertyObject(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            String type = null;&#010;-            boolean found = false;&#010;-            if (row.containsKey(""name"")) {&#010;-                found = name.equals(row.get(""name""));&#010;-            }&#010;-            if (row.containsKey(""type"")) {&#010;-                type = row.get(""type"");&#010;-            }&#010;-            if (found) {&#010;-                return ""object"".equals(type);&#010;-            }&#010;-        }&#010;-        return false;&#010;-    }&#010;-&#010;-    public static String getPropertyDefaultValue(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            String defaultValue = null;&#010;-            boolean found = false;&#010;-            if (row.containsKey(""name"")) {&#010;-                found = name.equals(row.get(""name""));&#010;-            }&#010;-            if (row.containsKey(""defaultValue"")) {&#010;-                defaultValue = row.get(""defaultValue"");&#010;-            }&#010;-            if (found) {&#010;-                return defaultValue;&#010;-            }&#010;-        }&#010;-        return null;&#010;-    }&#010;-&#010;-    public static String stripOptionalPrefixFromName(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            String optionalPrefix = null;&#010;-            boolean found = false;&#010;-            if (row.containsKey(""optionalPrefix"")) {&#010;-                optionalPrefix = row.get(""optionalPrefix"");&#010;-            }&#010;-            if (row.containsKey(""name"")) {&#010;-                if (optionalPrefix != null &amp;&amp; name.startsWith(optionalPrefix)) {&#010;-                    name = name.substring(optionalPrefix.length());&#010;-                    // try again&#010;-                    return stripOptionalPrefixFromName(rows, name);&#010;-                } else {&#010;-                    found = name.equals(row.get(""name""));&#010;-                }&#010;-            }&#010;-            if (found) {&#010;-                return name;&#010;-            }&#010;-        }&#010;-        return name;&#010;-    }&#010;-&#010;-    public static String getPropertyEnum(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            String enums = null;&#010;-            boolean found = false;&#010;-            if (row.containsKey(""name"")) {&#010;-                found = name.equals(row.get(""name""));&#010;-            }&#010;-            if (row.containsKey(""enum"")) {&#010;-                enums = row.get(""enum"");&#010;-            }&#010;-            if (found) {&#010;-                return enums;&#010;-            }&#010;-        }&#010;-        return null;&#010;-    }&#010;-&#010;-    public static String getPropertyPrefix(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            String prefix = null;&#010;-            boolean found = false;&#010;-            if (row.containsKey(""name"")) {&#010;-                found = name.equals(row.get(""name""));&#010;-            }&#010;-            if (row.containsKey(""prefix"")) {&#010;-                prefix = row.get(""prefix"");&#010;-            }&#010;-            if (found) {&#010;-                return prefix;&#010;-            }&#010;-        }&#010;-        return null;&#010;-    }&#010;-&#010;-    public static boolean isPropertyMultiValue(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            boolean multiValue = false;&#010;-            boolean found = false;&#010;-            if (row.containsKey(""name"")) {&#010;-                found = name.equals(row.get(""name""));&#010;-            }&#010;-            if (row.containsKey(""multiValue"")) {&#010;-                multiValue = ""true"".equals(row.get(""multiValue""));&#010;-            }&#010;-            if (found) {&#010;-                return multiValue;&#010;-            }&#010;-        }&#010;-        return false;&#010;-    }&#010;-&#010;-    public static String getPropertyNameFromNameWithPrefix(List&lt;Map&lt;String, String&gt;&gt; rows, String name) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            String propertyName = null;&#010;-            boolean found = false;&#010;-            if (row.containsKey(""name"")) {&#010;-                propertyName = row.get(""name"");&#010;-            }&#010;-            if (row.containsKey(""prefix"")) {&#010;-                String preifx = row.get(""prefix"");&#010;-                found = name.startsWith(preifx);&#010;-            }&#010;-            if (found) {&#010;-                return propertyName;&#010;-            }&#010;-        }&#010;-        return null;&#010;-    }&#010;-&#010;-    public static Map&lt;String, String&gt; getRow(List&lt;Map&lt;String, String&gt;&gt; rows, String key) {&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            if (key.equals(row.get(""name""))) {&#010;-                return row;&#010;-            }&#010;-        }&#010;-        return null;&#010;-    }&#010;-&#010;-    public static Set&lt;String&gt; getNames(List&lt;Map&lt;String, String&gt;&gt; rows) {&#010;-        Set&lt;String&gt; answer = new LinkedHashSet&lt;String&gt;();&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            if (row.containsKey(""name"")) {&#010;-                answer.add(row.get(""name""));&#010;-            }&#010;-        }&#010;-        return answer;&#010;-    }&#010;-&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/catalog/JSonSchemaResolver.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/catalog/JSonSchemaResolver.java b/camel-core/src/main/java/org/apache/camel/catalog/JSonSchemaResolver.java&#010;deleted file mode 100644&#010;index 9bf09cc..0000000&#010;--- a/camel-core/src/main/java/org/apache/camel/catalog/JSonSchemaResolver.java&#010;+++ /dev/null&#010;@@ -1,64 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.catalog;&#010;-&#010;-/**&#010;- * Pluggable resolver to load JSon schema files for components, data formats, languages etc.&#010;- */&#010;-public interface JSonSchemaResolver {&#010;-&#010;-    /**&#010;-     * Returns the component information as JSon format.&#010;-     *&#010;-     * @param name the component name&#010;-     * @return component details in JSon&#010;-     */&#010;-    String getComponentJSonSchema(String name);&#010;-&#010;-    /**&#010;-     * Returns the data format information as JSon format.&#010;-     *&#010;-     * @param name the data format name&#010;-     * @return data format details in JSon&#010;-     */&#010;-    String getDataFormatJSonSchema(String name);&#010;-&#010;-    /**&#010;-     * Returns the language information as JSon format.&#010;-     *&#010;-     * @param name the language name&#010;-     * @return language details in JSon&#010;-     */&#010;-    String getLanguageJSonSchema(String name);&#010;-&#010;-    /**&#010;-     * Returns the other (miscellaneous) information as JSon format.&#010;-     *&#010;-     * @param name the other (miscellaneous) name&#010;-     * @return other (miscellaneous) details in JSon&#010;-     */&#010;-    String getOtherJSonSchema(String name);&#010;-&#010;-    /**&#010;-     * Returns the model information as JSon format.&#010;-     *&#010;-     * @param name the model name&#010;-     * @return model details in JSon&#010;-     */&#010;-    String getModelJSonSchema(String name);&#010;-&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/catalog/LanguageValidationResult.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/catalog/LanguageValidationResult.java b/camel-core/src/main/java/org/apache/camel/catalog/LanguageValidationResult.java&#010;deleted file mode 100644&#010;index 4a977eb..0000000&#010;--- a/camel-core/src/main/java/org/apache/camel/catalog/LanguageValidationResult.java&#010;+++ /dev/null&#010;@@ -1,65 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.catalog;&#010;-&#010;-import java.io.Serializable;&#010;-&#010;-/**&#010;- * Validation result of parsing a language expression or predicate&#010;- */&#010;-public class LanguageValidationResult implements Serializable {&#010;-    private final String text;&#010;-    private String error;&#010;-    private String shortError;&#010;-    private int index;&#010;-&#010;-    public LanguageValidationResult(String text) {&#010;-        this.text = text;&#010;-    }&#010;-&#010;-    public String getText() {&#010;-        return text;&#010;-    }&#010;-&#010;-    public boolean isSuccess() {&#010;-        return error == null;&#010;-    }&#010;-&#010;-    public void setError(String error) {&#010;-        this.error = error;&#010;-    }&#010;-&#010;-    public String getError() {&#010;-        return error;&#010;-    }&#010;-&#010;-    public String getShortError() {&#010;-        return shortError;&#010;-    }&#010;-&#010;-    public void setShortError(String shortError) {&#010;-        this.shortError = shortError;&#010;-    }&#010;-&#010;-    public int getIndex() {&#010;-        return index;&#010;-    }&#010;-&#010;-    public void setIndex(int index) {&#010;-        this.index = index;&#010;-    }&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/catalog/RuntimeCamelCatalog.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/catalog/RuntimeCamelCatalog.java b/camel-core/src/main/java/org/apache/camel/catalog/RuntimeCamelCatalog.java&#010;deleted file mode 100644&#010;index b46edab..0000000&#010;--- a/camel-core/src/main/java/org/apache/camel/catalog/RuntimeCamelCatalog.java&#010;+++ /dev/null&#010;@@ -1,234 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.catalog;&#010;-&#010;-import java.net.URISyntaxException;&#010;-import java.util.Map;&#010;-&#010;-import org.apache.camel.StaticService;&#010;-&#010;-/**&#010;- * Runtime based CamelCatalog which are included in camel-core that can provided limit CamelCatalog capabilities&#010;- */&#010;-public interface RuntimeCamelCatalog extends StaticService {&#010;-&#010;-    /**&#010;-     * Returns the component information as JSon format.&#010;-     *&#010;-     * @param name the component name&#010;-     * @return component details in JSon&#010;-     */&#010;-    String componentJSonSchema(String name);&#010;-&#010;-    /**&#010;-     * Returns the data format information as JSon format.&#010;-     *&#010;-     * @param name the data format name&#010;-     * @return data format details in JSon&#010;-     */&#010;-    String dataFormatJSonSchema(String name);&#010;-&#010;-    /**&#010;-     * Returns the language information as JSon format.&#010;-     *&#010;-     * @param name the language name&#010;-     * @return language details in JSon&#010;-     */&#010;-    String languageJSonSchema(String name);&#010;-&#010;-    /**&#010;-     * Returns the model information as JSon format.&#010;-     *&#010;-     * @param name the model name&#010;-     * @return model details in JSon&#010;-     */&#010;-    String modelJSonSchema(String name);&#010;-&#010;-    /**&#010;-     * Parses the endpoint uri and constructs a key/value properties of each option&#010;-     *&#010;-     * @param uri  the endpoint uri&#010;-     * @return properties as key value pairs of each endpoint option&#010;-     */&#010;-    Map&lt;String, String&gt; endpointProperties(String uri) throws URISyntaxException;&#010;-&#010;-    /**&#010;-     * Parses the endpoint uri and constructs a key/value properties of only the lenient properties (eg custom options)&#010;-     * &lt;p/&gt;&#010;-     * For example using the HTTP components to provide query parameters in the endpoint uri.&#010;-     *&#010;-     * @param uri  the endpoint uri&#010;-     * @return properties as key value pairs of each lenient properties&#010;-     */&#010;-    Map&lt;String, String&gt; endpointLenientProperties(String uri) throws URISyntaxException;&#010;-&#010;-    /**&#010;-     * Validates the pattern whether its a valid time pattern.&#010;-     *&#010;-     * @param pattern  the pattern such as 5000, 5s, 5sec, 4min, 4m30s, 1h, etc.&#010;-     * @return &lt;tt&gt;true&lt;/tt&gt; if valid, &lt;tt&gt;false&lt;/tt&gt; if invalid&#010;-     */&#010;-    boolean validateTimePattern(String pattern);&#010;-&#010;-    /**&#010;-     * Validates the properties for the given scheme against component and endpoint&#010;-     *&#010;-     * @param scheme  the endpoint scheme&#010;-     * @param properties  the endpoint properties&#010;-     * @return validation result&#010;-     */&#010;-    EndpointValidationResult validateProperties(String scheme, Map&lt;String, String&gt; properties);&#010;-&#010;-    /**&#010;-     * Parses and validates the endpoint uri and constructs a key/value properties of each option.&#010;-     *&#010;-     * @param uri  the endpoint uri&#010;-     * @return validation result&#010;-     */&#010;-    EndpointValidationResult validateEndpointProperties(String uri);&#010;-&#010;-    /**&#010;-     * Parses and validates the endpoint uri and constructs a key/value properties of each option.&#010;-     * &lt;p/&gt;&#010;-     * The option ignoreLenientProperties can be used to ignore components that uses lenient properties.&#010;-     * When this is true, then the uri validation is stricter but would fail on properties that are not part of the component&#010;-     * but in the uri because of using lenient properties.&#010;-     * For example using the HTTP components to provide query parameters in the endpoint uri.&#010;-     *&#010;-     * @param uri  the endpoint uri&#010;-     * @param ignoreLenientProperties  whether to ignore components that uses lenient properties.&#010;-     * @return validation result&#010;-     */&#010;-    EndpointValidationResult validateEndpointProperties(String uri, boolean ignoreLenientProperties);&#010;-&#010;-    /**&#010;-     * Parses and validates the endpoint uri and constructs a key/value properties of each option.&#010;-     * &lt;p/&gt;&#010;-     * The option ignoreLenientProperties can be used to ignore components that uses lenient properties.&#010;-     * When this is true, then the uri validation is stricter but would fail on properties that are not part of the component&#010;-     * but in the uri because of using lenient properties.&#010;-     * For example using the HTTP components to provide query parameters in the endpoint uri.&#010;-     *&#010;-     * @param uri  the endpoint uri&#010;-     * @param ignoreLenientProperties  whether to ignore components that uses lenient properties.&#010;-     * @param consumerOnly whether the endpoint is only used as a consumer&#010;-     * @param producerOnly whether the endpoint is only used as a producer&#010;-     * @return validation result&#010;-     */&#010;-    EndpointValidationResult validateEndpointProperties(String uri, boolean ignoreLenientProperties, boolean consumerOnly, boolean producerOnly);&#010;-&#010;-    /**&#010;-     * Parses and validates the simple expression.&#010;-     * &lt;p/&gt;&#010;-     * &lt;b&gt;Important:&lt;/b&gt; This requires having &lt;tt&gt;camel-core&lt;/tt&gt; on the classpath&#010;-     *&#010;-     * @param simple  the simple expression&#010;-     * @return validation result&#010;-     * @deprecated use {@link #validateSimpleExpression(ClassLoader, String)}&#010;-     */&#010;-    @Deprecated&#010;-    SimpleValidationResult validateSimpleExpression(String simple);&#010;-&#010;-    /**&#010;-     * Parses and validates the simple expression.&#010;-     * &lt;p/&gt;&#010;-     * &lt;b&gt;Important:&lt;/b&gt; This requires having &lt;tt&gt;camel-core&lt;/tt&gt; on the classpath&#010;-     *&#010;-     * @param classLoader a custom classloader to use for loading the language from the classpath, or &lt;tt&gt;null&lt;/tt&gt; for using default classloader&#010;-     * @param simple  the simple expression&#010;-     * @return validation result&#010;-     */&#010;-    SimpleValidationResult validateSimpleExpression(ClassLoader classLoader, String simple);&#010;-&#010;-    /**&#010;-     * Parses and validates the simple predicate&#010;-     * &lt;p/&gt;&#010;-     * &lt;b&gt;Important:&lt;/b&gt; This requires having &lt;tt&gt;camel-core&lt;/tt&gt; on the classpath&#010;-     *&#010;-     * @param simple  the simple predicate&#010;-     * @return validation result&#010;-     * @deprecated use {@link #validateSimplePredicate(ClassLoader, String)}&#010;-     */&#010;-    @Deprecated&#010;-    SimpleValidationResult validateSimplePredicate(String simple);&#010;-&#010;-    /**&#010;-     * Parses and validates the simple predicate&#010;-     * &lt;p/&gt;&#010;-     * &lt;b&gt;Important:&lt;/b&gt; This requires having &lt;tt&gt;camel-core&lt;/tt&gt; on the classpath&#010;-     *&#010;-     * @param classLoader a custom classloader to use for loading the language from the classpath, or &lt;tt&gt;null&lt;/tt&gt; for using default classloader&#010;-     * @param simple  the simple predicate&#010;-     * @return validation result&#010;-     */&#010;-    SimpleValidationResult validateSimplePredicate(ClassLoader classLoader, String simple);&#010;-&#010;-    /**&#010;-     * Parses and validates the language as a predicate&#010;-     * &lt;p/&gt;&#010;-     * &lt;b&gt;Important:&lt;/b&gt; This requires having &lt;tt&gt;camel-core&lt;/tt&gt; and the language dependencies on the classpath&#010;-     *&#010;-     * @param classLoader a custom classloader to use for loading the language from the classpath, or &lt;tt&gt;null&lt;/tt&gt; for using default classloader&#010;-     * @param language the name of the language&#010;-     * @param text  the predicate text&#010;-     * @return validation result&#010;-     */&#010;-    LanguageValidationResult validateLanguagePredicate(ClassLoader classLoader, String language, String text);&#010;-&#010;-    /**&#010;-     * Parses and validates the language as an expression&#010;-     * &lt;p/&gt;&#010;-     * &lt;b&gt;Important:&lt;/b&gt; This requires having &lt;tt&gt;camel-core&lt;/tt&gt; and the language dependencies on the classpath&#010;-     *&#010;-     * @param classLoader a custom classloader to use for loading the language from the classpath, or &lt;tt&gt;null&lt;/tt&gt; for using default classloader&#010;-     * @param language the name of the language&#010;-     * @param text  the expression text&#010;-     * @return validation result&#010;-     */&#010;-    LanguageValidationResult validateLanguageExpression(ClassLoader classLoader, String language, String text);&#010;-&#010;-    /**&#010;-     * Returns the component name from the given endpoint uri&#010;-     *&#010;-     * @param uri  the endpoint uri&#010;-     * @return the component name (aka scheme), or &lt;tt&gt;null&lt;/tt&gt; if not possible to determine&#010;-     */&#010;-    String endpointComponentName(String uri);&#010;-&#010;-    /**&#010;-     * Creates an endpoint uri in Java style from the information from the properties&#010;-     *&#010;-     * @param scheme the endpoint schema&#010;-     * @param properties the properties as key value pairs&#010;-     * @param encode whether to URL encode the returned uri or not&#010;-     * @return the constructed endpoint uri&#010;-     * @throws java.net.URISyntaxException is thrown if there is encoding error&#010;-     */&#010;-    String asEndpointUri(String scheme, Map&lt;String, String&gt; properties, boolean encode) throws URISyntaxException;&#010;-&#010;-    /**&#010;-     * Creates an endpoint uri in XML style (eg escape &amp; as &amp;ampl;) from the information from the properties&#010;-     *&#010;-     * @param scheme the endpoint schema&#010;-     * @param properties the properties as key value pairs&#010;-     * @param encode whether to URL encode the returned uri or not&#010;-     * @return the constructed endpoint uri&#010;-     * @throws java.net.URISyntaxException is thrown if there is encoding error&#010;-     */&#010;-    String asEndpointUriXml(String scheme, Map&lt;String, String&gt; properties, boolean encode) throws URISyntaxException;&#010;-&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/catalog/SimpleValidationResult.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/catalog/SimpleValidationResult.java b/camel-core/src/main/java/org/apache/camel/catalog/SimpleValidationResult.java&#010;deleted file mode 100644&#010;index 5c86f23..0000000&#010;--- a/camel-core/src/main/java/org/apache/camel/catalog/SimpleValidationResult.java&#010;+++ /dev/null&#010;@@ -1,32 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.catalog;&#010;-&#010;-/**&#010;- * To be backwards compatible, but favor using {@link LanguageValidationResult} instead.&#010;- */&#010;-public class SimpleValidationResult extends LanguageValidationResult {&#010;-&#010;-    public SimpleValidationResult(String text) {&#010;-        super(text);&#010;-    }&#010;-&#010;-    public String getSimple() {&#010;-        return getText();&#010;-    }&#010;-&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/catalog/SuggestionStrategy.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/catalog/SuggestionStrategy.java b/camel-core/src/main/java/org/apache/camel/catalog/SuggestionStrategy.java&#010;deleted file mode 100644&#010;index 057d372..0000000&#010;--- a/camel-core/src/main/java/org/apache/camel/catalog/SuggestionStrategy.java&#010;+++ /dev/null&#010;@@ -1,34 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.catalog;&#010;-&#010;-import java.util.Set;&#010;-&#010;-/**&#010;- * Strategy to provide suggestions for unknown endpoint options&#010;- */&#010;-public interface SuggestionStrategy {&#010;-&#010;-    /**&#010;-     * Provides a list of valid option names for a did you mean function.&#010;-     *&#010;-     * @param names         valid names&#010;-     * @param unknownOption unknown option name&#010;-     * @return a list of suggested names (did you mean)&#010;-     */&#010;-    String[] suggestEndpointOptions(Set&lt;String&gt; names, String unknownOption);&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/catalog/TimePatternConverter.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/catalog/TimePatternConverter.java b/camel-core/src/main/java/org/apache/camel/catalog/TimePatternConverter.java&#010;deleted file mode 100644&#010;index 4ed843a..0000000&#010;--- a/camel-core/src/main/java/org/apache/camel/catalog/TimePatternConverter.java&#010;+++ /dev/null&#010;@@ -1,120 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.catalog;&#010;-&#010;-import java.util.regex.Matcher;&#010;-import java.util.regex.Pattern;&#010;-&#010;-/**&#010;- * This class is a copy from camel-core so we can use it independent to validate uris with time patterns&#010;- */&#010;-public final class TimePatternConverter {&#010;-    private static final Pattern NUMBERS_ONLY_STRING_PATTERN = Pattern.compile(""^[-]?(\\d)+$"", Pattern.CASE_INSENSITIVE);&#010;-    private static final Pattern HOUR_REGEX_PATTERN = Pattern.compile(""((\\d)*(\\d))h(our(s)?)?"", Pattern.CASE_INSENSITIVE);&#010;-    private static final Pattern MINUTES_REGEX_PATTERN = Pattern.compile(""((\\d)*(\\d))m(in(ute(s)?)?)?"", Pattern.CASE_INSENSITIVE);&#010;-    private static final Pattern SECONDS_REGEX_PATTERN = Pattern.compile(""((\\d)*(\\d))s(ec(ond)?(s)?)?"", Pattern.CASE_INSENSITIVE);&#010;-&#010;-    /**&#010;-     * Utility classes should not have a public constructor.&#010;-     */&#010;-    private TimePatternConverter() {&#010;-    }&#010;-&#010;-    public static long toMilliSeconds(String source) throws IllegalArgumentException {&#010;-        long milliseconds = 0;&#010;-        boolean foundFlag = false;&#010;-&#010;-        checkCorrectnessOfPattern(source);&#010;-        Matcher matcher;&#010;-&#010;-        matcher = createMatcher(NUMBERS_ONLY_STRING_PATTERN, source);&#010;-        if (matcher.find()) {&#010;-            // Note: This will also be used for regular numeric strings.&#010;-            //       This String -&gt; long converter will be used for all strings.&#010;-            milliseconds = Long.valueOf(source);&#010;-        } else {&#010;-            matcher = createMatcher(HOUR_REGEX_PATTERN, source);&#010;-            if (matcher.find()) {&#010;-                milliseconds = milliseconds + (3600000 * Long.valueOf(matcher.group(1)));&#010;-                foundFlag = true;&#010;-            }&#010;-&#010;-            matcher = createMatcher(MINUTES_REGEX_PATTERN, source);&#010;-            if (matcher.find()) {&#010;-                long minutes = Long.valueOf(matcher.group(1));&#010;-                if ((minutes &gt; 59) &amp;&amp; foundFlag) {&#010;-                    throw new IllegalArgumentException(""Minutes should contain a valid value between 0 and 59: "" + source);&#010;-                }&#010;-                foundFlag = true;&#010;-                milliseconds = milliseconds + (60000 * minutes);&#010;-            }&#010;-&#010;-            matcher = createMatcher(SECONDS_REGEX_PATTERN, source);&#010;-            if (matcher.find()) {&#010;-                long seconds = Long.valueOf(matcher.group(1));&#010;-                if ((seconds &gt; 59) &amp;&amp; foundFlag) {&#010;-                    throw new IllegalArgumentException(""Seconds should contain a valid value between 0 and 59: "" + source);&#010;-                }&#010;-                foundFlag = true;&#010;-                milliseconds = milliseconds + (1000 * seconds);&#010;-            }&#010;-&#010;-            // No pattern matched... initiating fallback check and conversion (if required).&#010;-            // The source at this point may contain illegal values or special characters&#010;-            if (!foundFlag) {&#010;-                milliseconds = Long.valueOf(source);&#010;-            }&#010;-        }&#010;-&#010;-        return milliseconds;&#010;-    }&#010;-&#010;-    private static void checkCorrectnessOfPattern(String source) {&#010;-        //replace only numbers once&#010;-        Matcher matcher = createMatcher(NUMBERS_ONLY_STRING_PATTERN, source);&#010;-        String replaceSource = matcher.replaceFirst("""");&#010;-&#010;-        //replace hour string once&#010;-        matcher = createMatcher(HOUR_REGEX_PATTERN, replaceSource);&#010;-        if (matcher.find() &amp;&amp; matcher.find()) {&#010;-            throw new IllegalArgumentException(""Hours should not be specified more then once: "" + source);&#010;-        }&#010;-        replaceSource = matcher.replaceFirst("""");&#010;-&#010;-        //replace minutes once&#010;-        matcher = createMatcher(MINUTES_REGEX_PATTERN, replaceSource);&#010;-        if (matcher.find() &amp;&amp; matcher.find()) {&#010;-            throw new IllegalArgumentException(""Minutes should not be specified more then once: "" + source);&#010;-        }&#010;-        replaceSource = matcher.replaceFirst("""");&#010;-&#010;-        //replace seconds once&#010;-        matcher = createMatcher(SECONDS_REGEX_PATTERN, replaceSource);&#010;-        if (matcher.find() &amp;&amp; matcher.find()) {&#010;-            throw new IllegalArgumentException(""Seconds should not be specified more then once: "" + source);&#010;-        }&#010;-        replaceSource = matcher.replaceFirst("""");&#010;-&#010;-        if (replaceSource.length() &gt; 0) {&#010;-            throw new IllegalArgumentException(""Illegal characters: "" + source);&#010;-        }&#010;-    }&#010;-&#010;-    private static Matcher createMatcher(Pattern pattern, String source) {&#010;-        return pattern.matcher(source);&#010;-    }&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/catalog/URISupport.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/catalog/URISupport.java b/camel-core/src/main/java/org/apache/camel/catalog/URISupport.java&#010;deleted file mode 100644&#010;index ea1ecd5..0000000&#010;--- a/camel-core/src/main/java/org/apache/camel/catalog/URISupport.java&#010;+++ /dev/null&#010;@@ -1,392 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.catalog;&#010;-&#010;-import java.io.UnsupportedEncodingException;&#010;-import java.net.URI;&#010;-import java.net.URISyntaxException;&#010;-import java.net.URLDecoder;&#010;-import java.net.URLEncoder;&#010;-import java.util.ArrayList;&#010;-import java.util.Iterator;&#010;-import java.util.LinkedHashMap;&#010;-import java.util.List;&#010;-import java.util.Map;&#010;-&#010;-/**&#010;- * Copied from org.apache.camel.util.URISupport&#010;- */&#010;-public final class URISupport {&#010;-&#010;-    public static final String RAW_TOKEN_START = ""RAW("";&#010;-    public static final String RAW_TOKEN_END = "")"";&#010;-&#010;-    private static final String CHARSET = ""UTF-8"";&#010;-&#010;-    private URISupport() {&#010;-        // Helper class&#010;-    }&#010;-&#010;-    /**&#010;-     * Normalizes the URI so unsafe characters is encoded&#010;-     *&#010;-     * @param uri the input uri&#010;-     * @return as URI instance&#010;-     * @throws URISyntaxException is thrown if syntax error in the input uri&#010;-     */&#010;-    public static URI normalizeUri(String uri) throws URISyntaxException {&#010;-        return new URI(UnsafeUriCharactersEncoder.encode(uri, true));&#010;-    }&#010;-&#010;-    public static Map&lt;String, Object&gt; extractProperties(Map&lt;String, Object&gt; properties, String optionPrefix) {&#010;-        Map&lt;String, Object&gt; rc = new LinkedHashMap&lt;String, Object&gt;(properties.size());&#010;-&#010;-        for (Iterator&lt;Map.Entry&lt;String, Object&gt;&gt; it = properties.entrySet().iterator(); it.hasNext();) {&#010;-            Map.Entry&lt;String, Object&gt; entry = it.next();&#010;-            String name = entry.getKey();&#010;-            if (name.startsWith(optionPrefix)) {&#010;-                Object value = properties.get(name);&#010;-                name = name.substring(optionPrefix.length());&#010;-                rc.put(name, value);&#010;-                it.remove();&#010;-            }&#010;-        }&#010;-&#010;-        return rc;&#010;-    }&#010;-&#010;-    /**&#010;-     * Strips the query parameters from the uri&#010;-     *&#010;-     * @param uri  the uri&#010;-     * @return the uri without the query parameter&#010;-     */&#010;-    public static String stripQuery(String uri) {&#010;-        int idx = uri.indexOf('?');&#010;-        if (idx &gt; -1) {&#010;-            uri = uri.substring(0, idx);&#010;-        }&#010;-        return uri;&#010;-    }&#010;-&#010;-    /**&#010;-     * Parses the query parameters of the uri (eg the query part).&#010;-     *&#010;-     * @param uri the uri&#010;-     * @return the parameters, or an empty map if no parameters (eg never null)&#010;-     * @throws URISyntaxException is thrown if uri has invalid syntax.&#010;-     */&#010;-    public static Map&lt;String, Object&gt; parseParameters(URI uri) throws URISyntaxException {&#010;-        String query = uri.getQuery();&#010;-        if (query == null) {&#010;-            String schemeSpecificPart = uri.getSchemeSpecificPart();&#010;-            int idx = schemeSpecificPart.indexOf('?');&#010;-            if (idx &lt; 0) {&#010;-                // return an empty map&#010;-                return new LinkedHashMap&lt;String, Object&gt;(0);&#010;-            } else {&#010;-                query = schemeSpecificPart.substring(idx + 1);&#010;-            }&#010;-        } else {&#010;-            query = stripPrefix(query, ""?"");&#010;-        }&#010;-        return parseQuery(query);&#010;-    }&#010;-&#010;-    /**&#010;-     * Strips the prefix from the value.&#010;-     * &lt;p/&gt;&#010;-     * Returns the value as-is if not starting with the prefix.&#010;-     *&#010;-     * @param value  the value&#010;-     * @param prefix the prefix to remove from value&#010;-     * @return the value without the prefix&#010;-     */&#010;-    public static String stripPrefix(String value, String prefix) {&#010;-        if (value != null &amp;&amp; value.startsWith(prefix)) {&#010;-            return value.substring(prefix.length());&#010;-        }&#010;-        return value;&#010;-    }&#010;-&#010;-    /**&#010;-     * Parses the query part of the uri (eg the parameters).&#010;-     * &lt;p/&gt;&#010;-     * The URI parameters will by default be URI encoded. However you can define a parameter&#010;-     * values with the syntax: &lt;tt&gt;key=RAW(value)&lt;/tt&gt; which tells Camel to not encode the value,&#010;-     * and use the value as is (eg key=value) and the value has &lt;b&gt;not&lt;/b&gt; been encoded.&#010;-     *&#010;-     * @param uri the uri&#010;-     * @return the parameters, or an empty map if no parameters (eg never null)&#010;-     * @throws URISyntaxException is thrown if uri has invalid syntax.&#010;-     * @see #RAW_TOKEN_START&#010;-     * @see #RAW_TOKEN_END&#010;-     */&#010;-    public static Map&lt;String, Object&gt; parseQuery(String uri) throws URISyntaxException {&#010;-        return parseQuery(uri, false);&#010;-    }&#010;-&#010;-    /**&#010;-     * Parses the query part of the uri (eg the parameters).&#010;-     * &lt;p/&gt;&#010;-     * The URI parameters will by default be URI encoded. However you can define a parameter&#010;-     * values with the syntax: &lt;tt&gt;key=RAW(value)&lt;/tt&gt; which tells Camel to not encode the value,&#010;-     * and use the value as is (eg key=value) and the value has &lt;b&gt;not&lt;/b&gt; been encoded.&#010;-     *&#010;-     * @param uri the uri&#010;-     * @param useRaw whether to force using raw values&#010;-     * @return the parameters, or an empty map if no parameters (eg never null)&#010;-     * @throws URISyntaxException is thrown if uri has invalid syntax.&#010;-     * @see #RAW_TOKEN_START&#010;-     * @see #RAW_TOKEN_END&#010;-     */&#010;-    public static Map&lt;String, Object&gt; parseQuery(String uri, boolean useRaw) throws URISyntaxException {&#010;-        // must check for trailing &amp; as the uri.split(""&amp;"") will ignore those&#010;-        if (uri != null &amp;&amp; uri.endsWith(""&amp;"")) {&#010;-            throw new URISyntaxException(uri, ""Invalid uri syntax: Trailing &amp; marker found. ""&#010;-                    + ""Check the uri and remove the trailing &amp; marker."");&#010;-        }&#010;-&#010;-        if (isEmpty(uri)) {&#010;-            // return an empty map&#010;-            return new LinkedHashMap&lt;String, Object&gt;(0);&#010;-        }&#010;-&#010;-        // need to parse the uri query parameters manually as we cannot rely on splitting by &amp;,&#010;-        // as &amp; can be used in a parameter value as well.&#010;-&#010;-        try {&#010;-            // use a linked map so the parameters is in the same order&#010;-            Map&lt;String, Object&gt; rc = new LinkedHashMap&lt;String, Object&gt;();&#010;-&#010;-            boolean isKey = true;&#010;-            boolean isValue = false;&#010;-            boolean isRaw = false;&#010;-            StringBuilder key = new StringBuilder();&#010;-            StringBuilder value = new StringBuilder();&#010;-&#010;-            // parse the uri parameters char by char&#010;-            for (int i = 0; i &lt; uri.length(); i++) {&#010;-                // current char&#010;-                char ch = uri.charAt(i);&#010;-                // look ahead of the next char&#010;-                char next;&#010;-                if (i &lt;= uri.length() - 2) {&#010;-                    next = uri.charAt(i + 1);&#010;-                } else {&#010;-                    next = '\u0000';&#010;-                }&#010;-&#010;-                // are we a raw value&#010;-                isRaw = value.toString().startsWith(RAW_TOKEN_START);&#010;-&#010;-                // if we are in raw mode, then we keep adding until we hit the end marker&#010;-                if (isRaw) {&#010;-                    if (isKey) {&#010;-                        key.append(ch);&#010;-                    } else if (isValue) {&#010;-                        value.append(ch);&#010;-                    }&#010;-&#010;-                    // we only end the raw marker if its )&amp; or at the end of the value&#010;-&#010;-                    boolean end = ch == RAW_TOKEN_END.charAt(0) &amp;&amp; (next == '&amp;' || next == '\u0000');&#010;-                    if (end) {&#010;-                        // raw value end, so add that as a parameter, and reset flags&#010;-                        addParameter(key.toString(), value.toString(), rc, useRaw || isRaw);&#010;-                        key.setLength(0);&#010;-                        value.setLength(0);&#010;-                        isKey = true;&#010;-                        isValue = false;&#010;-                        isRaw = false;&#010;-                        // skip to next as we are in raw mode and have already added the value&#010;-                        i++;&#010;-                    }&#010;-                    continue;&#010;-                }&#010;-&#010;-                // if its a key and there is a = sign then the key ends and we are in value mode&#010;-                if (isKey &amp;&amp; ch == '=') {&#010;-                    isKey = false;&#010;-                    isValue = true;&#010;-                    isRaw = false;&#010;-                    continue;&#010;-                }&#010;-&#010;-                // the &amp; denote parameter is ended&#010;-                if (ch == '&amp;') {&#010;-                    // parameter is ended, as we hit &amp; separator&#010;-                    String aKey = key.toString();&#010;-                    // the key may be a placeholder of options which we then do not know what is&#010;-                    boolean validKey = !aKey.startsWith(""{{"") &amp;&amp; !aKey.endsWith(""}}"");&#010;-                    if (validKey) {&#010;-                        addParameter(aKey, value.toString(), rc, useRaw || isRaw);&#010;-                    }&#010;-                    key.setLength(0);&#010;-                    value.setLength(0);&#010;-                    isKey = true;&#010;-                    isValue = false;&#010;-                    isRaw = false;&#010;-                    continue;&#010;-                }&#010;-&#010;-                // regular char so add it to the key or value&#010;-                if (isKey) {&#010;-                    key.append(ch);&#010;-                } else if (isValue) {&#010;-                    value.append(ch);&#010;-                }&#010;-            }&#010;-&#010;-            // any left over parameters, then add that&#010;-            if (key.length() &gt; 0) {&#010;-                String aKey = key.toString();&#010;-                // the key may be a placeholder of options which we then do not know what is&#010;-                boolean validKey = !aKey.startsWith(""{{"") &amp;&amp; !aKey.endsWith(""}}"");&#010;-                if (validKey) {&#010;-                    addParameter(aKey, value.toString(), rc, useRaw || isRaw);&#010;-                }&#010;-            }&#010;-&#010;-            return rc;&#010;-&#010;-        } catch (UnsupportedEncodingException e) {&#010;-            URISyntaxException se = new URISyntaxException(e.toString(), ""Invalid encoding"");&#010;-            se.initCause(e);&#010;-            throw se;&#010;-        }&#010;-    }&#010;-&#010;-    @SuppressWarnings(""unchecked"")&#010;-    private static void addParameter(String name, String value, Map&lt;String, Object&gt; map, boolean isRaw) throws UnsupportedEncodingException {&#010;-        name = URLDecoder.decode(name, CHARSET);&#010;-        if (!isRaw) {&#010;-            // need to replace % with %25&#010;-            value = URLDecoder.decode(value.replaceAll(""%"", ""%25""), CHARSET);&#010;-        }&#010;-&#010;-        // does the key already exist?&#010;-        if (map.containsKey(name)) {&#010;-            // yes it does, so make sure we can support multiple values, but using a list&#010;-            // to hold the multiple values&#010;-            Object existing = map.get(name);&#010;-            List&lt;String&gt; list;&#010;-            if (existing instanceof List) {&#010;-                list = (List&lt;String&gt;) existing;&#010;-            } else {&#010;-                // create a new list to hold the multiple values&#010;-                list = new ArrayList&lt;String&gt;();&#010;-                String s = existing != null ? existing.toString() : null;&#010;-                if (s != null) {&#010;-                    list.add(s);&#010;-                }&#010;-            }&#010;-            list.add(value);&#010;-            map.put(name, list);&#010;-        } else {&#010;-            map.put(name, value);&#010;-        }&#010;-    }&#010;-&#010;-    /**&#010;-     * Assembles a query from the given map.&#010;-     *&#010;-     * @param options  the map with the options (eg key/value pairs)&#010;-     * @param ampersand to use &amp; for Java code, and &amp;amp; for XML&#010;-     * @return a query string with &lt;tt&gt;key1=value&amp;key2=value2&amp;...&lt;/tt&gt;, or an empty string if there is no options.&#010;-     * @throws URISyntaxException is thrown if uri has invalid syntax.&#010;-     */&#010;-    public static String createQueryString(Map&lt;String, String&gt; options, String ampersand, boolean encode) throws URISyntaxException {&#010;-        try {&#010;-            if (options.size() &gt; 0) {&#010;-                StringBuilder rc = new StringBuilder();&#010;-                boolean first = true;&#010;-                for (Object o : options.keySet()) {&#010;-                    if (first) {&#010;-                        first = false;&#010;-                    } else {&#010;-                        rc.append(ampersand);&#010;-                    }&#010;-&#010;-                    String key = (String) o;&#010;-                    Object value = options.get(key);&#010;-&#010;-                    // use the value as a String&#010;-                    String s = value != null ? value.toString() : null;&#010;-                    appendQueryStringParameter(key, s, rc, encode);&#010;-                }&#010;-                return rc.toString();&#010;-            } else {&#010;-                return """";&#010;-            }&#010;-        } catch (UnsupportedEncodingException e) {&#010;-            URISyntaxException se = new URISyntaxException(e.toString(), ""Invalid encoding"");&#010;-            se.initCause(e);&#010;-            throw se;&#010;-        }&#010;-    }&#010;-&#010;-    private static void appendQueryStringParameter(String key, String value, StringBuilder rc, boolean encode) throws UnsupportedEncodingException {&#010;-        if (encode) {&#010;-            rc.append(URLEncoder.encode(key, CHARSET));&#010;-        } else {&#010;-            rc.append(key);&#010;-        }&#010;-        // only append if value is not null&#010;-        if (value != null) {&#010;-            rc.append(""="");&#010;-            if (value.startsWith(RAW_TOKEN_START) &amp;&amp; value.endsWith(RAW_TOKEN_END)) {&#010;-                // do not encode RAW parameters&#010;-                rc.append(value);&#010;-            } else {&#010;-                if (encode) {&#010;-                    rc.append(URLEncoder.encode(value, CHARSET));&#010;-                } else {&#010;-                    rc.append(value);&#010;-                }&#010;-            }&#010;-        }&#010;-    }&#010;-&#010;-    /**&#010;-     * Tests whether the value is &lt;tt&gt;null&lt;/tt&gt; or an empty string.&#010;-     *&#010;-     * @param value  the value, if its a String it will be tested for text length as well&#010;-     * @return true if empty&#010;-     */&#010;-    public static boolean isEmpty(Object value) {&#010;-        return !isNotEmpty(value);&#010;-    }&#010;-&#010;-    /**&#010;-     * Tests whether the value is &lt;b&gt;not&lt;/b&gt; &lt;tt&gt;null&lt;/tt&gt; or an empty string.&#010;-     *&#010;-     * @param value  the value, if its a String it will be tested for text length as well&#010;-     * @return true if &lt;b&gt;not&lt;/b&gt; empty&#010;-     */&#010;-    public static boolean isNotEmpty(Object value) {&#010;-        if (value == null) {&#010;-            return false;&#010;-        } else if (value instanceof String) {&#010;-            String text = (String) value;&#010;-            return text.trim().length() &gt; 0;&#010;-        } else {&#010;-            return true;&#010;-        }&#010;-    }&#010;-&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/catalog/UnsafeUriCharactersEncoder.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/catalog/UnsafeUriCharactersEncoder.java b/camel-core/src/main/java/org/apache/camel/catalog/UnsafeUriCharactersEncoder.java&#010;deleted file mode 100644&#010;index 563bac2..0000000&#010;--- a/camel-core/src/main/java/org/apache/camel/catalog/UnsafeUriCharactersEncoder.java&#010;+++ /dev/null&#010;@@ -1,206 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.catalog;&#010;-&#010;-import java.util.ArrayList;&#010;-import java.util.BitSet;&#010;-import java.util.List;&#010;-import java.util.regex.Matcher;&#010;-import java.util.regex.Pattern;&#010;-&#010;-/**&#010;- * Encoder for unsafe URI characters.&#010;- * &lt;p/&gt;&#010;- * A good source for details is &lt;a href=""http://en.wikipedia.org/wiki/Url_encode""&gt;wikipedia url encode&lt;/a&gt; article.&#010;- */&#010;-public final class UnsafeUriCharactersEncoder {&#010;-    private static BitSet unsafeCharactersRfc1738;&#010;-    private static BitSet unsafeCharactersHttp;&#010;-    private static final char[] HEX_DIGITS = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',&#010;-        'D', 'E', 'F', 'a', 'b', 'c', 'd', 'e', 'f'};&#010;-    private static final Pattern RAW_PATTERN = Pattern.compile(""RAW\\([^\\)]+\\)"");&#010;-&#010;-    static {&#010;-        unsafeCharactersRfc1738 = new BitSet(256);&#010;-        unsafeCharactersRfc1738.set(' ');&#010;-        unsafeCharactersRfc1738.set('""');&#010;-        unsafeCharactersRfc1738.set('&lt;');&#010;-        unsafeCharactersRfc1738.set('&gt;');&#010;-        unsafeCharactersRfc1738.set('#');&#010;-        unsafeCharactersRfc1738.set('%');&#010;-        unsafeCharactersRfc1738.set('{');&#010;-        unsafeCharactersRfc1738.set('}');&#010;-        unsafeCharactersRfc1738.set('|');&#010;-        unsafeCharactersRfc1738.set('\\');&#010;-        unsafeCharactersRfc1738.set('^');&#010;-        unsafeCharactersRfc1738.set('~');&#010;-        unsafeCharactersRfc1738.set('[');&#010;-        unsafeCharactersRfc1738.set(']');&#010;-        unsafeCharactersRfc1738.set('`');&#010;-    }&#010;-&#010;-    static {&#010;-        unsafeCharactersHttp = new BitSet(256);&#010;-        unsafeCharactersHttp.set(' ');&#010;-        unsafeCharactersHttp.set('""');&#010;-        unsafeCharactersHttp.set('&lt;');&#010;-        unsafeCharactersHttp.set('&gt;');&#010;-        unsafeCharactersHttp.set('#');&#010;-        unsafeCharactersHttp.set('%');&#010;-        unsafeCharactersHttp.set('{');&#010;-        unsafeCharactersHttp.set('}');&#010;-        unsafeCharactersHttp.set('|');&#010;-        unsafeCharactersHttp.set('\\');&#010;-        unsafeCharactersHttp.set('^');&#010;-        unsafeCharactersHttp.set('~');&#010;-        unsafeCharactersHttp.set('`');&#010;-    }&#010;-&#010;-    private UnsafeUriCharactersEncoder() {&#010;-        // util class&#010;-    }&#010;-&#010;-    public static String encode(String s) {&#010;-        return encode(s, unsafeCharactersRfc1738);&#010;-    }&#010;-&#010;-    public static String encodeHttpURI(String s) {&#010;-        return encode(s, unsafeCharactersHttp);&#010;-    }&#010;-&#010;-    public static String encode(String s, BitSet unsafeCharacters) {&#010;-        return encode(s, unsafeCharacters, false);&#010;-    }&#010;-&#010;-    public static String encode(String s, boolean checkRaw) {&#010;-        return encode(s, unsafeCharactersRfc1738, checkRaw);&#010;-    }&#010;-&#010;-    public static String encodeHttpURI(String s, boolean checkRaw) {&#010;-        return encode(s, unsafeCharactersHttp, checkRaw);&#010;-    }&#010;-&#010;-    private static List&lt;Pair&gt; checkRAW(String s) {&#010;-        Matcher matcher = RAW_PATTERN.matcher(s);&#010;-        List&lt;Pair&gt; answer = new ArrayList&lt;Pair&gt;();&#010;-        // Check all occurrences&#010;-        while (matcher.find()) {&#010;-            answer.add(new Pair(matcher.start(), matcher.end()));&#010;-        }&#010;-        return answer;&#010;-    }&#010;-&#010;-    private static boolean isRaw(int index, List&lt;Pair&gt; pairs) {&#010;-        for (Pair pair : pairs) {&#010;-            if (index &lt; pair.left) {&#010;-                return false;&#010;-            } else {&#010;-                if (index &gt;= pair.left) {&#010;-                    if (index &lt;= pair.right) {&#010;-                        return true;&#010;-                    } else {&#010;-                        continue;&#010;-                    }&#010;-                }&#010;-            }&#010;-        }&#010;-        return false;&#010;-    }&#010;-&#010;-    private static class Pair {&#010;-        int left;&#010;-        int right;&#010;-&#010;-        Pair(int left, int right) {&#010;-            this.left = left;&#010;-            this.right = right;&#010;-        }&#010;-    }&#010;-&#010;-    // Just skip the encode for isRAW part&#010;-    public static String encode(String s, BitSet unsafeCharacters, boolean checkRaw) {&#010;-        List&lt;Pair&gt; rawPairs;&#010;-        if (checkRaw) {&#010;-            rawPairs = checkRAW(s);&#010;-        } else {&#010;-            rawPairs = new ArrayList&lt;Pair&gt;();&#010;-        }&#010;-&#010;-        int n = s == null ? 0 : s.length();&#010;-        if (n == 0) {&#010;-            return s;&#010;-        }&#010;-&#010;-        // First check whether we actually need to encode&#010;-        char chars[] = s.toCharArray();&#010;-        for (int i = 0;;) {&#010;-            // just deal with the ascii character&#010;-            if (chars[i] &gt; 0 &amp;&amp; chars[i] &lt; 128) {&#010;-                if (unsafeCharacters.get(chars[i])) {&#010;-                    break;&#010;-                }&#010;-            }&#010;-            if (++i &gt;= chars.length) {&#010;-                return s;&#010;-            }&#010;-        }&#010;-&#010;-        // okay there are some unsafe characters so we do need to encode&#010;-        // see details at: http://en.wikipedia.org/wiki/Url_encode&#010;-        StringBuilder sb = new StringBuilder();&#010;-        for (int i = 0; i &lt; chars.length; i++) {&#010;-            char ch = chars[i];&#010;-            if (ch &gt; 0 &amp;&amp; ch &lt; 128 &amp;&amp; unsafeCharacters.get(ch)) {&#010;-                // special for % sign as it may be a decimal encoded value&#010;-                if (ch == '%') {&#010;-                    char next = i + 1 &lt; chars.length ? chars[i + 1] : ' ';&#010;-                    char next2 = i + 2 &lt; chars.length ? chars[i + 2] : ' ';&#010;-&#010;-                    if (isHexDigit(next) &amp;&amp; isHexDigit(next2) &amp;&amp; !isRaw(i, rawPairs)) {&#010;-                        // its already encoded (decimal encoded) so just append as is&#010;-                        sb.append(ch);&#010;-                    } else {&#010;-                        // must escape then, as its an unsafe character&#010;-                        appendEscape(sb, (byte) ch);&#010;-                    }&#010;-                } else {&#010;-                    // must escape then, as its an unsafe character&#010;-                    appendEscape(sb, (byte) ch);&#010;-                }&#010;-            } else {&#010;-                sb.append(ch);&#010;-            }&#010;-        }&#010;-        return sb.toString();&#010;-    }&#010;-&#010;-    private static void appendEscape(StringBuilder sb, byte b) {&#010;-        sb.append('%');&#010;-        sb.append(HEX_DIGITS[(b &gt;&gt; 4) &amp; 0x0f]);&#010;-        sb.append(HEX_DIGITS[(b &gt;&gt; 0) &amp; 0x0f]);&#010;-    }&#010;-&#010;-    private static boolean isHexDigit(char ch) {&#010;-        for (char hex : HEX_DIGITS) {&#010;-            if (hex == ch) {&#010;-                return true;&#010;-            }&#010;-        }&#010;-        return false;&#010;-    }&#010;-&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/catalog/package.html&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/catalog/package.html b/camel-core/src/main/java/org/apache/camel/catalog/package.html&#010;deleted file mode 100644&#010;index 98786d1..0000000&#010;--- a/camel-core/src/main/java/org/apache/camel/catalog/package.html&#010;+++ /dev/null&#010;@@ -1,25 +0,0 @@&#010;-&lt;!--&#010;-    Licensed to the Apache Software Foundation (ASF) under one or more&#010;-    contributor license agreements.  See the NOTICE file distributed with&#010;-    this work for additional information regarding copyright ownership.&#010;-    The ASF licenses this file to You under the Apache License, Version 2.0&#010;-    (the ""License""); you may not use this file except in compliance with&#010;-    the License.  You may obtain a copy of the License at&#010;-&#010;-    http://www.apache.org/licenses/LICENSE-2.0&#010;-&#010;-    Unless required by applicable law or agreed to in writing, software&#010;-    distributed under the License is distributed on an ""AS IS"" BASIS,&#010;-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;-    See the License for the specific language governing permissions and&#010;-    limitations under the License.&#010;---&gt;&#010;-&lt;html&gt;&#010;-&lt;head&gt;&#010;-&lt;/head&gt;&#010;-&lt;body&gt;&#010;-&#010;-Camel Catalog&#010;-&#010;-&lt;/body&gt;&#010;-&lt;/html&gt;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/component/rest/RestComponentVerifier.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/component/rest/RestComponentVerifier.java b/camel-core/src/main/java/org/apache/camel/component/rest/RestComponentVerifier.java&#010;index 5d19e0d..4013e5f 100644&#010;--- a/camel-core/src/main/java/org/apache/camel/component/rest/RestComponentVerifier.java&#010;+++ b/camel-core/src/main/java/org/apache/camel/component/rest/RestComponentVerifier.java&#010;@@ -22,12 +22,12 @@ import java.util.Map;&#010; import org.apache.camel.Component;&#010; import org.apache.camel.ComponentVerifier;&#010; import org.apache.camel.VerifiableComponent;&#010;-import org.apache.camel.catalog.JSonSchemaHelper;&#010;-import org.apache.camel.catalog.RuntimeCamelCatalog;&#010; import org.apache.camel.impl.verifier.CatalogVerifierCustomizer;&#010; import org.apache.camel.impl.verifier.DefaultComponentVerifier;&#010; import org.apache.camel.impl.verifier.ResultBuilder;&#010; import org.apache.camel.impl.verifier.ResultErrorBuilder;&#010;+import org.apache.camel.runtimecatalog.JSonSchemaHelper;&#010;+import org.apache.camel.runtimecatalog.RuntimeCamelCatalog;&#010; import org.apache.camel.spi.RestConsumerFactory;&#010; import org.apache.camel.spi.RestProducerFactory;&#010; import org.apache.camel.util.ObjectHelper;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java b/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java&#010;index c85ce8c..b53efc8 100644&#010;--- a/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java&#010;+++ b/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java&#010;@@ -26,7 +26,6 @@ import java.util.Collections;&#010; import java.util.Comparator;&#010; import java.util.Date;&#010; import java.util.HashMap;&#010;-import java.util.HashSet;&#010; import java.util.Iterator;&#010; import java.util.LinkedHashMap;&#010; import java.util.LinkedHashSet;&#010;@@ -87,8 +86,6 @@ import org.apache.camel.api.management.mbean.ManagedRouteMBean;&#010; import org.apache.camel.builder.DefaultFluentProducerTemplate;&#010; import org.apache.camel.builder.ErrorHandlerBuilder;&#010; import org.apache.camel.builder.ErrorHandlerBuilderSupport;&#010;-import org.apache.camel.catalog.DefaultRuntimeCamelCatalog;&#010;-import org.apache.camel.catalog.RuntimeCamelCatalog;&#010; import org.apache.camel.component.properties.PropertiesComponent;&#010; import org.apache.camel.impl.converter.BaseTypeConverterRegistry;&#010; import org.apache.camel.impl.converter.DefaultTypeConverter;&#010;@@ -121,6 +118,8 @@ import org.apache.camel.processor.interceptor.Delayer;&#010; import org.apache.camel.processor.interceptor.HandleFault;&#010; import org.apache.camel.processor.interceptor.StreamCaching;&#010; import org.apache.camel.processor.interceptor.Tracer;&#010;+import org.apache.camel.runtimecatalog.DefaultRuntimeCamelCatalog;&#010;+import org.apache.camel.runtimecatalog.RuntimeCamelCatalog;&#010; import org.apache.camel.spi.AsyncProcessorAwaitManager;&#010; import org.apache.camel.spi.CamelContextNameStrategy;&#010; import org.apache.camel.spi.ClassResolver;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/impl/verifier/DefaultComponentVerifier.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/impl/verifier/DefaultComponentVerifier.java b/camel-core/src/main/java/org/apache/camel/impl/verifier/DefaultComponentVerifier.java&#010;index b9d9998..f05cdb1 100644&#010;--- a/camel-core/src/main/java/org/apache/camel/impl/verifier/DefaultComponentVerifier.java&#010;+++ b/camel-core/src/main/java/org/apache/camel/impl/verifier/DefaultComponentVerifier.java&#010;@@ -25,8 +25,8 @@ import org.apache.camel.CamelContext;&#010; import org.apache.camel.ComponentVerifier;&#010; import org.apache.camel.NoSuchOptionException;&#010; import org.apache.camel.TypeConverter;&#010;-import org.apache.camel.catalog.EndpointValidationResult;&#010;-import org.apache.camel.catalog.RuntimeCamelCatalog;&#010;+import org.apache.camel.runtimecatalog.EndpointValidationResult;&#010;+import org.apache.camel.runtimecatalog.RuntimeCamelCatalog;&#010; import org.apache.camel.util.CamelContextHelper;&#010; import org.apache.camel.util.EndpointHelper;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/management/DefaultManagementLifecycleStrategy.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/management/DefaultManagementLifecycleStrategy.java b/camel-core/src/main/java/org/apache/camel/management/DefaultManagementLifecycleStrategy.java&#010;index a09ff7d..9a70390 100644&#010;--- a/camel-core/src/main/java/org/apache/camel/management/DefaultManagementLifecycleStrategy.java&#010;+++ b/camel-core/src/main/java/org/apache/camel/management/DefaultManagementLifecycleStrategy.java&#010;@@ -46,12 +46,9 @@ import org.apache.camel.StartupListener;&#010; import org.apache.camel.TimerListener;&#010; import org.apache.camel.VetoCamelContextStartException;&#010; import org.apache.camel.api.management.PerformanceCounter;&#010;-import org.apache.camel.catalog.RuntimeCamelCatalog;&#010; import org.apache.camel.impl.ConsumerCache;&#010; import org.apache.camel.impl.DefaultCamelContext;&#010; import org.apache.camel.impl.DefaultEndpointRegistry;&#010;-import org.apache.camel.impl.DefaultTransformerRegistry;&#010;-import org.apache.camel.impl.DefaultValidatorRegistry;&#010; import org.apache.camel.impl.EventDrivenConsumerRoute;&#010; import org.apache.camel.impl.ProducerCache;&#010; import org.apache.camel.impl.ThrottlingExceptionRoutePolicy;&#010;@@ -89,6 +86,7 @@ import org.apache.camel.processor.CamelInternalProcessor;&#010; import org.apache.camel.processor.interceptor.BacklogDebugger;&#010; import org.apache.camel.processor.interceptor.BacklogTracer;&#010; import org.apache.camel.processor.interceptor.Tracer;&#010;+import org.apache.camel.runtimecatalog.RuntimeCamelCatalog;&#010; import org.apache.camel.spi.AsyncProcessorAwaitManager;&#010; import org.apache.camel.spi.DataFormat;&#010; import org.apache.camel.spi.EventNotifier;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRuntimeCamelCatalog.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRuntimeCamelCatalog.java b/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRuntimeCamelCatalog.java&#010;index 20d3f28..6a99656 100644&#010;--- a/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRuntimeCamelCatalog.java&#010;+++ b/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedRuntimeCamelCatalog.java&#010;@@ -19,7 +19,7 @@ package org.apache.camel.management.mbean;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.api.management.ManagedResource;&#010; import org.apache.camel.api.management.mbean.ManagedRuntimeCamelCatalogMBean;&#010;-import org.apache.camel.catalog.RuntimeCamelCatalog;&#010;+import org.apache.camel.runtimecatalog.RuntimeCamelCatalog;&#010; import org.apache.camel.spi.ManagementStrategy;&#010; &#010; /**&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C6a3e7fae5cba4f918aede10c3ae6ef26%40git.apache.org%3E,2017-04-14 10:52:59,commits,326.0,  [5/6] camel git commit: Rename catalog to runtimecatalog to avoid clash with same package name in camel-catalog.
6,6,7.0,327.0,davscl...@apache.org,"Rename catalog to runtimecatalog to avoid clash with same package name in camel-catalog.&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/c66be7a8&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/c66be7a8&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/c66be7a8&#010;&#010;Branch: refs/heads/master&#010;Commit: c66be7a8c21de8944fd86888a2cf039eb97a2ff1&#010;Parents: d726964&#010;Author: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Authored: Fri Apr 14 12:08:59 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:52:40 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../java/org/apache/camel/CamelContext.java     |    2 +-&#010; .../camel/catalog/AbstractCamelCatalog.java     | 1294 ------------------&#010; .../catalog/CamelContextJSonSchemaResolver.java |   80 --&#010; .../org/apache/camel/catalog/CatalogHelper.java |  179 ---&#010; .../camel/catalog/CollectionStringBuffer.java   |   57 -&#010; .../catalog/DefaultRuntimeCamelCatalog.java     |  136 --&#010; .../camel/catalog/EndpointValidationResult.java |  451 ------&#010; .../apache/camel/catalog/JSonSchemaHelper.java  |  424 ------&#010; .../camel/catalog/JSonSchemaResolver.java       |   64 -&#010; .../camel/catalog/LanguageValidationResult.java |   65 -&#010; .../camel/catalog/RuntimeCamelCatalog.java      |  234 ----&#010; .../camel/catalog/SimpleValidationResult.java   |   32 -&#010; .../camel/catalog/SuggestionStrategy.java       |   34 -&#010; .../camel/catalog/TimePatternConverter.java     |  120 --&#010; .../org/apache/camel/catalog/URISupport.java    |  392 ------&#010; .../catalog/UnsafeUriCharactersEncoder.java     |  206 ---&#010; .../java/org/apache/camel/catalog/package.html  |   25 -&#010; .../component/rest/RestComponentVerifier.java   |    4 +-&#010; .../apache/camel/impl/DefaultCamelContext.java  |    5 +-&#010; .../impl/verifier/DefaultComponentVerifier.java |    4 +-&#010; .../DefaultManagementLifecycleStrategy.java     |    4 +-&#010; .../mbean/ManagedRuntimeCamelCatalog.java       |    2 +-&#010; .../runtimecatalog/AbstractCamelCatalog.java    | 1294 ++++++++++++++++++&#010; .../CamelContextJSonSchemaResolver.java         |   80 ++&#010; .../camel/runtimecatalog/CatalogHelper.java     |  179 +++&#010; .../runtimecatalog/CollectionStringBuffer.java  |   57 +&#010; .../DefaultRuntimeCamelCatalog.java             |  136 ++&#010; .../EndpointValidationResult.java               |  451 ++++++&#010; .../camel/runtimecatalog/JSonSchemaHelper.java  |  424 ++++++&#010; .../runtimecatalog/JSonSchemaResolver.java      |   64 +&#010; .../LanguageValidationResult.java               |   65 +&#010; .../runtimecatalog/RuntimeCamelCatalog.java     |  234 ++++&#010; .../runtimecatalog/SimpleValidationResult.java  |   32 +&#010; .../runtimecatalog/SuggestionStrategy.java      |   34 +&#010; .../runtimecatalog/TimePatternConverter.java    |  120 ++&#010; .../apache/camel/runtimecatalog/URISupport.java |  392 ++++++&#010; .../UnsafeUriCharactersEncoder.java             |  206 +++&#010; .../apache/camel/runtimecatalog/package.html    |   25 +&#010; .../org/apache/camel/util/EndpointHelper.java   |    6 +-&#010; .../camel/catalog/AbstractCamelCatalogTest.java |  104 --&#010; .../camel/catalog/RuntimeCamelCatalogTest.java  |  393 ------&#010; .../AbstractCamelCatalogTest.java               |  104 ++&#010; .../runtimecatalog/RuntimeCamelCatalogTest.java |  393 ++++++&#010; 43 files changed, 4302 insertions(+), 4305 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/CamelContext.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/CamelContext.java b/camel-core/src/main/java/org/apache/camel/CamelContext.java&#010;index d4fd6ae..00702d1 100644&#010;--- a/camel-core/src/main/java/org/apache/camel/CamelContext.java&#010;+++ b/camel-core/src/main/java/org/apache/camel/CamelContext.java&#010;@@ -30,7 +30,6 @@ import org.apache.camel.api.management.mbean.ManagedCamelContextMBean;&#010; import org.apache.camel.api.management.mbean.ManagedProcessorMBean;&#010; import org.apache.camel.api.management.mbean.ManagedRouteMBean;&#010; import org.apache.camel.builder.ErrorHandlerBuilder;&#010;-import org.apache.camel.catalog.RuntimeCamelCatalog;&#010; import org.apache.camel.model.DataFormatDefinition;&#010; import org.apache.camel.model.HystrixConfigurationDefinition;&#010; import org.apache.camel.model.ProcessorDefinition;&#010;@@ -41,6 +40,7 @@ import org.apache.camel.model.rest.RestDefinition;&#010; import org.apache.camel.model.rest.RestsDefinition;&#010; import org.apache.camel.model.transformer.TransformerDefinition;&#010; import org.apache.camel.model.validator.ValidatorDefinition;&#010;+import org.apache.camel.runtimecatalog.RuntimeCamelCatalog;&#010; import org.apache.camel.spi.AsyncProcessorAwaitManager;&#010; import org.apache.camel.spi.CamelContextNameStrategy;&#010; import org.apache.camel.spi.ClassResolver;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/catalog/AbstractCamelCatalog.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/catalog/AbstractCamelCatalog.java b/camel-core/src/main/java/org/apache/camel/catalog/AbstractCamelCatalog.java&#010;deleted file mode 100644&#010;index 6511eff..0000000&#010;--- a/camel-core/src/main/java/org/apache/camel/catalog/AbstractCamelCatalog.java&#010;+++ /dev/null&#010;@@ -1,1294 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.catalog;&#010;-&#010;-import java.lang.reflect.InvocationTargetException;&#010;-import java.lang.reflect.Method;&#010;-import java.net.URI;&#010;-import java.net.URISyntaxException;&#010;-import java.util.ArrayList;&#010;-import java.util.Arrays;&#010;-import java.util.HashMap;&#010;-import java.util.Iterator;&#010;-import java.util.LinkedHashMap;&#010;-import java.util.LinkedHashSet;&#010;-import java.util.List;&#010;-import java.util.Map;&#010;-import java.util.Objects;&#010;-import java.util.Set;&#010;-import java.util.TreeMap;&#010;-import java.util.regex.Matcher;&#010;-import java.util.regex.Pattern;&#010;-&#010;-import static org.apache.camel.catalog.CatalogHelper.after;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.getNames;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.getPropertyDefaultValue;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.getPropertyEnum;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.getPropertyKind;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.getPropertyNameFromNameWithPrefix;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.getPropertyPrefix;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.getRow;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.isComponentConsumerOnly;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.isComponentLenientProperties;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.isComponentProducerOnly;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.isPropertyBoolean;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.isPropertyConsumerOnly;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.isPropertyInteger;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.isPropertyMultiValue;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.isPropertyNumber;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.isPropertyObject;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.isPropertyProducerOnly;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.isPropertyRequired;&#010;-import static org.apache.camel.catalog.JSonSchemaHelper.stripOptionalPrefixFromName;&#010;-import static org.apache.camel.catalog.URISupport.createQueryString;&#010;-import static org.apache.camel.catalog.URISupport.isEmpty;&#010;-import static org.apache.camel.catalog.URISupport.normalizeUri;&#010;-import static org.apache.camel.catalog.URISupport.stripQuery;&#010;-&#010;-/**&#010;- * Base class for both the runtime RuntimeCamelCatalog from camel-core and the complete CamelCatalog from camel-catalog.&#010;- */&#010;-public abstract class AbstractCamelCatalog {&#010;-&#010;-    // CHECKSTYLE:OFF&#010;-&#010;-    private static final Pattern SYNTAX_PATTERN = Pattern.compile(""(\\w+)"");&#010;-&#010;-    private SuggestionStrategy suggestionStrategy;&#010;-    private JSonSchemaResolver jsonSchemaResolver;&#010;-&#010;-    public SuggestionStrategy getSuggestionStrategy() {&#010;-        return suggestionStrategy;&#010;-    }&#010;-&#010;-    public void setSuggestionStrategy(SuggestionStrategy suggestionStrategy) {&#010;-        this.suggestionStrategy = suggestionStrategy;&#010;-    }&#010;-&#010;-    public JSonSchemaResolver getJSonSchemaResolver() {&#010;-        return jsonSchemaResolver;&#010;-    }&#010;-&#010;-    public void setJSonSchemaResolver(JSonSchemaResolver resolver) {&#010;-        this.jsonSchemaResolver = resolver;&#010;-    }&#010;-&#010;-    public boolean validateTimePattern(String pattern) {&#010;-        return validateInteger(pattern);&#010;-    }&#010;-&#010;-    public EndpointValidationResult validateEndpointProperties(String uri) {&#010;-        return validateEndpointProperties(uri, false, false, false);&#010;-    }&#010;-&#010;-    public EndpointValidationResult validateEndpointProperties(String uri, boolean ignoreLenientProperties) {&#010;-        return validateEndpointProperties(uri, ignoreLenientProperties, false, false);&#010;-    }&#010;-&#010;-    public EndpointValidationResult validateProperties(String scheme, Map&lt;String, String&gt; properties) {&#010;-        EndpointValidationResult result = new EndpointValidationResult(scheme);&#010;-&#010;-        String json = jsonSchemaResolver.getComponentJSonSchema(scheme);&#010;-        List&lt;Map&lt;String, String&gt;&gt; rows = JSonSchemaHelper.parseJsonSchema(""properties"", json, true);&#010;-        List&lt;Map&lt;String, String&gt;&gt; componentProps = JSonSchemaHelper.parseJsonSchema(""componentProperties"", json, true);&#010;-&#010;-        // endpoint options have higher priority so remove those from component&#010;-        // that may clash&#010;-        componentProps.stream()&#010;-            .filter(c -&gt; rows.stream().noneMatch(e -&gt; Objects.equals(e.get(""name""), c.get(""name""))))&#010;-            .forEach(rows::add);&#010;-&#010;-        boolean lenient = Boolean.getBoolean(properties.getOrDefault(""lenient"", ""false""));&#010;-&#010;-        // the dataformat component refers to a data format so lets add the properties for the selected&#010;-        // data format to the list of rows&#010;-        if (""dataformat"".equals(scheme)) {&#010;-            String dfName = properties.get(""name"");&#010;-            if (dfName != null) {&#010;-                String dfJson = jsonSchemaResolver.getDataFormatJSonSchema(dfName);&#010;-                List&lt;Map&lt;String, String&gt;&gt; dfRows = JSonSchemaHelper.parseJsonSchema(""properties"", dfJson, true);&#010;-                if (dfRows != null &amp;&amp; !dfRows.isEmpty()) {&#010;-                    rows.addAll(dfRows);&#010;-                }&#010;-            }&#010;-        }&#010;-&#010;-        for (Map.Entry&lt;String, String&gt; property : properties.entrySet()) {&#010;-            String value = property.getValue();&#010;-            String originalName = property.getKey();&#010;-            String name = property.getKey();&#010;-            // the name may be using an optional prefix, so lets strip that because the options&#010;-            // in the schema are listed without the prefix&#010;-            name = stripOptionalPrefixFromName(rows, name);&#010;-            // the name may be using a prefix, so lets see if we can find the real property name&#010;-            String propertyName = getPropertyNameFromNameWithPrefix(rows, name);&#010;-            if (propertyName != null) {&#010;-                name = propertyName;&#010;-            }&#010;-&#010;-            String prefix = getPropertyPrefix(rows, name);&#010;-            String kind = getPropertyKind(rows, name);&#010;-            boolean namePlaceholder = name.startsWith(""{{"") &amp;&amp; name.endsWith(""}}"");&#010;-            boolean valuePlaceholder = value.startsWith(""{{"") || value.startsWith(""${"") || value.startsWith(""$simple{"");&#010;-            boolean lookup = value.startsWith(""#"") &amp;&amp; value.length() &gt; 1;&#010;-            // we cannot evaluate multi values as strict as the others, as we don't know their expected types&#010;-            boolean multiValue = prefix != null &amp;&amp; originalName.startsWith(prefix) &amp;&amp; isPropertyMultiValue(rows, name);&#010;-&#010;-            Map&lt;String, String&gt; row = getRow(rows, name);&#010;-            if (row == null) {&#010;-                // unknown option&#010;-&#010;-                // only add as error if the component is not lenient properties, or not stub component&#010;-                // and the name is not a property placeholder for one or more values&#010;-                if (!namePlaceholder &amp;&amp; !""stub"".equals(scheme)) {&#010;-                    if (lenient) {&#010;-                        // as if we are lenient then the option is a dynamic extra option which we cannot validate&#010;-                        result.addLenient(name);&#010;-                    } else {&#010;-                        // its unknown&#010;-                        result.addUnknown(name);&#010;-                        if (suggestionStrategy != null) {&#010;-                            String[] suggestions = suggestionStrategy.suggestEndpointOptions(getNames(rows), name);&#010;-                            if (suggestions != null) {&#010;-                                result.addUnknownSuggestions(name, suggestions);&#010;-                            }&#010;-                        }&#010;-                    }&#010;-                }&#010;-            } else {&#010;-                /* TODO: we may need to add something in the properties to know if they are related to a producer or consumer&#010;-                if (""parameter"".equals(kind)) {&#010;-                    // consumer only or producer only mode for parameters&#010;-                    if (consumerOnly) {&#010;-                        boolean producer = isPropertyProducerOnly(rows, name);&#010;-                        if (producer) {&#010;-                            // the option is only for producer so you cannot use it in consumer mode&#010;-                            result.addNotConsumerOnly(name);&#010;-                        }&#010;-                    } else if (producerOnly) {&#010;-                        boolean consumer = isPropertyConsumerOnly(rows, name);&#010;-                        if (consumer) {&#010;-                            // the option is only for consumer so you cannot use it in producer mode&#010;-                            result.addNotProducerOnly(name);&#010;-                        }&#010;-                    }&#010;-                }&#010;-                */&#010;-&#010;-                // default value&#010;-                String defaultValue = getPropertyDefaultValue(rows, name);&#010;-                if (defaultValue != null) {&#010;-                    result.addDefaultValue(name, defaultValue);&#010;-                }&#010;-&#010;-                // is required but the value is empty&#010;-                boolean required = isPropertyRequired(rows, name);&#010;-                if (required &amp;&amp; isEmpty(value)) {&#010;-                    result.addRequired(name);&#010;-                }&#010;-&#010;-                // is enum but the value is not within the enum range&#010;-                // but we can only check if the value is not a placeholder&#010;-                String enums = getPropertyEnum(rows, name);&#010;-                if (!multiValue &amp;&amp; !valuePlaceholder &amp;&amp; !lookup &amp;&amp; enums != null) {&#010;-                    String[] choices = enums.split("","");&#010;-                    boolean found = false;&#010;-                    for (String s : choices) {&#010;-                        if (value.equalsIgnoreCase(s)) {&#010;-                            found = true;&#010;-                            break;&#010;-                        }&#010;-                    }&#010;-                    if (!found) {&#010;-                        result.addInvalidEnum(name, value);&#010;-                        result.addInvalidEnumChoices(name, choices);&#010;-                        if (suggestionStrategy != null) {&#010;-                            Set&lt;String&gt; names = new LinkedHashSet&lt;&gt;();&#010;-                            names.addAll(Arrays.asList(choices));&#010;-                            String[] suggestions = suggestionStrategy.suggestEndpointOptions(names, value);&#010;-                            if (suggestions != null) {&#010;-                                result.addInvalidEnumSuggestions(name, suggestions);&#010;-                            }&#010;-                        }&#010;-&#010;-                    }&#010;-                }&#010;-&#010;-                // is reference lookup of bean (not applicable for @UriPath, enums, or multi-valued)&#010;-                if (!multiValue &amp;&amp; enums == null &amp;&amp; !""path"".equals(kind) &amp;&amp; isPropertyObject(rows, name)) {&#010;-                    // must start with # and be at least 2 characters&#010;-                    if (!value.startsWith(""#"") || value.length() &lt;= 1) {&#010;-                        result.addInvalidReference(name, value);&#010;-                    }&#010;-                }&#010;-&#010;-                // is boolean&#010;-                if (!multiValue &amp;&amp; !valuePlaceholder &amp;&amp; !lookup &amp;&amp; isPropertyBoolean(rows, name)) {&#010;-                    // value must be a boolean&#010;-                    boolean bool = ""true"".equalsIgnoreCase(value) || ""false"".equalsIgnoreCase(value);&#010;-                    if (!bool) {&#010;-                        result.addInvalidBoolean(name, value);&#010;-                    }&#010;-                }&#010;-&#010;-                // is integer&#010;-                if (!multiValue &amp;&amp; !valuePlaceholder &amp;&amp; !lookup &amp;&amp; isPropertyInteger(rows, name)) {&#010;-                    // value must be an integer&#010;-                    boolean valid = validateInteger(value);&#010;-                    if (!valid) {&#010;-                        result.addInvalidInteger(name, value);&#010;-                    }&#010;-                }&#010;-&#010;-                // is number&#010;-                if (!multiValue &amp;&amp; !valuePlaceholder &amp;&amp; !lookup &amp;&amp; isPropertyNumber(rows, name)) {&#010;-                    // value must be an number&#010;-                    boolean valid = false;&#010;-                    try {&#010;-                        valid = !Double.valueOf(value).isNaN() || !Float.valueOf(value).isNaN();&#010;-                    } catch (Exception e) {&#010;-                        // ignore&#010;-                    }&#010;-                    if (!valid) {&#010;-                        result.addInvalidNumber(name, value);&#010;-                    }&#010;-                }&#010;-            }&#010;-        }&#010;-&#010;-        // now check if all required values are there, and that a default value does not exists&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            String name = row.get(""name"");&#010;-            boolean required = isPropertyRequired(rows, name);&#010;-            if (required) {&#010;-                String value = properties.get(name);&#010;-                if (isEmpty(value)) {&#010;-                    value = getPropertyDefaultValue(rows, name);&#010;-                }&#010;-                if (isEmpty(value)) {&#010;-                    result.addRequired(name);&#010;-                }&#010;-            }&#010;-        }&#010;-&#010;-        return result;&#010;-    }&#010;-&#010;-    public EndpointValidationResult validateEndpointProperties(String uri, boolean ignoreLenientProperties, boolean consumerOnly, boolean producerOnly) {&#010;-        EndpointValidationResult result = new EndpointValidationResult(uri);&#010;-&#010;-        Map&lt;String, String&gt; properties;&#010;-        List&lt;Map&lt;String, String&gt;&gt; rows;&#010;-        boolean lenientProperties;&#010;-        String scheme;&#010;-&#010;-        try {&#010;-            String json = null;&#010;-&#010;-            // parse the uri&#010;-            URI u = normalizeUri(uri);&#010;-            scheme = u.getScheme();&#010;-&#010;-            if (scheme != null) {&#010;-                json = jsonSchemaResolver.getComponentJSonSchema(scheme);&#010;-            }&#010;-            if (json == null) {&#010;-                // if the uri starts with a placeholder then we are also incapable of parsing it as we wasn't able to resolve the component name&#010;-                if (uri.startsWith(""{{"")) {&#010;-                    result.addIncapable(uri);&#010;-                } else if (scheme != null) {&#010;-                    result.addUnknownComponent(scheme);&#010;-                } else {&#010;-                    result.addUnknownComponent(uri);&#010;-                }&#010;-                return result;&#010;-            }&#010;-&#010;-            rows = JSonSchemaHelper.parseJsonSchema(""component"", json, false);&#010;-&#010;-            // is the component capable of both consumer and producer?&#010;-            boolean canConsumeAndProduce = false;&#010;-            if (!isComponentConsumerOnly(rows) &amp;&amp; !isComponentProducerOnly(rows)) {&#010;-                canConsumeAndProduce = true;&#010;-            }&#010;-&#010;-            if (canConsumeAndProduce &amp;&amp; consumerOnly) {&#010;-                // lenient properties is not support in consumer only mode if the component can do both of them&#010;-                lenientProperties = false;&#010;-            } else {&#010;-                // only enable lenient properties if we should not ignore&#010;-                lenientProperties = !ignoreLenientProperties &amp;&amp; isComponentLenientProperties(rows);&#010;-            }&#010;-            rows = JSonSchemaHelper.parseJsonSchema(""properties"", json, true);&#010;-            properties = endpointProperties(uri);&#010;-        } catch (URISyntaxException e) {&#010;-            if (uri.startsWith(""{{"")) {&#010;-                // if the uri starts with a placeholder then we are also incapable of parsing it as we wasn't able to resolve the component name&#010;-                result.addIncapable(uri);&#010;-            } else {&#010;-                result.addSyntaxError(e.getMessage());&#010;-            }&#010;-&#010;-            return result;&#010;-        }&#010;-&#010;-        // the dataformat component refers to a data format so lets add the properties for the selected&#010;-        // data format to the list of rows&#010;-        if (""dataformat"".equals(scheme)) {&#010;-            String dfName = properties.get(""name"");&#010;-            if (dfName != null) {&#010;-                String dfJson = jsonSchemaResolver.getDataFormatJSonSchema(dfName);&#010;-                List&lt;Map&lt;String, String&gt;&gt; dfRows = JSonSchemaHelper.parseJsonSchema(""properties"", dfJson, true);&#010;-                if (dfRows != null &amp;&amp; !dfRows.isEmpty()) {&#010;-                    rows.addAll(dfRows);&#010;-                }&#010;-            }&#010;-        }&#010;-&#010;-        for (Map.Entry&lt;String, String&gt; property : properties.entrySet()) {&#010;-            String value = property.getValue();&#010;-            String originalName = property.getKey();&#010;-            String name = property.getKey();&#010;-            // the name may be using an optional prefix, so lets strip that because the options&#010;-            // in the schema are listed without the prefix&#010;-            name = stripOptionalPrefixFromName(rows, name);&#010;-            // the name may be using a prefix, so lets see if we can find the real property name&#010;-            String propertyName = getPropertyNameFromNameWithPrefix(rows, name);&#010;-            if (propertyName != null) {&#010;-                name = propertyName;&#010;-            }&#010;-&#010;-            String prefix = getPropertyPrefix(rows, name);&#010;-            String kind = getPropertyKind(rows, name);&#010;-            boolean namePlaceholder = name.startsWith(""{{"") &amp;&amp; name.endsWith(""}}"");&#010;-            boolean valuePlaceholder = value.startsWith(""{{"") || value.startsWith(""${"") || value.startsWith(""$simple{"");&#010;-            boolean lookup = value.startsWith(""#"") &amp;&amp; value.length() &gt; 1;&#010;-            // we cannot evaluate multi values as strict as the others, as we don't know their expected types&#010;-            boolean mulitValue = prefix != null &amp;&amp; originalName.startsWith(prefix) &amp;&amp; isPropertyMultiValue(rows, name);&#010;-&#010;-            Map&lt;String, String&gt; row = getRow(rows, name);&#010;-            if (row == null) {&#010;-                // unknown option&#010;-&#010;-                // only add as error if the component is not lenient properties, or not stub component&#010;-                // and the name is not a property placeholder for one or more values&#010;-                if (!namePlaceholder &amp;&amp; !""stub"".equals(scheme)) {&#010;-                    if (lenientProperties) {&#010;-                        // as if we are lenient then the option is a dynamic extra option which we cannot validate&#010;-                        result.addLenient(name);&#010;-                    } else {&#010;-                        // its unknown&#010;-                        result.addUnknown(name);&#010;-                        if (suggestionStrategy != null) {&#010;-                            String[] suggestions = suggestionStrategy.suggestEndpointOptions(getNames(rows), name);&#010;-                            if (suggestions != null) {&#010;-                                result.addUnknownSuggestions(name, suggestions);&#010;-                            }&#010;-                        }&#010;-                    }&#010;-                }&#010;-            } else {&#010;-                if (""parameter"".equals(kind)) {&#010;-                    // consumer only or producer only mode for parameters&#010;-                    if (consumerOnly) {&#010;-                        boolean producer = isPropertyProducerOnly(rows, name);&#010;-                        if (producer) {&#010;-                            // the option is only for producer so you cannot use it in consumer mode&#010;-                            result.addNotConsumerOnly(name);&#010;-                        }&#010;-                    } else if (producerOnly) {&#010;-                        boolean consumer = isPropertyConsumerOnly(rows, name);&#010;-                        if (consumer) {&#010;-                            // the option is only for consumer so you cannot use it in producer mode&#010;-                            result.addNotProducerOnly(name);&#010;-                        }&#010;-                    }&#010;-                }&#010;-&#010;-                // default value&#010;-                String defaultValue = getPropertyDefaultValue(rows, name);&#010;-                if (defaultValue != null) {&#010;-                    result.addDefaultValue(name, defaultValue);&#010;-                }&#010;-&#010;-                // is required but the value is empty&#010;-                boolean required = isPropertyRequired(rows, name);&#010;-                if (required &amp;&amp; isEmpty(value)) {&#010;-                    result.addRequired(name);&#010;-                }&#010;-&#010;-                // is enum but the value is not within the enum range&#010;-                // but we can only check if the value is not a placeholder&#010;-                String enums = getPropertyEnum(rows, name);&#010;-                if (!mulitValue &amp;&amp; !valuePlaceholder &amp;&amp; !lookup &amp;&amp; enums != null) {&#010;-                    String[] choices = enums.split("","");&#010;-                    boolean found = false;&#010;-                    for (String s : choices) {&#010;-                        if (value.equalsIgnoreCase(s)) {&#010;-                            found = true;&#010;-                            break;&#010;-                        }&#010;-                    }&#010;-                    if (!found) {&#010;-                        result.addInvalidEnum(name, value);&#010;-                        result.addInvalidEnumChoices(name, choices);&#010;-                        if (suggestionStrategy != null) {&#010;-                            Set&lt;String&gt; names = new LinkedHashSet&lt;&gt;();&#010;-                            names.addAll(Arrays.asList(choices));&#010;-                            String[] suggestions = suggestionStrategy.suggestEndpointOptions(names, value);&#010;-                            if (suggestions != null) {&#010;-                                result.addInvalidEnumSuggestions(name, suggestions);&#010;-                            }&#010;-                        }&#010;-&#010;-                    }&#010;-                }&#010;-&#010;-                // is reference lookup of bean (not applicable for @UriPath, enums, or multi-valued)&#010;-                if (!mulitValue &amp;&amp; enums == null &amp;&amp; !""path"".equals(kind) &amp;&amp; isPropertyObject(rows, name)) {&#010;-                    // must start with # and be at least 2 characters&#010;-                    if (!value.startsWith(""#"") || value.length() &lt;= 1) {&#010;-                        result.addInvalidReference(name, value);&#010;-                    }&#010;-                }&#010;-&#010;-                // is boolean&#010;-                if (!mulitValue &amp;&amp; !valuePlaceholder &amp;&amp; !lookup &amp;&amp; isPropertyBoolean(rows, name)) {&#010;-                    // value must be a boolean&#010;-                    boolean bool = ""true"".equalsIgnoreCase(value) || ""false"".equalsIgnoreCase(value);&#010;-                    if (!bool) {&#010;-                        result.addInvalidBoolean(name, value);&#010;-                    }&#010;-                }&#010;-&#010;-                // is integer&#010;-                if (!mulitValue &amp;&amp; !valuePlaceholder &amp;&amp; !lookup &amp;&amp; isPropertyInteger(rows, name)) {&#010;-                    // value must be an integer&#010;-                    boolean valid = validateInteger(value);&#010;-                    if (!valid) {&#010;-                        result.addInvalidInteger(name, value);&#010;-                    }&#010;-                }&#010;-&#010;-                // is number&#010;-                if (!mulitValue &amp;&amp; !valuePlaceholder &amp;&amp; !lookup &amp;&amp; isPropertyNumber(rows, name)) {&#010;-                    // value must be an number&#010;-                    boolean valid = false;&#010;-                    try {&#010;-                        valid = !Double.valueOf(value).isNaN() || !Float.valueOf(value).isNaN();&#010;-                    } catch (Exception e) {&#010;-                        // ignore&#010;-                    }&#010;-                    if (!valid) {&#010;-                        result.addInvalidNumber(name, value);&#010;-                    }&#010;-                }&#010;-            }&#010;-        }&#010;-&#010;-        // now check if all required values are there, and that a default value does not exists&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            String name = row.get(""name"");&#010;-            boolean required = isPropertyRequired(rows, name);&#010;-            if (required) {&#010;-                String value = properties.get(name);&#010;-                if (isEmpty(value)) {&#010;-                    value = getPropertyDefaultValue(rows, name);&#010;-                }&#010;-                if (isEmpty(value)) {&#010;-                    result.addRequired(name);&#010;-                }&#010;-            }&#010;-        }&#010;-&#010;-        return result;&#010;-    }&#010;-&#010;-    public Map&lt;String, String&gt; endpointProperties(String uri) throws URISyntaxException {&#010;-        // need to normalize uri first&#010;-        URI u = normalizeUri(uri);&#010;-        String scheme = u.getScheme();&#010;-&#010;-        String json = jsonSchemaResolver.getComponentJSonSchema(scheme);&#010;-        if (json == null) {&#010;-            throw new IllegalArgumentException(""Cannot find endpoint with scheme "" + scheme);&#010;-        }&#010;-&#010;-        // grab the syntax&#010;-        String syntax = null;&#010;-        String alternativeSyntax = null;&#010;-        List&lt;Map&lt;String, String&gt;&gt; rows = JSonSchemaHelper.parseJsonSchema(""component"", json, false);&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            if (row.containsKey(""syntax"")) {&#010;-                syntax = row.get(""syntax"");&#010;-            }&#010;-            if (row.containsKey(""alternativeSyntax"")) {&#010;-                alternativeSyntax = row.get(""alternativeSyntax"");&#010;-            }&#010;-        }&#010;-        if (syntax == null) {&#010;-            throw new IllegalArgumentException(""Endpoint with scheme "" + scheme + "" has no syntax defined in the json schema"");&#010;-        }&#010;-&#010;-        // only if we support alternative syntax, and the uri contains the username and password in the authority&#010;-        // part of the uri, then we would need some special logic to capture that information and strip those&#010;-        // details from the uri, so we can continue parsing the uri using the normal syntax&#010;-        Map&lt;String, String&gt; userInfoOptions = new LinkedHashMap&lt;String, String&gt;();&#010;-        if (alternativeSyntax != null &amp;&amp; alternativeSyntax.contains(""@"")) {&#010;-            // clip the scheme from the syntax&#010;-            alternativeSyntax = after(alternativeSyntax, "":"");&#010;-            // trim so only userinfo&#010;-            int idx = alternativeSyntax.indexOf(""@"");&#010;-            String fields = alternativeSyntax.substring(0, idx);&#010;-            String[] names = fields.split("":"");&#010;-&#010;-            // grab authority part and grab username and/or password&#010;-            String authority = u.getAuthority();&#010;-            if (authority != null &amp;&amp; authority.contains(""@"")) {&#010;-                String username = null;&#010;-                String password = null;&#010;-&#010;-                // grab unserinfo part before @&#010;-                String userInfo = authority.substring(0, authority.indexOf(""@""));&#010;-                String[] parts = userInfo.split("":"");&#010;-                if (parts.length == 2) {&#010;-                    username = parts[0];&#010;-                    password = parts[1];&#010;-                } else {&#010;-                    // only username&#010;-                    username = userInfo;&#010;-                }&#010;-&#010;-                // remember the username and/or password which we add later to the options&#010;-                if (names.length == 2) {&#010;-                    userInfoOptions.put(names[0], username);&#010;-                    if (password != null) {&#010;-                        // password is optional&#010;-                        userInfoOptions.put(names[1], password);&#010;-                    }&#010;-                }&#010;-            }&#010;-        }&#010;-&#010;-        // clip the scheme from the syntax&#010;-        syntax = after(syntax, "":"");&#010;-        // clip the scheme from the uri&#010;-        uri = after(uri, "":"");&#010;-        String uriPath = stripQuery(uri);&#010;-&#010;-        // strip user info from uri path&#010;-        if (!userInfoOptions.isEmpty()) {&#010;-            int idx = uriPath.indexOf('@');&#010;-            if (idx &gt; -1) {&#010;-                uriPath = uriPath.substring(idx + 1);&#010;-            }&#010;-        }&#010;-&#010;-        // strip double slash in the start&#010;-        if (uriPath != null &amp;&amp; uriPath.startsWith(""//"")) {&#010;-            uriPath = uriPath.substring(2);&#010;-        }&#010;-&#010;-        // parse the syntax and find the names of each option&#010;-        Matcher matcher = SYNTAX_PATTERN.matcher(syntax);&#010;-        List&lt;String&gt; word = new ArrayList&lt;String&gt;();&#010;-        while (matcher.find()) {&#010;-            String s = matcher.group(1);&#010;-            if (!scheme.equals(s)) {&#010;-                word.add(s);&#010;-            }&#010;-        }&#010;-        // parse the syntax and find each token between each option&#010;-        String[] tokens = SYNTAX_PATTERN.split(syntax);&#010;-&#010;-        // find the position where each option start/end&#010;-        List&lt;String&gt; word2 = new ArrayList&lt;String&gt;();&#010;-        int prev = 0;&#010;-        int prevPath = 0;&#010;-&#010;-        // special for activemq/jms where the enum for destinationType causes a token issue as it includes a colon&#010;-        // for 'temp:queue' and 'temp:topic' values&#010;-        if (""activemq"".equals(scheme) || ""jms"".equals(scheme)) {&#010;-            if (uriPath.startsWith(""temp:"")) {&#010;-                prevPath = 5;&#010;-            }&#010;-        }&#010;-&#010;-        for (String token : tokens) {&#010;-            if (token.isEmpty()) {&#010;-                continue;&#010;-            }&#010;-&#010;-            // special for some tokens where :// can be used also, eg http://foo&#010;-            int idx = -1;&#010;-            int len = 0;&#010;-            if ("":"".equals(token)) {&#010;-                idx = uriPath.indexOf(""://"", prevPath);&#010;-                len = 3;&#010;-            }&#010;-            if (idx == -1) {&#010;-                idx = uriPath.indexOf(token, prevPath);&#010;-                len = token.length();&#010;-            }&#010;-&#010;-            if (idx &gt; 0) {&#010;-                String option = uriPath.substring(prev, idx);&#010;-                word2.add(option);&#010;-                prev = idx + len;&#010;-                prevPath = prev;&#010;-            }&#010;-        }&#010;-        // special for last or if we did not add anyone&#010;-        if (prev &gt; 0 || word2.isEmpty()) {&#010;-            String option = uriPath.substring(prev);&#010;-            word2.add(option);&#010;-        }&#010;-&#010;-        rows = JSonSchemaHelper.parseJsonSchema(""properties"", json, true);&#010;-&#010;-        boolean defaultValueAdded = false;&#010;-&#010;-        // now parse the uri to know which part isw what&#010;-        Map&lt;String, String&gt; options = new LinkedHashMap&lt;String, String&gt;();&#010;-&#010;-        // include the username and password from the userinfo section&#010;-        if (!userInfoOptions.isEmpty()) {&#010;-            options.putAll(userInfoOptions);&#010;-        }&#010;-&#010;-        // word contains the syntax path elements&#010;-        Iterator&lt;String&gt; it = word2.iterator();&#010;-        for (int i = 0; i &lt; word.size(); i++) {&#010;-            String key = word.get(i);&#010;-&#010;-            boolean allOptions = word.size() == word2.size();&#010;-            boolean required = isPropertyRequired(rows, key);&#010;-            String defaultValue = getPropertyDefaultValue(rows, key);&#010;-&#010;-            // we have all options so no problem&#010;-            if (allOptions) {&#010;-                String value = it.next();&#010;-                options.put(key, value);&#010;-            } else {&#010;-                // we have a little problem as we do not not have all options&#010;-                if (!required) {&#010;-                    String value = null;&#010;-&#010;-                    boolean last = i == word.size() - 1;&#010;-                    if (last) {&#010;-                        // if its the last value then use it instead of the default value&#010;-                        value = it.hasNext() ? it.next() : null;&#010;-                        if (value != null) {&#010;-                            options.put(key, value);&#010;-                        } else {&#010;-                            value = defaultValue;&#010;-                        }&#010;-                    }&#010;-                    if (value != null) {&#010;-                        options.put(key, value);&#010;-                        defaultValueAdded = true;&#010;-                    }&#010;-                } else {&#010;-                    String value = it.hasNext() ? it.next() : null;&#010;-                    if (value != null) {&#010;-                        options.put(key, value);&#010;-                    }&#010;-                }&#010;-            }&#010;-        }&#010;-&#010;-        Map&lt;String, String&gt; answer = new LinkedHashMap&lt;String, String&gt;();&#010;-&#010;-        // remove all options which are using default values and are not required&#010;-        for (Map.Entry&lt;String, String&gt; entry : options.entrySet()) {&#010;-            String key = entry.getKey();&#010;-            String value = entry.getValue();&#010;-&#010;-            if (defaultValueAdded) {&#010;-                boolean required = isPropertyRequired(rows, key);&#010;-                String defaultValue = getPropertyDefaultValue(rows, key);&#010;-&#010;-                if (!required &amp;&amp; defaultValue != null) {&#010;-                    if (defaultValue.equals(value)) {&#010;-                        continue;&#010;-                    }&#010;-                }&#010;-            }&#010;-&#010;-            // we should keep this in the answer&#010;-            answer.put(key, value);&#010;-        }&#010;-&#010;-        // now parse the uri parameters&#010;-        Map&lt;String, Object&gt; parameters = URISupport.parseParameters(u);&#010;-&#010;-        // and covert the values to String so its JMX friendly&#010;-        while (!parameters.isEmpty()) {&#010;-            Map.Entry&lt;String, Object&gt; entry = parameters.entrySet().iterator().next();&#010;-            String key = entry.getKey();&#010;-            String value = entry.getValue() != null ? entry.getValue().toString() : """";&#010;-&#010;-            boolean multiValued = isPropertyMultiValue(rows, key);&#010;-            if (multiValued) {&#010;-                String prefix = getPropertyPrefix(rows, key);&#010;-                // extra all the multi valued options&#010;-                Map&lt;String, Object&gt; values = URISupport.extractProperties(parameters, prefix);&#010;-                // build a string with the extra multi valued options with the prefix and &amp; as separator&#010;-                CollectionStringBuffer csb = new CollectionStringBuffer(""&amp;"");&#010;-                for (Map.Entry&lt;String, Object&gt; multi : values.entrySet()) {&#010;-                    String line = prefix + multi.getKey() + ""="" + (multi.getValue() != null ? multi.getValue().toString() : """");&#010;-                    csb.append(line);&#010;-                }&#010;-                // append the extra multi-values to the existing (which contains the first multi value)&#010;-                if (!csb.isEmpty()) {&#010;-                    value = value + ""&amp;"" + csb.toString();&#010;-                }&#010;-            }&#010;-&#010;-            answer.put(key, value);&#010;-            // remove the parameter as we run in a while loop until no more parameters&#010;-            parameters.remove(key);&#010;-        }&#010;-&#010;-        return answer;&#010;-    }&#010;-&#010;-    public Map&lt;String, String&gt; endpointLenientProperties(String uri) throws URISyntaxException {&#010;-        // need to normalize uri first&#010;-&#010;-        // parse the uri&#010;-        URI u = normalizeUri(uri);&#010;-        String scheme = u.getScheme();&#010;-&#010;-        String json = jsonSchemaResolver.getComponentJSonSchema(scheme);&#010;-        if (json == null) {&#010;-            throw new IllegalArgumentException(""Cannot find endpoint with scheme "" + scheme);&#010;-        }&#010;-&#010;-        List&lt;Map&lt;String, String&gt;&gt; rows = JSonSchemaHelper.parseJsonSchema(""properties"", json, true);&#010;-&#010;-        // now parse the uri parameters&#010;-        Map&lt;String, Object&gt; parameters = URISupport.parseParameters(u);&#010;-&#010;-        // all the known options&#010;-        Set&lt;String&gt; names = getNames(rows);&#010;-&#010;-        Map&lt;String, String&gt; answer = new LinkedHashMap&lt;&gt;();&#010;-&#010;-        // and covert the values to String so its JMX friendly&#010;-        parameters.forEach((k, v) -&gt; {&#010;-            String key = k;&#010;-            String value = v != null ? v.toString() : """";&#010;-&#010;-            // is the key a prefix property&#010;-            int dot = key.indexOf('.');&#010;-            if (dot != -1) {&#010;-                String prefix = key.substring(0, dot + 1); // include dot in prefix&#010;-                String option = getPropertyNameFromNameWithPrefix(rows, prefix);&#010;-                if (option == null || !isPropertyMultiValue(rows, option)) {&#010;-                    answer.put(key, value);&#010;-                }&#010;-            } else if (!names.contains(key)) {&#010;-                answer.put(key, value);&#010;-            }&#010;-        });&#010;-&#010;-        return answer;&#010;-    }&#010;-&#010;-    public String endpointComponentName(String uri) {&#010;-        if (uri != null) {&#010;-            int idx = uri.indexOf("":"");&#010;-            if (idx &gt; 0) {&#010;-                return uri.substring(0, idx);&#010;-            }&#010;-        }&#010;-        return null;&#010;-    }&#010;-&#010;-    public String asEndpointUri(String scheme, String json, boolean encode) throws URISyntaxException {&#010;-        return doAsEndpointUri(scheme, json, ""&amp;"", encode);&#010;-    }&#010;-&#010;-    public String asEndpointUriXml(String scheme, String json, boolean encode) throws URISyntaxException {&#010;-        return doAsEndpointUri(scheme, json, ""&amp;amp;"", encode);&#010;-    }&#010;-&#010;-    private String doAsEndpointUri(String scheme, String json, String ampersand, boolean encode) throws URISyntaxException {&#010;-        List&lt;Map&lt;String, String&gt;&gt; rows = JSonSchemaHelper.parseJsonSchema(""properties"", json, true);&#010;-&#010;-        Map&lt;String, String&gt; copy = new HashMap&lt;String, String&gt;();&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            String name = row.get(""name"");&#010;-            String required = row.get(""required"");&#010;-            String value = row.get(""value"");&#010;-            String defaultValue = row.get(""defaultValue"");&#010;-&#010;-            // only add if either required, or the value is != default value&#010;-            String valueToAdd = null;&#010;-            if (""true"".equals(required)) {&#010;-                valueToAdd = value != null ? value : defaultValue;&#010;-                if (valueToAdd == null) {&#010;-                    valueToAdd = """";&#010;-                }&#010;-            } else {&#010;-                // if we have a value and no default then add it&#010;-                if (value != null &amp;&amp; defaultValue == null) {&#010;-                    valueToAdd = value;&#010;-                }&#010;-                // otherwise only add if the value is != default value&#010;-                if (value != null &amp;&amp; defaultValue != null &amp;&amp; !value.equals(defaultValue)) {&#010;-                    valueToAdd = value;&#010;-                }&#010;-            }&#010;-&#010;-            if (valueToAdd != null) {&#010;-                copy.put(name, valueToAdd);&#010;-            }&#010;-        }&#010;-&#010;-        return doAsEndpointUri(scheme, copy, ampersand, encode);&#010;-    }&#010;-&#010;-    public String asEndpointUri(String scheme, Map&lt;String, String&gt; properties, boolean encode) throws URISyntaxException {&#010;-        return doAsEndpointUri(scheme, properties, ""&amp;"", encode);&#010;-    }&#010;-&#010;-    public String asEndpointUriXml(String scheme, Map&lt;String, String&gt; properties, boolean encode) throws URISyntaxException {&#010;-        return doAsEndpointUri(scheme, properties, ""&amp;amp;"", encode);&#010;-    }&#010;-&#010;-    String doAsEndpointUri(String scheme, Map&lt;String, String&gt; properties, String ampersand, boolean encode) throws URISyntaxException {&#010;-        String json = jsonSchemaResolver.getComponentJSonSchema(scheme);&#010;-        if (json == null) {&#010;-            throw new IllegalArgumentException(""Cannot find endpoint with scheme "" + scheme);&#010;-        }&#010;-&#010;-        // grab the syntax&#010;-        String syntax = null;&#010;-        List&lt;Map&lt;String, String&gt;&gt; rows = JSonSchemaHelper.parseJsonSchema(""component"", json, false);&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            if (row.containsKey(""syntax"")) {&#010;-                syntax = row.get(""syntax"");&#010;-                break;&#010;-            }&#010;-        }&#010;-        if (syntax == null) {&#010;-            throw new IllegalArgumentException(""Endpoint with scheme "" + scheme + "" has no syntax defined in the json schema"");&#010;-        }&#010;-&#010;-        // do any properties filtering which can be needed for some special components&#010;-        properties = filterProperties(scheme, properties);&#010;-&#010;-        rows = JSonSchemaHelper.parseJsonSchema(""properties"", json, true);&#010;-&#010;-        // clip the scheme from the syntax&#010;-        syntax = after(syntax, "":"");&#010;-&#010;-        String originalSyntax = syntax;&#010;-&#010;-        // build at first according to syntax (use a tree map as we want the uri options sorted)&#010;-        Map&lt;String, String&gt; copy = new TreeMap&lt;String, String&gt;();&#010;-        for (Map.Entry&lt;String, String&gt; entry : properties.entrySet()) {&#010;-            String key = entry.getKey();&#010;-            String value = entry.getValue() != null ? entry.getValue() : """";&#010;-            if (syntax != null &amp;&amp; syntax.contains(key)) {&#010;-                syntax = syntax.replace(key, value);&#010;-            } else {&#010;-                copy.put(key, value);&#010;-            }&#010;-        }&#010;-&#010;-        // do we have all the options the original syntax needs (easy way)&#010;-        String[] keys = syntaxKeys(originalSyntax);&#010;-        boolean hasAllKeys = properties.keySet().containsAll(Arrays.asList(keys));&#010;-&#010;-        // build endpoint uri&#010;-        StringBuilder sb = new StringBuilder();&#010;-        sb.append(scheme);&#010;-        sb.append("":"");&#010;-&#010;-        if (hasAllKeys) {&#010;-            // we have all the keys for the syntax so we can build the uri the easy way&#010;-            sb.append(syntax);&#010;-&#010;-            if (!copy.isEmpty()) {&#010;-                boolean hasQuestionmark = sb.toString().contains(""?"");&#010;-                // the last option may already contain a ? char, if so we should use &amp; instead of ?&#010;-                sb.append(hasQuestionmark ? ampersand : '?');&#010;-                String query = createQueryString(copy, ampersand, encode);&#010;-                sb.append(query);&#010;-            }&#010;-        } else {&#010;-            // TODO: revisit this and see if we can do this in another way&#010;-            // oh darn some options is missing, so we need a complex way of building the uri&#010;-&#010;-            // the tokens between the options in the path&#010;-            String[] tokens = syntax.split(""\\w+"");&#010;-&#010;-            // parse the syntax into each options&#010;-            Matcher matcher = SYNTAX_PATTERN.matcher(originalSyntax);&#010;-            List&lt;String&gt; options = new ArrayList&lt;String&gt;();&#010;-            while (matcher.find()) {&#010;-                String s = matcher.group(1);&#010;-                options.add(s);&#010;-            }&#010;-&#010;-            // need to preserve {{ and }} from the syntax&#010;-            // (we need to use words only as its provisional placeholders)&#010;-            syntax = syntax.replaceAll(""\\{\\{"", ""BEGINCAMELPLACEHOLDER"");&#010;-            syntax = syntax.replaceAll(""\\}\\}"", ""ENDCAMELPLACEHOLDER"");&#010;-&#010;-            // parse the syntax into each options&#010;-            Matcher matcher2 = SYNTAX_PATTERN.matcher(syntax);&#010;-            List&lt;String&gt; options2 = new ArrayList&lt;String&gt;();&#010;-            while (matcher2.find()) {&#010;-                String s = matcher2.group(1);&#010;-                s = s.replaceAll(""BEGINCAMELPLACEHOLDER"", ""\\{\\{"");&#010;-                s = s.replaceAll(""ENDCAMELPLACEHOLDER"", ""\\}\\}"");&#010;-                options2.add(s);&#010;-            }&#010;-&#010;-            // build the endpoint&#010;-            int range = 0;&#010;-            boolean first = true;&#010;-            boolean hasQuestionmark = false;&#010;-            for (int i = 0; i &lt; options.size(); i++) {&#010;-                String key = options.get(i);&#010;-                String key2 = options2.get(i);&#010;-                String token = null;&#010;-                if (tokens.length &gt; i) {&#010;-                    token = tokens[i];&#010;-                }&#010;-&#010;-                boolean contains = properties.containsKey(key);&#010;-                if (!contains) {&#010;-                    // if the key are similar we have no explicit value and can try to find a default value if the option is required&#010;-                    if (isPropertyRequired(rows, key)) {&#010;-                        String value = getPropertyDefaultValue(rows, key);&#010;-                        if (value != null) {&#010;-                            properties.put(key, value);&#010;-                            key2 = value;&#010;-                        }&#010;-                    }&#010;-                }&#010;-&#010;-                // was the option provided?&#010;-                if (properties.containsKey(key)) {&#010;-                    if (!first &amp;&amp; token != null) {&#010;-                        sb.append(token);&#010;-                    }&#010;-                    hasQuestionmark |= key.contains(""?"") || (token != null &amp;&amp; token.contains(""?""));&#010;-                    sb.append(key2);&#010;-                    first = false;&#010;-                }&#010;-                range++;&#010;-            }&#010;-            // append any extra options that was in surplus for the last&#010;-            while (range &lt; options2.size()) {&#010;-                String token = null;&#010;-                if (tokens.length &gt; range) {&#010;-                    token = tokens[range];&#010;-                }&#010;-                String key2 = options2.get(range);&#010;-                sb.append(token);&#010;-                sb.append(key2);&#010;-                hasQuestionmark |= key2.contains(""?"") || (token != null &amp;&amp; token.contains(""?""));&#010;-                range++;&#010;-            }&#010;-&#010;-&#010;-            if (!copy.isEmpty()) {&#010;-                // the last option may already contain a ? char, if so we should use &amp; instead of ?&#010;-                sb.append(hasQuestionmark ? ampersand : '?');&#010;-                String query = createQueryString(copy, ampersand, encode);&#010;-                sb.append(query);&#010;-            }&#010;-        }&#010;-&#010;-        return sb.toString();&#010;-    }&#010;-&#010;-    @Deprecated&#010;-    private static String[] syntaxTokens(String syntax) {&#010;-        // build tokens between the words&#010;-        List&lt;String&gt; tokens = new ArrayList&lt;&gt;();&#010;-        // preserve backwards behavior which had an empty token first&#010;-        tokens.add("""");&#010;-&#010;-        String current = """";&#010;-        for (int i = 0; i &lt; syntax.length(); i++) {&#010;-            char ch = syntax.charAt(i);&#010;-            if (Character.isLetterOrDigit(ch)) {&#010;-                // reset for new current tokens&#010;-                if (current.length() &gt; 0) {&#010;-                    tokens.add(current);&#010;-                    current = """";&#010;-                }&#010;-            } else {&#010;-                current += ch;&#010;-            }&#010;-        }&#010;-        // anything left over?&#010;-        if (current.length() &gt; 0) {&#010;-            tokens.add(current);&#010;-        }&#010;-&#010;-        return tokens.toArray(new String[tokens.size()]);&#010;-    }&#010;-&#010;-    private static String[] syntaxKeys(String syntax) {&#010;-        // build tokens between the separators&#010;-        List&lt;String&gt; tokens = new ArrayList&lt;&gt;();&#010;-&#010;-        String current = """";&#010;-        for (int i = 0; i &lt; syntax.length(); i++) {&#010;-            char ch = syntax.charAt(i);&#010;-            if (Character.isLetterOrDigit(ch)) {&#010;-                current += ch;&#010;-            } else {&#010;-                // reset for new current tokens&#010;-                if (current.length() &gt; 0) {&#010;-                    tokens.add(current);&#010;-                    current = """";&#010;-                }&#010;-            }&#010;-        }&#010;-        // anything left over?&#010;-        if (current.length() &gt; 0) {&#010;-            tokens.add(current);&#010;-        }&#010;-&#010;-        return tokens.toArray(new String[tokens.size()]);&#010;-    }&#010;-&#010;-    public SimpleValidationResult validateSimpleExpression(String simple) {&#010;-        return doValidateSimple(null, simple, false);&#010;-    }&#010;-&#010;-    public SimpleValidationResult validateSimpleExpression(ClassLoader classLoader, String simple) {&#010;-        return doValidateSimple(classLoader, simple, false);&#010;-    }&#010;-&#010;-    public SimpleValidationResult validateSimplePredicate(String simple) {&#010;-        return doValidateSimple(null, simple, true);&#010;-    }&#010;-&#010;-    public SimpleValidationResult validateSimplePredicate(ClassLoader classLoader, String simple) {&#010;-        return doValidateSimple(classLoader, simple, true);&#010;-    }&#010;-&#010;-    private SimpleValidationResult doValidateSimple(ClassLoader classLoader, String simple, boolean predicate) {&#010;-        if (classLoader == null) {&#010;-            classLoader = getClass().getClassLoader();&#010;-        }&#010;-&#010;-        // if there are {{ }}} property placeholders then we need to resolve them to something else&#010;-        // as the simple parse cannot resolve them before parsing as we dont run the actual Camel application&#010;-        // with property placeholders setup so we need to dummy this by replace the {{ }} to something else&#010;-        // therefore we use an more unlikely character: {{XXX}} to ~^XXX^~&#010;-        String resolved = simple.replaceAll(""\\{\\{(.+)\\}\\}"", ""~^$1^~"");&#010;-&#010;-        SimpleValidationResult answer = new SimpleValidationResult(simple);&#010;-&#010;-        Object instance = null;&#010;-        Class clazz = null;&#010;-        try {&#010;-            clazz = classLoader.loadClass(""org.apache.camel.language.simple.SimpleLanguage"");&#010;-            instance = clazz.newInstance();&#010;-        } catch (Exception e) {&#010;-            // ignore&#010;-        }&#010;-&#010;-        if (clazz != null &amp;&amp; instance != null) {&#010;-            Throwable cause = null;&#010;-            try {&#010;-                if (predicate) {&#010;-                    instance.getClass().getMethod(""createPredicate"", String.class).invoke(instance, resolved);&#010;-                } else {&#010;-                    instance.getClass().getMethod(""createExpression"", String.class).invoke(instance, resolved);&#010;-                }&#010;-            } catch (InvocationTargetException e) {&#010;-                cause = e.getTargetException();&#010;-            } catch (Exception e) {&#010;-                cause = e;&#010;-            }&#010;-&#010;-            if (cause != null) {&#010;-&#010;-                // reverse ~^XXX^~ back to {{XXX}}&#010;-                String errMsg = cause.getMessage();&#010;-                errMsg = errMsg.replaceAll(""\\~\\^(.+)\\^\\~"", ""{{$1}}"");&#010;-&#010;-                answer.setError(errMsg);&#010;-&#010;-                // is it simple parser exception then we can grab the index where the problem is&#010;-                if (cause.getClass().getName().equals(""org.apache.camel.language.simple.types.SimpleIllegalSyntaxException"")&#010;-                    || cause.getClass().getName().equals(""org.apache.camel.language.simple.types.SimpleParserException"")) {&#010;-                    try {&#010;-                        // we need to grab the index field from those simple parser exceptions&#010;-                        Method method = cause.getClass().getMethod(""getIndex"");&#010;-                        Object result = method.invoke(cause);&#010;-                        if (result != null) {&#010;-                            int index = (int) result;&#010;-                            answer.setIndex(index);&#010;-                        }&#010;-                    } catch (Throwable i) {&#010;-                        // ignore&#010;-                    }&#010;-                }&#010;-&#010;-                // we need to grab the short message field from this simple syntax exception&#010;-                if (cause.getClass().getName().equals(""org.apache.camel.language.simple.types.SimpleIllegalSyntaxException"")) {&#010;-                    try {&#010;-                        Method method = cause.getClass().getMethod(""getShortMessage"");&#010;-                        Object result = method.invoke(cause);&#010;-                        if (result != null) {&#010;-                            String msg = (String) result;&#010;-                            answer.setShortError(msg);&#010;-                        }&#010;-                    } catch (Throwable i) {&#010;-                        // ignore&#010;-                    }&#010;-&#010;-                    if (answer.getShortError() == null) {&#010;-                        // fallback and try to make existing message short instead&#010;-                        String msg = answer.getError();&#010;-                        // grab everything before "" at location "" which would be regarded as the short message&#010;-                        int idx = msg.indexOf("" at location "");&#010;-                        if (idx &gt; 0) {&#010;-                            msg = msg.substring(0, idx);&#010;-                            answer.setShortError(msg);&#010;-                        }&#010;-                    }&#010;-                }&#010;-            }&#010;-        }&#010;-&#010;-        return answer;&#010;-    }&#010;-&#010;-    public LanguageValidationResult validateLanguagePredicate(ClassLoader classLoader, String language, String text) {&#010;-        return doValidateLanguage(classLoader, language, text, true);&#010;-    }&#010;-&#010;-    public LanguageValidationResult validateLanguageExpression(ClassLoader classLoader, String language, String text) {&#010;-        return doValidateLanguage(classLoader, language, text, false);&#010;-    }&#010;-&#010;-    private LanguageValidationResult doValidateLanguage(ClassLoader classLoader, String language, String text, boolean predicate) {&#010;-        if (classLoader == null) {&#010;-            classLoader = getClass().getClassLoader();&#010;-        }&#010;-&#010;-        SimpleValidationResult answer = new SimpleValidationResult(text);&#010;-&#010;-        String json = jsonSchemaResolver.getLanguageJSonSchema(language);&#010;-        if (json == null) {&#010;-            answer.setError(""Unknown language "" + language);&#010;-            return answer;&#010;-        }&#010;-&#010;-        List&lt;Map&lt;String, String&gt;&gt; rows = JSonSchemaHelper.parseJsonSchema(""language"", json, false);&#010;-        String className = null;&#010;-        for (Map&lt;String, String&gt; row : rows) {&#010;-            if (row.containsKey(""javaType"")) {&#010;-                className = row.get(""javaType"");&#010;-            }&#010;-        }&#010;-&#010;-        if (className == null) {&#010;-            answer.setError(""Cannot find javaType for language "" + language);&#010;-            return answer;&#010;-        }&#010;-&#010;-        Object instance = null;&#010;-        Class clazz = null;&#010;-        try {&#010;-            clazz = classLoader.loadClass(className);&#010;-            instance = clazz.newInstance();&#010;-        } catch (Exception e) {&#010;-            // ignore&#010;-        }&#010;-&#010;-        if (clazz != null &amp;&amp; instance != null) {&#010;-            Throwable cause = null;&#010;-            try {&#010;-                if (predicate) {&#010;-                    instance.getClass().getMethod(""createPredicate"", String.class).invoke(instance, text);&#010;-                } else {&#010;-                    instance.getClass().getMethod(""createExpression"", String.class).invoke(instance, text);&#010;-                }&#010;-            } catch (InvocationTargetException e) {&#010;-                cause = e.getTargetException();&#010;-            } catch (Exception e) {&#010;-                cause = e;&#010;-            }&#010;-&#010;-            if (cause != null) {&#010;-                answer.setError(cause.getMessage());&#010;-            }&#010;-        }&#010;-&#010;-        return answer;&#010;-    }&#010;-&#010;-    /**&#010;-     * Special logic for log endpoints to deal when showAll=true&#010;-     */&#010;-    private Map&lt;String, String&gt; filterProperties(String scheme, Map&lt;String, String&gt; options) {&#010;-        if (""log"".equals(scheme)) {&#010;-            String showAll = options.get(""showAll"");&#010;-            if (""true"".equals(showAll)) {&#010;-                Map&lt;String, String&gt; filtered = new LinkedHashMap&lt;String, String&gt;();&#010;-                // remove all the other showXXX options when showAll=true&#010;-                for (Map.Entry&lt;String, String&gt; entry : options.entrySet()) {&#010;-                    String key = entry.getKey();&#010;-                    boolean skip = key.startsWith(""show"") &amp;&amp; !key.equals(""showAll"");&#010;-                    if (!skip) {&#010;-                        filtered.put(key, entry.getValue());&#010;-                    }&#010;-                }&#010;-                return filtered;&#010;-            }&#010;-        }&#010;-        // use as-is&#010;-        return options;&#010;-    }&#010;-&#010;-    private static boolean validateInteger(String value) {&#010;-        boolean valid = false;&#010;-        try {&#010;-            valid = Integer.valueOf(value) != null;&#010;-        } catch (Exception e) {&#010;-            // ignore&#010;-        }&#010;-        if (!valid) {&#010;-            // it may be a time pattern, such as 5s for 5 seconds = 5000&#010;-            try {&#010;-                TimePatternConverter.toMilliSeconds(value);&#010;-                valid = true;&#010;-            } catch (Exception e) {&#010;-                // ignore&#010;-            }&#010;-        }&#010;-        return valid;&#010;-    }&#010;-&#010;-    // CHECKSTYLE:ON&#010;-&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/catalog/CamelContextJSonSchemaResolver.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/catalog/CamelContextJSonSchemaResolver.java b/camel-core/src/main/java/org/apache/camel/catalog/CamelContextJSonSchemaResolver.java&#010;deleted file mode 100644&#010;index 8d95488..0000000&#010;--- a/camel-core/src/main/java/org/apache/camel/catalog/CamelContextJSonSchemaResolver.java&#010;+++ /dev/null&#010;@@ -1,80 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.catalog;&#010;-&#010;-import java.io.IOException;&#010;-&#010;-import org.apache.camel.CamelContext;&#010;-&#010;-/**&#010;- * Uses runtime {@link CamelContext} to resolve the JSon schema files.&#010;- */&#010;-public class CamelContextJSonSchemaResolver implements JSonSchemaResolver {&#010;-&#010;-    private final CamelContext camelContext;&#010;-&#010;-    public CamelContextJSonSchemaResolver(CamelContext camelContext) {&#010;-        this.camelContext = camelContext;&#010;-    }&#010;-&#010;-    @Override&#010;-    public String getComponentJSonSchema(String name) {&#010;-        try {&#010;-            return camelContext.getComponentParameterJsonSchema(name);&#010;-        } catch (IOException e) {&#010;-            // ignore&#010;-        }&#010;-        return null;&#010;-    }&#010;-&#010;-    @Override&#010;-    public String getDataFormatJSonSchema(String name) {&#010;-        try {&#010;-            return camelContext.getDataFormatParameterJsonSchema(name);&#010;-        } catch (IOException e) {&#010;-            // ignore&#010;-        }&#010;-        return null;&#010;-    }&#010;-&#010;-    @Override&#010;-    public String getLanguageJSonSchema(String name) {&#010;-        try {&#010;-            return camelContext.getLanguageParameterJsonSchema(name);&#010;-        } catch (IOException e) {&#010;-            // ignore&#010;-        }&#010;-        return null;&#010;-    }&#010;-&#010;-    @Override&#010;-    public String getOtherJSonSchema(String name) {&#010;-        // not supported&#010;-        return null;&#010;-    }&#010;-&#010;-    @Override&#010;-    public String getModelJSonSchema(String name) {&#010;-        try {&#010;-            return camelContext.getEipParameterJsonSchema(name);&#010;-        } catch (IOException e) {&#010;-            // ignore&#010;-        }&#010;-        return null;&#010;-    }&#010;-&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/catalog/CatalogHelper.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/catalog/CatalogHelper.java b/camel-core/src/main/java/org/apache/camel/catalog/CatalogHelper.java&#010;deleted file mode 100644&#010;index caba4a3..0000000&#010;--- a/camel-core/src/main/java/org/apache/camel/catalog/CatalogHelper.java&#010;+++ /dev/null&#010;@@ -1,179 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.catalog;&#010;-&#010;-import java.io.BufferedReader;&#010;-import java.io.IOException;&#010;-import java.io.InputStream;&#010;-import java.io.InputStreamReader;&#010;-import java.io.LineNumberReader;&#010;-import java.util.List;&#010;-&#010;-public final class CatalogHelper {&#010;-&#010;-    private CatalogHelper() {&#010;-    }&#010;-&#010;-    /**&#010;-     * Loads the entire stream into memory as a String and returns it.&#010;-     * &lt;p/&gt;&#010;-     * &lt;b&gt;Notice:&lt;/b&gt; This implementation appends a &lt;tt&gt;\n&lt;/tt&gt; as line&#010;-     * terminator at the of the text.&#010;-     * &lt;p/&gt;&#010;-     * Warning, don't use for crazy big streams :)&#010;-     */&#010;-    public static void loadLines(InputStream in, List&lt;String&gt; lines) throws IOException {&#010;-        try (final InputStreamReader isr = new InputStreamReader(in);&#010;-            final BufferedReader reader = new LineNumberReader(isr)) {&#010;-            String line;&#010;-            while ((line = reader.readLine()) != null) {&#010;-                lines.add(line);&#010;-            }&#010;-        }&#010;-    }&#010;-&#010;-    /**&#010;-     * Loads the entire stream into memory as a String and returns it.&#010;-     * &lt;p/&gt;&#010;-     * &lt;b&gt;Notice:&lt;/b&gt; This implementation appends a &lt;tt&gt;\n&lt;/tt&gt; as line&#010;-     * terminator at the of the text.&#010;-     * &lt;p/&gt;&#010;-     * Warning, don't use for crazy big streams :)&#010;-     */&#010;-    public static String loadText(InputStream in) throws IOException {&#010;-        StringBuilder builder = new StringBuilder();&#010;-        try (final InputStreamReader isr = new InputStreamReader(in);&#010;-            final BufferedReader reader = new LineNumberReader(isr)) {&#010;-            String line;&#010;-            while ((line = reader.readLine()) != null) {&#010;-                builder.append(line);&#010;-                builder.append(""\n"");&#010;-            }&#010;-            return builder.toString();&#010;-        }&#010;-    }&#010;-&#010;-    /**&#010;-     * Matches the name with the pattern.&#010;-     *&#010;-     * @param name  the name&#010;-     * @param pattern the pattern&#010;-     * @return &lt;tt&gt;true&lt;/tt&gt; if matched, or &lt;tt&gt;false&lt;/tt&gt; if not&#010;-     */&#010;-    public static boolean matchWildcard(String name, String pattern) {&#010;-        // we have wildcard support in that hence you can match with: file* to match any file endpoints&#010;-        if (pattern.endsWith(""*"") &amp;&amp; name.startsWith(pattern.substring(0, pattern.length() - 1))) {&#010;-            return true;&#010;-        }&#010;-        return false;&#010;-    }&#010;-&#010;-    /**&#010;-     * Returns the string after the given token&#010;-     *&#010;-     * @param text  the text&#010;-     * @param after the token&#010;-     * @return the text after the token, or &lt;tt&gt;null&lt;/tt&gt; if text does not contain the token&#010;-     */&#010;-    public static String after(String text, String after) {&#010;-        if (!text.contains(after)) {&#010;-            return null;&#010;-        }&#010;-        return text.substring(text.indexOf(after) + after.length());&#010;-    }&#010;-&#010;-    /**&#010;-     * Returns the string before the given token&#010;-     *&#010;-     * @param text  the text&#010;-     * @param before the token&#010;-     * @return the text before the token, or &lt;tt&gt;null&lt;/tt&gt; if text does not contain the token&#010;-     */&#010;-    public static String before(String text, String before) {&#010;-        if (!text.contains(before)) {&#010;-            return null;&#010;-        }&#010;-        return text.substring(0, text.indexOf(before));&#010;-    }&#010;-&#010;-    /**&#010;-     * Returns the string between the given tokens&#010;-     *&#010;-     * @param text  the text&#010;-     * @param after the before token&#010;-     * @param before the after token&#010;-     * @return the text between the tokens, or &lt;tt&gt;null&lt;/tt&gt; if text does not contain the tokens&#010;-     */&#010;-    public static String between(String text, String after, String before) {&#010;-        text = after(text, after);&#010;-        if (text == null) {&#010;-            return null;&#010;-        }&#010;-        return before(text, before);&#010;-    }&#010;-&#010;-    /**&#010;-     * Tests whether the value is &lt;tt&gt;null&lt;/tt&gt; or an empty string.&#010;-     *&#010;-     * @param value  the value, if its a String it will be tested for text length as well&#010;-     * @return true if empty&#010;-     */&#010;-    public static boolean isEmpty(Object value) {&#010;-        return !isNotEmpty(value);&#010;-    }&#010;-&#010;-    /**&#010;-     * Tests whether the value is &lt;b&gt;not&lt;/b&gt; &lt;tt&gt;null&lt;/tt&gt; or an empty string.&#010;-     *&#010;-     * @param value  the value, if its a String it will be tested for text length as well&#010;-     * @return true if &lt;b&gt;not&lt;/b&gt; empty&#010;-     */&#010;-    public static boolean isNotEmpty(Object value) {&#010;-        if (value == null) {&#010;-            return false;&#010;-        } else if (value instanceof String) {&#010;-            String text = (String) value;&#010;-            return text.trim().length() &gt; 0;&#010;-        } else {&#010;-            return true;&#010;-        }&#010;-    }&#010;-&#010;-    /**&#010;-     * Removes all leading and ending quotes (single and double) from the string&#010;-     *&#010;-     * @param s  the string&#010;-     * @return the string without leading and ending quotes (single and double)&#010;-     */&#010;-    public static String removeLeadingAndEndingQuotes(String s) {&#010;-        if (isEmpty(s)) {&#010;-            return s;&#010;-        }&#010;-&#010;-        String copy = s.trim();&#010;-        if (copy.startsWith(""'"") &amp;&amp; copy.endsWith(""'"")) {&#010;-            return copy.substring(1, copy.length() - 1);&#010;-        }&#010;-        if (copy.startsWith(""\"""") &amp;&amp; copy.endsWith(""\"""")) {&#010;-            return copy.substring(1, copy.length() - 1);&#010;-        }&#010;-&#010;-        // no quotes, so return as-is&#010;-        return s;&#010;-    }&#010;-&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/catalog/CollectionStringBuffer.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/catalog/CollectionStringBuffer.java b/camel-core/src/main/java/org/apache/camel/catalog/CollectionStringBuffer.java&#010;deleted file mode 100644&#010;index 2844ca9..0000000&#010;--- a/camel-core/src/main/java/org/apache/camel/catalog/CollectionStringBuffer.java&#010;+++ /dev/null&#010;@@ -1,57 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.catalog;&#010;-&#010;-public class CollectionStringBuffer {&#010;-    private final StringBuilder buffer = new StringBuilder();&#010;-    private String separator;&#010;-    private boolean first = true;&#010;-&#010;-    public CollectionStringBuffer() {&#010;-        this("", "");&#010;-    }&#010;-&#010;-    public CollectionStringBuffer(String separator) {&#010;-        this.separator = separator;&#010;-    }&#010;-&#010;-    @Override&#010;-    public String toString() {&#010;-        return buffer.toString();&#010;-    }&#010;-&#010;-    public void append(Object value) {&#010;-        if (first) {&#010;-            first = false;&#010;-        } else {&#010;-            buffer.append(separator);&#010;-        }&#010;-        buffer.append(value);&#010;-    }&#010;-&#010;-    public String getSeparator() {&#010;-        return separator;&#010;-    }&#010;-&#010;-    public void setSeparator(String separator) {&#010;-        this.separator = separator;&#010;-    }&#010;-&#010;-    public boolean isEmpty() {&#010;-        return first;&#010;-    }&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c66be7a8/camel-core/src/main/java/org/apache/camel/catalog/DefaultRuntimeCamelCatalog.java&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/java/org/apache/camel/catalog/DefaultRuntimeCamelCatalog.java b/camel-core/src/main/java/org/apache/camel/catalog/DefaultRuntimeCamelCatalog.java&#010;deleted file mode 100644&#010;index dd66c55..0000000&#010;--- a/camel-core/src/main/java/org/apache/camel/catalog/DefaultRuntimeCamelCatalog.java&#010;+++ /dev/null&#010;@@ -1,136 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.catalog;&#010;-&#010;-import java.util.HashMap;&#010;-import java.util.Map;&#010;-&#010;-import org.apache.camel.CamelContext;&#010;-&#010;-/**&#010;- * Default {@link RuntimeCamelCatalog}.&#010;- */&#010;-public class DefaultRuntimeCamelCatalog extends AbstractCamelCatalog implements RuntimeCamelCatalog {&#010;-&#010;-    // cache of operation -&gt; result&#010;-    private final Map&lt;String, Object&gt; cache = new HashMap&lt;String, Object&gt;();&#010;-    private boolean caching;&#010;-&#010;-    /**&#010;-     * Creates the {@link RuntimeCamelCatalog} without caching enabled.&#010;-     *&#010;-     * @param camelContext  the camel context&#010;-     */&#010;-    public DefaultRuntimeCamelCatalog(CamelContext camelContext) {&#010;-        this(camelContext, false);&#010;-    }&#010;-&#010;-    /**&#010;-     * Creates the {@link RuntimeCamelCatalog}&#010;-     *&#010;-     * @param camelContext  the camel context&#010;-     * @param caching  whether to use cache&#010;-     */&#010;-    public DefaultRuntimeCamelCatalog(CamelContext camelContext, boolean caching) {&#010;-        this.caching = caching;&#010;-        setJSonSchemaResolver(new CamelContextJSonSchemaResolver(camelContext));&#010;-    }&#010;-&#010;-    @Override&#010;-    public void start() throws Exception {&#010;-        // noop&#010;-    }&#010;-&#010;-    @Override&#010;-    public void stop() throws Exception {&#010;-        cache.clear();&#010;-    }&#010;-&#010;-    @Override&#010;-    public String modelJSonSchema(String name) {&#010;-        String answer = null;&#010;-        if (caching) {&#010;-            answer = (String) cache.get(""model-"" + name);&#010;-        }&#010;-&#010;-        if (answer == null) {&#010;-            answer = getJSonSchemaResolver().getModelJSonSchema(name);&#010;-            if (caching) {&#010;-                cache.put(""model-"" + name, answer);&#010;-            }&#010;-        }&#010;-&#010;-        return answer;&#010;-    }&#010;-&#010;-    @Override&#010;-    public String componentJSonSchema(String name) {&#010;-        String answer = null;&#010;-        if (caching) {&#010;-            answer = (String) cache.get(""component-"" + name);&#010;-        }&#010;-&#010;-        if (answer == null) {&#010;-            answer = getJSonSchemaResolver().getComponentJSonSchema(name);&#010;-            if (caching) {&#010;-                cache.put(""component-"" + name, answer);&#010;-            }&#010;-        }&#010;-&#010;-        return answer;&#010;-    }&#010;-&#010;-    @Override&#010;-    public String dataFormatJSonSchema(String name) {&#010;-        String answer = null;&#010;-        if (caching) {&#010;-            answer = (String) cache.get(""dataformat-"" + name);&#010;-        }&#010;-&#010;-        if (answer == null) {&#010;-            answer = getJSonSchemaResolver().getDataFormatJSonSchema(name);&#010;-            if (caching) {&#010;-                cache.put(""dataformat-"" + name, answer);&#010;-            }&#010;-        }&#010;-&#010;-        return answer;&#010;-    }&#010;-&#010;-    @Override&#010;-    public String languageJSonSchema(String name) {&#010;-        // if we try to look method then its in the bean.json file&#010;-        if (""method"".equals(name)) {&#010;-            name = ""bean"";&#010;-        }&#010;-&#010;-        String answer = null;&#010;-        if (caching) {&#010;-            answer = (String) cache.get(""language-"" + name);&#010;-        }&#010;-&#010;-        if (answer == null) {&#010;-            answer = getJSonSchemaResolver().getLanguageJSonSchema(name);&#010;-            if (caching) {&#010;-                cache.put(""language-"" + name, answer);&#010;-            }&#010;-        }&#010;-&#010;-        return answer;&#010;-    }&#010;-&#010;-}&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C8bc1b1e9d91243898c3083596a1d02a5%40git.apache.org%3E,2017-04-14 10:53:00,commits,327.0,  [6/6] camel git commit: Rename catalog to runtimecatalog to avoid clash with same package name in camel-catalog.
7,7,39.0,352.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master cd84f3857 -&gt; 49e1c0111&#010;&#010;&#010;Rename catalog to runtimecatalog to avoid clash with same package name in camel-catalog.&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/49e1c011&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/49e1c011&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/49e1c011&#010;&#010;Branch: refs/heads/master&#010;Commit: 49e1c011126df57f41987e432cf0566a523e9ffd&#010;Parents: cd84f38&#010;Author: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Authored: Fri Apr 14 16:41:58 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 16:42:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../camel/commands/AbstractCamelController.java |  9 +++---&#010; .../camel/commands/internal/MatchUtil.java      | 31 ++++++++++++++++++++&#010; 2 files changed, 36 insertions(+), 4 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/49e1c011/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractCamelController.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractCamelController.java&#010;b/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractCamelController.java&#010;index 3036d46..2937d10 100644&#010;--- a/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractCamelController.java&#010;+++ b/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractCamelController.java&#010;@@ -21,11 +21,12 @@ import java.util.LinkedHashMap;&#010; import java.util.List;&#010; import java.util.Map;&#010; &#010;-import org.apache.camel.catalog.CatalogHelper;&#010;-import org.apache.camel.commands.internal.RegexUtil;&#010; import org.apache.camel.util.JsonSchemaHelper;&#010; import org.apache.camel.util.ObjectHelper;&#010; &#010;+import static org.apache.camel.commands.internal.MatchUtil.matchWildcard;&#010;+import static org.apache.camel.commands.internal.RegexUtil.wildcardAsRegex;&#010;+&#010; /**&#010;  * Abstract {@link org.apache.camel.commands.CamelController} that implementators should&#010;extend.&#010;  */&#010;@@ -37,13 +38,13 @@ public abstract class AbstractCamelController implements CamelController&#010;{&#010; &#010;         List&lt;Map&lt;String, String&gt;&gt; context = getCamelContexts();&#010;         if (filter != null) {&#010;-            filter = RegexUtil.wildcardAsRegex(filter);&#010;+            filter = wildcardAsRegex(filter);&#010;         } else {&#010;             filter = ""*"";&#010;         }&#010;         for (Map&lt;String, String&gt; entry : context) {&#010;             String name = entry.get(""name"");&#010;-            if (name.equalsIgnoreCase(filter) || CatalogHelper.matchWildcard(name, filter)&#010;|| name.matches(filter)) {&#010;+            if (name.equalsIgnoreCase(filter) || matchWildcard(name, filter) || name.matches(filter))&#010;{&#010;                 answer.add(entry);&#010;             }&#010;         }&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/49e1c011/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/internal/MatchUtil.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/internal/MatchUtil.java&#010;b/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/internal/MatchUtil.java&#010;new file mode 100644&#010;index 0000000..874276e&#010;--- /dev/null&#010;+++ b/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/internal/MatchUtil.java&#010;@@ -0,0 +1,31 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.commands.internal;&#010;+&#010;+/**&#010;+ * Util class.&#010;+ */&#010;+public final class MatchUtil {&#010;+&#010;+    private MatchUtil() {&#010;+    }&#010;+&#010;+    public static boolean matchWildcard(String name, String pattern) {&#010;+        return pattern.endsWith(""*"") &amp;&amp; name.startsWith(pattern.substring(0, pattern.length()&#010;- 1));&#010;+    }&#010;+&#010;+}&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C0a03a23cc44e4ff9933d9f3be0bacc36%40git.apache.org%3E,2017-04-14 14:42:28,commits,352.0,camel git commit: Rename catalog to runtimecatalog to avoid clash with same package name in camel-catalog.
8,8,8.0,328.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 6b42a3534 -&gt; 6a02de123&#010;&#010;&#010;CAMEL-10843 Ported camel-ignite wiki doc into adoc&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/6a02de12&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/6a02de12&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/6a02de12&#010;&#010;Branch: refs/heads/master&#010;Commit: 6a02de123f22dc8367dee3a0a9a73ac1314c6505&#010;Parents: 6b42a35&#010;Author: Tomohisa Igarashi &lt;tm.igarashi@gmail.com&gt;&#010;Authored: Fri Apr 14 16:02:12 2017 +0900&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:55:49 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../src/main/docs/ignite-component.adoc         | 498 +++++++++++++++++++&#010; components/readme.adoc                          |   3 +&#010; docs/user-manual/en/SUMMARY.md                  |   1 +&#010; 3 files changed, 502 insertions(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/6a02de12/components/camel-ignite/src/main/docs/ignite-component.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-ignite/src/main/docs/ignite-component.adoc b/components/camel-ignite/src/main/docs/ignite-component.adoc&#010;new file mode 100644&#010;index 0000000..a721719&#010;--- /dev/null&#010;+++ b/components/camel-ignite/src/main/docs/ignite-component.adoc&#010;@@ -0,0 +1,498 @@&#010;+[[Ignite-Component]]&#010;+## Ignite Component&#010;+&#010;+*Available as of Camel version 2.17*&#010;+&#010;+https://ignite.apache.org/[Apache Ignite] In-Memory Data Fabric is a high-performance, integrated&#010;and distributed in-memory platform for computing and transacting on large-scale data sets&#010;in real-time, orders of magnitude faster than possible with traditional disk-based or flash&#010;technologies. It is designed to deliver uncompromised performance for a wide set of in-memory&#010;computing use cases from high performance computing, to the industry most advanced data grid,&#010;highly available service grid, and streaming. See all https://ignite.apache.org/features.html[features].&#010;+&#010;+image:https://ignite.apache.org/images/apache-ignite.png[]&#010;+&#010;+This component offers seven endpoints to cover much of Ignite's functionality:&#010;+&#010;+* &lt;&lt;Ignite-Cache,Ignite Cache&gt;&gt;.&#010;+* &lt;&lt;Ignite-Compute,Ignite Compute&gt;&gt;.&#010;+* &lt;&lt;Ignite-Messaging,Ignite Messaging&gt;&gt;.&#010;+* &lt;&lt;Ignite-Events,Ignite Events&gt;&gt;.&#010;+* &lt;&lt;Ignite-Sets,Ignite Sets&gt;&gt;.&#010;+* &lt;&lt;Ignite-Queues,Ignite Queues&gt;&gt;.&#010;+* &lt;&lt;Ignite-IDGenerator,Ignite ID Generator&gt;&gt;.&#010;+&#010;+To use this component, add the following dependency to your pom.xml:&#010;+&#010;+[source,xml]&#010;+----&#010;+&lt;dependency&gt;&#010;+    &lt;groupId&gt;org.apache.camel&lt;/groupId&gt;&#010;+    &lt;artifactId&gt;camel-ignite&lt;/artifactId&gt;&#010;+    &lt;version&gt;${camel.version}&lt;/version&gt; &lt;!-- use the same version as your&#010;Camel core version --&gt;&#010;+&lt;/dependency&gt;&#010;+----&#010;+&#010;+[IMPORTANT,title=Running in OSGi]&#010;+====&#010;+If running in an OSGi container, please don't miss the &lt;&lt;Ignite-OsgiSupport,OSGi Support&gt;&gt;&#010;section below.&#010;+====&#010;+&#010;+// component options: START&#010;+// component options: END&#010;+&#010;+// endpoint options: START&#010;+// endpoint options: END&#010;+&#010;+&#010;+[[Ignite-Cache]]&#010;+CACHE: Ignite Cache Endpoint&#010;+^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;+This endpoint allows you to interact with an https://apacheignite.readme.io/docs/data-grid[Ignite&#010;Cache]:&#010;+&#010;+[source,text]&#010;+----&#010;+ignite:cache:cacheName?option1=value1&amp;option2=value2...&#010;+----&#010;+&#010;+Offers both a Producer (to invoke cache operations on an Ignite cache) and a Consumer (to&#010;consume changes from a continuous query).&#010;+&#010;+The cache value is always the body of the message, whereas the cache key is always stored&#010;in the `IgniteConstants.IGNITE_CACHE_KEY` message header.&#010;+&#010;+Even if you configure a fixed operation in the endpoint URI, you can vary it per-exchange&#010;by setting the `IgniteConstants.IGNITE_CACHE_OPERATION` message header.&#010;+&#010;+Options&#010;+++++++&#010;+[width=""100%"",cols=""1,1,1,4,1,1"",options=""header""]&#010;+|=======================================================================&#010;+| Option | Type | Default value | Description | Compulsory | Consumer/producer&#010;+| operation | IgniteCacheOperation enum | --- |&#010;+Cache operation to perform.&#010;+Possible values: GET, PUT, REMOVE, SIZE, REBALANCE, QUERY, CLEAR. |&#010;+N | Producer&#010;+&#010;+| failIfInexistentCache | boolean | false |&#010;+Whether to fail the initialization if the cache doesn't exist.  |&#010;+N | Producer&#010;+&#010;+| cachePeekMode | CachePeekMode (Ignite) enum | ALL |&#010;+The cache peek mode used for SIZE operations. |&#010;+N | Producer&#010;+&#010;+| query | Query | --- |&#010;+The query used for QUERY operations (as a producer) or to launch the continuous query (as&#010;a consumer). You can use a reference to a registry bean with a syntax like: ?query=#myQuery.&#010;|&#010;+Y for the consumer / N for the producer | Producer (for QUERY operation) and Consumer&#010;+&#010;+|remoteFilter | CacheEntryEventSerializableFilter | --- |&#010;+An optional remote filter for the continuous query consumer. You can use a reference to a&#010;registry bean with a syntax like: ?remoteFilter=#myRemoteFilter. |&#010;+N | Consumer&#010;+&#010;+| oneExchangePerUpdate | boolean | true |&#010;+Whether to send one exchange per cache update, even if multiple changes arrive in a group.&#010;|&#010;+N | Consumer&#010;+&#010;+| fireExistingQueryResults | boolean | false |&#010;+When starting the continuous query consumer, whether to fire existing cache results. |&#010;+N  | Consumer&#010;+&#010;+| autoUnsubscribe | boolean | ContinuousQuery.DFLT_AUTO_UNSUBSCRIBE |&#010;+Auto-unsubscribe flag on the Continuous Query (see Ignite docs). |&#010;+N | Consumer&#010;+&#010;+| pageSize | int | ContinuousQuery.DFLT_PAGE_SIZE |&#010;+Page size on the Continuous Query (see Ignite docs). |&#010;+N | Consumer&#010;+&#010;+| timeInterval | long | ContinuousQuery.DFLT_TIME_INTERVAL |&#010;+Time interval in millis on the Continuous Query (see Ignite docs). | N | Consumer&#010;+|=======================================================================&#010;+&#010;+Headers used&#010;++++++++++++&#010;+This endpoint uses the following headers:&#010;+[width=""100%"",cols=""1,1,1,4"",options=""header""]&#010;+|=======================================================================&#010;+| Header name | Constant | Expected type | Description&#010;+| CamelIgniteCacheKey | IgniteConstants.IGNITE_CACHE_KEY | String |&#010;+The cache key for the entry value in the message body.&#010;+&#010;+| CamelIgniteCacheQuery | IgniteConstants.IGNITE_CACHE_QUERY | Query |&#010;+The query to run (producer) when invoking the QUERY operation.&#010;+&#010;+| CamelIgniteCacheOperation | IgniteConstants.IGNITE_CACHE_OPERATION | IgniteCacheOperation&#010;enum |&#010;+Allows you to dynamically change the cache operation to execute (producer).&#010;+&#010;+| CamelIgniteCachePeekMode | IgniteConstants.IGNITE_CACHE_PEEK_MODE | CachePeekMode enum&#010;|&#010;+Allows you to dynamically change the cache peek mode when running the SIZE operation.&#010;+&#010;+| CamelIgniteCacheEventType | IgniteConstants.IGNITE_CACHE_EVENT_TYPE | int (EventType constants)&#010;|&#010;+This header carries the received event type when using the continuous query consumer.&#010;+&#010;+| CamelIgniteCacheName | IgniteConstants.IGNITE_CACHE_NAME | String |&#010;+This header carries the cache name for which a continuous query event was received (consumer).&#010;+It does not allow you to dynamically change the cache against which a producer operation&#010;is performed. Use EIPs for that (e.g. recipient list, dynamic router).&#010;+&#010;+| CamelIgniteCacheOldValue | IgniteConstants.IGNITE_CACHE_OLD_VALUE | Object |&#010;+This header carries the old cache value when passed in the incoming cache event (consumer).&#010;+|=======================================================================&#010;+&#010;+&#010;+[[Ignite-Compute]]&#010;+COMPUTE: Ignite Compute Endpoint&#010;+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;+This endpoint allows you to run https://apacheignite.readme.io/docs/compute-grid[compute&#010;operations] on the cluster by passing in an IgniteCallable, an IgniteRunnable, an IgniteClosure,&#010;or collections of them, along with their parameters if necessary. &#010;+&#010;+[source,text]&#010;+----&#010;+ignite:compute:endpointId?executionType=...&amp;option1=value1&amp;option2=value2...&#010;+----&#010;+&#010;+This endpoint only supports producers.&#010;+&#010;+The host part of the endpoint URI is a symbolic endpoint ID, it is not used for any purposes.&#010;+&#010;+The endpoint tries to run the object passed in the body of the IN message as the compute&#010;job. It expects different payload types depending on the execution type.&#010;+&#010;+Expected payload types&#010;++++++++++++++++++++++&#010;+Each operation expects the indicated types:&#010;+[width=""100%"",cols=""1,4"",options=""header""]&#010;+|=======================================================================&#010;+| Operation | Expected payloads&#010;+| CALL | Collection of IgniteCallable, or a single IgniteCallable.&#010;+| BROADCAST | IgniteCallable, IgniteRunnable, IgniteClosure.&#010;+| APPLY | IgniteClosure.&#010;+| EXECUTE | ComputeTask, Class&lt;? extends ComputeTask&gt; or an object representing parameters&#010;if the taskName option is not null.&#010;+| RUN | A Collection of IgniteRunnables, or a single IgniteRunnable.&#010;+| AFFINITY_CALL | IgniteCallable.&#010;+| AFFINITY_RUN | IgniteRunnable.&#010;+|=======================================================================&#010;+&#010;+Options&#010;+++++++&#010;+[width=""100%"",cols=""1,1,1,4,1,1"",options=""header""]&#010;+|=======================================================================&#010;+| Option | Type | Default value | Description | Compulsory | Consumer/producer&#010;+| executionType | IgniteComputeExecutionType enum | --- |&#010;+The compute operation to perform. Possible values: CALL, BROADCAST, APPLY, EXECUTE, RUN,&#010;AFFINITY_CALL, AFFINITY_RUN.&#010;+The component expects different payload types depending on the operation. See above. |&#010;+Y | Producer&#010;+&#010;+| clusterGroupExpression | ClusterGroupExpression | --- |&#010;+An expression that returns the Cluster Group for the IgniteCompute instance. |&#010;+N | Producer&#010;+&#010;+| taskName | String | --- | The task name, only used when performing the EXECUTE if a ComputeTask&#010;is not passed in the payload. |&#010;+N | Producer&#010;+&#010;+| computeName | String | --- | The name for the IgniteCompute instances produced by this&#010;endpoint. |&#010;+N | Producer&#010;+&#010;+| timeoutMillis | Long | --- | The timeout for the compute job. | N | Producer&#010;+|=======================================================================&#010;+&#010;+Headers used&#010;++++++++++++&#010;+This endpoint uses the following headers:&#010;+[width=""100%"",cols=""1,1,1,4"",options=""header""]&#010;+|=======================================================================&#010;+| Header name | Constant | Expected type | Description&#010;+| CamelIgniteComputeExecutionType | IgniteConstants.IGNITE_COMPUTE_EXECUTION_TYPE | IgniteComputeExecutionType&#010;enum |&#010;+ Allows you to dynamically change the compute operation to perform.&#010;+&#010;+| CamelIgniteComputeParameters | IgniteConstants.IGNITE_COMPUTE_PARAMS | Any object or Collection&#010;of objects. |&#010;+Parameters for APPLY, BROADCAST and EXECUTE operations.&#010;+&#010;+| CamelIgniteComputeReducer | IgniteConstants.IGNITE_COMPUTE_REDUCER | IgniteReducer |&#010;+Reducer for the APPLY and CALL operations.&#010;+&#010;+| CamelIgniteComputeAffinityCacheName | IgniteConstants.IGNITE_COMPUTE_AFFINITY_CACHE_NAME&#010;| String |&#010;+Affinity cache name for the AFFINITY_CALL and AFFINITY_RUN operations.&#010;+&#010;+| CamelIgniteComputeAffinityKey | IgniteConstants.IGNITE_COMPUTE_AFFINITY_KEY | Object |&#010;+Affinity key for the AFFINITY_CALL and AFFINITY_RUN operations.&#010;+|=======================================================================&#010;+&#010;+&#010;+[[Ignite-Messaging]]&#010;+MESSAGING: Ignite Messaging Endpoint&#010;+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;+The Ignite Messaging endpoint allows you to send and consume messages from an https://apacheignite.readme.io/docs/messaging[Ignite&#010;topic].&#010;+&#010;+[source,text]&#010;+----&#010;+ignite:messaging:topicName?option1=value1&amp;option2=value2...&#010;+----&#010;+&#010;+This endpoint supports producers (to send messages) and consumers (to receive messages).&#010;+&#010;+Options&#010;+++++++&#010;+[width=""100%"",cols=""1,1,1,4,1,1"",options=""header""]&#010;+|=======================================================================&#010;+| Option | Type | Default value | Description | Compulsory | Consumer/producer&#010;+| clusterGroupExpression | ClusterGroupExpression | --- |&#010;+An expression that returns the Cluster Group for the IgniteMessaging instance. |&#010;+N |Consumer and Producer&#010;+&#010;+| sendMode | IgniteMessagingSendMode enum | UNORDERED |&#010;+The send mode to use.&#010;+Possible values: UNORDERED, ORDERED. |&#010;+N | Producer&#010;+&#010;+| timeout | Long | --- | The timeout for the send operation when using ordered messages.&#010;|&#010;+N | Producer&#010;+|=======================================================================&#010;+&#010;+Headers used&#010;++++++++++++&#010;+This endpoint uses the following headers:&#010;+[width=""100%"",cols=""1,1,1,4"",options=""header""]&#010;+|=======================================================================&#010;+| Header name | Constant | Expected type | Description&#010;+| CamelIgniteMessagingTopic | IgniteConstants.IGNITE_MESSAGING_TOPIC | String |&#010;+Allows you to dynamically change the topic to send messages to (producer). &#010;+It also carries the topic on which a message was received (consumer).&#010;+&#010;+| CamelIgniteMessagingUUID | IgniteConstants.IGNITE_MESSAGING_UUID | UUID |&#010;+This header is filled in with the UUID of the subscription when a message arrives (consumer).&#010;+|=======================================================================&#010;+&#010;+&#010;+[[Ignite-Events]]&#010;+EVENTS: Ignite Events Endpoint&#010;+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;+The Ignite Events endpoint allows you to https://apacheignite.readme.io/docs/events[receive&#010;events] from the Ignite cluster by creating a local event listener.&#010;+&#010;+[source,text]&#010;+----&#010;+ignite:events:endpointId?option1=value1&amp;option2=value2...&#010;+----&#010;+&#010;+This endpoint only supports consumers.&#010;+The Exchanges created by this consumer put the received Event object into the body of the&#010;IN message.&#010;+&#010;+Options&#010;+++++++&#010;+[width=""100%"",cols=""1,1,1,4,1,1"",options=""header""]&#010;+|=======================================================================&#010;+| Option | Type | Default value | Description | Compulsory | Consumer/producer&#010;+| events | Set&lt;Integer&gt; or String | EventType.EVTS_ALL |&#010;+The event IDs to subscribe to. You can set a Set&lt;Integer&gt; directly where the IDs are&#010;the different constants in org.apache.ignite.events.EventType, or you can specify a comma-separated&#010;list of constant names.&#010;+For example: EVT_CACHE_ENTRY_CREATED,EVT_CACHE_OBJECT_REMOVED,EVT_IGFS_DIR_CREATED. |&#010;+N | Consumer&#010;+| clusterGroupExpression | ClusterGroupExpression | --- |&#010;+An expression that returns the Cluster Group to be used by the IgniteEvents instance. |&#010;+N | Consumer&#010;+|=======================================================================&#010;+&#010;+&#010;+&#010;+[[Ignite-Sets]]&#010;+SETS: Ignite Sets Endpoint&#010;+^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;+The Ignite Sets endpoint allows you to interact with https://apacheignite.readme.io/docs/queue-and-set[Ignite&#010;Set data structures].&#010;+&#010;+[source,text]&#010;+----&#010;+ignite:sets:setName?option1=value1&amp;option2=value2...&#010;+----&#010;+&#010;+This endpoint only supports producers.&#010;+&#010;+Options&#010;+++++++&#010;+[width=""100%"",cols=""1,1,1,4,1,1"",options=""header""]&#010;+|=======================================================================&#010;+| Option | Type | Default value | Description | Compulsory | Consumer/producer&#010;+| operation | IgniteSetOperation enum | --- |&#010;+The operation to invoke on the Ignite Set.&#010;+Superseded by the IgniteConstants.IGNITE_SETS_OPERATION header in the IN message.&#010;+Possible values: CONTAINS, ADD, SIZE, REMOVE, ITERATOR, CLEAR, RETAIN_ALL, ARRAY. |&#010;+N | Producer&#010;+&#010;+| configuration | CollectionConfiguration | empty CollectionConfiguration |&#010;+The configuration for this data structure. You can also specify inner properties by using&#010;the config. prefix.&#010;+For example: ?config.backups=4 |&#010;+N | Producer&#010;+|=======================================================================&#010;+&#010;+Headers used&#010;++++++++++++&#010;+This endpoint uses the following headers:&#010;+[width=""100%"",cols=""1,1,1,4"",options=""header""]&#010;+|=======================================================================&#010;+| Header name | Constant | Expected type | Description&#010;+| CamelIgniteSetsOperation | IgniteConstants.IGNITE_SETS_OPERATION | IgniteSetOperation enum&#010;|&#010;+Allows you to dynamically change the set operation.&#010;+|=======================================================================&#010;+&#010;+&#010;+[[Ignite-Queues]]&#010;+QUEUES: Ignite Queue Endpoint&#010;+^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;+The Ignite Queue endpoint allows you to interact with https://apacheignite.readme.io/docs/queue-and-set[Ignite&#010;Queue data structures].&#010;+&#010;+[source,text]&#010;+----&#010;+ignite:queue:queueName?option1=value1&amp;option2=value2...&#010;+----&#010;+&#010;+This endpoint only supports producers.&#010;+&#010;+Options&#010;+++++++&#010;+[width=""100%"",cols=""1,1,1,4,1,1"",options=""header""]&#010;+|=======================================================================&#010;+| Option | Type | Default value | Description | Compulsory | Consumer/producer&#010;+| operation | IgniteQueueOperation enum | --- |&#010;+The operation to invoke on the Ignite Queue.&#010;+Superseded by the IgniteConstants.IGNITE_QUEUE_OPERATION header in the IN message.&#010;+Possible values: CONTAINS, ADD, SIZE, REMOVE, ITERATOR, CLEAR, RETAIN_ALL, ARRAY, DRAIN,&#010;ELEMENT, PEEK, OFFER, POLL, TAKE, PUT. |&#010;+N | Producer&#010;+&#010;+| configuration | CollectionConfiguration | empty CollectionConfiguration |&#010;+The configuration for this data structure. You can also specify inner properties by using&#010;the config. prefix.&#010;+For example: ?config.backups=4 |&#010;+N | Producer&#010;+&#010;+| timeoutMillis | Long | | --- |&#010;+The timeout in milliseconds to use when invoking the OFFER or POLL operations. |&#010;+N | Producer&#010;+&#010;+| capacity | int | --- (unbounded) |&#010;+The queue capacity if you'd like to use a bounded queue. |&#010;+N | Producer&#010;+|=======================================================================&#010;+&#010;+Headers used&#010;++++++++++++&#010;+This endpoint uses the following headers:&#010;+[width=""100%"",cols=""1,1,1,4"",options=""header""]&#010;+|=======================================================================&#010;+| Header name | Constant | Expected type | Description&#010;+| CamelIgniteQueueOperation | IgniteConstants.IGNITE_QUEUE_OPERATION | IgniteQueueOperation&#010;enum |&#010;+Allows you to dynamically change the queue operation.&#010;+&#010;+| CamelIgniteQueueMaxElements | IgniteConstants.IGNITE_QUEUE_MAX_ELEMENTS | Integer or int&#010;|&#010;+When invoking the DRAIN operation, the amount of items to drain.&#010;+&#010;+| CamelIgniteQueueTransferredCount | IgniteConstants.IGNITE_QUEUE_TRANSFERRED_COUNT | Integer&#010;or int |&#010;+The amount of items transferred as the result of the DRAIN operation.&#010;+&#010;+| CamelIgniteQueueTimeoutMillis | IgniteConstants.IGNITE_QUEUE_TIMEOUT_MILLIS | Long or long&#010;|&#010;+Dynamically sets the timeout in milliseconds to use when invoking the OFFER or POLL operations.&#010;&#010;+|=======================================================================&#010;+&#010;+&#010;+[[Ignite-IDGenerator]]&#010;+IDGEN: Ignite ID Generator Endpoint&#010;+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;+The Ignite ID Generator endpoint allows you to interact with https://apacheignite.readme.io/docs/id-generator[Ignite&#010;Atomic Sequences and ID Generators].&#010;+&#010;+[source,text]&#010;+----&#010;+ignite:idgen:sequenceName?option1=value1&amp;option2=value2...&#010;+----&#010;+&#010;+This endpoint only supports producers.&#010;+&#010;+Options&#010;+++++++&#010;+[width=""100%"",cols=""1,1,1,4,1,1"",options=""header""]&#010;+|=======================================================================&#010;+| Option | Type | Default value | Description | Compulsory | Consumer/producer&#010;+| operation | IgniteIdGenOperation enum | --- |&#010;+The operation to invoke on the Ignite ID Generator.&#010;+Superseded by the IgniteConstants.IGNITE_IDGEN_OPERATION header in the IN message.&#010;+Possible values: ADD_AND_GET, GET, GET_AND_ADD, GET_AND_INCREMENT, INCREMENT_AND_GET. |&#010;+N | Producer&#010;+&#010;+| configuration | CollectionConfiguration | empty CollectionConfiguration |&#010;+The configuration for this data structure. You can also specify inner properties by using&#010;the config. prefix.&#010;+For example: ?config.backups=4 |&#010;+N | Producer&#010;+|=======================================================================&#010;+&#010;+&#010;+&#010;+[[Ignite-InitializeComponent]]&#010;+Initializing the Ignite component&#010;+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;+Each instance of the Ignite component is associated with an underlying org.apache.ignite.Ignite&#010;instance. You can interact with two Ignite clusters by initializing two instances of the Ignite&#010;component and binding them to different IgniteConfigurations. There are 3 ways to initialize&#010;the Ignite component:&#010;+&#010;+* By passing in an existing org.apache.ignite.Ignite instance. Here's an example using Spring&#010;config:&#010;+&#010;+[source,xml]&#010;+------------------------------------------------------------&#010;+&lt;bean name=""ignite"" class=""org.apache.camel.component.ignite.IgniteComponent""&gt;&#010;+   &lt;property name=""ignite"" ref=""ignite"" /&gt;&#010;+&lt;/bean&gt;&#010;+------------------------------------------------------------&#010;+&#010;+* By passing in an IgniteConfiguration, either constructed programmatically or through inversion&#010;of control (e.g. Spring, Blueprint, etc.). Here's an example using Spring config:&#010;+&#010;+[source,xml]&#010;+-------------------------------------------------------------------&#010;+&lt;bean name=""ignite"" class=""org.apache.camel.component.ignite.IgniteComponent""&gt;&#010;+   &lt;property name=""igniteConfiguration""&gt;&#010;+      &lt;bean class=""org.apache.ignite.configuration.IgniteConfiguration""&gt;&#010;+         [...]&#010;+      &lt;/bean&gt;&#010;+   &lt;/property&gt;&#010;+&lt;/bean&gt;&#010;+-------------------------------------------------------------------&#010;+&#010;+* By passing in a URL, InputStream or String URL to a Spring-based configuration file. In&#010;all three cases, you inject them in the same property called configurationResource. Here's&#010;an example using Spring config:&#010;+&#010;+[source,xml]&#010;+-------------------------------------------------------------------&#010;+&lt;bean name=""ignite"" class=""org.apache.camel.component.ignite.IgniteComponent""&gt;&#010;+   &lt;property name=""configurationResource"" value=""file:[...]/ignite-config.xml"" /&gt;&#010;+&lt;/bean&gt;&#010;+-------------------------------------------------------------------&#010;+&#010;+Additionally, if using Camel programmatically, there are several convenience static methods&#010;in IgniteComponent that return a component out of any of these configuration options:&#010;+&#010;+* IgniteComponent#fromIgnite(Ignite)&#010;+* IgniteComponent#fromConfiguration(IgniteConfiguration)&#010;+* IgniteComponent#fromInputStream(InputStream)&#010;+* IgniteComponent#fromUrl(URL)&#010;+* IgniteComponent#fromLocation(String)&#010;+&#010;+You may use those methods to quickly create an IgniteComponent with your chosen configuration&#010;technique.&#010;+&#010;+General options&#010;+^^^^^^^^^^^^^^&#010;+&#010;+All endpoints share the following options:&#010;+[width=""100%"",cols=""1,1,1,4,1,1"",options=""header""]&#010;+|=======================================================================&#010;+| Option | Type | Default value | Description&#010;+| propagateIncomingBodyIfNoReturnValue | boolean | true |&#010;+If the underlying Ignite operation returns void (no return type), this flag determines whether&#010;the producer will copy the IN body into the OUT body.&#010;+&#010;+| treatCollectionsAsCacheObjects | boolean | false |&#010;+Some Ignite operations can deal with multiple elements at once, if passed a Collection. Enabling&#010;this option will treat Collections as a single object, invoking the operation variant for&#010;cardinality 1.&#010;+|=======================================================================&#010;+&#010;+OSGi Support&#010;+^^^^^^^^^^^&#010;+&#010;+[TIP]&#010;+====&#010;+Apache Ignite supports OSGi from version 1.5.0.final onwards.&#010;+====&#010;+&#010;+&#010;+[NOTE,title=when installing on Apache Karaf]&#010;+====&#010;+1. Installing the camel-ignite feature will require the Ignite feature repository to be present.&#010;+1. You must have exported from the JRE (system bundle) some low-level, non-standard packages&#010;that Ignite requires.&#010;+====&#010;+Please refer to the OSGi section in the Ignite documentation for more information.&#010;+&#010;+&#010;+&#010;+See Also&#010;+^^^^^^^&#010;+&#010;+* http://camel.apache.org/configuring-camel.html[Configuring Camel]&#010;+* http://camel.apache.org/component.html[Component]&#010;+* http://camel.apache.org/endpoint.html[Endpoint]&#010;+* http://camel.apache.org/getting-started.html[Getting Started]&#010;\ No newline at end of file&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/6a02de12/components/readme.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/components/readme.adoc b/components/readme.adoc&#010;index 2909fcb..f5734d4 100644&#010;--- a/components/readme.adoc&#010;+++ b/components/readme.adoc&#010;@@ -293,6 +293,9 @@ Number of Components: 231 in 184 JAR artifacts (14 deprecated)&#010; | link:camel-ibatis/src/main/docs/ibatis-component.adoc[iBatis] (camel-ibatis) +&#010; `ibatis:statement` | 1.2 | *deprecated* Performs a query poll insert update or delete in&#010;a relational database using Apache iBATIS.&#010; &#010;+| link:camel-ignite/src/main/docs/ignite-component.adoc[Ignite] (camel-ignite) +&#010;+`ignite:endpointName` | 1.17 | The Ignite Component integrates Apache Camel with Apache Ignite&#010;+&#010; | link:camel-infinispan/src/main/docs/infinispan-component.adoc[Infinispan] (camel-infinispan)&#010;+&#010; `infinispan:cacheName` | 2.13 | For reading/writing from/to Infinispan distributed key/value&#010;store and data grid.&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/6a02de12/docs/user-manual/en/SUMMARY.md&#010;----------------------------------------------------------------------&#010;diff --git a/docs/user-manual/en/SUMMARY.md b/docs/user-manual/en/SUMMARY.md&#010;index 96955c4..a1bbc02 100644&#010;--- a/docs/user-manual/en/SUMMARY.md&#010;+++ b/docs/user-manual/en/SUMMARY.md&#010;@@ -209,6 +209,7 @@&#010; &#009;* [HTTP](http-component.adoc)&#010; &#009;* [HTTP4](http4-component.adoc)&#010; &#009;* [iBatis](ibatis-component.adoc)&#010;+&#009;* [Ignite](ignite-component.adoc)&#010; &#009;* [IMAP](imap-component.adoc)&#010; &#009;* [Infinispan](infinispan-component.adoc)&#010; &#009;* [InfluxDB](influxdb-component.adoc)&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C3ecfaacf3d8e4820a231f68340f2ef0d%40git.apache.org%3E,2017-04-14 10:55:56,commits,328.0,camel git commit: CAMEL-10843 Ported camel-ignite wiki doc into adoc
9,9,29.0,191.0,igarashitm,"Github user igarashitm closed the pull request at:&#010;&#010;    https://github.com/apache/camel/pull/1631&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170414112311.A7379DFF36%40git1-us-west.apache.org%3E,2017-04-14 11:23:11,mail,191.0,  [GitHub] camel pull request #1631: CAMEL-10843 Ported camel-ignite wiki doc into adoc
12,12,9.0,329.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 6a02de123 -&gt; ddd2347d9&#010;&#010;&#010;CAMEL-10968: make camel-example-cxf-blueprint tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/ddd2347d&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/ddd2347d&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/ddd2347d&#010;&#010;Branch: refs/heads/master&#010;Commit: ddd2347d92c723557cbfc2143bfd648db48ed484&#010;Parents: 1ca0ec4&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 11:56:58 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-cxf-blueprint/pom.xml | 20 +++++++++++++++++++-&#010; 1 file changed, 19 insertions(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/ddd2347d/examples/camel-example-cxf-blueprint/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-cxf-blueprint/pom.xml b/examples/camel-example-cxf-blueprint/pom.xml&#010;index 6000401..acf9a11 100644&#010;--- a/examples/camel-example-cxf-blueprint/pom.xml&#010;+++ b/examples/camel-example-cxf-blueprint/pom.xml&#010;@@ -97,5 +97,23 @@&#010;       &lt;/plugin&gt;&#010;     &lt;/plugins&gt;&#010;   &lt;/build&gt;&#010;-&#010;+  &#010;+  &lt;profiles&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;jdk9-build&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;argLine&gt;--add-modules java.activation,java.xml.bind,java.xml.ws,jdk.xml.bind&#010;--add-opens java.base/java.lang=ALL-UNNAMED --add-exports=java.naming/com.sun.jndi.ldap=ALL-UNNAMED&#010;--add-exports=java.xml.bind/com.sun.xml.internal.bind=ALL-UNNAMED --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2=ALL-UNNAMED&#010;--add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime.reflect=ALL-UNNAMED --add-exports=java.xml.ws/com.sun.xml.internal.messaging.saaj.soap.impl=ALL-UNNAMED&#010;--add-exports=java.xml.ws/com.sun.xml.internal.messaging.saaj.soap=ALL-UNNAMED --add-opens&#010;java.base/java.net=ALL-UNNAMED --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime=ALL-UNNAMED&lt;/argLine&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;+  &lt;/profiles&gt;&#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cb50b5147c8eb4ac9b023dca40545901b%40git.apache.org%3E,2017-04-14 10:57:46,commits,329.0,[01/20] camel git commit: CAMEL-10968: make camel-example-cxf-blueprint tests pass on Java 9
13,13,10.0,330.0,davscl...@apache.org,"CAMEL-10968: make camel-example-cxf-tomcat tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/8a23104b&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/8a23104b&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/8a23104b&#010;&#010;Branch: refs/heads/master&#010;Commit: 8a23104b554fcc9113a1913f49a4082c67d28acc&#010;Parents: 44d333f&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 11:54:47 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-cxf-tomcat/pom.xml | 16 ++++++++++++++++&#010; 1 file changed, 16 insertions(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/8a23104b/examples/camel-example-cxf-tomcat/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-cxf-tomcat/pom.xml b/examples/camel-example-cxf-tomcat/pom.xml&#010;index 8f1c898..6336aa9 100755&#010;--- a/examples/camel-example-cxf-tomcat/pom.xml&#010;+++ b/examples/camel-example-cxf-tomcat/pom.xml&#010;@@ -137,6 +137,22 @@&#010;         &lt;tomcat.url&gt;http://localhost:8080/manager&lt;/tomcat.url&gt;&#010;       &lt;/properties&gt;&#010;     &lt;/profile&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;jdk9-build&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;argLine&gt;--add-modules java.activation,java.xml.bind,java.xml.ws,jdk.xml.bind&#010;--add-opens java.base/java.lang=ALL-UNNAMED --add-exports=java.naming/com.sun.jndi.ldap=ALL-UNNAMED&#010;--add-exports=java.xml.bind/com.sun.xml.internal.bind=ALL-UNNAMED --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2=ALL-UNNAMED&#010;--add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime.reflect=ALL-UNNAMED --add-exports=java.xml.ws/com.sun.xml.internal.messaging.saaj.soap.impl=ALL-UNNAMED&#010;--add-exports=java.xml.ws/com.sun.xml.internal.messaging.saaj.soap=ALL-UNNAMED --add-opens&#010;java.base/java.net=ALL-UNNAMED --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime=ALL-UNNAMED&lt;/argLine&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;   &lt;/profiles&gt;&#010; &#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Ce9859842f13443f6b7ce077840356411%40git.apache.org%3E,2017-04-14 10:57:47,commits,330.0,  [02/20] camel git commit: CAMEL-10968: make camel-example-cxf-tomcat tests pass on Java 9
14,14,11.0,331.0,davscl...@apache.org,"CAMEL-10968: make camel-cxf-transport tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/a01f14cd&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/a01f14cd&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/a01f14cd&#010;&#010;Branch: refs/heads/master&#010;Commit: a01f14cdda7b576e42be4357625fec374555f6ae&#010;Parents: 7b2d32e&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 11:06:00 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; components/camel-cxf-transport/pom.xml | 20 ++++++++++++++++++++&#010; 1 file changed, 20 insertions(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/a01f14cd/components/camel-cxf-transport/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-cxf-transport/pom.xml b/components/camel-cxf-transport/pom.xml&#010;index 93d650b..bc76a6a 100644&#010;--- a/components/camel-cxf-transport/pom.xml&#010;+++ b/components/camel-cxf-transport/pom.xml&#010;@@ -215,5 +215,25 @@&#010;       &lt;/plugin&gt;&#010;     &lt;/plugins&gt;&#010;   &lt;/build&gt;&#010;+  &#010;+  &lt;profiles&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;jdk9-build&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;reuseForks&gt;true&lt;/reuseForks&gt;&#010;+              &lt;argLine&gt;--add-modules java.xml.ws --add-opens java.base/java.lang=ALL-UNNAMED&lt;/argLine&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;+  &lt;/profiles&gt;&#010; &#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C8944f48bb72241b994053539c7e0edf4%40git.apache.org%3E,2017-04-14 10:57:48,commits,331.0,  [03/20] camel git commit: CAMEL-10968: make camel-cxf-transport tests pass on Java 9
15,15,12.0,332.0,davscl...@apache.org,"CAMEL-10141: make camel-example-loan-broker-jms tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/e6964f1e&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/e6964f1e&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/e6964f1e&#010;&#010;Branch: refs/heads/master&#010;Commit: e6964f1e74bc2a2f9d76450447332ce03570cf53&#010;Parents: 3f9ebd5&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 10:48:15 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-loan-broker-jms/pom.xml | 16 ++++++++++++++++&#010; 1 file changed, 16 insertions(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/e6964f1e/examples/camel-example-loan-broker-jms/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-loan-broker-jms/pom.xml b/examples/camel-example-loan-broker-jms/pom.xml&#010;index 186036b..0668ecf 100644&#010;--- a/examples/camel-example-loan-broker-jms/pom.xml&#010;+++ b/examples/camel-example-loan-broker-jms/pom.xml&#010;@@ -177,6 +177,22 @@&#010;         &lt;target.main.class&gt;org.apache.camel.loanbroker.Client&lt;/target.main.class&gt;&#010;       &lt;/properties&gt;&#010;     &lt;/profile&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;jdk9-build&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;argLine&gt;--add-modules java.xml.bind,java.xml.ws --add-opens java.base/java.lang=ALL-UNNAMED&#010;--add-opens java.xml.bind/com.sun.xml.internal.bind.v2.runtime=ALL-UNNAMED&lt;/argLine&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;   &lt;/profiles&gt;&#010; &#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C9940ce4909db4f58bedb1ca432783218%40git.apache.org%3E,2017-04-14 10:57:49,commits,332.0,  [04/20] camel git commit: CAMEL-10141: make camel-example-loan-broker-jms tests pass on Java 9
16,16,13.0,333.0,davscl...@apache.org,"CAMEL-10141: make camel-example-cdi-example tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/1e31f1e4&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/1e31f1e4&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/1e31f1e4&#010;&#010;Branch: refs/heads/master&#010;Commit: 1e31f1e4265f4271d82f54f86cb0ba85f426f54d&#010;Parents: 6a02de1&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Thu Apr 13 18:35:07 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-cdi-xml/pom.xml | 18 ++++++++++++++++++&#010; 1 file changed, 18 insertions(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/1e31f1e4/examples/camel-example-cdi-xml/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-cdi-xml/pom.xml b/examples/camel-example-cdi-xml/pom.xml&#010;index e365cc2..9758b4a 100755&#010;--- a/examples/camel-example-cdi-xml/pom.xml&#010;+++ b/examples/camel-example-cdi-xml/pom.xml&#010;@@ -114,4 +114,22 @@&#010;     &lt;/plugins&gt;&#010;   &lt;/build&gt;&#010; &#010;+  &lt;profiles&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;jdk9-build&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;argLine&gt;--add-modules java.xml.bind --add-opens java.base/java.lang=ALL-UNNAMED&lt;/argLine&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;+  &lt;/profiles&gt;&#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Ce4eb9713620046ea85a7803fdcaefd90%40git.apache.org%3E,2017-04-14 10:57:50,commits,333.0,  [05/20] camel git commit: CAMEL-10141: make camel-example-cdi-example tests pass on Java 9
17,17,14.0,334.0,davscl...@apache.org,"CAMEL-10141: make camel-example-cdi-test tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/d590e921&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/d590e921&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/d590e921&#010;&#010;Branch: refs/heads/master&#010;Commit: d590e92118a20b07c8a7d136d754a26e5055af86&#010;Parents: 1e31f1e&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 10:45:56 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-cdi-test/pom.xml | 19 ++++++++++++++++++-&#010; 1 file changed, 18 insertions(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d590e921/examples/camel-example-cdi-test/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-cdi-test/pom.xml b/examples/camel-example-cdi-test/pom.xml&#010;index d1b5765..697847c 100644&#010;--- a/examples/camel-example-cdi-test/pom.xml&#010;+++ b/examples/camel-example-cdi-test/pom.xml&#010;@@ -106,7 +106,24 @@&#010;         &lt;/dependencies&gt;&#010;       &lt;/plugin&gt;&#010;     &lt;/plugins&gt;&#010;-&#010;   &lt;/build&gt;&#010; &#010;+  &lt;profiles&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;jdk9-build&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;argLine&gt;--add-modules java.xml.bind --add-opens java.base/java.lang=ALL-UNNAMED&lt;/argLine&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;+  &lt;/profiles&gt;&#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C17603fa71f9f4446851fd50f33bc248a%40git.apache.org%3E,2017-04-14 10:57:51,commits,334.0,  [06/20] camel git commit: CAMEL-10141: make camel-example-cdi-test tests pass on Java 9
18,18,15.0,335.0,davscl...@apache.org,"CAMEL-10141: make camel-example-cdi-metrics tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/73b61ef3&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/73b61ef3&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/73b61ef3&#010;&#010;Branch: refs/heads/master&#010;Commit: 73b61ef32533aac448fe5c31d2f28f0373ad5d90&#010;Parents: d590e92&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 10:46:37 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-cdi-metrics/pom.xml | 18 ++++++++++++++++++&#010; 1 file changed, 18 insertions(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/73b61ef3/examples/camel-example-cdi-metrics/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-cdi-metrics/pom.xml b/examples/camel-example-cdi-metrics/pom.xml&#010;index 08401f7..5f09f7c 100755&#010;--- a/examples/camel-example-cdi-metrics/pom.xml&#010;+++ b/examples/camel-example-cdi-metrics/pom.xml&#010;@@ -127,4 +127,22 @@&#010;     &lt;/plugins&gt;&#010;   &lt;/build&gt;&#010; &#010;+  &lt;profiles&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;jdk9-build&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;argLine&gt;--add-modules java.xml.bind --add-opens java.base/java.lang=ALL-UNNAMED&lt;/argLine&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;+  &lt;/profiles&gt;&#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C17d5bb4af9784983a8ac362b3e589ea3%40git.apache.org%3E,2017-04-14 10:57:52,commits,335.0,  [07/20] camel git commit: CAMEL-10141: make camel-example-cdi-metrics tests pass on Java 9
19,19,16.0,336.0,davscl...@apache.org,"CAMEL-10141: make camel-example-cdi-properties tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/061eb241&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/061eb241&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/061eb241&#010;&#010;Branch: refs/heads/master&#010;Commit: 061eb2416cd5863cf845b330740cacaed83321cd&#010;Parents: 73b61ef&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 10:46:56 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-cdi-properties/pom.xml | 18 ++++++++++++++++++&#010; 1 file changed, 18 insertions(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/061eb241/examples/camel-example-cdi-properties/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-cdi-properties/pom.xml b/examples/camel-example-cdi-properties/pom.xml&#010;index 24adc77..ae2ae06 100755&#010;--- a/examples/camel-example-cdi-properties/pom.xml&#010;+++ b/examples/camel-example-cdi-properties/pom.xml&#010;@@ -124,4 +124,22 @@&#010;     &lt;/plugins&gt;&#010;   &lt;/build&gt;&#010; &#010;+  &lt;profiles&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;jdk9-build&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;argLine&gt;--add-modules java.xml.bind --add-opens java.base/java.lang=ALL-UNNAMED&lt;/argLine&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;+  &lt;/profiles&gt;&#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C4901736312b14536a40a9ab29e998af5%40git.apache.org%3E,2017-04-14 10:57:53,commits,336.0,  [08/20] camel git commit: CAMEL-10141: make camel-example-cdi-properties tests pass on Java 9
20,20,17.0,337.0,davscl...@apache.org,"CAMEL-10141: make camel-example-reportincident tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/1b8949f5&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/1b8949f5&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/1b8949f5&#010;&#010;Branch: refs/heads/master&#010;Commit: 1b8949f593eed1fb0b97bcf0d138f2be113d0d2e&#010;Parents: e6964f1&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 10:59:57 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-reportincident/pom.xml | 2 +-&#010; 1 file changed, 1 insertion(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/1b8949f5/examples/camel-example-reportincident/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-reportincident/pom.xml b/examples/camel-example-reportincident/pom.xml&#010;index 92091d7..b820ac1 100755&#010;--- a/examples/camel-example-reportincident/pom.xml&#010;+++ b/examples/camel-example-reportincident/pom.xml&#010;@@ -208,7 +208,7 @@&#010;           &lt;plugin&gt;&#010;             &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;             &lt;configuration&gt;&#010;-              &lt;argLine&gt;--add-modules java.xml.bind,java.xml.ws --add-opens java.base/java.lang=ALL-UNNAMED&#010;--add-opens java.base/java.lang.invoke=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED&lt;/argLine&gt;&#010;+              &lt;argLine&gt;--add-modules java.xml.bind,java.xml.ws --add-opens java.base/java.lang=ALL-UNNAMED&#010;--add-opens java.base/java.lang.invoke=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED&#010;--add-opens java.xml.bind/com.sun.xml.internal.bind.v2.runtime=ALL-UNNAMED&lt;/argLine&gt;&#010;             &lt;/configuration&gt;&#010;           &lt;/plugin&gt;&#010;         &lt;/plugins&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C4b84d50cca2f408189db81727d97a39f%40git.apache.org%3E,2017-04-14 10:57:54,commits,337.0,  [09/20] camel git commit: CAMEL-10141: make camel-example-reportincident tests pass on Java 9
21,21,18.0,338.0,davscl...@apache.org,"CAMEL-10141: make camel-example-rest-servlet tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/3f9ebd5a&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/3f9ebd5a&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/3f9ebd5a&#010;&#010;Branch: refs/heads/master&#010;Commit: 3f9ebd5a0a9e23e5b8c2f10abdf0c1c6ca4eda90&#010;Parents: 061eb24&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 10:47:16 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-cdi-rest-servlet/pom.xml | 43 +++++++++++++++++++-&#010; 1 file changed, 42 insertions(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/3f9ebd5a/examples/camel-example-cdi-rest-servlet/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-cdi-rest-servlet/pom.xml b/examples/camel-example-cdi-rest-servlet/pom.xml&#010;index 260d778..aac0973 100755&#010;--- a/examples/camel-example-cdi-rest-servlet/pom.xml&#010;+++ b/examples/camel-example-cdi-rest-servlet/pom.xml&#010;@@ -163,6 +163,48 @@&#010;         &lt;/dependency&gt;&#010;       &lt;/dependencies&gt;&#010;     &lt;/profile&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;jdk9-build-jetty&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;dependencies&gt;&#010;+        &lt;dependency&gt;&#010;+          &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;&#010;+          &lt;artifactId&gt;jetty-webapp&lt;/artifactId&gt;&#010;+          &lt;version&gt;${jetty9-version}&lt;/version&gt;&#010;+          &lt;scope&gt;runtime&lt;/scope&gt;&#010;+        &lt;/dependency&gt;&#010;+        &lt;dependency&gt;&#010;+          &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;&#010;+          &lt;artifactId&gt;jetty-annotations&lt;/artifactId&gt;&#010;+          &lt;version&gt;${jetty9-version}&lt;/version&gt;&#010;+          &lt;scope&gt;runtime&lt;/scope&gt;&#010;+        &lt;/dependency&gt;&#010;+        &lt;dependency&gt;&#010;+          &lt;groupId&gt;org.jboss.arquillian.container&lt;/groupId&gt;&#010;+          &lt;artifactId&gt;arquillian-jetty-embedded-9&lt;/artifactId&gt;&#010;+          &lt;version&gt;1.0.0.CR2&lt;/version&gt;&#010;+          &lt;scope&gt;test&lt;/scope&gt;&#010;+          &lt;exclusions&gt;&#010;+            &lt;exclusion&gt;&#010;+              &lt;groupId&gt;org.jboss.arquillian.container&lt;/groupId&gt;&#010;+              &lt;artifactId&gt;arquillian-container-spi&lt;/artifactId&gt;&#010;+            &lt;/exclusion&gt;&#010;+          &lt;/exclusions&gt;&#010;+        &lt;/dependency&gt;&#010;+      &lt;/dependencies&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;argLine&gt;--add-modules java.xml.bind --add-opens java.base/java.lang=ALL-UNNAMED&lt;/argLine&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;   &lt;/profiles&gt;&#010; &#010;   &lt;build&gt;&#010;@@ -175,5 +217,4 @@&#010;       &lt;/plugin&gt;&#010;     &lt;/plugins&gt;&#010;   &lt;/build&gt;&#010;-&#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cd0654af72ef94f628420b970c145ccf5%40git.apache.org%3E,2017-04-14 10:57:55,commits,338.0,  [10/20] camel git commit: CAMEL-10141: make camel-example-rest-servlet tests pass on Java 9
22,22,19.0,339.0,davscl...@apache.org,"CAMEL-10141: make camel-example-pojo-messaging tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/fdeb3475&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/fdeb3475&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/fdeb3475&#010;&#010;Branch: refs/heads/master&#010;Commit: fdeb34752943b2bf4723407b99da875708fae852&#010;Parents: 1b8949f&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 11:00:21 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-pojo-messaging/pom.xml | 18 ++++++++++++++++++&#010; 1 file changed, 18 insertions(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/fdeb3475/examples/camel-example-pojo-messaging/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-pojo-messaging/pom.xml b/examples/camel-example-pojo-messaging/pom.xml&#010;index f71b3b7..34b1bd6 100644&#010;--- a/examples/camel-example-pojo-messaging/pom.xml&#010;+++ b/examples/camel-example-pojo-messaging/pom.xml&#010;@@ -140,4 +140,22 @@&#010;     &lt;/plugins&gt;&#010;   &lt;/build&gt;&#010; &#010;+  &lt;profiles&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;jdk9-build&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;argLine&gt;--add-modules java.xml.bind --add-opens java.base/java.lang=ALL-UNNAMED&lt;/argLine&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;+  &lt;/profiles&gt;&#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C7bc5feb92c534ce9a2bf51de8ce26017%40git.apache.org%3E,2017-04-14 10:57:56,commits,339.0,  [11/20] camel git commit: CAMEL-10141: make camel-example-pojo-messaging tests pass on Java 9
23,23,20.0,340.0,davscl...@apache.org,"CAMEL-10141: make camel-example-management tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/9e7b6c6c&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/9e7b6c6c&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/9e7b6c6c&#010;&#010;Branch: refs/heads/master&#010;Commit: 9e7b6c6c7bb423f36dd3a6db98635e2a95a98acc&#010;Parents: fdeb347&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 11:00:56 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-management/pom.xml | 18 ++++++++++++++++++&#010; 1 file changed, 18 insertions(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/9e7b6c6c/examples/camel-example-management/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-management/pom.xml b/examples/camel-example-management/pom.xml&#010;index 66f0b1f..d8db087 100644&#010;--- a/examples/camel-example-management/pom.xml&#010;+++ b/examples/camel-example-management/pom.xml&#010;@@ -129,4 +129,22 @@&#010;     &lt;/plugins&gt;&#010;   &lt;/build&gt;&#010; &#010;+  &lt;profiles&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;jdk9-build&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;argLine&gt;--add-modules java.xml.bind --add-opens java.base/java.lang=ALL-UNNAMED&lt;/argLine&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;+  &lt;/profiles&gt;&#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C30204927025749bbbc58720eb5a3f27c%40git.apache.org%3E,2017-04-14 10:57:57,commits,340.0,  [12/20] camel git commit: CAMEL-10141: make camel-example-management tests pass on Java 9
24,24,21.0,341.0,davscl...@apache.org,"CAMEL-10141: make camel-example-spring-jms tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/3d9a999c&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/3d9a999c&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/3d9a999c&#010;&#010;Branch: refs/heads/master&#010;Commit: 3d9a999c035aa10bff547d0d3ee053528b615919&#010;Parents: 9e7b6c6&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 11:01:21 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-spring-jms/pom.xml | 17 ++++++++++++++++-&#010; 1 file changed, 16 insertions(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/3d9a999c/examples/camel-example-spring-jms/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-spring-jms/pom.xml b/examples/camel-example-spring-jms/pom.xml&#010;index da360e0..af430aa 100644&#010;--- a/examples/camel-example-spring-jms/pom.xml&#010;+++ b/examples/camel-example-spring-jms/pom.xml&#010;@@ -128,6 +128,22 @@&#010;         &lt;target.main.class&gt;org.apache.camel.example.client.CamelClientEndpoint&lt;/target.main.class&gt;&#010;       &lt;/properties&gt;&#010;     &lt;/profile&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;jdk9-build&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;argLine&gt;--add-modules java.xml.bind --add-opens java.base/java.lang=ALL-UNNAMED&lt;/argLine&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;   &lt;/profiles&gt;&#010;   &lt;build&gt;&#010; &#010;@@ -168,5 +184,4 @@&#010;     &lt;/plugins&gt;&#010; &#010;   &lt;/build&gt;&#010;-&#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cdf7aef9137e64879b2a51fa8161c519e%40git.apache.org%3E,2017-04-14 10:57:58,commits,341.0,  [13/20] camel git commit: CAMEL-10141: make camel-example-spring-jms tests pass on Java 9
25,25,22.0,342.0,davscl...@apache.org,"CAMEL-10141: make camel-example-osgi-rmi tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/047761a7&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/047761a7&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/047761a7&#010;&#010;Branch: refs/heads/master&#010;Commit: 047761a787d646759069e1ac318ba3523816ec08&#010;Parents: 3d9a999&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 11:01:50 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-osgi-rmi/pom.xml | 16 ++++++++++++++++&#010; 1 file changed, 16 insertions(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/047761a7/examples/camel-example-osgi-rmi/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-osgi-rmi/pom.xml b/examples/camel-example-osgi-rmi/pom.xml&#010;index dce39d2..82c588d 100644&#010;--- a/examples/camel-example-osgi-rmi/pom.xml&#010;+++ b/examples/camel-example-osgi-rmi/pom.xml&#010;@@ -87,6 +87,22 @@&#010;         &lt;target.main.class&gt;org.apache.camel.example.osgi.HelloClient&lt;/target.main.class&gt;&#010;       &lt;/properties&gt;&#010;     &lt;/profile&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;jdk9-build&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;argLine&gt;--add-modules java.xml.bind --add-opens java.base/java.lang=ALL-UNNAMED&lt;/argLine&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;   &lt;/profiles&gt;&#010; &#010;   &lt;build&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Ca519cd2689fb4af09c8ded1b17b83f65%40git.apache.org%3E,2017-04-14 10:57:59,commits,342.0,  [14/20] camel git commit: CAMEL-10141: make camel-example-osgi-rmi tests pass on Java 9
26,26,23.0,343.0,davscl...@apache.org,"CAMEL-10141: make camel-example-cafe tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/f0cc62ec&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/f0cc62ec&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/f0cc62ec&#010;&#010;Branch: refs/heads/master&#010;Commit: f0cc62ec403817c3f0050c870a5ad06732fb4bba&#010;Parents: 047761a&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 11:02:13 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-cafe/pom.xml | 20 +++++++++++++++++++-&#010; 1 file changed, 19 insertions(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/f0cc62ec/examples/camel-example-cafe/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-cafe/pom.xml b/examples/camel-example-cafe/pom.xml&#010;index 3255469..5e88b79 100755&#010;--- a/examples/camel-example-cafe/pom.xml&#010;+++ b/examples/camel-example-cafe/pom.xml&#010;@@ -118,5 +118,23 @@&#010; &#010;     &lt;/plugins&gt;&#010;   &lt;/build&gt;&#010;-&#010;+  &#010;+  &lt;profiles&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;jdk9-build&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;argLine&gt;--add-modules java.xml.bind&lt;/argLine&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;+  &lt;/profiles&gt;&#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cad79d72ff20f4e9e9063531f4c8a0503%40git.apache.org%3E,2017-04-14 10:58:00,commits,343.0,  [15/20] camel git commit: CAMEL-10141: make camel-example-cafe tests pass on Java 9
27,27,24.0,344.0,davscl...@apache.org,"CAMEL-10968: skip CXF tests on Java 9 until CXF-7270 is resolved&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/925bfe65&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/925bfe65&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/925bfe65&#010;&#010;Branch: refs/heads/master&#010;Commit: 925bfe6592ca4831497bfe1c79e8e98f78c0f908&#010;Parents: a01f14c&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 11:07:21 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-cxf/pom.xml              | 20 ++++++++++++++++&#010; .../pom.xml                                     | 22 ++++++++++++++++++&#010; tests/camel-blueprint-cxf-test/pom.xml          | 24 +++++++++++++++++++-&#010; 3 files changed, 65 insertions(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/925bfe65/examples/camel-example-cxf/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-cxf/pom.xml b/examples/camel-example-cxf/pom.xml&#010;index cc3f12f..d87f88f 100644&#010;--- a/examples/camel-example-cxf/pom.xml&#010;+++ b/examples/camel-example-cxf/pom.xml&#010;@@ -245,6 +245,26 @@&#010;         &lt;target.main.class&gt;org.apache.camel.example.cxf.jaxrs.Client&lt;/target.main.class&gt;&#010;       &lt;/properties&gt;&#010;     &lt;/profile&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;java9&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;excludes&gt;&#010;+                &lt;!--ignore tests until CXF-7270 is resolved and released--&gt;&#010;+                &lt;exclude&gt;**/**&lt;/exclude&gt;&#010;+              &lt;/excludes&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;   &lt;/profiles&gt;&#010; &#010;   &lt;build&gt;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/925bfe65/examples/camel-example-reportincident-wssecurity/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-reportincident-wssecurity/pom.xml b/examples/camel-example-reportincident-wssecurity/pom.xml&#010;index 143583f..8ff14c2 100644&#010;--- a/examples/camel-example-reportincident-wssecurity/pom.xml&#010;+++ b/examples/camel-example-reportincident-wssecurity/pom.xml&#010;@@ -226,4 +226,26 @@&#010;     &lt;/plugins&gt;&#010;   &lt;/build&gt;&#010; &#010;+  &lt;profiles&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;java9&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;excludes&gt;&#010;+                &lt;!--ignore tests until CXF-7270 is resolved and released--&gt;&#010;+                &lt;exclude&gt;**/**&lt;/exclude&gt;&#010;+              &lt;/excludes&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;+  &lt;/profiles&gt;&#010; &lt;/project&gt;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/925bfe65/tests/camel-blueprint-cxf-test/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/tests/camel-blueprint-cxf-test/pom.xml b/tests/camel-blueprint-cxf-test/pom.xml&#010;index 6948da8..3e790b1 100644&#010;--- a/tests/camel-blueprint-cxf-test/pom.xml&#010;+++ b/tests/camel-blueprint-cxf-test/pom.xml&#010;@@ -195,5 +195,27 @@&#010;     &lt;/dependency&gt;&#010; &#010;   &lt;/dependencies&gt;&#010;-&#010;+  &#010;+  &lt;profiles&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;java9&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;excludes&gt;&#010;+                &lt;!--ignore tests until CXF-7270 is resolved and released--&gt;&#010;+                &lt;exclude&gt;**/**&lt;/exclude&gt;&#010;+              &lt;/excludes&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;+  &lt;/profiles&gt;&#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cf223533da6264a95bdf7c35eb48a0936%40git.apache.org%3E,2017-04-14 10:58:01,commits,344.0,  [16/20] camel git commit: CAMEL-10968: skip CXF tests on Java 9 until CXF-7270 is resolved
28,28,25.0,345.0,davscl...@apache.org,"CAMEL-10968: skip CXF tests on Java 9 until CXF-7270 is resolved&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/7b2d32e1&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/7b2d32e1&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/7b2d32e1&#010;&#010;Branch: refs/heads/master&#010;Commit: 7b2d32e1292f7d5f2515b018527aba8d6e95846b&#010;Parents: f0cc62e&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 11:04:57 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; components/camel-cxf/pom.xml | 21 ++++++++++++++++++++-&#010; 1 file changed, 20 insertions(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/7b2d32e1/components/camel-cxf/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-cxf/pom.xml b/components/camel-cxf/pom.xml&#010;index 70f782e..2503adf 100644&#010;--- a/components/camel-cxf/pom.xml&#010;+++ b/components/camel-cxf/pom.xml&#010;@@ -492,6 +492,25 @@&#010;         &lt;/dependency&gt;&#010;       &lt;/dependencies&gt;&#010;     &lt;/profile&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;java9&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;excludes&gt;&#010;+                &lt;!--ignore tests until CXF-7270 is resolved and released--&gt;&#010;+                &lt;exclude&gt;**/**&lt;/exclude&gt;&#010;+              &lt;/excludes&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;   &lt;/profiles&gt;&#010;-&#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C6ae8575032e649018fd66bcbb39bfa36%40git.apache.org%3E,2017-04-14 10:58:02,commits,345.0,  [17/20] camel git commit: CAMEL-10968: skip CXF tests on Java 9 until CXF-7270 is resolved
29,29,26.0,346.0,davscl...@apache.org,"CAMEL-10968: make camel-example-cxf-osgi tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/bb7bd6ab&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/bb7bd6ab&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/bb7bd6ab&#010;&#010;Branch: refs/heads/master&#010;Commit: bb7bd6ab35a2984bb041e7021039136678315d47&#010;Parents: 925bfe6&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 11:50:01 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-cxf-osgi/pom.xml | 19 +++++++++++++++++++&#010; 1 file changed, 19 insertions(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/bb7bd6ab/examples/camel-example-cxf-osgi/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-cxf-osgi/pom.xml b/examples/camel-example-cxf-osgi/pom.xml&#010;index 04e8e79..8c2c773 100644&#010;--- a/examples/camel-example-cxf-osgi/pom.xml&#010;+++ b/examples/camel-example-cxf-osgi/pom.xml&#010;@@ -159,4 +159,23 @@&#010;       &lt;/plugin&gt;&#010;     &lt;/plugins&gt;&#010;   &lt;/build&gt;&#010;+  &#010;+  &lt;profiles&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;jdk9-build&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;argLine&gt;--add-modules java.activation,java.xml.bind,java.xml.ws,jdk.xml.bind&#010;--add-opens java.base/java.lang=ALL-UNNAMED --add-exports=java.naming/com.sun.jndi.ldap=ALL-UNNAMED&#010;--add-exports=java.xml.bind/com.sun.xml.internal.bind=ALL-UNNAMED --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2=ALL-UNNAMED&#010;--add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime.reflect=ALL-UNNAMED --add-exports=java.xml.ws/com.sun.xml.internal.messaging.saaj.soap.impl=ALL-UNNAMED&#010;--add-exports=java.xml.ws/com.sun.xml.internal.messaging.saaj.soap=ALL-UNNAMED --add-opens&#010;java.base/java.net=ALL-UNNAMED --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime=ALL-UNNAMED&lt;/argLine&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;+  &lt;/profiles&gt;&#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cb7b76d890975415b8e3d8088aa623a6f%40git.apache.org%3E,2017-04-14 10:58:03,commits,346.0,  [18/20] camel git commit: CAMEL-10968: make camel-example-cxf-osgi tests pass on Java 9
30,30,27.0,347.0,davscl...@apache.org,"CAMEL-10968: make camel-example-loan-broker-cxf tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/1ca0ec4d&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/1ca0ec4d&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/1ca0ec4d&#010;&#010;Branch: refs/heads/master&#010;Commit: 1ca0ec4dac23930357bb62ac587b8047d332cf0f&#010;Parents: 8a23104&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 11:56:22 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-loan-broker-cxf/pom.xml | 16 ++++++++++++++++&#010; 1 file changed, 16 insertions(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/1ca0ec4d/examples/camel-example-loan-broker-cxf/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-loan-broker-cxf/pom.xml b/examples/camel-example-loan-broker-cxf/pom.xml&#010;index b5180c5..e6c5db0 100644&#010;--- a/examples/camel-example-loan-broker-cxf/pom.xml&#010;+++ b/examples/camel-example-loan-broker-cxf/pom.xml&#010;@@ -170,6 +170,22 @@&#010;         &lt;target.main.class&gt;org.apache.camel.loanbroker.Client&lt;/target.main.class&gt;&#010;       &lt;/properties&gt;&#010;     &lt;/profile&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;jdk9-build&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;argLine&gt;--add-modules java.xml.bind,java.xml.ws --add-opens java.base/java.lang=ALL-UNNAMED&#010;--add-opens java.xml.bind/com.sun.xml.internal.bind.v2.runtime=ALL-UNNAMED&lt;/argLine&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;   &lt;/profiles&gt;&#010; &#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cabfdccad36ad4d6ba0d229dc4c4050cd%40git.apache.org%3E,2017-04-14 10:58:04,commits,347.0,  [19/20] camel git commit: CAMEL-10968: make camel-example-loan-broker-cxf tests pass on Java 9
31,31,28.0,348.0,davscl...@apache.org,"CAMEL-10968: make camel-example-cxf-proxy tests pass on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/44d333fe&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/44d333fe&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/44d333fe&#010;&#010;Branch: refs/heads/master&#010;Commit: 44d333fe7cc2d5bdc1f452a16e5c3923edd9ea10&#010;Parents: bb7bd6a&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Fri Apr 14 11:52:00 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Fri Apr 14 12:57:21 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; examples/camel-example-cxf-proxy/pom.xml | 20 +++++++++++++++++++-&#010; 1 file changed, 19 insertions(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/44d333fe/examples/camel-example-cxf-proxy/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-cxf-proxy/pom.xml b/examples/camel-example-cxf-proxy/pom.xml&#010;index be68c33..6c08ee7 100755&#010;--- a/examples/camel-example-cxf-proxy/pom.xml&#010;+++ b/examples/camel-example-cxf-proxy/pom.xml&#010;@@ -152,5 +152,23 @@&#010; &#010;     &lt;/plugins&gt;&#010;   &lt;/build&gt;&#010;-&#010;+  &#010;+  &lt;profiles&gt;&#010;+    &lt;profile&gt;&#010;+      &lt;id&gt;jdk9-build&lt;/id&gt;&#010;+      &lt;activation&gt;&#010;+        &lt;jdk&gt;9&lt;/jdk&gt;&#010;+      &lt;/activation&gt;&#010;+      &lt;build&gt;&#010;+        &lt;plugins&gt;&#010;+          &lt;plugin&gt;&#010;+            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;argLine&gt;--add-modules java.activation,java.xml.bind,java.xml.ws,jdk.xml.bind&#010;--add-opens java.base/java.lang=ALL-UNNAMED --add-exports=java.naming/com.sun.jndi.ldap=ALL-UNNAMED&#010;--add-exports=java.xml.bind/com.sun.xml.internal.bind=ALL-UNNAMED --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2=ALL-UNNAMED&#010;--add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime.reflect=ALL-UNNAMED --add-exports=java.xml.ws/com.sun.xml.internal.messaging.saaj.soap.impl=ALL-UNNAMED&#010;--add-exports=java.xml.ws/com.sun.xml.internal.messaging.saaj.soap=ALL-UNNAMED --add-opens&#010;java.base/java.net=ALL-UNNAMED --add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime=ALL-UNNAMED&lt;/argLine&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/plugin&gt;&#010;+        &lt;/plugins&gt;&#010;+      &lt;/build&gt;&#010;+    &lt;/profile&gt;&#010;+  &lt;/profiles&gt;&#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C846df69249224f8fad5cf4414e42b733%40git.apache.org%3E,2017-04-14 10:58:05,commits,348.0,  [20/20] camel git commit: CAMEL-10968: make camel-example-cxf-proxy tests pass on Java 9
32,32,32.0,195.0,johnpoth,"Github user johnpoth closed the pull request at:&#010;&#010;    https://github.com/apache/camel/pull/1633&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170414114012.0CE98DFDAC%40git1-us-west.apache.org%3E,2017-04-14 11:40:12,mail,195.0,  [GitHub] camel pull request #1633: Camel-10141 Lets pass remaining tests on Java 9 an...
33,33,31.0,185.0,Apache Jenkins Server,The Apache Jenkins build system has built Camel.trunk.notest (build #3138)&#010;&#010;Status: Fixed&#010;&#010;Check console output at https://builds.apache.org/job/Camel.trunk.notest/3138/ to view the&#010;results.&#010;,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C650829034.1122.1492169204513.JavaMail.jenkins%40crius%3E,2017-04-14 11:26:43,mail,185.0,  Camel.trunk.notest - Build # 3138 - Fixed
34,34,35.0,196.0,Apache Jenkins Server,The Apache Jenkins build system has built Camel.trunk.notest (build #3139)&#010;&#010;Status: Failure&#010;&#010;Check console output at https://builds.apache.org/job/Camel.trunk.notest/3139/ to view the&#010;results.&#010;,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C1103389866.1132.1492176044941.JavaMail.jenkins%40crius%3E,2017-04-14 13:20:41,mail,196.0,Camel.trunk.notest - Build # 3139 - Failure
35,35,42.0,197.0,Apache Jenkins Server,The Apache Jenkins build system has built Camel.trunk.notest (build #3140)&#010;&#010;Status: Still Failing&#010;&#010;Check console output at https://builds.apache.org/job/Camel.trunk.notest/3140/ to view the&#010;results.&#010;,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C532825254.1161.1492186125669.JavaMail.jenkins%40crius%3E,2017-04-14 16:08:45,mail,197.0,  Camel.trunk.notest - Build # 3140 - Still Failing
36,36,44.0,198.0,Apache Jenkins Server,The Apache Jenkins build system has built Camel.trunk.notest (build #3141)&#010;&#010;Status: Still Failing&#010;&#010;Check console output at https://builds.apache.org/job/Camel.trunk.notest/3141/ to view the&#010;results.&#010;,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C1866482530.1202.1492193623031.JavaMail.jenkins%40crius%3E,2017-04-14 18:13:42,mail,198.0,    Camel.trunk.notest - Build # 3141 - Still Failing
37,37,99.0,199.0,Apache Jenkins Server,The Apache Jenkins build system has built Camel.trunk.notest (build #3142)&#010;&#010;Status: Still Failing&#010;&#010;Check console output at https://builds.apache.org/job/Camel.trunk.notest/3142/ to view the&#010;results.&#010;,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C1503066349.929.1492505396575.JavaMail.jenkins%40crius%3E,2017-04-18 08:49:55,mail,199.0,      Camel.trunk.notest - Build # 3142 - Still Failing
38,38,112.0,200.0,Apache Jenkins Server,The Apache Jenkins build system has built Camel.trunk.notest (build #3143)&#010;&#010;Status: Still Failing&#010;&#010;Check console output at https://builds.apache.org/job/Camel.trunk.notest/3143/ to view the&#010;results.&#010;,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C1640579252.977.1492512680081.JavaMail.jenkins%40crius%3E,2017-04-18 10:51:17,mail,200.0,        Camel.trunk.notest - Build # 3143 - Still Failing
39,39,156.0,201.0,Apache Jenkins Server,The Apache Jenkins build system has built Camel.trunk.notest (build #3144)&#010;&#010;Status: Fixed&#010;&#010;Check console output at https://builds.apache.org/job/Camel.trunk.notest/3144/ to view the&#010;results.&#010;,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C1711132809.1122.1492534566432.JavaMail.jenkins%40crius%3E,2017-04-18 16:56:04,mail,201.0,          Camel.trunk.notest - Build # 3144 - Fixed
40,40,234.0,221.0,Apache Jenkins Server,The Apache Jenkins build system has built Camel.trunk.notest (build #3146)&#010;&#010;Status: Failure&#010;&#010;Check console output at https://builds.apache.org/job/Camel.trunk.notest/3146/ to view the&#010;results.&#010;,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C1579680024.1412.1492602693408.JavaMail.jenkins%40crius%3E,2017-04-19 11:51:33,mail,221.0,Camel.trunk.notest - Build # 3146 - Failure
45,45,93.0,533.0,Luca Burgazzoli (JIRA),"&#010;     [ https://issues.apache.org/jira/browse/CAMEL-10896?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&#010;]&#010;&#010;Work on CAMEL-10896 started by Luca Burgazzoli.&#010;-----------------------------------------------&#010;&gt; camel-infinispan - Stores result in header and not body&#010;&gt; -------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-10896&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-10896&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Improvement&#010;&gt;          Components: camel-infinispan&#010;&gt;            Reporter: Claus Ibsen&#010;&gt;            Assignee: Luca Burgazzoli&#010;&gt;            Priority: Minor&#010;&gt;             Fix For: 2.20.0&#010;&gt;&#010;&gt;&#010;&gt; This component sadly does not work like others like hazelcast etc where the result is&#010;by default in message body, so it stores all magically in some result header which you do&#010;not expect. &#010;&gt; So if you want to store some message body in a map cache you have to use headers and&#010;whatnot.&#010;&gt; We should add some way to configure this to work more like the others. Also it should&#010;have better NPE check as you can get NPEs such as&#010;&gt; {code}&#010;&gt; java.lang.NullPointerException&#010;&gt; &#009;at org.apache.camel.component.infinispan.InfinispanOperation$Operation$7.execute(InfinispanOperation.java:183)&#010;&gt; &#009;at org.apache.camel.component.infinispan.InfinispanOperation.process(InfinispanOperation.java:45)&#010;&gt; &#009;at org.apache.camel.component.infinispan.InfinispanProducer.process(InfinispanProducer.java:34)&#010;&gt; {code}&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13046297.1488037837000.303589.1492502201732%40Atlassian.JIRA%3E,2017-04-18 07:56:41,issues,536.0,  [jira] [Work started] (CAMEL-10896) camel-infinispan - Stores result in header and not body
46,46,36.0,349.0,build...@apache.org,"Author: buildbot&#010;Date: Fri Apr 14 14:18:45 2017&#010;New Revision: 1010488&#010;&#010;Log:&#010;Production update by buildbot for camel&#010;&#010;Modified:&#010;    websites/production/camel/content/cache/main.pageCache&#010;    websites/production/camel/content/cdi.html&#010;&#010;Modified: websites/production/camel/content/cache/main.pageCache&#010;==============================================================================&#010;Binary files - no diff available.&#010;&#010;Modified: websites/production/camel/content/cdi.html&#010;==============================================================================&#010;--- websites/production/camel/content/cdi.html (original)&#010;+++ websites/production/camel/content/cdi.html Fri Apr 14 14:18:45 2017&#010;@@ -473,6 +473,53 @@ Processor processor = exchange -&amp;gt; exc&#010;         &amp;lt;process ref=&amp;quot;baz&amp;quot;/&amp;gt;&#010;     &amp;lt;/route&amp;gt;&#010; &amp;lt;camelContext/&amp;gt;]]&gt;&lt;/script&gt;&#010;+&lt;/div&gt;&lt;/div&gt;&lt;h3 id=""CDI-Transactionsupport""&gt;Transaction support&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Available&#010;as of Camel 2.19&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Camel CDI provides support for Camel &lt;a&#010;shape=""rect"" href=""transactional-client.html""&gt;transactional client&lt;/a&gt; using JTA.&lt;/p&gt;&lt;p&gt;That&#010;support is optional hence you need to have JTA in your application classpath, e.g., by explicitly&#010;add JTA as a dependency when using Maven:&lt;/p&gt;&lt;div class=""code panel pdl"" style=""border-width:&#010;1px;""&gt;&lt;div class=""codeContent panelContent pdl""&gt;&#010;+&lt;script class=""brush: xml; gutter: false; theme: Default"" type=""syntaxhighlighter""&gt;&lt;![CDATA[&amp;lt;dependency&amp;gt;&#010;+    &amp;lt;groupId&amp;gt;javax.transaction&amp;lt;/groupId&amp;gt;&#010;+    &amp;lt;artifactId&amp;gt;javax.transaction-api&amp;lt;/artifactId&amp;gt;&#010;+    &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;&#010;+&amp;lt;/dependency&amp;gt;]]&gt;&lt;/script&gt;&#010;+&lt;/div&gt;&lt;/div&gt;&lt;p&gt;You'll have to have your application deployed in a JTA capable&#010;container or provide a standalone JTA implementation.&lt;/p&gt;&lt;div class=""confluence-information-macro&#010;confluence-information-macro-note""&gt;&lt;span class=""aui-icon aui-icon-small aui-iconfont-warning&#010;confluence-information-macro-icon""&gt;&lt;/span&gt;&lt;div class=""confluence-information-macro-body""&gt;&lt;p&gt;Note&#010;that, for the time being, the transaction manager is looked up as JNDI resource with the &lt;code&gt;java:/TransactionManager&lt;/code&gt;&#010;key. More flexible strategies will be added in the future to support a wider range of deployment&#010;scenarios.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=""CDI-Transactionpolicies""&gt;Transaction&#010;policies&lt;/h4&gt;&lt;p&gt;Camel CDI provides implementation for the typically supported&#010;Camel &lt;code&gt;TransactedPolicy&lt;/code&gt; as CDI beans. It is possible to have these&#010;policies looked up by name using the &lt;code&gt;transacted&lt;/code&gt; EIP, e.g.:&lt;/p&gt;&lt;div&#010;class=""code panel pdl"" style=""border-width: 1px;""&gt;&lt;div class=""codeContent panelContent&#010;pdl""&gt;&#010;+&lt;script class=""brush: java; gutter: false; theme: Default"" type=""syntaxhighlighter""&gt;&lt;![CDATA[class&#010;MyRouteBean extends RouteBuilder {&#010;+ &#010;+&#009;@Override&#010;+    public void configure() {&#010;+        from(&amp;quot;activemq:queue:foo&amp;quot;)&#010;+            .transacted(&amp;quot;PROPAGATION_REQUIRED&amp;quot;)&#010;+            .bean(&amp;quot;transformer&amp;quot;)&#010;+            .to(&amp;quot;jpa:my.application.entity.Bar&amp;quot;)&#010;+            .log(&amp;quot;${body.id} inserted&amp;quot;);&#010;+    }&#010;+}]]&gt;&lt;/script&gt;&#010;+&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This would be equivalent to:&lt;/p&gt;&lt;div class=""code&#010;panel pdl"" style=""border-width: 1px;""&gt;&lt;div class=""codeContent panelContent pdl""&gt;&#010;+&lt;script class=""brush: java; gutter: false; theme: Default"" type=""syntaxhighlighter""&gt;&lt;![CDATA[class&#010;MyRouteBean extends RouteBuilder {&#010;+&#010;+    @Inject&#010;+    @Named(&amp;quot;PROPAGATION_REQUIRED&amp;quot;)&#010;+    Policy required;&#010;+Â &#010;+&#009;@Override&#010;+    public void configure() {&#010;+        from(&amp;quot;activemq:queue:foo&amp;quot;)&#010;+            .policy(required)&#010;+            .bean(&amp;quot;transformer&amp;quot;)&#010;+            .to(&amp;quot;jpa:my.application.entity.Bar&amp;quot;)&#010;+            .log(&amp;quot;${body.id} inserted&amp;quot;);&#010;+    }&#010;+}]]&gt;&lt;/script&gt;&#010;+&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The list of supported transaction policy names is: &lt;code&gt;PROPAGATION_NEVER&lt;/code&gt;,&amp;#160;&lt;code&gt;PROPAGATION_NOT_SUPPORTED&lt;/code&gt;,&#010;&lt;code&gt;PROPAGATION_SUPPORTS&lt;/code&gt;,&amp;#160;&lt;code&gt;PROPAGATION_REQUIRED&lt;/code&gt;,&amp;#160;&lt;code&gt;PROPAGATION_REQUIRES_NEW&lt;/code&gt;,&#010;&lt;code&gt;PROPAGATION_NESTED&lt;/code&gt;,&amp;#160;&lt;code&gt;PROPAGATION_MANDATORY&lt;/code&gt;.&lt;/p&gt;&lt;h4&#010;id=""CDI-Transactionalerrorhandler""&gt;Transactional error handler&lt;/h4&gt;&lt;p&gt;Camel&#010;CDI provides a transactional &lt;a shape=""rect"" href=""error-handler.html""&gt;error handler&lt;/a&gt;&#010;that extends the redelivery error handler, forces a rollback whenever an exception occurs&#010;and creates a new transaction for each redelivery. Camel CDI provides the &lt;code&gt;CdiRouteBuilder&lt;/code&gt;&#010;class that exposes the &lt;code&gt;transactionErrorHandler&lt;/code&gt; helper method to enable&#010;quick access to the configuration, e.g.:&lt;/p&gt;&lt;div class=""code panel pdl"" style=""border-width:&#010;1px;""&gt;&lt;div class=""codeContent panelContent pdl""&gt;&#010;+&lt;script class=""brush: java; gutter: false; theme: Default"" type=""syntaxhighlighter""&gt;&lt;![CDATA[class&#010;MyRouteBean extends CdiRouteBuilder {&#010;+&#010;+&#009;@Override&#010;+    public void configure() {&#010;+        errorHandler(transactionErrorHandler()&#010;+            .setTransactionPolicy(&amp;quot;PROPAGATION_SUPPORTS&amp;quot;)&#010;+            .maximumRedeliveries(5)&#010;+            .maximumRedeliveryDelay(5000)&#010;+            .collisionAvoidancePercent(10)&#010;+            .backOffMultiplier(1.5));&#010;+    }&#010;+}]]&gt;&lt;/script&gt;&#010; &lt;/div&gt;&lt;/div&gt;&lt;h3 id=""CDI-Auto-configuredOSGiintegration""&gt;Auto-configured&#010;OSGi integration&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Available as of Camel 2.17&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The&#010;Camel context beans are automatically adapted by Camel CDI so that they are registered as&#010;OSGi services and the various resolvers (like&amp;#160;&lt;strong&gt;&lt;code&gt;ComponentResolver&lt;/code&gt;&lt;/strong&gt;&#010;and&amp;#160;&lt;strong&gt;&lt;code&gt;DataFormatResolver&lt;/code&gt;&lt;/strong&gt;) integrate&#010;with the OSGi registry. That means that the &lt;a shape=""rect"" href=""karaf.html#Karaf-Karafcommands""&gt;Karaf&#010;Camel commands&lt;/a&gt; can be used to operate the Camel contexts auto-configured by Camel&#010;CDI, e.g.:&lt;/p&gt;&lt;div class=""code panel pdl"" style=""border-width: 1px;""&gt;&lt;div class=""codeContent&#010;panelContent pdl""&gt;&#010; &lt;script class=""brush: text; gutter: false; theme: Default"" type=""syntaxhighlighter""&gt;&lt;![CDATA[karaf@root()&amp;gt;&#010;camel:context-list&#010;  Context        Status              Total #       Failed #     Inflight #   Uptime      &#010; &#010;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C20170414141846.6A33E3A51B2%40svn01-us-west.apache.org%3E,2017-04-14 14:18:45,commits,349.0,svn commit: r1010488 - in /websites/production/camel/content: cache/main.pageCache cdi.html
47,47,37.0,350.0,astefanu...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master ddd2347d9 -&gt; 6ec8df219&#010;&#010;&#010;CAMEL-10685: documentation&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/6ec8df21&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/6ec8df21&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/6ec8df21&#010;&#010;Branch: refs/heads/master&#010;Commit: 6ec8df21959037351bbf786cc5d1716696ab1829&#010;Parents: ddd2347&#010;Author: Antonin Stefanutti &lt;antonin@stefanutti.fr&gt;&#010;Authored: Fri Apr 14 16:24:49 2017 +0200&#010;Committer: Antonin Stefanutti &lt;antonin@stefanutti.fr&gt;&#010;Committed: Fri Apr 14 16:26:00 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; components/camel-cdi/src/main/docs/cdi.adoc | 100 +++++++++++++++++++++++&#010; 1 file changed, 100 insertions(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/6ec8df21/components/camel-cdi/src/main/docs/cdi.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-cdi/src/main/docs/cdi.adoc b/components/camel-cdi/src/main/docs/cdi.adoc&#010;index 572eec3..1a3931e 100644&#010;--- a/components/camel-cdi/src/main/docs/cdi.adoc&#010;+++ b/components/camel-cdi/src/main/docs/cdi.adoc&#010;@@ -855,6 +855,106 @@ configuration, e.g.:&#010; &lt;camelContext/&gt;&#010; ----&#010; &#010;+&#010;+### Transaction support&#010;+&#010;+*Available as of Camel 2.19*&#010;+&#010;+Camel CDI provides support for Camel transactional client using JTA.&#010;+&#010;+That support is optional hence you need to have JTA in your application classpath, e.g.,&#010;by explicitly add JTA as a dependency when using Maven:&#010;+&#010;+[source,xml]&#010;+----&#010;+&lt;dependency&gt;&#010;+    &lt;groupId&gt;javax.transaction&lt;/groupId&gt;&#010;+    &lt;artifactId&gt;javax.transaction-api&lt;/artifactId&gt;&#010;+    &lt;scope&gt;runtime&lt;/scope&gt;&#010;+&lt;/dependency&gt;&#010;+----&#010;+&#010;+You'll have to have your application deployed in a JTA capable container or provide a standalone&#010;JTA implementation.&#010;+&#010;+[CAUTION]&#010;+====&#010;+Note that, for the time being, the transaction manager is looked up as JNDI resource with&#010;the `java:/TransactionManager` key.&#010;+&#010;+More flexible strategies will be added in the future to support a wider range of deployment&#010;scenarios.&#010;+====&#010;+&#010;+#### Transaction policies&#010;+&#010;+Camel CDI provides implementation for the typically supported Camel `TransactedPolicy` as&#010;CDI beans. It is possible to have these policies looked up by name using the transacted EIP,&#010;e.g.:&#010;+&#010;+[source,java]&#010;+----&#010;+class MyRouteBean extends RouteBuilder {&#010;+&#010;+    @Override&#010;+    public void configure() {&#010;+        from(""activemq:queue:foo"")&#010;+            .transacted(""PROPAGATION_REQUIRED"")&#010;+            .bean(""transformer"")&#010;+            .to(""jpa:my.application.entity.Bar"")&#010;+            .log(""${body.id} inserted"");&#010;+    }&#010;+}&#010;+----&#010;+&#010;+This would be equivalent to:&#010;+&#010;+[source,java]&#010;+----&#010;+class MyRouteBean extends RouteBuilder {&#010;+&#010;+    @Inject&#010;+    @Named(""PROPAGATION_REQUIRED"")&#010;+    Policy required;&#010;+&#010;+    @Override&#010;+    public void configure() {&#010;+        from(""activemq:queue:foo"")&#010;+            .policy(required)&#010;+            .bean(""transformer"")&#010;+            .to(""jpa:my.application.entity.Bar"")&#010;+            .log(""${body.id} inserted"");&#010;+    }&#010;+}&#010;+----&#010;+&#010;+The list of supported transaction policy names is:&#010;+&#010;+- `PROPAGATION_NEVER`,&#010;+- `PROPAGATION_NOT_SUPPORTED`,&#010;+- `PROPAGATION_SUPPORTS`,&#010;+- `PROPAGATION_REQUIRED`,&#010;+- `PROPAGATION_REQUIRES_NEW`,&#010;+- `PROPAGATION_NESTED`,&#010;+- `PROPAGATION_MANDATORY`.&#010;+&#010;+#### Transactional error handler&#010;+&#010;+Camel CDI provides a transactional error handler that extends the redelivery error handler,&#010;forces a rollback whenever an exception occurs and creates a new transaction for each redelivery.&#010;+&#010;+Camel CDI provides the `CdiRouteBuilder` class that exposes the `transactionErrorHandler`&#010;helper method to enable quick access to the configuration, e.g.:&#010;+&#010;+[source,java]&#010;+----&#010;+class MyRouteBean extends CdiRouteBuilder {&#010;+&#010;+    @Override&#010;+    public void configure() {&#010;+        errorHandler(transactionErrorHandler()&#010;+            .setTransactionPolicy(""PROPAGATION_SUPPORTS"")&#010;+            .maximumRedeliveries(5)&#010;+            .maximumRedeliveryDelay(5000)&#010;+            .collisionAvoidancePercent(10)&#010;+            .backOffMultiplier(1.5));&#010;+    }&#010;+}&#010;+----&#010;+&#010;+&#010; ### Auto-configured OSGi integration&#010; &#010; *Available as of Camel 2.17*&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cfa61a27cf04c43a69b13da26e7ff1d9d%40git.apache.org%3E,2017-04-14 14:26:14,commits,350.0,camel git commit: CAMEL-10685: documentation
48,48,38.0,351.0,astefanu...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 6ec8df219 -&gt; cd84f3857&#010;&#010;&#010;Camel CDI: update testing container versions in documentation&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/cd84f385&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/cd84f385&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/cd84f385&#010;&#010;Branch: refs/heads/master&#010;Commit: cd84f3857d87b26543989bede3d953dadbd48cf6&#010;Parents: 6ec8df2&#010;Author: Antonin Stefanutti &lt;antonin@stefanutti.fr&gt;&#010;Authored: Fri Apr 14 16:35:16 2017 +0200&#010;Committer: Antonin Stefanutti &lt;antonin@stefanutti.fr&gt;&#010;Committed: Fri Apr 14 16:35:16 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; components/camel-cdi/src/main/docs/cdi.adoc | 6 +++---&#010; 1 file changed, 3 insertions(+), 3 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/cd84f385/components/camel-cdi/src/main/docs/cdi.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-cdi/src/main/docs/cdi.adoc b/components/camel-cdi/src/main/docs/cdi.adoc&#010;index 1a3931e..30c7512 100644&#010;--- a/components/camel-cdi/src/main/docs/cdi.adoc&#010;+++ b/components/camel-cdi/src/main/docs/cdi.adoc&#010;@@ -1084,11 +1084,11 @@ following runtimes:&#010; |Container |Version |Runtime&#010; |Weld SE |1.1.28.Final |CDI 1.0 / Java SE 7&#010; |OpenWebBeans |1.2.7 |CDI 1.0 / Java SE 7&#010;-|Weld SE |2.3.4.Final |CDI 1.2 / Java SE 7&#010;-|OpenWebBeans |1.6.3 |CDI 1.2 / Java SE 7&#010;+|Weld SE |2.4.2.Final |CDI 1.2 / Java SE 7&#010;+|OpenWebBeans |1.7.2 |CDI 1.2 / Java SE 7&#010; |WildFly |8.2.1.Final |CDI 1.2 / Java EE 7&#010; |WildFly |9.0.1.Final |CDI 1.2 / Java EE 7&#010;-|WildFly |10.0.0.Final |CDI 1.2 / Java EE 7&#010;+|WildFly |10.1.0.Final |CDI 1.2 / Java EE 7&#010; |Karaf |2.4.4 |CDI 1.2 / OSGi 4 / PAX CDI&#010; |Karaf |3.0.5 |CDI 1.2 / OSGi 5 / PAX CDI&#010; |Karaf |4.0.4 |CDI 1.2 / OSGi 6 / PAX CDI&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cf67338e8a03243c58900544fea88dc32%40git.apache.org%3E,2017-04-14 14:35:24,commits,351.0,camel git commit: Camel CDI: update testing container versions in documentation
49,49,40.0,353.0,astefanu...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 49e1c0111 -&gt; d41194b8b&#010;&#010;&#010;CAMEL-10685: Use multi-catch exceptions and polish&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/d41194b8&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/d41194b8&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/d41194b8&#010;&#010;Branch: refs/heads/master&#010;Commit: d41194b8bb822d70f706d9359d6694723cfb034b&#010;Parents: 49e1c01&#010;Author: Antonin Stefanutti &lt;antonin@stefanutti.fr&gt;&#010;Authored: Fri Apr 14 16:52:59 2017 +0200&#010;Committer: Antonin Stefanutti &lt;antonin@stefanutti.fr&gt;&#010;Committed: Fri Apr 14 16:53:23 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../org/apache/camel/cdi/CdiRouteBuilder.java   |  4 +---&#010; .../JtaTransactionErrorHandlerBuilder.java      |  2 +-&#010; .../cdi/transaction/JtaTransactionPolicy.java   |  1 -&#010; .../MandatoryJtaTransactionPolicy.java          |  1 -&#010; .../transaction/NeverJtaTransactionPolicy.java  |  1 -&#010; .../NotSupportedJtaTransactionPolicy.java       |  1 -&#010; .../RequiresNewJtaTransactionPolicy.java        |  1 -&#010; .../transaction/TransactionErrorHandler.java    |  2 +-&#010; .../TransactionalJtaTransactionPolicy.java      | 23 ++------------------&#010; 9 files changed, 5 insertions(+), 31 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d41194b8/components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiRouteBuilder.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiRouteBuilder.java&#010;b/components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiRouteBuilder.java&#010;index 4c4e445..337351d 100644&#010;--- a/components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiRouteBuilder.java&#010;+++ b/components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiRouteBuilder.java&#010;@@ -21,9 +21,7 @@ import org.apache.camel.cdi.transaction.JtaTransactionErrorHandlerBuilder;&#010; &#010; /**&#010;  * An extension of the {@link RouteBuilder} to provide some additional helper&#010;- * methods&#010;- *&#010;- * @version&#010;+ * methods.&#010;  */&#010; public abstract class CdiRouteBuilder extends RouteBuilder {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d41194b8/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/JtaTransactionErrorHandlerBuilder.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/JtaTransactionErrorHandlerBuilder.java&#010;b/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/JtaTransactionErrorHandlerBuilder.java&#010;index 3be2d1d..6d72aaa 100644&#010;--- a/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/JtaTransactionErrorHandlerBuilder.java&#010;+++ b/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/JtaTransactionErrorHandlerBuilder.java&#010;@@ -94,7 +94,7 @@ public class JtaTransactionErrorHandlerBuilder extends DefaultErrorHandlerBuilde&#010;         // try to lookup default policy&#010;         if (transactionPolicy == null) {&#010;             LOG.debug(&#010;-                    ""No tranaction policiy configured on TransactionErrorHandlerBuilder.&#010;Will try find it in the registry."");&#010;+                    ""No transaction policy configured on TransactionErrorHandlerBuilder.&#010;Will try find it in the registry."");&#010; &#010;             Map&lt;String, TransactedPolicy&gt; mapPolicy = routeContext.lookupByType(TransactedPolicy.class);&#010;             if (mapPolicy != null &amp;&amp; mapPolicy.size() == 1) {&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d41194b8/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/JtaTransactionPolicy.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/JtaTransactionPolicy.java&#010;b/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/JtaTransactionPolicy.java&#010;index 0917278..f856261 100644&#010;--- a/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/JtaTransactionPolicy.java&#010;+++ b/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/JtaTransactionPolicy.java&#010;@@ -126,7 +126,6 @@ public abstract class JtaTransactionPolicy implements TransactedPolicy&#010;{&#010; &#010;     protected JtaTransactionErrorHandler createTransactionErrorHandler(RouteContext routeContext,&#010;Processor processor,&#010;             ErrorHandlerBuilder builder) {&#010;-&#010;         JtaTransactionErrorHandler answer;&#010;         try {&#010;             answer = (JtaTransactionErrorHandler) builder.createErrorHandler(routeContext,&#010;processor);&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d41194b8/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/MandatoryJtaTransactionPolicy.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/MandatoryJtaTransactionPolicy.java&#010;b/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/MandatoryJtaTransactionPolicy.java&#010;index 5adbb8a..ef90018 100644&#010;--- a/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/MandatoryJtaTransactionPolicy.java&#010;+++ b/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/MandatoryJtaTransactionPolicy.java&#010;@@ -23,7 +23,6 @@ public class MandatoryJtaTransactionPolicy extends TransactionalJtaTransactionPo&#010; &#010;     @Override&#010;     public void run(final Runnable runnable) throws Exception {&#010;-&#010;         if (!hasActiveTransaction()) {&#010;             throw new IllegalStateException(&#010;                     ""Policy 'PROPAGATION_MANDATORY' is configured but no active transaction&#010;was found!"");&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d41194b8/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/NeverJtaTransactionPolicy.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/NeverJtaTransactionPolicy.java&#010;b/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/NeverJtaTransactionPolicy.java&#010;index 61a5a3f..ff1da9f 100644&#010;--- a/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/NeverJtaTransactionPolicy.java&#010;+++ b/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/NeverJtaTransactionPolicy.java&#010;@@ -23,7 +23,6 @@ public class NeverJtaTransactionPolicy extends TransactionalJtaTransactionPolicy&#010; &#010;     @Override&#010;     public void run(final Runnable runnable) throws Exception {&#010;-&#010;         if (hasActiveTransaction()) {&#010;             throw new IllegalStateException(&#010;                     ""Policy 'PROPAGATION_NEVER' is configured but an active transaction was&#010;found!"");&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d41194b8/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/NotSupportedJtaTransactionPolicy.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/NotSupportedJtaTransactionPolicy.java&#010;b/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/NotSupportedJtaTransactionPolicy.java&#010;index 20e9edf..5767b9f 100644&#010;--- a/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/NotSupportedJtaTransactionPolicy.java&#010;+++ b/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/NotSupportedJtaTransactionPolicy.java&#010;@@ -24,7 +24,6 @@ public class NotSupportedJtaTransactionPolicy extends TransactionalJtaTransactio&#010; &#010;     @Override&#010;     public void run(final Runnable runnable) throws Throwable {&#010;-&#010;         Transaction suspendedTransaction = null;&#010;         try {&#010;             suspendedTransaction = suspendTransaction();&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d41194b8/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/RequiresNewJtaTransactionPolicy.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/RequiresNewJtaTransactionPolicy.java&#010;b/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/RequiresNewJtaTransactionPolicy.java&#010;index 84dd20f..dc3fcc8 100644&#010;--- a/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/RequiresNewJtaTransactionPolicy.java&#010;+++ b/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/RequiresNewJtaTransactionPolicy.java&#010;@@ -24,7 +24,6 @@ public class RequiresNewJtaTransactionPolicy extends TransactionalJtaTransaction&#010; &#010;     @Override&#010;     public void run(final Runnable runnable) throws Throwable {&#010;-&#010;         Transaction suspendedTransaction = null;&#010;         try {&#010;             suspendedTransaction = suspendTransaction();&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d41194b8/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/TransactionErrorHandler.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/TransactionErrorHandler.java&#010;b/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/TransactionErrorHandler.java&#010;index 14e4557..57245b5 100644&#010;--- a/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/TransactionErrorHandler.java&#010;+++ b/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/TransactionErrorHandler.java&#010;@@ -357,7 +357,7 @@ public class TransactionErrorHandler extends ErrorHandlerSupport&#010;         if (!hasNext()) {&#010;             return null;&#010;         }&#010;-        List&lt;Processor&gt; answer = new ArrayList&lt;Processor&gt;(1);&#010;+        List&lt;Processor&gt; answer = new ArrayList&lt;&gt;(1);&#010;         answer.add(output);&#010;         return answer;&#010;     }&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d41194b8/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/TransactionalJtaTransactionPolicy.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/TransactionalJtaTransactionPolicy.java&#010;b/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/TransactionalJtaTransactionPolicy.java&#010;index 188b587..3b515c8 100644&#010;--- a/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/TransactionalJtaTransactionPolicy.java&#010;+++ b/components/camel-cdi/src/main/java/org/apache/camel/cdi/transaction/TransactionalJtaTransactionPolicy.java&#010;@@ -40,12 +40,6 @@ public abstract class TransactionalJtaTransactionPolicy extends JtaTransactionPo&#010;         }&#010;         try {&#010;             runnable.run();&#010;-        } catch (RuntimeException e) {&#010;-            rollback(isNew);&#010;-            throw e;&#010;-        } catch (Error e) {&#010;-            rollback(isNew);&#010;-            throw e;&#010;         } catch (Throwable e) {&#010;             rollback(isNew);&#010;             throw e;&#010;@@ -53,7 +47,6 @@ public abstract class TransactionalJtaTransactionPolicy extends JtaTransactionPo&#010;         if (isNew) {&#010;             commit();&#010;         }&#010;-        return;&#010;     }&#010; &#010;     private void begin() throws Exception {&#010;@@ -63,21 +56,9 @@ public abstract class TransactionalJtaTransactionPolicy extends JtaTransactionPo&#010;     private void commit() throws Exception {&#010;         try {&#010;             transactionManager.commit();&#010;-        } catch (HeuristicMixedException e) {&#010;-            throw new CamelException(""Unable to commit transaction"", e);&#010;-        } catch (HeuristicRollbackException e) {&#010;-            throw new CamelException(""Unable to commit transaction"", e);&#010;-        } catch (RollbackException e) {&#010;+        } catch (HeuristicMixedException | HeuristicRollbackException | RollbackException&#010;| SystemException e) {&#010;             throw new CamelException(""Unable to commit transaction"", e);&#010;-        } catch (SystemException e) {&#010;-            throw new CamelException(""Unable to commit transaction"", e);&#010;-        } catch (RuntimeException e) {&#010;-            rollback(true);&#010;-            throw e;&#010;-        } catch (Exception e) {&#010;-            rollback(true);&#010;-            throw e;&#010;-        } catch (Error e) {&#010;+        } catch (Exception | Error e) {&#010;             rollback(true);&#010;             throw e;&#010;         }&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C523e9812ac07429db3bf7a8a5c06d8db%40git.apache.org%3E,2017-04-14 14:53:30,commits,353.0,camel git commit: CAMEL-10685: Use multi-catch exceptions and polish
50,50,41.0,354.0,astefanu...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master d41194b8b -&gt; ec9ab4e0b&#010;&#010;&#010;Camel CDI: Support TransactionErrorHandler in Camel XML DSL&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/ec9ab4e0&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/ec9ab4e0&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/ec9ab4e0&#010;&#010;Branch: refs/heads/master&#010;Commit: ec9ab4e0be554528d7173df3af12bc275fb2289e&#010;Parents: d41194b&#010;Author: Antonin Stefanutti &lt;antonin@stefanutti.fr&gt;&#010;Authored: Fri Apr 14 17:39:16 2017 +0200&#010;Committer: Antonin Stefanutti &lt;antonin@stefanutti.fr&gt;&#010;Committed: Fri Apr 14 17:39:16 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../src/main/java/org/apache/camel/cdi/xml/ErrorHandlerType.java | 4 +++-&#010; 1 file changed, 3 insertions(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/ec9ab4e0/components/camel-cdi/src/main/java/org/apache/camel/cdi/xml/ErrorHandlerType.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-cdi/src/main/java/org/apache/camel/cdi/xml/ErrorHandlerType.java&#010;b/components/camel-cdi/src/main/java/org/apache/camel/cdi/xml/ErrorHandlerType.java&#010;index 57b0860..1f9d4c0 100644&#010;--- a/components/camel-cdi/src/main/java/org/apache/camel/cdi/xml/ErrorHandlerType.java&#010;+++ b/components/camel-cdi/src/main/java/org/apache/camel/cdi/xml/ErrorHandlerType.java&#010;@@ -25,6 +25,8 @@ import org.apache.camel.builder.ErrorHandlerBuilder;&#010; import org.apache.camel.builder.LoggingErrorHandlerBuilder;&#010; import org.apache.camel.builder.NoErrorHandlerBuilder;&#010; &#010;+import org.apache.camel.cdi.transaction.JtaTransactionErrorHandlerBuilder;&#010;+&#010; /**&#010;  * Used to configure the errorHandler type&#010;  */&#010;@@ -54,7 +56,7 @@ public enum ErrorHandlerType {&#010;         case NoErrorHandler:&#010;             return NoErrorHandlerBuilder.class;&#010;         case TransactionErrorHandler:&#010;-            throw new UnsupportedOperationException(""Unsupported error handler: "" + this);&#010;+            return JtaTransactionErrorHandlerBuilder.class;&#010;         default:&#010;             throw new IllegalArgumentException(""Unknown error handler: "" + this);&#010;         }&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C38066940ce0a47efa5600056b64f3d22%40git.apache.org%3E,2017-04-14 15:39:24,commits,354.0,camel git commit: Camel CDI: Support TransactionErrorHandler in Camel XML DSL
51,51,43.0,177.0,erevkub1,Thanks for your quick response. I also tried using  multiple routebuilder and&#010;tried a small POC and it worked. Please let em know if this is a good&#010;option?&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Multiple-from-end-points-traversing-to-different-routes-tp5797650p5797757.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492190123294-5797757.post%40n5.nabble.com%3E,2017-04-14 17:15:23,users,178.0,    Re: Multiple from end points traversing to different routes
52,52,45.0,178.0,DariusX,"The ""Camel in Action"" book says ""Prefer to use beans over processors"" (pg 112&#010;in 2nd Edition), because they're not dependent on the Camel API. &#010;&#010;This leads me to a follow-up question: &#010;- if we need to tranform between 2 custom formats (i.e. annot use an&#010;existing Dataformat);and,&#010;- also do not need the Exchange, but can transform the body&#010;&#010;With those assumptions, should we also prefer to use Beans over a&#010;Custom-Dataformat or Camel Transformer? Or, are their situations where those&#010;two are useful even if one does not need anything but the body()  ?&#010;&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Transformation-options-tp5797759.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492202353675-5797759.post%40n5.nabble.com%3E,2017-04-14 20:39:13,users,179.0,Transformation options
53,53,48.0,179.0,Claus Ibsen,"Hi&#010;&#010;Try to think how you would write the java api for the message&#010;transformation without Camel. What would the input and output's be&#010;etc.&#010;&#010;Then try to write unit test for these transformation that dont use&#010;Camel if possible.&#010;&#010;When using beans the return type is the message body, and as such if&#010;you need to enrich with message headers as well, you can bind the&#010;@Headers Map as parameter and add your headers on this.&#010;&#010;But if you are comfortable with the Camel API on Exchange then a&#010;processor is fine as well. It just has a direct dependency on Camel&#010;and is more low level, eg you need to know about IN vs OUT message&#010;etc. And from the code you cannot see what is the expected input and&#010;output java/data types etc.&#010;&#010;A processor however is faster at runtime as its just a direct method&#010;call, where as a bean is called using a bit of reflection to find the&#010;relevant method and then bean bindings etc. For people whom care about&#010;CPU cycles. But the overhead is negligible.&#010;&#010;&#010;&#010;On Fri, Apr 14, 2017 at 10:39 PM, DariusX &lt;dariuscooper@gmail.com&gt; wrote:&#010;&gt; The ""Camel in Action"" book says ""Prefer to use beans over processors"" (pg 112&#010;&gt; in 2nd Edition), because they're not dependent on the Camel API.&#010;&gt;&#010;&gt; This leads me to a follow-up question:&#010;&gt; - if we need to tranform between 2 custom formats (i.e. annot use an&#010;&gt; existing Dataformat);and,&#010;&gt; - also do not need the Exchange, but can transform the body&#010;&gt;&#010;&gt; With those assumptions, should we also prefer to use Beans over a&#010;&gt; Custom-Dataformat or Camel Transformer? Or, are their situations where those&#010;&gt; two are useful even if one does not need anything but the body()  ?&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt; --&#010;&gt; View this message in context: http://camel.465427.n5.nabble.com/Transformation-options-tp5797759.html&#010;&gt; Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;&#010;&#010;-- &#010;Claus Ibsen&#010;-----------------&#010;http://davsclaus.com @davsclaus&#010;Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yNn27z64jcBOZuPJy%3D7E79eZgLF7E6%3DUs71nK-XkMK2nNw%40mail.gmail.com%3E,2017-04-16 07:27:20,users,180.0,  Re: Transformation options
54,54,46.0,180.0,contactreji,"Hello guys&#010;&#010;I am doing a POC on camel websockets. I have some data being pushed from UI&#010;layer over websockets&#010;&#010;from(""websocket://0.0.0.0:9293/hotelsearch"")&#010;                .log(LoggingLevel.INFO,""TestServices"",""Received Search&#010;Request data ${body}"")&#010;                .removeHeaders(""*"")&#010;                .to(""direct:Authenticate"")...... and so On...&#010;&#010;This deploys perfectly fine as long as I have no other modules deployed on&#010;the same server. ( Deployed as a springboot application). Another project is&#010;running on same server which binds to 9292 for its websocket consumer&#010;endpoint . And for the above module I changed it to 9293  to avoid port&#010;conflict. &#010;&#010;But surprisingly, when i start this app, it tries to bind port *9292*&#010;instead of *9293* and as a result, I get port binding error.&#010;&#010;*Will not consumer endpoint like from(websocket://0.0.0.0:9293/hotelsearch)&#010;bind to 9293? Why is it trying to bind to 9292? Could this be a bug in&#010;Websocket Component?&#010;*&#010;Cheers&#010;Reji&#010;&#010;&#010;&#010;&#010;&#010;-----&#010;Reji Mathews&#010;Sr. Developer - Middleware Integration / SOA ( Open Source - Apache Camel &amp; Jboss Fuse&#010;ESB | Mule ESB )&#010;LinkedIn - http://in.linkedin.com/pub/reji-mathews/31/9a2/40a&#010;Twitter - reji_mathews&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Camel-Websocket-Binding-error-tp5797760.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492314558425-5797760.post%40n5.nabble.com%3E,2017-04-16 03:49:18,users,181.0,Camel Websocket // Binding error
55,55,49.0,181.0,Claus Ibsen,"Hi&#010;&#010;Maybe there is some old code with 9292 or and old java / jvm process&#010;running that take up the old port, or something.&#010;&#010;On Sun, Apr 16, 2017 at 5:49 AM, contactreji &lt;contactreji@gmail.com&gt; wrote:&#010;&gt; Hello guys&#010;&gt;&#010;&gt; I am doing a POC on camel websockets. I have some data being pushed from UI&#010;&gt; layer over websockets&#010;&gt;&#010;&gt; from(""websocket://0.0.0.0:9293/hotelsearch"")&#010;&gt;                 .log(LoggingLevel.INFO,""TestServices"",""Received Search&#010;&gt; Request data ${body}"")&#010;&gt;                 .removeHeaders(""*"")&#010;&gt;                 .to(""direct:Authenticate"")...... and so On...&#010;&gt;&#010;&gt; This deploys perfectly fine as long as I have no other modules deployed on&#010;&gt; the same server. ( Deployed as a springboot application). Another project is&#010;&gt; running on same server which binds to 9292 for its websocket consumer&#010;&gt; endpoint . And for the above module I changed it to 9293  to avoid port&#010;&gt; conflict.&#010;&gt;&#010;&gt; But surprisingly, when i start this app, it tries to bind port *9292*&#010;&gt; instead of *9293* and as a result, I get port binding error.&#010;&gt;&#010;&gt; *Will not consumer endpoint like from(websocket://0.0.0.0:9293/hotelsearch)&#010;&gt; bind to 9293? Why is it trying to bind to 9292? Could this be a bug in&#010;&gt; Websocket Component?&#010;&gt; *&#010;&gt; Cheers&#010;&gt; Reji&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt; -----&#010;&gt; Reji Mathews&#010;&gt; Sr. Developer - Middleware Integration / SOA ( Open Source - Apache Camel &amp; Jboss&#010;Fuse ESB | Mule ESB )&#010;&gt; LinkedIn - http://in.linkedin.com/pub/reji-mathews/31/9a2/40a&#010;&gt; Twitter - reji_mathews&#010;&gt; --&#010;&gt; View this message in context: http://camel.465427.n5.nabble.com/Camel-Websocket-Binding-error-tp5797760.html&#010;&gt; Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;&#010;&#010;-- &#010;Claus Ibsen&#010;-----------------&#010;http://davsclaus.com @davsclaus&#010;Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yNnHqnw1uMwUAdXDpQzi372xVMBxWpBWfWConVFEG1E4ww%40mail.gmail.com%3E,2017-04-16 07:27:52,users,182.0,  Re: Camel Websocket // Binding error
56,56,47.0,182.0,Claus Ibsen,"Hi&#010;&#010;Recently I stumbled on a tweet about an Apache Camel review and&#010;therefore I was intrigued.&#010;&#010;It was a review from a site I have not head about before - trustradius.&#010;&#010;You can read the text for a minute or two before I asks for login so I&#010;was skeptic at first.&#010;&#010;Well this morning I logged in using linkedin and there was 11 reviews,&#010;which provides good insight for Camel developers like myself to get&#010;feedback from real users. Surprisingly those reviews are fairly new&#010;from late 2016 and up till today. So they seem more relevant than eg&#010;reviews from 2009 etc.&#010;&#010;The reviews are at (mind you need to login via linkedin or signup)&#010;https://www.trustradius.com/products/apache-camel/reviews&#010;&#010;&#010;-- &#010;Claus Ibsen&#010;-----------------&#010;http://davsclaus.com @davsclaus&#010;Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yNmmyxHaQg1vVfq%3DNH7KD_H3dUjyi5S2yhdjYGqrn2TGWw%40mail.gmail.com%3E,2017-04-16 07:22:58,users,183.0,Apache Camel reviews
57,57,50.0,534.0,Claus Ibsen (JIRA),"Claus Ibsen created CAMEL-11152:&#010;-----------------------------------&#010;&#010;             Summary: camel-ssh - Allow to use message headers for username/password&#010;                 Key: CAMEL-11152&#010;                 URL: https://issues.apache.org/jira/browse/CAMEL-11152&#010;             Project: Camel&#010;          Issue Type: Improvement&#010;          Components: camel-ssh&#010;            Reporter: Claus Ibsen&#010;            Priority: Minor&#010;             Fix For: Future&#010;&#010;&#010;See nabble&#010;http://camel.465427.n5.nabble.com/Camel-SSH-dynamic-values-tp5797435p5797545.html&#010;&#010;In the &#010;org.apache.camel.component.ssh.SshHelper#sendExecCommand&#010;&#010;We should allow the exchange to provide a username/password to be used, so you can more dynamic&#010;reuse the same ssh endpoint but for different logins.&#010;&#010;Using toD has a drawback of creating a new endpoint per username.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064259.1492327880000.291543.1492327901673%40Atlassian.JIRA%3E,2017-04-16 07:31:41,issues,538.0,  [jira] [Created] (CAMEL-11152) camel-ssh - Allow to use message headers for username/password
58,58,51.0,146.0,Claus Ibsen,"Hi&#010;&#010;I logged a ticket so we can support username/password headers in the future&#010;https://issues.apache.org/jira/browse/CAMEL-11152&#010;&#010;Contributions is welcome&#010;&#010;On Thu, Apr 13, 2017 at 3:40 AM, urwithsumit &lt;sumit.kushwaha@gmail.com&gt; wrote:&#010;&gt; @Claus, toD() did worked for user id and password.&#010;&gt;&#010;&gt; @Zoran, the approach gives a null pointer exception for user id,  RSA token&#010;&gt; combination. I did not tried though with the password. For dynamic value i&#010;&gt; thus will go with toD()&#010;&gt;&#010;&gt;&#010;&gt; Still struggling to get it work with RSA token code.&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt; --&#010;&gt; View this message in context: http://camel.465427.n5.nabble.com/Camel-SSH-dynamic-values-tp5797435p5797545.html&#010;&gt; Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;&#010;&#010;-- &#010;Claus Ibsen&#010;-----------------&#010;http://davsclaus.com @davsclaus&#010;Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yN%3DsvdKvndZbWOCDESCMTj6qHqcHe%3DcpCAznnbj_aY9LMA%40mail.gmail.com%3E,2017-04-16 07:31:43,users,147.0,          Re: Camel SSH - dynamic values
59,59,54.0,535.0,onder sezgin (JIRA),"&#010;     [ https://issues.apache.org/jira/browse/CAMEL-11152?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&#010;]&#010;&#010;onder sezgin reassigned CAMEL-11152:&#010;------------------------------------&#010;&#010;    Assignee: onder sezgin&#010;&#010;&gt; camel-ssh - Allow to use message headers for username/password&#010;&gt; --------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11152&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11152&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Improvement&#010;&gt;          Components: camel-ssh&#010;&gt;            Reporter: Claus Ibsen&#010;&gt;            Assignee: onder sezgin&#010;&gt;            Priority: Minor&#010;&gt;             Fix For: Future&#010;&gt;&#010;&gt;&#010;&gt; See nabble&#010;&gt; http://camel.465427.n5.nabble.com/Camel-SSH-dynamic-values-tp5797435p5797545.html&#010;&gt; In the &#010;&gt; org.apache.camel.component.ssh.SshHelper#sendExecCommand&#010;&gt; We should allow the exchange to provide a username/password to be used, so you can more&#010;dynamic reuse the same ssh endpoint but for different logins.&#010;&gt; Using toD has a drawback of creating a new endpoint per username.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064259.1492327880000.295602.1492428761672%40Atlassian.JIRA%3E,2017-04-17 11:32:41,issues,539.0,  [jira] [Assigned] (CAMEL-11152) camel-ssh - Allow to use message headers for username/password
60,60,80.0,204.0,onders86,"GitHub user onders86 opened a pull request:&#010;&#010;    https://github.com/apache/camel/pull/1635&#010;&#010;    CAMEL-11152 - set credentials for ssh connection through headers&#010;&#010;    adoc updated and ut provided.&#010;&#010;You can merge this pull request into a Git repository by running:&#010;&#010;    $ git pull https://github.com/onders86/camel CAMEL-11152&#010;&#010;Alternatively you can review and apply these changes as the patch at:&#010;&#010;    https://github.com/apache/camel/pull/1635.patch&#010;&#010;To close this pull request, make a commit to your master/trunk branch&#010;with (at least) the following in the commit message:&#010;&#010;    This closes #1635&#010;    &#010;----&#010;commit 89b1738e437df3ae3d79d424dc0dc0bb3b8b02f0&#010;Author: onders86 &lt;ondersezgin@gmail.com&gt;&#010;Date:   2017-04-18T06:06:39Z&#010;&#010;    CAMEL-11152 - set credentials for ssh connection through headers&#010;&#010;----&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3Cgit-pr-1635-camel%40git.apache.org%3E,2017-04-18 07:22:10,mail,204.0,[GitHub] camel pull request #1635: CAMEL-11152 - set credentials for ssh connection t...
61,61,81.0,536.0,ASF GitHub Bot (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11152?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15972234#comment-15972234&#010;] &#010;&#010;ASF GitHub Bot commented on CAMEL-11152:&#010;----------------------------------------&#010;&#010;GitHub user onders86 opened a pull request:&#010;&#010;    https://github.com/apache/camel/pull/1635&#010;&#010;    CAMEL-11152 - set credentials for ssh connection through headers&#010;&#010;    adoc updated and ut provided.&#010;&#010;You can merge this pull request into a Git repository by running:&#010;&#010;    $ git pull https://github.com/onders86/camel CAMEL-11152&#010;&#010;Alternatively you can review and apply these changes as the patch at:&#010;&#010;    https://github.com/apache/camel/pull/1635.patch&#010;&#010;To close this pull request, make a commit to your master/trunk branch&#010;with (at least) the following in the commit message:&#010;&#010;    This closes #1635&#010;    &#010;----&#010;commit 89b1738e437df3ae3d79d424dc0dc0bb3b8b02f0&#010;Author: onders86 &lt;ondersezgin@gmail.com&gt;&#010;Date:   2017-04-18T06:06:39Z&#010;&#010;    CAMEL-11152 - set credentials for ssh connection through headers&#010;&#010;----&#010;&#010;&#010;&gt; camel-ssh - Allow to use message headers for username/password&#010;&gt; --------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11152&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11152&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Improvement&#010;&gt;          Components: camel-ssh&#010;&gt;            Reporter: Claus Ibsen&#010;&gt;            Assignee: onder sezgin&#010;&gt;            Priority: Minor&#010;&gt;             Fix For: Future&#010;&gt;&#010;&gt;&#010;&gt; See nabble&#010;&gt; http://camel.465427.n5.nabble.com/Camel-SSH-dynamic-values-tp5797435p5797545.html&#010;&gt; In the &#010;&gt; org.apache.camel.component.ssh.SshHelper#sendExecCommand&#010;&gt; We should allow the exchange to provide a username/password to be used, so you can more&#010;dynamic reuse the same ssh endpoint but for different logins.&#010;&gt; Using toD has a drawback of creating a new endpoint per username.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064259.1492327880000.303269.1492500162438%40Atlassian.JIRA%3E,2017-04-18 07:22:42,issues,540.0,  [jira] [Commented] (CAMEL-11152) camel-ssh - Allow to use message headers for username/password
62,62,119.0,368.0,acosent...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master b3f0c7407 -&gt; 4f01b7861&#010;&#010;&#010;CAMEL-11152 - naming fix with the impl&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/4f01b786&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/4f01b786&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/4f01b786&#010;&#010;Branch: refs/heads/master&#010;Commit: 4f01b7861e3cced634926dc4baa3377c9fa32a47&#010;Parents: b3f0c74&#010;Author: onders86 &lt;ondersezgin@gmail.com&gt;&#010;Authored: Tue Apr 18 09:06:39 2017 +0300&#010;Committer: Andrea Cosentino &lt;ancosen@gmail.com&gt;&#010;Committed: Tue Apr 18 13:21:20 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../camel-ssh/src/main/docs/ssh-component.adoc  |  6 ++++-&#010; .../camel/component/ssh/SshConstants.java       | 24 ++++++++++++++++++&#010; .../apache/camel/component/ssh/SshConsumer.java |  5 ++--&#010; .../apache/camel/component/ssh/SshHelper.java   | 20 ++++++++++++---&#010; .../apache/camel/component/ssh/SshProducer.java |  6 ++++-&#010; .../component/ssh/SshComponentProducerTest.java | 26 ++++++++++++++++++++&#010; 6 files changed, 80 insertions(+), 7 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/4f01b786/components/camel-ssh/src/main/docs/ssh-component.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-ssh/src/main/docs/ssh-component.adoc b/components/camel-ssh/src/main/docs/ssh-component.adoc&#010;index 3db3d0e..d38b469 100644&#010;--- a/components/camel-ssh/src/main/docs/ssh-component.adoc&#010;+++ b/components/camel-ssh/src/main/docs/ssh-component.adoc&#010;@@ -141,7 +141,11 @@ and use that for authentication.&#010; `keyPairProvider` has been set, and if so, it will use that to for&#010; certificate based authentication.&#010; 3.  If neither `certResource` nor `keyPairProvider` are set, it will use&#010;-the `username` and `password` options for authentication.&#010;+the `username` and `password` options for authentication. Even though the `username` &#010;+and `password` are provided in the endpoint configuration and headers set with &#010;+`SshConstants.USERNAME_HEADER` (`CamelSshUsername`) and &#010;+`SshConstants.PASSWORD_HEADER` (`CamelSshPassword`), the endpoint &#010;+configuration is surpassed and credentials set in the headers are used.&#010; &#010; The following route fragment shows an SSH polling consumer using a&#010; certificate from the classpath.&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/4f01b786/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshConstants.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshConstants.java&#010;b/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshConstants.java&#010;new file mode 100644&#010;index 0000000..f3f2527&#010;--- /dev/null&#010;+++ b/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshConstants.java&#010;@@ -0,0 +1,24 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.component.ssh;&#010;+&#010;+public interface SshConstants {&#010;+&#010;+    String USERNAME_HEADER = ""CamelSshUsername"";&#010;+    String PASSWORD_HEADER = ""CamelSshPassword"";&#010;+&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/4f01b786/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshConsumer.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshConsumer.java&#010;b/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshConsumer.java&#010;index da12bd2..3e07bb9 100644&#010;--- a/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshConsumer.java&#010;+++ b/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshConsumer.java&#010;@@ -56,9 +56,10 @@ public class SshConsumer extends ScheduledPollConsumer {&#010;         }&#010;         &#010;         String command = endpoint.getPollCommand();&#010;-        SshResult result = SshHelper.sendExecCommand(command, endpoint, client);&#010;-&#010;         Exchange exchange = endpoint.createExchange();&#010;+        &#010;+        SshResult result = SshHelper.sendExecCommand(exchange.getIn().getHeaders(), command,&#010;endpoint, client);&#010;+        &#010;         exchange.getIn().setBody(result.getStdout());&#010;         exchange.getIn().setHeader(SshResult.EXIT_VALUE, result.getExitValue());&#010;         exchange.getIn().setHeader(SshResult.STDERR, result.getStderr());&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/4f01b786/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshHelper.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshHelper.java&#010;b/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshHelper.java&#010;index 6c9ea02..972bb8a 100644&#010;--- a/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshHelper.java&#010;+++ b/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshHelper.java&#010;@@ -19,6 +19,7 @@ package org.apache.camel.component.ssh;&#010; import java.io.ByteArrayInputStream;&#010; import java.io.ByteArrayOutputStream;&#010; import java.security.KeyPair;&#010;+import java.util.Map;&#010; &#010; import org.apache.camel.RuntimeCamelException;&#010; import org.apache.sshd.ClientChannel;&#010;@@ -38,7 +39,7 @@ public final class SshHelper {&#010;     private SshHelper() {&#010;     }&#010;     &#010;-    public static SshResult sendExecCommand(String command, SshEndpoint endpoint, SshClient&#010;client) throws Exception {&#010;+    public static SshResult sendExecCommand(Map&lt;String, Object&gt; headers, String command,&#010;SshEndpoint endpoint, SshClient client) throws Exception {&#010;         SshResult result = null;&#010;         &#010;         SshConfiguration configuration = endpoint.getConfiguration();&#010;@@ -81,8 +82,21 @@ public final class SshHelper {&#010;                 KeyPair pair = keyPairProvider.loadKey(configuration.getKeyType());&#010;                 authResult = session.authPublicKey(configuration.getUsername(), pair);&#010;             } else {&#010;-                LOG.debug(""Attempting to authenticate username '{}' using Password..."", configuration.getUsername());&#010;-                authResult = session.authPassword(configuration.getUsername(), configuration.getPassword());&#010;+                String userName = configuration.getUsername();&#010;+                String password = configuration.getPassword();&#010;+                &#010;+                Object userNameHeaderObj = headers.get(SshConstants.USERNAME_HEADER);&#010;+                if (userNameHeaderObj != null &amp;&amp; userNameHeaderObj instanceof String)&#010;{&#010;+                    userName = (String) headers.get(SshConstants.USERNAME_HEADER);&#010;+                }&#010;+                &#010;+                Object passwordHeaderObj = headers.get(SshConstants.PASSWORD_HEADER);&#010;+                if (passwordHeaderObj != null &amp;&amp; passwordHeaderObj instanceof String)&#010;{&#010;+                    password = (String) headers.get(SshConstants.PASSWORD_HEADER);&#010;+                }&#010;+                &#010;+                LOG.debug(""Attempting to authenticate username '{}' using Password..."", userName);&#010;+                authResult = session.authPassword(userName, password);&#010;             }&#010;     &#010;             authResult.await(configuration.getTimeout());&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/4f01b786/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshProducer.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshProducer.java&#010;b/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshProducer.java&#010;index 7c4b663..9a731cf 100644&#010;--- a/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshProducer.java&#010;+++ b/components/camel-ssh/src/main/java/org/apache/camel/component/ssh/SshProducer.java&#010;@@ -16,6 +16,8 @@&#010;  */&#010; package org.apache.camel.component.ssh;&#010; &#010;+import java.util.Map;&#010;+&#010; import org.apache.camel.CamelExchangeException;&#010; import org.apache.camel.Exchange;&#010; import org.apache.camel.Message;&#010;@@ -54,9 +56,11 @@ public class SshProducer extends DefaultProducer {&#010;     public void process(Exchange exchange) throws Exception {&#010;         final Message in = exchange.getIn();&#010;         String command = in.getMandatoryBody(String.class);&#010;+        &#010;+        final Map&lt;String, Object&gt; headers = exchange.getIn().getHeaders();&#010; &#010;         try {&#010;-            SshResult result = SshHelper.sendExecCommand(command, endpoint, client);&#010;+            SshResult result = SshHelper.sendExecCommand(headers, command, endpoint, client);&#010;             exchange.getOut().setBody(result.getStdout());&#010;             exchange.getOut().setHeader(SshResult.EXIT_VALUE, result.getExitValue());&#010;             exchange.getOut().setHeader(SshResult.STDERR, result.getStderr());&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/4f01b786/components/camel-ssh/src/test/java/org/apache/camel/component/ssh/SshComponentProducerTest.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-ssh/src/test/java/org/apache/camel/component/ssh/SshComponentProducerTest.java&#010;b/components/camel-ssh/src/test/java/org/apache/camel/component/ssh/SshComponentProducerTest.java&#010;index c34f565..b781e33 100644&#010;--- a/components/camel-ssh/src/test/java/org/apache/camel/component/ssh/SshComponentProducerTest.java&#010;+++ b/components/camel-ssh/src/test/java/org/apache/camel/component/ssh/SshComponentProducerTest.java&#010;@@ -16,6 +16,9 @@&#010;  */&#010; package org.apache.camel.component.ssh;&#010; &#010;+import java.util.HashMap;&#010;+import java.util.Map;&#010;+&#010; import org.apache.camel.builder.RouteBuilder;&#010; import org.apache.camel.component.mock.MockEndpoint;&#010; &#010;@@ -79,6 +82,25 @@ public class SshComponentProducerTest extends SshComponentTestSupport {&#010; &#010;         assertMockEndpointsSatisfied();&#010;     }&#010;+    &#010;+    @Test&#010;+    public void testCredentialsAsHeaders() throws Exception {&#010;+        final String msg = ""test\n"";&#010;+&#010;+        MockEndpoint mock = getMockEndpoint(""mock:password"");&#010;+        mock.expectedMinimumMessageCount(1);&#010;+        mock.expectedBodiesReceived(msg);&#010;+        mock.expectedHeaderReceived(SshResult.EXIT_VALUE, 0);&#010;+        mock.expectedHeaderReceived(SshResult.STDERR, ""Error:test\n"");&#010;+        &#010;+        Map&lt;String, Object&gt; headers = new HashMap&lt;String, Object&gt;();&#010;+        headers.put(SshConstants.USERNAME_HEADER, ""smx"");&#010;+        headers.put(SshConstants.PASSWORD_HEADER, ""smx"");&#010;+&#010;+        template.sendBodyAndHeaders(""direct:sshCredentialsWithHeaders"", msg, headers);&#010;+&#010;+        assertMockEndpointsSatisfied();&#010;+    }&#010; &#010;     @Override&#010;     protected RouteBuilder createRouteBuilder() throws Exception {&#010;@@ -92,6 +114,10 @@ public class SshComponentProducerTest extends SshComponentTestSupport&#010;{&#010;                 from(""direct:ssh"")&#010;                         .to(""ssh://smx:smx@localhost:"" + port + ""?timeout=3000"")&#010;                         .to(""mock:password"");&#010;+                &#010;+                from(""direct:sshCredentialsWithHeaders"")&#010;+                        .to(""ssh://localhost:"" + port + ""?timeout=3000"")&#010;+                        .to(""mock:password"");&#010;             }&#010;         };&#010;     }&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cfa7ce0ca871b470d8708d03086386d92%40git.apache.org%3E,2017-04-18 11:21:42,commits,368.0,camel git commit: CAMEL-11152 - naming fix with the impl
63,63,120.0,537.0,Andrea Cosentino (JIRA),"&#010;     [ https://issues.apache.org/jira/browse/CAMEL-11152?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&#010;]&#010;&#010;Andrea Cosentino updated CAMEL-11152:&#010;-------------------------------------&#010;    Fix Version/s:     (was: Future)&#010;                   2.19.0&#010;&#010;&gt; camel-ssh - Allow to use message headers for username/password&#010;&gt; --------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11152&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11152&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Improvement&#010;&gt;          Components: camel-ssh&#010;&gt;            Reporter: Claus Ibsen&#010;&gt;            Assignee: onder sezgin&#010;&gt;            Priority: Minor&#010;&gt;             Fix For: 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; See nabble&#010;&gt; http://camel.465427.n5.nabble.com/Camel-SSH-dynamic-values-tp5797435p5797545.html&#010;&gt; In the &#010;&gt; org.apache.camel.component.ssh.SshHelper#sendExecCommand&#010;&gt; We should allow the exchange to provide a username/password to be used, so you can more&#010;dynamic reuse the same ssh endpoint but for different logins.&#010;&gt; Using toD has a drawback of creating a new endpoint per username.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064259.1492327880000.304954.1492514561681%40Atlassian.JIRA%3E,2017-04-18 11:22:41,issues,541.0,  [jira] [Updated] (CAMEL-11152) camel-ssh - Allow to use message headers for username/password
64,64,121.0,538.0,Andrea Cosentino (JIRA),"&#010;     [ https://issues.apache.org/jira/browse/CAMEL-11152?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&#010;]&#010;&#010;Andrea Cosentino resolved CAMEL-11152.&#010;--------------------------------------&#010;    Resolution: Fixed&#010;&#010;&gt; camel-ssh - Allow to use message headers for username/password&#010;&gt; --------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11152&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11152&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Improvement&#010;&gt;          Components: camel-ssh&#010;&gt;            Reporter: Claus Ibsen&#010;&gt;            Assignee: onder sezgin&#010;&gt;            Priority: Minor&#010;&gt;             Fix For: 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; See nabble&#010;&gt; http://camel.465427.n5.nabble.com/Camel-SSH-dynamic-values-tp5797435p5797545.html&#010;&gt; In the &#010;&gt; org.apache.camel.component.ssh.SshHelper#sendExecCommand&#010;&gt; We should allow the exchange to provide a username/password to be used, so you can more&#010;dynamic reuse the same ssh endpoint but for different logins.&#010;&gt; Using toD has a drawback of creating a new endpoint per username.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064259.1492327880000.304958.1492514621638%40Atlassian.JIRA%3E,2017-04-18 11:23:41,issues,542.0,  [jira] [Resolved] (CAMEL-11152) camel-ssh - Allow to use message headers for username/password
65,65,122.0,205.0,onders86,"Github user onders86 closed the pull request at:&#010;&#010;    https://github.com/apache/camel/pull/1635&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170418112447.E9CAADFBDA%40git1-us-west.apache.org%3E,2017-04-18 11:24:47,mail,205.0,  [GitHub] camel pull request #1635: CAMEL-11152 - set credentials for ssh connection t...
68,68,52.0,183.0,Priyanka Gopinath,"I have this special usecase where I want to change the threadpool size and&#010;thread pool key based upon the endpoint that is getting called. All of&#010;these values are available in the configuration on the exchange.&#010;&#010;For eg :&#010;&#010;Endpoint A =&gt; Threadpool(5) =&gt; Threadpool key(A)&#010;Endpoint B =&gt; Threadpool(10) =&gt; Threadpool key(Z)&#010;Endpoint C =&gt; Threadpool(5) =&gt; Threadpool Key(A)&#010;&#010;However, in my hystrix route, all of the params for Hystrix EIP are strings&#010;and I aven't been able to figure the a way to evaluate the same.&#010;&#010;from(""direct:something"")&#010;.hystrix()&#010;.threadPoolkey(hystrix.???? How to inject this value)&#010;.end()&#010;.to(""direct:http-endpoint"");&#010;&#010;I also tried creating a HystrixThreadpoolDefinition and tried setting it&#010;as .hystrix().hystrixConfiguration(configuration). But it comes back to the&#010;same question of how to pass in this configuration. Method calls return&#010;ValueBuilders and I could not cast them to the strings/configDefinitions.&#010;&#010;Please suggest the correct way of doing it.&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAOFZOdXeJgWtpDdNrU%2BX0-w3kt-GQOXAOdY-5q8MQ3A47jNJkA%40mail.gmail.com%3E,2017-04-16 22:46:11,users,184.0,How to dynamically inject hystrix properties?
69,69,111.0,184.0,Claus Ibsen,"Maybe create 3 different routes where each hystrix is using A, B or C&#010;keys and then call the appropiate route.&#010;&#010;On Mon, Apr 17, 2017 at 12:46 AM, Priyanka Gopinath &lt;priyanka@karnam.net&gt; wrote:&#010;&gt; I have this special usecase where I want to change the threadpool size and&#010;&gt; thread pool key based upon the endpoint that is getting called. All of&#010;&gt; these values are available in the configuration on the exchange.&#010;&gt;&#010;&gt; For eg :&#010;&gt;&#010;&gt; Endpoint A =&gt; Threadpool(5) =&gt; Threadpool key(A)&#010;&gt; Endpoint B =&gt; Threadpool(10) =&gt; Threadpool key(Z)&#010;&gt; Endpoint C =&gt; Threadpool(5) =&gt; Threadpool Key(A)&#010;&gt;&#010;&gt; However, in my hystrix route, all of the params for Hystrix EIP are strings&#010;&gt; and I aven't been able to figure the a way to evaluate the same.&#010;&gt;&#010;&gt; from(""direct:something"")&#010;&gt; .hystrix()&#010;&gt; .threadPoolkey(hystrix.???? How to inject this value)&#010;&gt; .end()&#010;&gt; .to(""direct:http-endpoint"");&#010;&gt;&#010;&gt; I also tried creating a HystrixThreadpoolDefinition and tried setting it&#010;&gt; as .hystrix().hystrixConfiguration(configuration). But it comes back to the&#010;&gt; same question of how to pass in this configuration. Method calls return&#010;&gt; ValueBuilders and I could not cast them to the strings/configDefinitions.&#010;&gt;&#010;&gt; Please suggest the correct way of doing it.&#010;&#010;&#010;&#010;-- &#010;Claus Ibsen&#010;-----------------&#010;http://davsclaus.com @davsclaus&#010;Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yNnAjdPk%2BhtrYF3zGJqVy9NqT%2BZcZBEhfMm6mG3uhZGMdQ%40mail.gmail.com%3E,2017-04-18 10:44:12,users,185.0,  Re: How to dynamically inject hystrix properties?
70,70,160.0,185.0,Priyanka Gopinath,"Thank you for the response. I was able to inject values dynamically after&#010;creating a new hystrix route per endpoint.&#010;&#010;On Tue, Apr 18, 2017 at 3:44 AM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt; wrote:&#010;&#010;&gt; Maybe create 3 different routes where each hystrix is using A, B or C&#010;&gt; keys and then call the appropiate route.&#010;&gt;&#010;&gt; On Mon, Apr 17, 2017 at 12:46 AM, Priyanka Gopinath &lt;priyanka@karnam.net&gt;&#010;&gt; wrote:&#010;&gt; &gt; I have this special usecase where I want to change the threadpool size&#010;&gt; and&#010;&gt; &gt; thread pool key based upon the endpoint that is getting called. All of&#010;&gt; &gt; these values are available in the configuration on the exchange.&#010;&gt; &gt;&#010;&gt; &gt; For eg :&#010;&gt; &gt;&#010;&gt; &gt; Endpoint A =&gt; Threadpool(5) =&gt; Threadpool key(A)&#010;&gt; &gt; Endpoint B =&gt; Threadpool(10) =&gt; Threadpool key(Z)&#010;&gt; &gt; Endpoint C =&gt; Threadpool(5) =&gt; Threadpool Key(A)&#010;&gt; &gt;&#010;&gt; &gt; However, in my hystrix route, all of the params for Hystrix EIP are&#010;&gt; strings&#010;&gt; &gt; and I aven't been able to figure the a way to evaluate the same.&#010;&gt; &gt;&#010;&gt; &gt; from(""direct:something"")&#010;&gt; &gt; .hystrix()&#010;&gt; &gt; .threadPoolkey(hystrix.???? How to inject this value)&#010;&gt; &gt; .end()&#010;&gt; &gt; .to(""direct:http-endpoint"");&#010;&gt; &gt;&#010;&gt; &gt; I also tried creating a HystrixThreadpoolDefinition and tried setting it&#010;&gt; &gt; as .hystrix().hystrixConfiguration(configuration). But it comes back to&#010;&gt; the&#010;&gt; &gt; same question of how to pass in this configuration. Method calls return&#010;&gt; &gt; ValueBuilders and I could not cast them to the strings/configDefinitions.&#010;&gt; &gt;&#010;&gt; &gt; Please suggest the correct way of doing it.&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt; --&#010;&gt; Claus Ibsen&#010;&gt; -----------------&#010;&gt; http://davsclaus.com @davsclaus&#010;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAOFZOdX95ZDiMMqDtR5cKE6WPKWYXzsNbLmupJCKRMFwZvp3gg%40mail.gmail.com%3E,2017-04-19 03:40:13,users,186.0,    Re: How to dynamically inject hystrix properties?
71,71,53.0,186.0,chandangowda,"&gt;From one route Iâ€™m reading ZIP files after successful completion of reading&#010;of files,camel not able to delete those files i.e. after moving files inside&#010;.camel from outside .camel and throughing following exception.This issue&#010;happened only for  first 21 records  out of 1000 records.Please replay ASAP.&#010;&#010;Stack trace &#010;&#010;org.apache.camel.component.file.GenericFileOperationFailedException: Cannot&#010;store file: E:\XX\XX\XXXX\XXXXX-000001-XXXX.zip&#010;&#009;at&#010;org.apache.camel.component.file.FileOperations.storeFile(FileOperations.java:269)&#010;&#009;at&#010;org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:278)&#010;&#009;at&#010;org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:166)&#010;&#009;at&#010;org.apache.camel.component.file.GenericFileProducer.process(GenericFileProducer.java:80)&#010;&#009;at&#010;org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)&#010;&#009;at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:110)&#010;&#009;at&#010;org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)&#010;&#009;at&#010;org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)&#010;&#009;at&#010;org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)&#010;&#009;at&#010;org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)&#010;&#009;at&#010;org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:401)&#010;&#009;at&#010;org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:201)&#010;&#009;at&#010;org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:165)&#010;&#009;at&#010;org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)&#010;&#009;at&#010;org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)&#010;&#009;at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)&#010;&#009;at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)&#010;&#009;at&#010;java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)&#010;&#009;at&#010;java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)&#010;&#009;at&#010;java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)&#010;&#009;at&#010;java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)&#010;&#009;at java.lang.Thread.run(Thread.java:745)&#010;Caused by: java.io.FileNotFoundException: E:\XXX\XXXX\XX\XXXX-000001-XXX.zip&#010;(Access is denied)&#010;&#009;at java.io.FileOutputStream.open(Native Method)&#010;&#009;at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:221)&#010;&#009;at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:171)&#010;&#009;at&#010;org.apache.camel.component.file.FileOperations.prepareOutputFileChannel(FileOperations.java:430)&#010;&#009;at&#010;org.apache.camel.component.file.FileOperations.writeFileByFile(FileOperations.java:353)&#010;&#009;at&#010;org.apache.camel.component.file.FileOperations.storeFile(FileOperations.java:242)&#010;&#009;... 21 more&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Camel-not-able-to-delete-files-Outside-camel-tp5797768.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492423716313-5797768.post%40n5.nabble.com%3E,2017-04-17 10:08:36,users,187.0,Camel not able to delete files Outside .camel
72,72,82.0,187.0,"Siano, Stephan","Hi,&#013;&#010;&#013;&#010;Caused by: java.io.FileNotFoundException: E:\XXX\XXXX\XX\XXXX-000001-XXX.zip&#013;&#010;(Access is denied)&#013;&#010;&#013;&#010;This looks as if the process running your camel route does not have access to the directory&#010;containing the file (it would need execution rights on the directory).&#013;&#010;&#013;&#010;Best regards&#013;&#010;Stephan&#013;&#010;&#013;&#010;-----Original Message-----&#013;&#010;From: chandangowda [mailto:cgowda299@gmail.com] &#013;&#010;Sent: Montag, 17. April 2017 12:09&#013;&#010;To: users@camel.apache.org&#013;&#010;Subject: Camel not able to delete files Outside .camel&#013;&#010;&#013;&#010;From one route Iâ€™m reading ZIP files after successful completion of reading&#013;&#010;of files,camel not able to delete those files i.e. after moving files inside&#013;&#010;.camel from outside .camel and throughing following exception.This issue&#013;&#010;happened only for  first 21 records  out of 1000 records.Please replay ASAP.&#013;&#010;&#013;&#010;Stack trace &#013;&#010;&#013;&#010;org.apache.camel.component.file.GenericFileOperationFailedException: Cannot&#013;&#010;store file: E:\XX\XX\XXXX\XXXXX-000001-XXXX.zip&#013;&#010;&#009;at&#013;&#010;org.apache.camel.component.file.FileOperations.storeFile(FileOperations.java:269)&#013;&#010;&#009;at&#013;&#010;org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:278)&#013;&#010;&#009;at&#013;&#010;org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:166)&#013;&#010;&#009;at&#013;&#010;org.apache.camel.component.file.GenericFileProducer.process(GenericFileProducer.java:80)&#013;&#010;&#009;at&#013;&#010;org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)&#013;&#010;&#009;at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:110)&#013;&#010;&#009;at&#013;&#010;org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)&#013;&#010;&#009;at&#013;&#010;org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)&#013;&#010;&#009;at&#013;&#010;org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)&#013;&#010;&#009;at&#013;&#010;org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)&#013;&#010;&#009;at&#013;&#010;org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:401)&#013;&#010;&#009;at&#013;&#010;org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:201)&#013;&#010;&#009;at&#013;&#010;org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:165)&#013;&#010;&#009;at&#013;&#010;org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)&#013;&#010;&#009;at&#013;&#010;org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)&#013;&#010;&#009;at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)&#013;&#010;&#009;at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)&#013;&#010;&#009;at&#013;&#010;java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)&#013;&#010;&#009;at&#013;&#010;java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)&#013;&#010;&#009;at&#013;&#010;java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)&#013;&#010;&#009;at&#013;&#010;java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)&#013;&#010;&#009;at java.lang.Thread.run(Thread.java:745)&#013;&#010;Caused by: java.io.FileNotFoundException: E:\XXX\XXXX\XX\XXXX-000001-XXX.zip&#013;&#010;(Access is denied)&#013;&#010;&#009;at java.io.FileOutputStream.open(Native Method)&#013;&#010;&#009;at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:221)&#013;&#010;&#009;at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:171)&#013;&#010;&#009;at&#013;&#010;org.apache.camel.component.file.FileOperations.prepareOutputFileChannel(FileOperations.java:430)&#013;&#010;&#009;at&#013;&#010;org.apache.camel.component.file.FileOperations.writeFileByFile(FileOperations.java:353)&#013;&#010;&#009;at&#013;&#010;org.apache.camel.component.file.FileOperations.storeFile(FileOperations.java:242)&#013;&#010;&#009;... 21 more&#013;&#010;&#013;&#010;&#013;&#010;&#013;&#010;--&#013;&#010;View this message in context: http://camel.465427.n5.nabble.com/Camel-not-able-to-delete-files-Outside-camel-tp5797768.html&#013;&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#013;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C06958692acac4954991dfa4ddee55a45%40sap.com%3E,2017-04-18 07:25:40,users,188.0,  RE: Camel not able to delete files Outside .camel
73,73,55.0,188.0,Karthick K R,"I am quite new to Apache Camel. But after using it for a month now, I really&#010;feel it is a great Integration framework which makes solving various&#010;enterprise problems very effectively with minimal effort.&#010;&#010;Coming to the issue, I had been working on splitting a huge csv using the&#010;splitter with tokenize &amp; grouping N lines approach and ran into encoding&#010;issues with the grouped content. &#010;A similar issue had been raised in StackOverflow:  Camel: UTF-8 Encoding is&#010;lost after using Group&#010;&lt;http://stackoverflow.com/questions/36075063/camel-utf-8-encoding-is-lost-after-using-group&gt;&#010; &#010;&#010;I had also commented on the same issue with my usecase and observations&#010;made. Including the same text here:&#010;&#010;Sample csv file: (with Delimiter - '|')&#010;CandidateNumber|CandidateLastName|CandidateFirstName|EducationLevel&#010;&#010;CAND123C001|Wells|Jimmy|Bachelor's Degree (±16 years)&#010;&#010;CAND123C002|Wells|Tom|Bachelor's Degree (±16 years)&#010;&#010;CAND123C003|Wells|James|Bachelor's Degree (±16 years)&#010;&#010;CAND123C004|Wells|Tim|Bachelor's Degree (±16 years)&#010;&#010;The ± character is corrupted after tokenize with grouping. I was initially&#010;under the assumption that the problem was with not setting the proper File&#010;Encoding for split, but the exchange seems to have the right value for&#010;property CamelCharsetName=ISO-8859-1.&#010;&#010;from(""file://&lt;dir with csv files&gt;?noop=true&amp;charset=ISO-8859-1"")&#010;.split(body().tokenize(""\n"",2,true)).streaming()&#010;.log(""body: ${body}"");&#010;&#010;The same works fine with dont use grouping.&#010;&#010;from(""file://&lt;dir with csv files&gt;?noop=true&amp;charset=ISO-8859-1"")&#010;.split(body().tokenize(""\n"")).streaming()&#010;.log(""body: ${body}"");&#010;&#010;Looking at  GroupTokenIterator&#010;&lt;https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/util/GroupTokenIterator.java&gt;&#010; &#010;in camel code base the problem seems to be with the way TypeConverter is&#010;used to convert String to InputStream&#010;&#010;// convert to input stream&#010;InputStream is =&#010;camelContext.getTypeConverter().mandatoryConvertTo(InputStream.class, data);&#010;...&#010;Note: the mandatoryConvertTo() has an overloaded method with exchange&#010;&#010;&lt;T&gt; T mandatoryConvertTo(Class&lt;T&gt; type, Exchange exchange, Object value)&#010;As the exchange is not passed as argument it always falls back to default&#010;charset set using system property ""org.apache.camel.default.charset""&#010;&#010;Potential Fix:&#010;&#010;// convert to input stream&#010;InputStream is =&#010;camelContext.getTypeConverter().mandatoryConvertTo(InputStream.class,&#010;exchange, data);&#010;...&#010;As this fix is in the camel-core, another potential option is to use split&#010;without grouping and use AgrregateStrategy with completionSize() and&#010;completionTimeout().&#010;&#010;Although it would be great to get this fixed in camel-core.&#010;&#010;Kindly let me know your thoughts and as to whether this can be handled in a&#010;different way.&#010;&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/File-Encoding-falls-back-to-default-encoding-while-grouping-after-split-using-tokenize-tp5797769.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492444573134-5797769.post%40n5.nabble.com%3E,2017-04-17 15:56:13,users,189.0,File Encoding falls back to default encoding while grouping after split using tokenize
74,74,56.0,159.0,andcrow,"Still in the battle with this case ..... hehehehe&#010;&#010;Viewing the documentation I found the component SQL Component:&#010;&#010;In the options:&#010;&#010;maxMessagesPerPoll: Camel 2.11: SQL consumer only: An integer value to&#010;define the maximum number of messages to gather per poll. By default, no&#010;maximum is set.&#010;&#010;But also with this component he ignores this option:&#010;&#010;from(""timer://query?fixedRate=true&amp;delay=5s&amp;period=10800s"") &#010;    .routeId(""route-product"") &#010;    .setBody(constant(new ProductQuery().getProductSelect())) &#010;to(""sql:"" + new ProductQuery().getProductSelect() +&#010;""?maxMessagesPerPoll=1000&amp;dataSource=myDataSource"")&#010;    .marshal() &#010;        .json(JsonLibrary.Gson) &#010;        .setHeader(Exchange.CONTENT_TYPE, constant(""application/json"")) &#010;        .setHeader(""CamelFileName"", simple(""${id}.json"")) &#010;.to(""file:product""); &#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Using-Split-with-JSON-File-tp5797508p5797770.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492447513299-5797770.post%40n5.nabble.com%3E,2017-04-17 16:45:13,users,160.0,  Re: Using Split with JSON File
75,75,57.0,160.0,souciance,"Couldn't you split the resultset from the database and for each split&#010;produce a json and send that batch to your web service?&#010;&#010;On Mon, Apr 17, 2017 at 6:45 PM, andcrow [via Camel] &lt;&#010;ml-node+s465427n5797770h33@n5.nabble.com&gt; wrote:&#010;&#010;&gt; Still in the battle with this case ..... hehehehe&#010;&gt;&#010;&gt; Viewing the documentation I found the component SQL Component:&#010;&gt;&#010;&gt; In the options:&#010;&gt;&#010;&gt; maxMessagesPerPoll: Camel 2.11: SQL consumer only: An integer value to&#010;&gt; define the maximum number of messages to gather per poll. By default, no&#010;&gt; maximum is set.&#010;&gt;&#010;&gt; But also with this component he ignores this option:&#010;&gt;&#010;&gt; from(""timer://query?fixedRate=true&amp;delay=5s&amp;period=10800s"")&#010;&gt;     .routeId(""route-product"")&#010;&gt;     .setBody(constant(new ProductQuery().getProductSelect()))&#010;&gt; to(""sql:"" + new ProductQuery().getProductSelect() +&#010;&gt; ""?maxMessagesPerPoll=1000&amp;dataSource=myDataSource"")&#010;&gt;     .marshal()&#010;&gt;         .json(JsonLibrary.Gson)&#010;&gt;         .setHeader(Exchange.CONTENT_TYPE, constant(""application/json""))&#010;&gt;         .setHeader(""CamelFileName"", simple(""${id}.json""))&#010;&gt; .to(""file:product"");&#010;&gt;&#010;&gt; ------------------------------&#010;&gt; If you reply to this email, your message will be added to the discussion&#010;&gt; below:&#010;&gt; http://camel.465427.n5.nabble.com/Using-Split-with-JSON-&#010;&gt; File-tp5797508p5797770.html&#010;&gt; To start a new topic under Camel - Users, email&#010;&gt; ml-node+s465427n465428h31@n5.nabble.com&#010;&gt; To unsubscribe from Camel - Users, click here&#010;&gt; &lt;http://camel.465427.n5.nabble.com/template/NamlServlet.jtp?macro=unsubscribe_by_code&amp;node=465428&amp;code=c291Y2lhbmNlLmVxZGFtLnJhc2h0aUBnbWFpbC5jb218NDY1NDI4fDE1MzI5MTE2NTY=&gt;&#010;&gt; .&#010;&gt; NAML&#010;&gt; &lt;http://camel.465427.n5.nabble.com/template/NamlServlet.jtp?macro=macro_viewer&amp;id=instant_html%21nabble%3Aemail.naml&amp;base=nabble.naml.namespaces.BasicNamespace-nabble.view.web.template.NabbleNamespace-nabble.view.web.template.NodeNamespace&amp;breadcrumbs=notify_subscribers%21nabble%3Aemail.naml-instant_emails%21nabble%3Aemail.naml-send_instant_email%21nabble%3Aemail.naml&gt;&#010;&gt;&#010;&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Using-Split-with-JSON-File-tp5797508p5797771.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCA%2Bwbgs1zLBw0E657fkB3o%3DgHHVPmxSu9ozauK0nbPg%3DBG4t89A%40mail.gmail.com%3E,2017-04-17 17:40:41,users,161.0,    Re: Using Split with JSON File
76,76,58.0,161.0,andcrow,Did not work using maxMessagesPerPoll.&#010;&#010;Does not group every 1000 records.&#010;&#010;Creates 1 JSON file for each record.&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Using-Split-with-JSON-File-tp5797508p5797772.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492451365998-5797772.post%40n5.nabble.com%3E,2017-04-17 17:49:25,users,162.0,      Re: Using Split with JSON File
77,77,59.0,162.0,souciance,"I would suggest get the whole resultset and save the data on a queue or&#010;even as a file. Then you can parse it as a stream or every x number of rows&#010;and split.&#010;&#010;On Mon, Apr 17, 2017 at 7:49 PM, andcrow [via Camel] &lt;&#010;ml-node+s465427n5797772h95@n5.nabble.com&gt; wrote:&#010;&#010;&gt; Did not work using maxMessagesPerPoll.&#010;&gt;&#010;&gt; Does not group every 1000 records.&#010;&gt;&#010;&gt; Creates 1 JSON file for each record.&#010;&gt;&#010;&gt; ------------------------------&#010;&gt; If you reply to this email, your message will be added to the discussion&#010;&gt; below:&#010;&gt; http://camel.465427.n5.nabble.com/Using-Split-with-JSON-&#010;&gt; File-tp5797508p5797772.html&#010;&gt; To start a new topic under Camel - Users, email&#010;&gt; ml-node+s465427n465428h31@n5.nabble.com&#010;&gt; To unsubscribe from Camel - Users, click here&#010;&gt; &lt;http://camel.465427.n5.nabble.com/template/NamlServlet.jtp?macro=unsubscribe_by_code&amp;node=465428&amp;code=c291Y2lhbmNlLmVxZGFtLnJhc2h0aUBnbWFpbC5jb218NDY1NDI4fDE1MzI5MTE2NTY=&gt;&#010;&gt; .&#010;&gt; NAML&#010;&gt; &lt;http://camel.465427.n5.nabble.com/template/NamlServlet.jtp?macro=macro_viewer&amp;id=instant_html%21nabble%3Aemail.naml&amp;base=nabble.naml.namespaces.BasicNamespace-nabble.view.web.template.NabbleNamespace-nabble.view.web.template.NodeNamespace&amp;breadcrumbs=notify_subscribers%21nabble%3Aemail.naml-instant_emails%21nabble%3Aemail.naml-send_instant_email%21nabble%3Aemail.naml&gt;&#010;&gt;&#010;&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Using-Split-with-JSON-File-tp5797508p5797773.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCA%2Bwbgs2xS%3DLT%2BAy9dzbV%2BqRd76WTPbtZ049x6CNUCX05e5G8aA%40mail.gmail.com%3E,2017-04-17 18:21:25,users,163.0,        Re: Using Split with JSON File
78,78,60.0,163.0,andcrow,I'll try&#010;&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Using-Split-with-JSON-File-tp5797508p5797774.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492453944657-5797774.post%40n5.nabble.com%3E,2017-04-17 18:32:24,users,164.0,          Re: Using Split with JSON File
79,79,61.0,541.0,Tadayoshi Sato (JIRA),Tadayoshi Sato created CAMEL-11153:&#010;--------------------------------------&#010;&#010;             Summary: camel-protobuf - itest starts to fail again&#010;                 Key: CAMEL-11153&#010;                 URL: https://issues.apache.org/jira/browse/CAMEL-11153&#010;             Project: Camel&#010;          Issue Type: Bug&#010;            Reporter: Tadayoshi Sato&#010;             Fix For: 2.19.0&#010;&#010;&#010;{{camel-itest-karaf}} seems to be failing at {{CamelProtobufTest}} for some valid reason (I&#010;mean not just flaky):&#010;https://builds.apache.org/blue/organizations/jenkins/Camel.trunk.itest.karaf/activity&#010;&#010;I remember it worked fine locally a few days ago but now it even fails locally. Test it with:&#010;{code}$ mvn test -Dtest=CamelProtobufTest{code}&#010;in {{camel-itest-karaf}}. Probably some recent dependency upgrades cause this issue?&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064549.1492479333000.301583.1492479342576%40Atlassian.JIRA%3E,2017-04-18 01:35:42,issues,545.0,  [jira] [Created] (CAMEL-11153) camel-protobuf - itest starts to fail again
80,80,62.0,542.0,Tadayoshi Sato (JIRA),&#010;     [ https://issues.apache.org/jira/browse/CAMEL-11153?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&#010;]&#010;&#010;Tadayoshi Sato updated CAMEL-11153:&#010;-----------------------------------&#010;    Affects Version/s: 2.19.0&#010;&#010;&gt; camel-protobuf - itest starts to fail again&#010;&gt; -------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11153&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11153&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Bug&#010;&gt;    Affects Versions: 2.19.0&#010;&gt;            Reporter: Tadayoshi Sato&#010;&gt;             Fix For: 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; {{camel-itest-karaf}} seems to be failing at {{CamelProtobufTest}} for some valid reason&#010;(I mean not just flaky):&#010;&gt; https://builds.apache.org/blue/organizations/jenkins/Camel.trunk.itest.karaf/activity&#010;&gt; I remember it worked fine locally a few days ago but now it even fails locally. Test&#010;it with:&#010;&gt; {code}$ mvn test -Dtest=CamelProtobufTest{code}&#010;&gt; in {{camel-itest-karaf}}. Probably some recent dependency upgrades cause this issue?&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064549.1492479333000.301586.1492479401545%40Atlassian.JIRA%3E,2017-04-18 01:36:41,issues,546.0,  [jira] [Updated] (CAMEL-11153) camel-protobuf - itest starts to fail again
85,85,65.0,545.0,Tadayoshi Sato (JIRA),"&#010;     [ https://issues.apache.org/jira/browse/CAMEL-11153?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&#010;]&#010;&#010;Tadayoshi Sato updated CAMEL-11153:&#010;-----------------------------------&#010;    Description: &#010;{{camel-itest-karaf}} seems to be failing at {{CamelProtobufTest}} for some valid reason (I&#010;mean not just flaky):&#010;https://builds.apache.org/blue/organizations/jenkins/Camel.trunk.itest.karaf/activity&#010;&#010;{code}&#010;Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 123.321 sec &lt;&lt;&lt; FAILURE!&#010;- in org.apache.camel.itest.karaf.CamelProtobufTest&#010;test(org.apache.camel.itest.karaf.CamelProtobufTest)  Time elapsed: 123.212 sec  &lt;&lt;&lt;&#010;ERROR!&#010;org.apache.karaf.features.internal.util.MultiException: Error&#010;&#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader.&lt;init&gt;(MavenDownloadManager.java:84)&#010;&#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager.createDownloader(MavenDownloadManager.java:72)&#010;&#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:375)&#010;&#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:372)&#010;&#009;at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:187)&#010;&#009;at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:285)&#010;&#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1170)&#010;&#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$0(FeaturesServiceImpl.java:1069)&#010;&#009;at java.util.concurrent.FutureTask.run(FutureTask.java:266)&#010;&#009;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)&#010;&#009;at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)&#010;&#009;at java.lang.Thread.run(Thread.java:745)&#010;&#010;&#010;Results :&#010;&#010;Tests in error: &#010;  CamelProtobufTest.test » Multi Error&#010;&#010;Tests run: 1, Failures: 0, Errors: 1, Skipped: 0&#010;&#010;[INFO] ------------------------------------------------------------------------&#010;[INFO] BUILD FAILURE&#010;[INFO] ------------------------------------------------------------------------&#010;[INFO] Total time: 02:07 min&#010;[INFO] Finished at: 2017-04-18T10:26:57+09:00&#010;[INFO] Final Memory: 41M/2875M&#010;[INFO] ------------------------------------------------------------------------&#010;{code}&#010;&#010;I remember it worked fine locally a few days ago but now it even fails locally. Test it with:&#010;{code}$ mvn test -Dtest=CamelProtobufTest{code}&#010;in {{camel-itest-karaf}}. Probably some recent dependency upgrades cause this issue?&#010;&#010;  was:&#010;{{camel-itest-karaf}} seems to be failing at {{CamelProtobufTest}} for some valid reason (I&#010;mean not just flaky):&#010;https://builds.apache.org/blue/organizations/jenkins/Camel.trunk.itest.karaf/activity&#010;&#010;I remember it worked fine locally a few days ago but now it even fails locally. Test it with:&#010;{code}$ mvn test -Dtest=CamelProtobufTest{code}&#010;in {{camel-itest-karaf}}. Probably some recent dependency upgrades cause this issue?&#010;&#010;&#010;&gt; camel-protobuf - itest starts to fail again&#010;&gt; -------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11153&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11153&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Bug&#010;&gt;          Components: tests&#010;&gt;    Affects Versions: 2.19.0&#010;&gt;            Reporter: Tadayoshi Sato&#010;&gt;              Labels: protobuf&#010;&gt;             Fix For: 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; {{camel-itest-karaf}} seems to be failing at {{CamelProtobufTest}} for some valid reason&#010;(I mean not just flaky):&#010;&gt; https://builds.apache.org/blue/organizations/jenkins/Camel.trunk.itest.karaf/activity&#010;&gt; {code}&#010;&gt; Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 123.321 sec &lt;&lt;&lt;&#010;FAILURE! - in org.apache.camel.itest.karaf.CamelProtobufTest&#010;&gt; test(org.apache.camel.itest.karaf.CamelProtobufTest)  Time elapsed: 123.212 sec  &lt;&lt;&lt;&#010;ERROR!&#010;&gt; org.apache.karaf.features.internal.util.MultiException: Error&#010;&gt; &#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader.&lt;init&gt;(MavenDownloadManager.java:84)&#010;&gt; &#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager.createDownloader(MavenDownloadManager.java:72)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:375)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:372)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:187)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:285)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1170)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$0(FeaturesServiceImpl.java:1069)&#010;&gt; &#009;at java.util.concurrent.FutureTask.run(FutureTask.java:266)&#010;&gt; &#009;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)&#010;&gt; &#009;at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)&#010;&gt; &#009;at java.lang.Thread.run(Thread.java:745)&#010;&gt; Results :&#010;&gt; Tests in error: &#010;&gt;   CamelProtobufTest.test » Multi Error&#010;&gt; Tests run: 1, Failures: 0, Errors: 1, Skipped: 0&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; [INFO] BUILD FAILURE&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; [INFO] Total time: 02:07 min&#010;&gt; [INFO] Finished at: 2017-04-18T10:26:57+09:00&#010;&gt; [INFO] Final Memory: 41M/2875M&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; {code}&#010;&gt; I remember it worked fine locally a few days ago but now it even fails locally. Test&#010;it with:&#010;&gt; {code}$ mvn test -Dtest=CamelProtobufTest{code}&#010;&gt; in {{camel-itest-karaf}}. Probably some recent dependency upgrades cause this issue?&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064549.1492479333000.301680.1492480361700%40Atlassian.JIRA%3E,2017-04-18 01:52:41,issues,549.0,  [jira] [Updated] (CAMEL-11153) camel-protobuf - itest starts to fail again
86,86,66.0,546.0,Tadayoshi Sato (JIRA),"&#010;     [ https://issues.apache.org/jira/browse/CAMEL-11153?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&#010;]&#010;&#010;Tadayoshi Sato updated CAMEL-11153:&#010;-----------------------------------&#010;    Description: &#010;{{camel-itest-karaf}} seems to be failing at {{CamelProtobufTest}} for some valid reason (I&#010;mean not just flaky):&#010;https://builds.apache.org/blue/organizations/jenkins/Camel.trunk.itest.karaf/detail/Camel.trunk.itest.karaf/1569/pipeline&#010;&#010;{code}&#010;Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 123.321 sec &lt;&lt;&lt; FAILURE!&#010;- in org.apache.camel.itest.karaf.CamelProtobufTest&#010;test(org.apache.camel.itest.karaf.CamelProtobufTest)  Time elapsed: 123.212 sec  &lt;&lt;&lt;&#010;ERROR!&#010;org.apache.karaf.features.internal.util.MultiException: Error&#010;&#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader.&lt;init&gt;(MavenDownloadManager.java:84)&#010;&#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager.createDownloader(MavenDownloadManager.java:72)&#010;&#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:375)&#010;&#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:372)&#010;&#009;at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:187)&#010;&#009;at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:285)&#010;&#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1170)&#010;&#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$0(FeaturesServiceImpl.java:1069)&#010;&#009;at java.util.concurrent.FutureTask.run(FutureTask.java:266)&#010;&#009;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)&#010;&#009;at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)&#010;&#009;at java.lang.Thread.run(Thread.java:745)&#010;&#010;&#010;Results :&#010;&#010;Tests in error: &#010;  CamelProtobufTest.test » Multi Error&#010;&#010;Tests run: 1, Failures: 0, Errors: 1, Skipped: 0&#010;&#010;[INFO] ------------------------------------------------------------------------&#010;[INFO] BUILD FAILURE&#010;[INFO] ------------------------------------------------------------------------&#010;[INFO] Total time: 02:07 min&#010;[INFO] Finished at: 2017-04-18T10:26:57+09:00&#010;[INFO] Final Memory: 41M/2875M&#010;[INFO] ------------------------------------------------------------------------&#010;{code}&#010;&#010;I remember it worked fine locally a few days ago but now it even fails locally. Test it with:&#010;{code}$ mvn test -Dtest=CamelProtobufTest{code}&#010;in {{camel-itest-karaf}}. Probably some recent dependency upgrades cause this issue?&#010;&#010;  was:&#010;{{camel-itest-karaf}} seems to be failing at {{CamelProtobufTest}} for some valid reason (I&#010;mean not just flaky):&#010;https://builds.apache.org/blue/organizations/jenkins/Camel.trunk.itest.karaf/activity&#010;&#010;{code}&#010;Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 123.321 sec &lt;&lt;&lt; FAILURE!&#010;- in org.apache.camel.itest.karaf.CamelProtobufTest&#010;test(org.apache.camel.itest.karaf.CamelProtobufTest)  Time elapsed: 123.212 sec  &lt;&lt;&lt;&#010;ERROR!&#010;org.apache.karaf.features.internal.util.MultiException: Error&#010;&#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader.&lt;init&gt;(MavenDownloadManager.java:84)&#010;&#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager.createDownloader(MavenDownloadManager.java:72)&#010;&#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:375)&#010;&#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:372)&#010;&#009;at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:187)&#010;&#009;at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:285)&#010;&#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1170)&#010;&#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$0(FeaturesServiceImpl.java:1069)&#010;&#009;at java.util.concurrent.FutureTask.run(FutureTask.java:266)&#010;&#009;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)&#010;&#009;at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)&#010;&#009;at java.lang.Thread.run(Thread.java:745)&#010;&#010;&#010;Results :&#010;&#010;Tests in error: &#010;  CamelProtobufTest.test » Multi Error&#010;&#010;Tests run: 1, Failures: 0, Errors: 1, Skipped: 0&#010;&#010;[INFO] ------------------------------------------------------------------------&#010;[INFO] BUILD FAILURE&#010;[INFO] ------------------------------------------------------------------------&#010;[INFO] Total time: 02:07 min&#010;[INFO] Finished at: 2017-04-18T10:26:57+09:00&#010;[INFO] Final Memory: 41M/2875M&#010;[INFO] ------------------------------------------------------------------------&#010;{code}&#010;&#010;I remember it worked fine locally a few days ago but now it even fails locally. Test it with:&#010;{code}$ mvn test -Dtest=CamelProtobufTest{code}&#010;in {{camel-itest-karaf}}. Probably some recent dependency upgrades cause this issue?&#010;&#010;&#010;&gt; camel-protobuf - itest starts to fail again&#010;&gt; -------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11153&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11153&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Bug&#010;&gt;          Components: tests&#010;&gt;    Affects Versions: 2.19.0&#010;&gt;            Reporter: Tadayoshi Sato&#010;&gt;              Labels: protobuf&#010;&gt;             Fix For: 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; {{camel-itest-karaf}} seems to be failing at {{CamelProtobufTest}} for some valid reason&#010;(I mean not just flaky):&#010;&gt; https://builds.apache.org/blue/organizations/jenkins/Camel.trunk.itest.karaf/detail/Camel.trunk.itest.karaf/1569/pipeline&#010;&gt; {code}&#010;&gt; Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 123.321 sec &lt;&lt;&lt;&#010;FAILURE! - in org.apache.camel.itest.karaf.CamelProtobufTest&#010;&gt; test(org.apache.camel.itest.karaf.CamelProtobufTest)  Time elapsed: 123.212 sec  &lt;&lt;&lt;&#010;ERROR!&#010;&gt; org.apache.karaf.features.internal.util.MultiException: Error&#010;&gt; &#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader.&lt;init&gt;(MavenDownloadManager.java:84)&#010;&gt; &#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager.createDownloader(MavenDownloadManager.java:72)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:375)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:372)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:187)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:285)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1170)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$0(FeaturesServiceImpl.java:1069)&#010;&gt; &#009;at java.util.concurrent.FutureTask.run(FutureTask.java:266)&#010;&gt; &#009;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)&#010;&gt; &#009;at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)&#010;&gt; &#009;at java.lang.Thread.run(Thread.java:745)&#010;&gt; Results :&#010;&gt; Tests in error: &#010;&gt;   CamelProtobufTest.test » Multi Error&#010;&gt; Tests run: 1, Failures: 0, Errors: 1, Skipped: 0&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; [INFO] BUILD FAILURE&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; [INFO] Total time: 02:07 min&#010;&gt; [INFO] Finished at: 2017-04-18T10:26:57+09:00&#010;&gt; [INFO] Final Memory: 41M/2875M&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; {code}&#010;&gt; I remember it worked fine locally a few days ago but now it even fails locally. Test&#010;it with:&#010;&gt; {code}$ mvn test -Dtest=CamelProtobufTest{code}&#010;&gt; in {{camel-itest-karaf}}. Probably some recent dependency upgrades cause this issue?&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064549.1492479333000.301682.1492480421582%40Atlassian.JIRA%3E,2017-04-18 01:53:41,issues,550.0,  [jira] [Updated] (CAMEL-11153) camel-protobuf - itest starts to fail again
87,87,67.0,547.0,Tadayoshi Sato (JIRA),"&#010;     [ https://issues.apache.org/jira/browse/CAMEL-11153?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&#010;]&#010;&#010;Tadayoshi Sato reassigned CAMEL-11153:&#010;--------------------------------------&#010;&#010;    Assignee: Tadayoshi Sato&#010;&#010;&gt; camel-protobuf - itest starts to fail again&#010;&gt; -------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11153&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11153&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Bug&#010;&gt;          Components: tests&#010;&gt;    Affects Versions: 2.19.0&#010;&gt;            Reporter: Tadayoshi Sato&#010;&gt;            Assignee: Tadayoshi Sato&#010;&gt;              Labels: protobuf&#010;&gt;             Fix For: 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; {{camel-itest-karaf}} seems to be failing at {{CamelProtobufTest}} for some valid reason&#010;(I mean not just flaky):&#010;&gt; https://builds.apache.org/blue/organizations/jenkins/Camel.trunk.itest.karaf/detail/Camel.trunk.itest.karaf/1569/pipeline&#010;&gt; {code}&#010;&gt; Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 123.321 sec &lt;&lt;&lt;&#010;FAILURE! - in org.apache.camel.itest.karaf.CamelProtobufTest&#010;&gt; test(org.apache.camel.itest.karaf.CamelProtobufTest)  Time elapsed: 123.212 sec  &lt;&lt;&lt;&#010;ERROR!&#010;&gt; org.apache.karaf.features.internal.util.MultiException: Error&#010;&gt; &#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader.&lt;init&gt;(MavenDownloadManager.java:84)&#010;&gt; &#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager.createDownloader(MavenDownloadManager.java:72)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:375)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:372)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:187)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:285)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1170)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$0(FeaturesServiceImpl.java:1069)&#010;&gt; &#009;at java.util.concurrent.FutureTask.run(FutureTask.java:266)&#010;&gt; &#009;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)&#010;&gt; &#009;at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)&#010;&gt; &#009;at java.lang.Thread.run(Thread.java:745)&#010;&gt; Results :&#010;&gt; Tests in error: &#010;&gt;   CamelProtobufTest.test Â» Multi Error&#010;&gt; Tests run: 1, Failures: 0, Errors: 1, Skipped: 0&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; [INFO] BUILD FAILURE&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; [INFO] Total time: 02:07 min&#010;&gt; [INFO] Finished at: 2017-04-18T10:26:57+09:00&#010;&gt; [INFO] Final Memory: 41M/2875M&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; {code}&#010;&gt; I remember it worked fine locally a few days ago but now it even fails locally. Test&#010;it with:&#010;&gt; {code}$ mvn test -Dtest=CamelProtobufTest{code}&#010;&gt; in {{camel-itest-karaf}}. Probably some recent dependency upgrades cause this issue?&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064549.1492479333000.301847.1492482162385%40Atlassian.JIRA%3E,2017-04-18 02:22:42,issues,551.0,  [jira] [Assigned] (CAMEL-11153) camel-protobuf - itest starts to fail again
88,88,68.0,548.0,Tadayoshi Sato (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11153?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15972013#comment-15972013&#010;] &#010;&#010;Tadayoshi Sato commented on CAMEL-11153:&#010;----------------------------------------&#010;&#010;Oops, my bad!  I missed one dependency {{protobuf-guava-version}} for the fix of CAMEL-11130.&#010;Will send a pull req soon.&#010;&#010;&gt; camel-protobuf - itest starts to fail again&#010;&gt; -------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11153&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11153&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Bug&#010;&gt;          Components: tests&#010;&gt;    Affects Versions: 2.19.0&#010;&gt;            Reporter: Tadayoshi Sato&#010;&gt;            Assignee: Tadayoshi Sato&#010;&gt;              Labels: protobuf&#010;&gt;             Fix For: 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; {{camel-itest-karaf}} seems to be failing at {{CamelProtobufTest}} for some valid reason&#010;(I mean not just flaky):&#010;&gt; https://builds.apache.org/blue/organizations/jenkins/Camel.trunk.itest.karaf/detail/Camel.trunk.itest.karaf/1569/pipeline&#010;&gt; {code}&#010;&gt; Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 123.321 sec &lt;&lt;&lt;&#010;FAILURE! - in org.apache.camel.itest.karaf.CamelProtobufTest&#010;&gt; test(org.apache.camel.itest.karaf.CamelProtobufTest)  Time elapsed: 123.212 sec  &lt;&lt;&lt;&#010;ERROR!&#010;&gt; org.apache.karaf.features.internal.util.MultiException: Error&#010;&gt; &#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader.&lt;init&gt;(MavenDownloadManager.java:84)&#010;&gt; &#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager.createDownloader(MavenDownloadManager.java:72)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:375)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:372)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:187)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:285)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1170)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$0(FeaturesServiceImpl.java:1069)&#010;&gt; &#009;at java.util.concurrent.FutureTask.run(FutureTask.java:266)&#010;&gt; &#009;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)&#010;&gt; &#009;at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)&#010;&gt; &#009;at java.lang.Thread.run(Thread.java:745)&#010;&gt; Results :&#010;&gt; Tests in error: &#010;&gt;   CamelProtobufTest.test Â» Multi Error&#010;&gt; Tests run: 1, Failures: 0, Errors: 1, Skipped: 0&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; [INFO] BUILD FAILURE&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; [INFO] Total time: 02:07 min&#010;&gt; [INFO] Finished at: 2017-04-18T10:26:57+09:00&#010;&gt; [INFO] Final Memory: 41M/2875M&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; {code}&#010;&gt; I remember it worked fine locally a few days ago but now it even fails locally. Test&#010;it with:&#010;&gt; {code}$ mvn test -Dtest=CamelProtobufTest{code}&#010;&gt; in {{camel-itest-karaf}}. Probably some recent dependency upgrades cause this issue?&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064549.1492479333000.301861.1492482341760%40Atlassian.JIRA%3E,2017-04-18 02:25:41,issues,552.0,  [jira] [Commented] (CAMEL-11153) camel-protobuf - itest starts to fail again
89,89,69.0,202.0,tadayosi,"GitHub user tadayosi opened a pull request:&#010;&#010;    https://github.com/apache/camel/pull/1634&#010;&#010;    CAMEL-11153: Add missing protobuf-guava-version declaration for camel-protobuf karaf feature&#010;&#010;    https://issues.apache.org/jira/browse/CAMEL-11153&#010;&#010;You can merge this pull request into a Git repository by running:&#010;&#010;    $ git pull https://github.com/tadayosi/camel CAMEL-11153&#010;&#010;Alternatively you can review and apply these changes as the patch at:&#010;&#010;    https://github.com/apache/camel/pull/1634.patch&#010;&#010;To close this pull request, make a commit to your master/trunk branch&#010;with (at least) the following in the commit message:&#010;&#010;    This closes #1634&#010;    &#010;----&#010;commit ecee62a8147c77c757d796d6301e8f9c1fb59308&#010;Author: Tadayoshi Sato &lt;sato.tadayoshi@gmail.com&gt;&#010;Date:   2017-04-18T02:25:56Z&#010;&#010;    CAMEL-11153: Add missing protobuf-guava-version declaration for camel-protobuf karaf feature&#010;&#010;----&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3Cgit-pr-1634-camel%40git.apache.org%3E,2017-04-18 02:28:26,mail,202.0,[GitHub] camel pull request #1634: CAMEL-11153: Add missing protobuf-guava-version de...
90,90,70.0,549.0,ASF GitHub Bot (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11153?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15972017#comment-15972017&#010;] &#010;&#010;ASF GitHub Bot commented on CAMEL-11153:&#010;----------------------------------------&#010;&#010;GitHub user tadayosi opened a pull request:&#010;&#010;    https://github.com/apache/camel/pull/1634&#010;&#010;    CAMEL-11153: Add missing protobuf-guava-version declaration for camel-protobuf karaf feature&#010;&#010;    https://issues.apache.org/jira/browse/CAMEL-11153&#010;&#010;You can merge this pull request into a Git repository by running:&#010;&#010;    $ git pull https://github.com/tadayosi/camel CAMEL-11153&#010;&#010;Alternatively you can review and apply these changes as the patch at:&#010;&#010;    https://github.com/apache/camel/pull/1634.patch&#010;&#010;To close this pull request, make a commit to your master/trunk branch&#010;with (at least) the following in the commit message:&#010;&#010;    This closes #1634&#010;    &#010;----&#010;commit ecee62a8147c77c757d796d6301e8f9c1fb59308&#010;Author: Tadayoshi Sato &lt;sato.tadayoshi@gmail.com&gt;&#010;Date:   2017-04-18T02:25:56Z&#010;&#010;    CAMEL-11153: Add missing protobuf-guava-version declaration for camel-protobuf karaf feature&#010;&#010;----&#010;&#010;&#010;&gt; camel-protobuf - itest starts to fail again&#010;&gt; -------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11153&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11153&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Bug&#010;&gt;          Components: tests&#010;&gt;    Affects Versions: 2.19.0&#010;&gt;            Reporter: Tadayoshi Sato&#010;&gt;            Assignee: Tadayoshi Sato&#010;&gt;              Labels: protobuf&#010;&gt;             Fix For: 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; {{camel-itest-karaf}} seems to be failing at {{CamelProtobufTest}} for some valid reason&#010;(I mean not just flaky):&#010;&gt; https://builds.apache.org/blue/organizations/jenkins/Camel.trunk.itest.karaf/detail/Camel.trunk.itest.karaf/1569/pipeline&#010;&gt; {code}&#010;&gt; Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 123.321 sec &lt;&lt;&lt;&#010;FAILURE! - in org.apache.camel.itest.karaf.CamelProtobufTest&#010;&gt; test(org.apache.camel.itest.karaf.CamelProtobufTest)  Time elapsed: 123.212 sec  &lt;&lt;&lt;&#010;ERROR!&#010;&gt; org.apache.karaf.features.internal.util.MultiException: Error&#010;&gt; &#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader.&lt;init&gt;(MavenDownloadManager.java:84)&#010;&gt; &#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager.createDownloader(MavenDownloadManager.java:72)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:375)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:372)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:187)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:285)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1170)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$0(FeaturesServiceImpl.java:1069)&#010;&gt; &#009;at java.util.concurrent.FutureTask.run(FutureTask.java:266)&#010;&gt; &#009;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)&#010;&gt; &#009;at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)&#010;&gt; &#009;at java.lang.Thread.run(Thread.java:745)&#010;&gt; Results :&#010;&gt; Tests in error: &#010;&gt;   CamelProtobufTest.test Â» Multi Error&#010;&gt; Tests run: 1, Failures: 0, Errors: 1, Skipped: 0&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; [INFO] BUILD FAILURE&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; [INFO] Total time: 02:07 min&#010;&gt; [INFO] Finished at: 2017-04-18T10:26:57+09:00&#010;&gt; [INFO] Final Memory: 41M/2875M&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; {code}&#010;&gt; I remember it worked fine locally a few days ago but now it even fails locally. Test&#010;it with:&#010;&gt; {code}$ mvn test -Dtest=CamelProtobufTest{code}&#010;&gt; in {{camel-itest-karaf}}. Probably some recent dependency upgrades cause this issue?&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064549.1492479333000.301898.1492482522520%40Atlassian.JIRA%3E,2017-04-18 02:28:42,issues,553.0,  [jira] [Commented] (CAMEL-11153) camel-protobuf - itest starts to fail again
91,91,73.0,355.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master ec9ab4e0b -&gt; ecee62a81&#010;&#010;&#010;CAMEL-11153: Add missing protobuf-guava-version declaration for camel-protobuf karaf feature&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/ecee62a8&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/ecee62a8&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/ecee62a8&#010;&#010;Branch: refs/heads/master&#010;Commit: ecee62a8147c77c757d796d6301e8f9c1fb59308&#010;Parents: ec9ab4e&#010;Author: Tadayoshi Sato &lt;sato.tadayoshi@gmail.com&gt;&#010;Authored: Tue Apr 18 11:25:56 2017 +0900&#010;Committer: Tadayoshi Sato &lt;sato.tadayoshi@gmail.com&gt;&#010;Committed: Tue Apr 18 11:25:56 2017 +0900&#010;&#010;----------------------------------------------------------------------&#010; parent/pom.xml | 1 +&#010; 1 file changed, 1 insertion(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/ecee62a8/parent/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/parent/pom.xml b/parent/pom.xml&#010;index 09719b1..e09c123 100644&#010;--- a/parent/pom.xml&#010;+++ b/parent/pom.xml&#010;@@ -518,6 +518,7 @@&#010;     &lt;pgjdbc-ng-driver-version&gt;0.7.1&lt;/pgjdbc-ng-driver-version&gt;&#010;     &lt;powermock-version&gt;1.6.6&lt;/powermock-version&gt;&#010;     &lt;protobuf-version&gt;3.1.0&lt;/protobuf-version&gt;&#010;+    &lt;protobuf-guava-version&gt;18.0&lt;/protobuf-guava-version&gt;&#010;     &lt;pubnub-version&gt;4.6.1&lt;/pubnub-version&gt;&#010;     &lt;qpid-bundle-version&gt;0.28_1&lt;/qpid-bundle-version&gt;&#010;     &lt;qpid-proton-j-version&gt;0.16.0&lt;/qpid-proton-j-version&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C4ef0cf1f83e44e90a9ab4a5befdc817b%40git.apache.org%3E,2017-04-18 06:46:50,commits,355.0,camel git commit: CAMEL-11153: Add missing protobuf-guava-version declaration for camel-protobuf karaf feature
92,92,74.0,203.0,asfgit,"Github user asfgit closed the pull request at:&#010;&#010;    https://github.com/apache/camel/pull/1634&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170418064717.4D188E117B%40git1-us-west.apache.org%3E,2017-04-18 06:47:17,mail,203.0,  [GitHub] camel pull request #1634: CAMEL-11153: Add missing protobuf-guava-version de...
93,93,75.0,550.0,ASF GitHub Bot (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11153?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15972204#comment-15972204&#010;] &#010;&#010;ASF GitHub Bot commented on CAMEL-11153:&#010;----------------------------------------&#010;&#010;Github user asfgit closed the pull request at:&#010;&#010;    https://github.com/apache/camel/pull/1634&#010;&#010;&#010;&gt; camel-protobuf - itest starts to fail again&#010;&gt; -------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11153&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11153&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Bug&#010;&gt;          Components: tests&#010;&gt;    Affects Versions: 2.19.0&#010;&gt;            Reporter: Tadayoshi Sato&#010;&gt;            Assignee: Tadayoshi Sato&#010;&gt;              Labels: protobuf&#010;&gt;             Fix For: 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; {{camel-itest-karaf}} seems to be failing at {{CamelProtobufTest}} for some valid reason&#010;(I mean not just flaky):&#010;&gt; https://builds.apache.org/blue/organizations/jenkins/Camel.trunk.itest.karaf/detail/Camel.trunk.itest.karaf/1569/pipeline&#010;&gt; {code}&#010;&gt; Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 123.321 sec &lt;&lt;&lt;&#010;FAILURE! - in org.apache.camel.itest.karaf.CamelProtobufTest&#010;&gt; test(org.apache.camel.itest.karaf.CamelProtobufTest)  Time elapsed: 123.212 sec  &lt;&lt;&lt;&#010;ERROR!&#010;&gt; org.apache.karaf.features.internal.util.MultiException: Error&#010;&gt; &#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager$MavenDownloader.&lt;init&gt;(MavenDownloadManager.java:84)&#010;&gt; &#009;at org.apache.karaf.features.internal.download.impl.MavenDownloadManager.createDownloader(MavenDownloadManager.java:72)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:375)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.Subsystem.downloadBundles(Subsystem.java:372)&#010;&gt; &#009;at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:187)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:285)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1170)&#010;&gt; &#009;at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$0(FeaturesServiceImpl.java:1069)&#010;&gt; &#009;at java.util.concurrent.FutureTask.run(FutureTask.java:266)&#010;&gt; &#009;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)&#010;&gt; &#009;at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)&#010;&gt; &#009;at java.lang.Thread.run(Thread.java:745)&#010;&gt; Results :&#010;&gt; Tests in error: &#010;&gt;   CamelProtobufTest.test Â» Multi Error&#010;&gt; Tests run: 1, Failures: 0, Errors: 1, Skipped: 0&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; [INFO] BUILD FAILURE&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; [INFO] Total time: 02:07 min&#010;&gt; [INFO] Finished at: 2017-04-18T10:26:57+09:00&#010;&gt; [INFO] Final Memory: 41M/2875M&#010;&gt; [INFO] ------------------------------------------------------------------------&#010;&gt; {code}&#010;&gt; I remember it worked fine locally a few days ago but now it even fails locally. Test&#010;it with:&#010;&gt; {code}$ mvn test -Dtest=CamelProtobufTest{code}&#010;&gt; in {{camel-itest-karaf}}. Probably some recent dependency upgrades cause this issue?&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064549.1492479333000.303034.1492498061651%40Atlassian.JIRA%3E,2017-04-18 06:47:41,issues,554.0,  [jira] [Commented] (CAMEL-11153) camel-protobuf - itest starts to fail again
100,100,71.0,189.0,KhajaNawas14,"Hi All,&#010;&#010;currently my query is like any file that comes to this folder will be&#010;processed to next stage. However I would like to add the file name also my&#010;camel route so that i can re-use the same folder for multiple files.&#010;&#010;sample folder cd-erpdata-csv&#010;sample file name us-ddmmyy.csv and uk-ddmmyy.csv&#010;&#010;&lt;camel:from&#010;uri=""file:messaging/cd-erpdata-csv?preMove=inprogress&amp;amp;move=.done""/&gt;&#010;&#010;&#010;&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Camel-Route-File-name-tp5797776.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492488688966-5797776.post%40n5.nabble.com%3E,2017-04-18 04:11:28,users,190.0,Camel Route - File name
101,101,72.0,190.0,KhajaNawas14,Note:- I am a beginner to camel route.&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Camel-Route-File-name-tp5797776p5797777.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492488836335-5797777.post%40n5.nabble.com%3E,2017-04-18 04:13:56,users,191.0,  Re: Camel Route - File name
102,102,83.0,191.0,"Siano, Stephan","Hi,&#010;&#010;see http://camel.apache.org/file2.html &#010;&#010;you should especially have a look into the fileName option which will likely do what you want.&#010;&#010;Best regards&#010;Stephan&#010;&#010;-----Original Message-----&#010;From: KhajaNawas14 [mailto:khaja.nawas@me.com] &#010;Sent: Dienstag, 18. April 2017 06:14&#010;To: users@camel.apache.org&#010;Subject: Re: Camel Route - File name&#010;&#010;Note:- I am a beginner to camel route.&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Camel-Route-File-name-tp5797776p5797777.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3Ca386bde03ab947529067523c0d2bc4c6%40sap.com%3E,2017-04-18 07:29:15,users,192.0,    RE: Camel Route - File name
103,103,176.0,192.0,KhajaNawas14,"Thanks, I tried to do it based on the suggested link however I am&#010;encountering the below issue&#010;&#010;Tried with the below&#010;${file:name.noext}.org? &#010;&#010;Error&#010;&#010;Dynamic expressions with ${ } placeholders is not allowed. Use the fileName&#010;option to set the dynamic expression.&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Camel-Route-File-name-tp5797776p5797874.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492588658550-5797874.post%40n5.nabble.com%3E,2017-04-19 07:57:38,users,193.0,      RE: Camel Route - File name
104,104,177.0,193.0,Claus Ibsen,"You need to use a fileFilter to dynamic chose which files to consume.&#010;There is more details on that file component doc page&#010;&#010;On Tue, Apr 18, 2017 at 6:11 AM, KhajaNawas14 &lt;khaja.nawas@me.com&gt; wrote:&#010;&gt; Hi All,&#010;&gt;&#010;&gt; currently my query is like any file that comes to this folder will be&#010;&gt; processed to next stage. However I would like to add the file name also my&#010;&gt; camel route so that i can re-use the same folder for multiple files.&#010;&gt;&#010;&gt; sample folder cd-erpdata-csv&#010;&gt; sample file name us-ddmmyy.csv and uk-ddmmyy.csv&#010;&gt;&#010;&gt; &lt;camel:from&#010;&gt; uri=""file:messaging/cd-erpdata-csv?preMove=inprogress&amp;amp;move=.done""/&gt;&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt; --&#010;&gt; View this message in context: http://camel.465427.n5.nabble.com/Camel-Route-File-name-tp5797776.html&#010;&gt; Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;&#010;&#010;-- &#010;Claus Ibsen&#010;-----------------&#010;http://davsclaus.com @davsclaus&#010;Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yN%3DEpzH-Nmzr4ttW5B8_M6wbdoQXCn-F7dxqBMZFnM9SQg%40mail.gmail.com%3E,2017-04-19 08:00:23,users,194.0,  Re: Camel Route - File name
105,105,76.0,356.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master ecee62a81 -&gt; c5bd87682&#010;&#010;&#010;Upgrade AMQ&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/c5bd8768&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/c5bd8768&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/c5bd8768&#010;&#010;Branch: refs/heads/master&#010;Commit: c5bd876822f08eb44f5d16ae1127e21f366a91be&#010;Parents: ecee62a&#010;Author: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Authored: Tue Apr 18 08:48:11 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Tue Apr 18 08:48:11 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; parent/pom.xml | 2 +-&#010; 1 file changed, 1 insertion(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/c5bd8768/parent/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/parent/pom.xml b/parent/pom.xml&#010;index e09c123..f661ee3 100644&#010;--- a/parent/pom.xml&#010;+++ b/parent/pom.xml&#010;@@ -37,7 +37,7 @@&#010;     &lt;!-- dependency versions --&gt;&#010;     &lt;abdera-version&gt;1.1.3&lt;/abdera-version&gt;&#010;     &lt;!-- Note that activemq dependency is only used for testing! --&gt;&#010;-    &lt;activemq-version&gt;5.14.4&lt;/activemq-version&gt;&#010;+    &lt;activemq-version&gt;5.14.5&lt;/activemq-version&gt;&#010;     &lt;activemq-artemis-version&gt;1.5.4&lt;/activemq-artemis-version&gt;&#010;     &lt;aether-version&gt;1.0.2.v20150114&lt;/aether-version&gt;&#010;     &lt;ahc-version&gt;2.0.31&lt;/ahc-version&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cdc774b23a45c417189ea8e1585625374%40git.apache.org%3E,2017-04-18 06:48:14,commits,356.0,camel git commit: Upgrade AMQ
106,106,77.0,554.0,Claus Ibsen (JIRA),"Claus Ibsen created CAMEL-11154:&#010;-----------------------------------&#010;&#010;             Summary: itest - spring-boot fails for camel-hbase&#010;                 Key: CAMEL-11154&#010;                 URL: https://issues.apache.org/jira/browse/CAMEL-11154&#010;             Project: Camel&#010;          Issue Type: Test&#010;    Affects Versions: 2.19.0&#010;            Reporter: Claus Ibsen&#010;             Fix For: 2.19.0&#010;&#010;&#010;Tests in error: &#010;org.apache.camel.itest.springboot.CamelHbaseTest.componentTests(org.apache.camel.itest.springboot.CamelHbaseTest)&#010;  Run 1: CamelHbaseTest&gt;AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget&#010;  Run 2: CamelHbaseTest&gt;AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget&#010;&#010;&#010;Tests run: 217, Failures: 0, Errors: 1, Skipped: 0&#010;&#010;[ERROR] There are test failures.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064597.1492499068000.303202.1492499082527%40Atlassian.JIRA%3E,2017-04-18 07:04:42,issues,558.0,  [jira] [Created] (CAMEL-11154) itest - spring-boot fails for camel-hbase
107,107,87.0,555.0,Claus Ibsen (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11154?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15972262#comment-15972262&#010;] &#010;&#010;Claus Ibsen commented on CAMEL-11154:&#010;-------------------------------------&#010;&#010;[~nferraro] wonder if you could take a look?&#010;&#010;&gt; itest - spring-boot fails for camel-hbase&#010;&gt; -----------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11154&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11154&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Test&#010;&gt;    Affects Versions: 2.19.0&#010;&gt;            Reporter: Claus Ibsen&#010;&gt;             Fix For: 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; Tests in error: &#010;&gt; org.apache.camel.itest.springboot.CamelHbaseTest.componentTests(org.apache.camel.itest.springboot.CamelHbaseTest)&#010;&gt;   Run 1: CamelHbaseTest&gt;AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget&#010;&gt;   Run 2: CamelHbaseTest&gt;AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget&#010;&gt; Tests run: 217, Failures: 0, Errors: 1, Skipped: 0&#010;&gt; [ERROR] There are test failures.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064597.1492499068000.303490.1492501362440%40Atlassian.JIRA%3E,2017-04-18 07:42:42,issues,559.0,  [jira] [Commented] (CAMEL-11154) itest - spring-boot fails for camel-hbase
108,108,94.0,556.0,Nicola Ferraro (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11154?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15972298#comment-15972298&#010;] &#010;&#010;Nicola Ferraro commented on CAMEL-11154:&#010;----------------------------------------&#010;&#010;Checking...&#010;&#010;&gt; itest - spring-boot fails for camel-hbase&#010;&gt; -----------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11154&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11154&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Test&#010;&gt;    Affects Versions: 2.19.0&#010;&gt;            Reporter: Claus Ibsen&#010;&gt;             Fix For: 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; Tests in error: &#010;&gt; org.apache.camel.itest.springboot.CamelHbaseTest.componentTests(org.apache.camel.itest.springboot.CamelHbaseTest)&#010;&gt;   Run 1: CamelHbaseTest&gt;AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget&#010;&gt;   Run 2: CamelHbaseTest&gt;AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget&#010;&gt; Tests run: 217, Failures: 0, Errors: 1, Skipped: 0&#010;&gt; [ERROR] There are test failures.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064597.1492499068000.303697.1492502922106%40Atlassian.JIRA%3E,2017-04-18 08:08:42,issues,560.0,  [jira] [Commented] (CAMEL-11154) itest - spring-boot fails for camel-hbase
111,111,109.0,557.0,Nicola Ferraro (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11154?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15972396#comment-15972396&#010;] &#010;&#010;Nicola Ferraro commented on CAMEL-11154:&#010;----------------------------------------&#010;&#010;The problem is not happening locally, but current build is going to fail. I've changed the&#010;test not to try to embed test dependencies (that include a hbase server) inside spring-boot.&#010;The problem seems to be related to a transitive import of log4j...&#010;&#010;&gt; itest - spring-boot fails for camel-hbase&#010;&gt; -----------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11154&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11154&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Test&#010;&gt;    Affects Versions: 2.19.0&#010;&gt;            Reporter: Claus Ibsen&#010;&gt;             Fix For: 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; Tests in error: &#010;&gt; org.apache.camel.itest.springboot.CamelHbaseTest.componentTests(org.apache.camel.itest.springboot.CamelHbaseTest)&#010;&gt;   Run 1: CamelHbaseTest&gt;AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget&#010;&gt;   Run 2: CamelHbaseTest&gt;AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget&#010;&gt; Tests run: 217, Failures: 0, Errors: 1, Skipped: 0&#010;&gt; [ERROR] There are test failures.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064597.1492499068000.304278.1492507901605%40Atlassian.JIRA%3E,2017-04-18 09:31:41,issues,561.0,  [jira] [Commented] (CAMEL-11154) itest - spring-boot fails for camel-hbase
128,128,86.0,514.0,Claus Ibsen (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11150?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15972260#comment-15972260&#010;] &#010;&#010;Claus Ibsen commented on CAMEL-11150:&#010;-------------------------------------&#010;&#010;Tomo, I think its in these maven goals&#010;https://github.com/apache/camel/blob/master/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareReadmeMojo.java&#010;&#010;https://github.com/apache/camel/blob/master/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareUserGuideMojo.java&#010;&#010;You may need to add some special logic to include camel-ignite. Its fine to hardcode something.&#010;This ticket should be fix this when camel-ignite becomes like other components: https://issues.apache.org/jira/browse/CAMEL-10798&#010;&#010;&#010;&gt; camel-solr is removed from readme on each full build&#010;&gt; ----------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11150&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11150&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Task&#010;&gt;          Components: documentation&#010;&gt;            Reporter: Tomohisa Igarashi&#010;&gt;            Assignee: Tomohisa Igarashi&#010;&gt;            Priority: Minor&#010;&gt;&#010;&gt; On each full build camel-solr is removed from components/readme.adoc and docs/user-manual/en/SUMMARY.md&#010;which shouldn't happen.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064021.1492157502000.303478.1492501301562%40Atlassian.JIRA%3E,2017-04-18 07:41:41,issues,517.0,  [jira] [Commented] (CAMEL-11150) camel-solr is removed from readme on each full build
133,133,131.0,517.0,Claus Ibsen (JIRA),&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11150?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15972567#comment-15972567&#010;] &#010;&#010;Claus Ibsen commented on CAMEL-11150:&#010;-------------------------------------&#010;&#010;Is there a apt-error log file in the camel-solr directory ?&#010;&#010;&gt; camel-solr/camel-ignite is removed from readme on each full build&#010;&gt; -----------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11150&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11150&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Task&#010;&gt;          Components: documentation&#010;&gt;            Reporter: Tomohisa Igarashi&#010;&gt;            Assignee: Tomohisa Igarashi&#010;&gt;            Priority: Minor&#010;&gt;&#010;&gt; On each full build camel-solr is removed from components/readme.adoc and docs/user-manual/en/SUMMARY.md&#010;which shouldn't happen.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064021.1492157502000.305218.1492517861621%40Atlassian.JIRA%3E,2017-04-18 12:17:41,issues,520.0,  [jira] [Commented] (CAMEL-11150) camel-solr/camel-ignite is removed from readme on each full build
134,134,136.0,518.0,Tomohisa Igarashi (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11150?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15972585#comment-15972585&#010;] &#010;&#010;Tomohisa Igarashi commented on CAMEL-11150:&#010;-------------------------------------------&#010;&#010;Nope, I do see one in camel-ignite dir, but not in camel-solr. I'll check maven log (maybe&#010;with -X) for the solr.&#010;&#010;&gt; camel-solr/camel-ignite is removed from readme on each full build&#010;&gt; -----------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11150&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11150&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Task&#010;&gt;          Components: documentation&#010;&gt;            Reporter: Tomohisa Igarashi&#010;&gt;            Assignee: Tomohisa Igarashi&#010;&gt;            Priority: Minor&#010;&gt;&#010;&gt; On each full build camel-solr is removed from components/readme.adoc and docs/user-manual/en/SUMMARY.md&#010;which shouldn't happen.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064021.1492157502000.305299.1492518882010%40Atlassian.JIRA%3E,2017-04-18 12:34:42,issues,521.0,  [jira] [Commented] (CAMEL-11150) camel-solr/camel-ignite is removed from readme on each full build
135,135,162.0,519.0,Tomohisa Igarashi (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11150?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15974140#comment-15974140&#010;] &#010;&#010;Tomohisa Igarashi commented on CAMEL-11150:&#010;-------------------------------------------&#010;&#010;hmm confusing, that removal from readme doesn't happen today. Still no json file is generated&#010;for camel-solr and camel-ignite.&#010;&#010;&gt; camel-solr/camel-ignite is removed from readme on each full build&#010;&gt; -----------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11150&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11150&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Task&#010;&gt;          Components: documentation&#010;&gt;            Reporter: Tomohisa Igarashi&#010;&gt;            Assignee: Tomohisa Igarashi&#010;&gt;            Priority: Minor&#010;&gt;&#010;&gt; On each full build camel-solr is removed from components/readme.adoc and docs/user-manual/en/SUMMARY.md&#010;which shouldn't happen.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064021.1492157502000.314819.1492582481545%40Atlassian.JIRA%3E,2017-04-19 06:14:41,issues,522.0,  [jira] [Commented] (CAMEL-11150) camel-solr/camel-ignite is removed from readme on each full build
136,136,167.0,520.0,Claus Ibsen (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11150?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15974205#comment-15974205&#010;] &#010;&#010;Claus Ibsen commented on CAMEL-11150:&#010;-------------------------------------&#010;&#010;camel-ignite is a known issue, there is a ticket about that. however camel-solr ought to generate&#010;a json file&#010;&#010;&gt; camel-solr/camel-ignite is removed from readme on each full build&#010;&gt; -----------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11150&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11150&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Task&#010;&gt;          Components: documentation&#010;&gt;            Reporter: Tomohisa Igarashi&#010;&gt;            Assignee: Tomohisa Igarashi&#010;&gt;            Priority: Minor&#010;&gt;&#010;&gt; On each full build camel-solr is removed from components/readme.adoc and docs/user-manual/en/SUMMARY.md&#010;which shouldn't happen.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064021.1492157502000.315138.1492585721611%40Atlassian.JIRA%3E,2017-04-19 07:08:41,issues,523.0,  [jira] [Commented] (CAMEL-11150) camel-solr/camel-ignite is removed from readme on each full build
141,141,209.0,215.0,igarashitm,"GitHub user igarashitm opened a pull request:&#010;&#010;    https://github.com/apache/camel/pull/1638&#010;&#010;    Use maven-antrun-plugin to remove data dir instead of maven-clean-plu…&#010;&#010;    …gin so that mvn clean would remove target dir&#010;&#010;You can merge this pull request into a Git repository by running:&#010;&#010;    $ git pull https://github.com/igarashitm/camel camel-solr-remove-data-dir&#010;&#010;Alternatively you can review and apply these changes as the patch at:&#010;&#010;    https://github.com/apache/camel/pull/1638.patch&#010;&#010;To close this pull request, make a commit to your master/trunk branch&#010;with (at least) the following in the commit message:&#010;&#010;    This closes #1638&#010;    &#010;----&#010;commit 9776e85a0742c98ea966691e39dfd1015d306394&#010;Author: Tomohisa Igarashi &lt;tm.igarashi@gmail.com&gt;&#010;Date:   2017-04-19T09:05:57Z&#010;&#010;    Use maven-antrun-plugin to remove data dir instead of maven-clean-plugin so that mvn clean&#010;would remove target dir&#010;&#010;----&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3Cgit-pr-1638-camel%40git.apache.org%3E,2017-04-19 09:09:49,mail,215.0,[GitHub] camel pull request #1638: Use maven-antrun-plugin to remove data dir instead...
142,142,214.0,402.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master e09180940 -&gt; 424273fa9&#010;&#010;&#010;Use maven-antrun-plugin to remove data dir instead of maven-clean-plugin so that mvn clean&#010;would remove target dir&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/424273fa&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/424273fa&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/424273fa&#010;&#010;Branch: refs/heads/master&#010;Commit: 424273fa986790fece72d8f0b9f58f526ce3b192&#010;Parents: e091809&#010;Author: Tomohisa Igarashi &lt;tm.igarashi@gmail.com&gt;&#010;Authored: Wed Apr 19 18:05:57 2017 +0900&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Wed Apr 19 11:16:58 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; components/camel-solr/pom.xml | 17 +++++++----------&#010; 1 file changed, 7 insertions(+), 10 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/424273fa/components/camel-solr/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-solr/pom.xml b/components/camel-solr/pom.xml&#010;index 4541270..448e2f6c 100644&#010;--- a/components/camel-solr/pom.xml&#010;+++ b/components/camel-solr/pom.xml&#010;@@ -153,24 +153,21 @@&#010;       &lt;!-- clean the data directory before installing --&gt;&#010;       &lt;plugin&gt;&#010;         &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#010;-        &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;&#010;+        &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;&#010;         &lt;executions&gt;&#010;           &lt;execution&gt;&#010;             &lt;id&gt;auto-clean&lt;/id&gt;&#010;             &lt;phase&gt;install&lt;/phase&gt;&#010;             &lt;goals&gt;&#010;-              &lt;goal&gt;clean&lt;/goal&gt;&#010;+              &lt;goal&gt;run&lt;/goal&gt;&#010;             &lt;/goals&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;target&gt;&#010;+                &lt;delete dir=""${basedir}/data"" quiet=""true""/&gt;&#010;+              &lt;/target&gt;&#010;+            &lt;/configuration&gt;&#010;           &lt;/execution&gt;&#010;         &lt;/executions&gt;&#010;-        &lt;configuration&gt;&#010;-          &lt;excludeDefaultDirectories&gt;true&lt;/excludeDefaultDirectories&gt;&#010;-          &lt;filesets&gt;&#010;-            &lt;fileset&gt;&#010;-              &lt;directory&gt;${basedir}/data&lt;/directory&gt;&#010;-            &lt;/fileset&gt;&#010;-          &lt;/filesets&gt;&#010;-        &lt;/configuration&gt;&#010;       &lt;/plugin&gt;&#010;     &lt;/plugins&gt;&#010;   &lt;/build&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C05bf03951083470cb6da59ee9ef4c62e%40git.apache.org%3E,2017-04-19 09:17:59,commits,402.0,camel git commit: Use maven-antrun-plugin to remove data dir instead of maven-clean-plugin so that mvn clean would remove target dir
143,143,215.0,216.0,igarashitm,"Github user igarashitm closed the pull request at:&#010;&#010;    https://github.com/apache/camel/pull/1638&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170419091919.04CCFDF999%40git1-us-west.apache.org%3E,2017-04-19 09:19:19,mail,216.0,  [GitHub] camel pull request #1638: Use maven-antrun-plugin to remove data dir instead...
144,144,216.0,523.0,Tomohisa Igarashi (JIRA),&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11150?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15974368#comment-15974368&#010;] &#010;&#010;Tomohisa Igarashi commented on CAMEL-11150:&#010;-------------------------------------------&#010;&#010;Fixed camel-solr POM to remove target dir on mvn clean - https://github.com/apache/camel/pull/1638&#010;&#010;&gt; camel-ignite is removed from readme on each full build&#010;&gt; ------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11150&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11150&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Task&#010;&gt;          Components: documentation&#010;&gt;            Reporter: Tomohisa Igarashi&#010;&gt;            Assignee: Tomohisa Igarashi&#010;&gt;            Priority: Minor&#010;&gt;&#010;&gt; On each full build camel-solr is removed from components/readme.adoc and docs/user-manual/en/SUMMARY.md&#010;which shouldn't happen.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064021.1492157502000.316114.1492593641651%40Atlassian.JIRA%3E,2017-04-19 09:20:41,issues,526.0,  [jira] [Commented] (CAMEL-11150) camel-ignite is removed from readme on each full build
151,151,90.0,13.0,Claus Ibsen,"Hi&#010;&#010;Things start to look good. There is a itest that fails with spring&#010;boot which we need to look at and get fixed&#010;https://issues.apache.org/jira/browse/CAMEL-11154&#010;&#010;The other tests was all passing recently and they ought to become blue&#010;again. But lets keep an eye on them:&#010;https://builds.apache.org/view/A-D/view/Camel/&#010;&#010;&#010;On Thu, Apr 13, 2017 at 1:50 PM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt; wrote:&#010;&gt; Hi&#010;&gt;&#010;&gt; Thanks Antonin that sounds great.&#010;&gt;&#010;&gt; The JIRA tickets are down to 3&#010;&gt; https://issues.apache.org/jira/issues/?jql=project%20%3D%20CAMEL%20AND%20fixVersion%20%3D%202.19.0%20AND%20resolution%20%3D%20Unresolved&#010;&gt;&#010;&gt; We have recently fixed up the missing component docs and fixed broken&#010;&gt; links from browsing on github.&#010;&gt;&#010;&gt; We should keep an eye on the CI servers and output from the&#010;&gt; camel-catalog report, to see if it reports more missing stuff.&#010;&gt; It currently has a false positive on some missing docs for some of the&#010;&gt; test components. I will try to fix this later today.&#010;&gt;&#010;&gt; However thats not all. At all time feel free to have fun and work on&#010;&gt; anything you like on Camel. There is still time for small improvements&#010;&gt; etc. But bigger stuff we should really defer to the next release.&#010;&gt;&#010;&gt;&#010;&gt; On Wed, Apr 12, 2017 at 3:35 PM, Antonin Stefanutti&#010;&gt; &lt;antonin@stefanutti.fr&gt; wrote:&#010;&gt;&gt;&#010;&gt;&gt;&gt; On 12 Apr 2017, at 15:22, Claus Ibsen &lt;claus.ibsen@gmail.com&gt; wrote:&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; Hi&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; Just a heads up that we plan to cut the RC for Camel 2.19 next week.&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; So we are closing down on the last tickets, bugs, features etc to get&#010;&gt;&gt;&gt; the code base in shape.&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; The JIRA has 9 tickets&#010;&gt;&gt;&gt; https://issues.apache.org/jira/issues/?jql=project%20%3D%20CAMEL%20AND%20fixVersion%20%3D%202.19.0%20AND%20resolution%20%3D%20Unresolved&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; But you are of course welcome to work on other tickets etc but just&#010;&gt;&gt;&gt; mind any big functionality is likely better to wait for next release.&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; There is however the expected transaction stuff for CDI as a PR in the&#010;&gt;&gt;&gt; works, and also a new iot component&#010;&gt;&gt;&gt; https://github.com/apache/camel/pulls&#010;&gt;&gt;&#010;&gt;&gt; The CDI transaction support PR should be merged by end of week.&#010;&gt;&gt;&#010;&gt;&gt; https://github.com/apache/camel/pull/1390&#010;&gt;&gt;&#010;&gt;&gt;&gt; We should keep an eye on the CI servers to see how they are and fix&#010;&gt;&gt;&gt; any test failures etc. Recently we got them to build and test the OSGi&#010;&gt;&gt;&gt; and spring-boot specific tests so we should be able to better keep an&#010;&gt;&gt;&gt; eye on this now and in the future.&#010;&gt;&gt;&gt; https://builds.apache.org/view/A-D/view/Camel/&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; On Fri, Apr 7, 2017 at 8:45 AM, Gregor Zurowski&#010;&gt;&gt;&gt; &lt;gregor@list.zurowski.org&gt; wrote:&#010;&gt;&gt;&gt;&gt; Hi Claus,&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; Week 16 works for me.  I will send out another email shortly before&#010;&gt;&gt;&gt;&gt; starting to build the RC.&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; Thanks,&#010;&gt;&gt;&gt;&gt; Gregor&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; On Wed, Apr 5, 2017 at 3:08 PM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt;&#010;wrote:&#010;&gt;&gt;&gt;&gt;&gt; Hi Gregor&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; Yeah its April so we should get the 2.19.0 release out the door.&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; We have just setup a 2.20.0 version in JIRA and folks should start&#010;&gt;&gt;&gt;&gt;&gt; moving their tickets to that version if its something that they cannot&#010;&gt;&gt;&gt;&gt;&gt; finish in time. Also we should refrain from doing bigger work at this&#010;&gt;&gt;&gt;&gt;&gt; time as we should close down on last tickets, bug fixes, and get the&#010;&gt;&gt;&gt;&gt;&gt; CI tests in good order, etc.&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; I will look at the JIRAs later this week and cleanup a bit so we have&#010;&gt;&gt;&gt;&gt;&gt; a better overview of what work is yet to be done.&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; As April has the easter holidays. I wonder what you time schedule looks&#010;like?&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; Maybe if you have time to help with the release after the holidays?&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; Week 16 and 17 are the last 2 weeks in April after the holidays.&#010;&gt;&gt;&gt;&gt;&gt; If we could maybe cut the RC in week 16 then that would be good.&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; On Mon, Apr 3, 2017 at 2:14 PM, Gregor Zurowski&#010;&gt;&gt;&gt;&gt;&gt; &lt;gregor@list.zurowski.org&gt; wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt; Hi,&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; Are we getting closer to build a 2.19.0 release?  I would volunteer&#010;&gt;&gt;&gt;&gt;&gt;&gt; for creating the release, just wanted to check when would be a good&#010;&gt;&gt;&gt;&gt;&gt;&gt; time to do so.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,&#010;&gt;&gt;&gt;&gt;&gt;&gt; Gregor&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Mar 15, 2017 at 9:29 AM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt;&#010;wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Just wanted to bring up that we are closing in on a good time&#010;for&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; doing a new release.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For example in mid April it would be around 6 months since the&#010;last&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2.18.0 release.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Therefore we should start closing down and fixing bugs, and make&#010;sure&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the CI servers and tests are in good shape.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This morning we have fixed a number of recent test failures and&#010;are&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; down to only 1 test failure now.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jan 16, 2017 at 10:28 AM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt;&#010;wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is a bunch of stuff which we can/should have on the&#010;roadmap to&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; complete for the Camel 2.19 release.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Here is on top of my head&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Finish migrating the wiki documentation to adoc files. I&#010;think its&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; most of the EIP patterns that are missing. There is a basic&#010;list of&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; EIPs here: https://github.com/apache/camel/blob/master/camel-core/readme-eip.adoc&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Generate documentation and website. Maybe documentation first&#010;and then&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; we come up with a modern website later - when we have a new&#010;logo as&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; well.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mark more stuff to @deprecate so we dont drag them into Camel&#010;3.0.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is both components / and other artifacts.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; And as well the camel-core APIs where there is maybe more&#010;we can deprecate.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For example the old stuff that was created prior to the component&#010;docs&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; we do now with the apt plugin at build time instead of this&#010;old code&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; with runtime that dont really pan out anyway.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 4)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Move spring-boot starters into the platforms folder. There&#010;is a ticket&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; about this.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 5)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; More improvements to spring boot auto configuration. We have&#010;a bunch&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of tickets on that.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 6)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Look at the health check API and see if there is something&#010;we can get&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; started on.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Possible some API to integrate with spring boot actuators&#010;(when using&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; SB) and allow each component to provide their own checks&#010;so they can&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; be implemented ad-hoc. There is a ticket about this.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 7)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Possible some more teaks to camel-catalog based on feedback&#010;from IDEA&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; plugin and the maven validate goal.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 8)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; That CDI JEE transaction PR on github.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ideally we would have had a transaction API in camel-core&#010;and then one&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; impl for camel-spring, and then another for camel-cdi-jee.&#010;But that&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; may require too much work.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 9)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Work on the Java 8 DSL such as get more community feedback,&#010;and then&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; resolve the TODOs with the documentation updates and look&#010;into other&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; areas where the API can benefit from Java 8 lambdas and whatnot.&#010;I&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; dont think we have a ticket about this.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 10)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Karaf users may want to improve/finish up the camel-test-karaf&#010;module&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; so its more usable and end users can use it to test integration&#010;tests&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; with Camel and Karaf.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 11)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Introduce Camel Connectors (more about this later)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Anything else?&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; --&#010;&gt;&gt;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; --&#010;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt; --&#010;&gt; Claus Ibsen&#010;&gt; -----------------&#010;&gt; http://davsclaus.com @davsclaus&#010;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;&#010;&#010;-- &#010;Claus Ibsen&#010;-----------------&#010;http://davsclaus.com @davsclaus&#010;Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3CCAGB5yN%3DwYjV89vqRtAzS_VjdyQcByUgZBJML3iCrbZLCY4SU7A%40mail.gmail.com%3E,2017-04-18 07:45:20,mail,13.0,              Re: Camel 2.19 Roadmap
152,152,174.0,14.0,Claus Ibsen,"Hi&#010;&#010;Okay so there is some last minute issues with the @Generated&#010;annotations we need to look into&#010;https://issues.apache.org/jira/browse/CAMEL-11165&#010;&#010;And an unforseen effect on java 9 builds&#010;https://issues.apache.org/jira/browse/CAMEL-11166&#010;&#010;The full test is passing now. And the Spring Boot and Karaf tests has&#010;also passed but failed recently due some maven download error or some&#010;other weird error. So lets kick new builds when we get the 2 tickets&#010;resolved above.&#010;&#010;&#010;&#010;&#010;On Tue, Apr 18, 2017 at 9:45 AM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt; wrote:&#010;&gt; Hi&#010;&gt;&#010;&gt; Things start to look good. There is a itest that fails with spring&#010;&gt; boot which we need to look at and get fixed&#010;&gt; https://issues.apache.org/jira/browse/CAMEL-11154&#010;&gt;&#010;&gt; The other tests was all passing recently and they ought to become blue&#010;&gt; again. But lets keep an eye on them:&#010;&gt; https://builds.apache.org/view/A-D/view/Camel/&#010;&gt;&#010;&gt;&#010;&gt; On Thu, Apr 13, 2017 at 1:50 PM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt; wrote:&#010;&gt;&gt; Hi&#010;&gt;&gt;&#010;&gt;&gt; Thanks Antonin that sounds great.&#010;&gt;&gt;&#010;&gt;&gt; The JIRA tickets are down to 3&#010;&gt;&gt; https://issues.apache.org/jira/issues/?jql=project%20%3D%20CAMEL%20AND%20fixVersion%20%3D%202.19.0%20AND%20resolution%20%3D%20Unresolved&#010;&gt;&gt;&#010;&gt;&gt; We have recently fixed up the missing component docs and fixed broken&#010;&gt;&gt; links from browsing on github.&#010;&gt;&gt;&#010;&gt;&gt; We should keep an eye on the CI servers and output from the&#010;&gt;&gt; camel-catalog report, to see if it reports more missing stuff.&#010;&gt;&gt; It currently has a false positive on some missing docs for some of the&#010;&gt;&gt; test components. I will try to fix this later today.&#010;&gt;&gt;&#010;&gt;&gt; However thats not all. At all time feel free to have fun and work on&#010;&gt;&gt; anything you like on Camel. There is still time for small improvements&#010;&gt;&gt; etc. But bigger stuff we should really defer to the next release.&#010;&gt;&gt;&#010;&gt;&gt;&#010;&gt;&gt; On Wed, Apr 12, 2017 at 3:35 PM, Antonin Stefanutti&#010;&gt;&gt; &lt;antonin@stefanutti.fr&gt; wrote:&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; On 12 Apr 2017, at 15:22, Claus Ibsen &lt;claus.ibsen@gmail.com&gt; wrote:&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; Hi&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; Just a heads up that we plan to cut the RC for Camel 2.19 next week.&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; So we are closing down on the last tickets, bugs, features etc to get&#010;&gt;&gt;&gt;&gt; the code base in shape.&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; The JIRA has 9 tickets&#010;&gt;&gt;&gt;&gt; https://issues.apache.org/jira/issues/?jql=project%20%3D%20CAMEL%20AND%20fixVersion%20%3D%202.19.0%20AND%20resolution%20%3D%20Unresolved&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; But you are of course welcome to work on other tickets etc but just&#010;&gt;&gt;&gt;&gt; mind any big functionality is likely better to wait for next release.&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; There is however the expected transaction stuff for CDI as a PR in the&#010;&gt;&gt;&gt;&gt; works, and also a new iot component&#010;&gt;&gt;&gt;&gt; https://github.com/apache/camel/pulls&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; The CDI transaction support PR should be merged by end of week.&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; https://github.com/apache/camel/pull/1390&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; We should keep an eye on the CI servers to see how they are and fix&#010;&gt;&gt;&gt;&gt; any test failures etc. Recently we got them to build and test the OSGi&#010;&gt;&gt;&gt;&gt; and spring-boot specific tests so we should be able to better keep an&#010;&gt;&gt;&gt;&gt; eye on this now and in the future.&#010;&gt;&gt;&gt;&gt; https://builds.apache.org/view/A-D/view/Camel/&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; On Fri, Apr 7, 2017 at 8:45 AM, Gregor Zurowski&#010;&gt;&gt;&gt;&gt; &lt;gregor@list.zurowski.org&gt; wrote:&#010;&gt;&gt;&gt;&gt;&gt; Hi Claus,&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; Week 16 works for me.  I will send out another email shortly before&#010;&gt;&gt;&gt;&gt;&gt; starting to build the RC.&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; Thanks,&#010;&gt;&gt;&gt;&gt;&gt; Gregor&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; On Wed, Apr 5, 2017 at 3:08 PM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt;&#010;wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt; Hi Gregor&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; Yeah its April so we should get the 2.19.0 release out the door.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; We have just setup a 2.20.0 version in JIRA and folks should start&#010;&gt;&gt;&gt;&gt;&gt;&gt; moving their tickets to that version if its something that they cannot&#010;&gt;&gt;&gt;&gt;&gt;&gt; finish in time. Also we should refrain from doing bigger work at&#010;this&#010;&gt;&gt;&gt;&gt;&gt;&gt; time as we should close down on last tickets, bug fixes, and get&#010;the&#010;&gt;&gt;&gt;&gt;&gt;&gt; CI tests in good order, etc.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; I will look at the JIRAs later this week and cleanup a bit so we&#010;have&#010;&gt;&gt;&gt;&gt;&gt;&gt; a better overview of what work is yet to be done.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; As April has the easter holidays. I wonder what you time schedule&#010;looks like?&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; Maybe if you have time to help with the release after the holidays?&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; Week 16 and 17 are the last 2 weeks in April after the holidays.&#010;&gt;&gt;&gt;&gt;&gt;&gt; If we could maybe cut the RC in week 16 then that would be good.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Apr 3, 2017 at 2:14 PM, Gregor Zurowski&#010;&gt;&gt;&gt;&gt;&gt;&gt; &lt;gregor@list.zurowski.org&gt; wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi,&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Are we getting closer to build a 2.19.0 release?  I would volunteer&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for creating the release, just wanted to check when would be&#010;a good&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; time to do so.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Gregor&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Mar 15, 2017 at 9:29 AM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt;&#010;wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Just wanted to bring up that we are closing in on a good&#010;time for&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; doing a new release.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For example in mid April it would be around 6 months since&#010;the last&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2.18.0 release.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Therefore we should start closing down and fixing bugs, and&#010;make sure&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the CI servers and tests are in good shape.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This morning we have fixed a number of recent test failures&#010;and are&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; down to only 1 test failure now.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jan 16, 2017 at 10:28 AM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt;&#010;wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is a bunch of stuff which we can/should have on&#010;the roadmap to&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; complete for the Camel 2.19 release.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Here is on top of my head&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Finish migrating the wiki documentation to adoc files.&#010;I think its&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; most of the EIP patterns that are missing. There is a&#010;basic list of&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; EIPs here: https://github.com/apache/camel/blob/master/camel-core/readme-eip.adoc&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Generate documentation and website. Maybe documentation&#010;first and then&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; we come up with a modern website later - when we have&#010;a new logo as&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; well.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mark more stuff to @deprecate so we dont drag them into&#010;Camel 3.0.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is both components / and other artifacts.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; And as well the camel-core APIs where there is maybe&#010;more we can deprecate.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For example the old stuff that was created prior to the&#010;component docs&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; we do now with the apt plugin at build time instead of&#010;this old code&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; with runtime that dont really pan out anyway.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 4)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Move spring-boot starters into the platforms folder.&#010;There is a ticket&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; about this.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 5)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; More improvements to spring boot auto configuration.&#010;We have a bunch&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of tickets on that.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 6)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Look at the health check API and see if there is something&#010;we can get&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; started on.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Possible some API to integrate with spring boot actuators&#010;(when using&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; SB) and allow each component to provide their own checks&#010;so they can&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; be implemented ad-hoc. There is a ticket about this.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 7)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Possible some more teaks to camel-catalog based on feedback&#010;from IDEA&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; plugin and the maven validate goal.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 8)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; That CDI JEE transaction PR on github.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ideally we would have had a transaction API in camel-core&#010;and then one&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; impl for camel-spring, and then another for camel-cdi-jee.&#010;But that&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; may require too much work.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 9)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Work on the Java 8 DSL such as get more community feedback,&#010;and then&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; resolve the TODOs with the documentation updates and&#010;look into other&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; areas where the API can benefit from Java 8 lambdas and&#010;whatnot. I&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; dont think we have a ticket about this.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 10)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Karaf users may want to improve/finish up the camel-test-karaf&#010;module&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; so its more usable and end users can use it to test integration&#010;tests&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; with Camel and Karaf.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 11)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Introduce Camel Connectors (more about this later)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Anything else?&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; --&#010;&gt;&gt;&gt;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; --&#010;&gt;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&gt;&#010;&gt;&gt;&#010;&gt;&gt;&#010;&gt;&gt;&#010;&gt;&gt; --&#010;&gt;&gt; Claus Ibsen&#010;&gt;&gt; -----------------&#010;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt; --&#010;&gt; Claus Ibsen&#010;&gt; -----------------&#010;&gt; http://davsclaus.com @davsclaus&#010;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;&#010;&#010;-- &#010;Claus Ibsen&#010;-----------------&#010;http://davsclaus.com @davsclaus&#010;Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3CCAGB5yNkkfcc0Qy7Of_%2Bh1BrhFRax93%2Bhsd%3D%2B7qOAzuF63tbxKw%40mail.gmail.com%3E,2017-04-19 07:54:25,mail,14.0,                Re: Camel 2.19 Roadmap
153,153,233.0,15.0,Claus Ibsen,"Hi&#010;&#010;So the @Generated and Java 9 ought to be fixed now.&#010;&#010;There is a new version of Spring Boot 1.5.3 on the way. It may be&#010;beneficial to wait for that to be released so we are running on&#010;latest.&#010;&#010;On Wed, Apr 19, 2017 at 9:54 AM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt; wrote:&#010;&gt; Hi&#010;&gt;&#010;&gt; Okay so there is some last minute issues with the @Generated&#010;&gt; annotations we need to look into&#010;&gt; https://issues.apache.org/jira/browse/CAMEL-11165&#010;&gt;&#010;&gt; And an unforseen effect on java 9 builds&#010;&gt; https://issues.apache.org/jira/browse/CAMEL-11166&#010;&gt;&#010;&gt; The full test is passing now. And the Spring Boot and Karaf tests has&#010;&gt; also passed but failed recently due some maven download error or some&#010;&gt; other weird error. So lets kick new builds when we get the 2 tickets&#010;&gt; resolved above.&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt; On Tue, Apr 18, 2017 at 9:45 AM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt; wrote:&#010;&gt;&gt; Hi&#010;&gt;&gt;&#010;&gt;&gt; Things start to look good. There is a itest that fails with spring&#010;&gt;&gt; boot which we need to look at and get fixed&#010;&gt;&gt; https://issues.apache.org/jira/browse/CAMEL-11154&#010;&gt;&gt;&#010;&gt;&gt; The other tests was all passing recently and they ought to become blue&#010;&gt;&gt; again. But lets keep an eye on them:&#010;&gt;&gt; https://builds.apache.org/view/A-D/view/Camel/&#010;&gt;&gt;&#010;&gt;&gt;&#010;&gt;&gt; On Thu, Apr 13, 2017 at 1:50 PM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt; wrote:&#010;&gt;&gt;&gt; Hi&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; Thanks Antonin that sounds great.&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; The JIRA tickets are down to 3&#010;&gt;&gt;&gt; https://issues.apache.org/jira/issues/?jql=project%20%3D%20CAMEL%20AND%20fixVersion%20%3D%202.19.0%20AND%20resolution%20%3D%20Unresolved&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; We have recently fixed up the missing component docs and fixed broken&#010;&gt;&gt;&gt; links from browsing on github.&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; We should keep an eye on the CI servers and output from the&#010;&gt;&gt;&gt; camel-catalog report, to see if it reports more missing stuff.&#010;&gt;&gt;&gt; It currently has a false positive on some missing docs for some of the&#010;&gt;&gt;&gt; test components. I will try to fix this later today.&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; However thats not all. At all time feel free to have fun and work on&#010;&gt;&gt;&gt; anything you like on Camel. There is still time for small improvements&#010;&gt;&gt;&gt; etc. But bigger stuff we should really defer to the next release.&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; On Wed, Apr 12, 2017 at 3:35 PM, Antonin Stefanutti&#010;&gt;&gt;&gt; &lt;antonin@stefanutti.fr&gt; wrote:&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; On 12 Apr 2017, at 15:22, Claus Ibsen &lt;claus.ibsen@gmail.com&gt; wrote:&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; Hi&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; Just a heads up that we plan to cut the RC for Camel 2.19 next week.&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; So we are closing down on the last tickets, bugs, features etc to get&#010;&gt;&gt;&gt;&gt;&gt; the code base in shape.&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; The JIRA has 9 tickets&#010;&gt;&gt;&gt;&gt;&gt; https://issues.apache.org/jira/issues/?jql=project%20%3D%20CAMEL%20AND%20fixVersion%20%3D%202.19.0%20AND%20resolution%20%3D%20Unresolved&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; But you are of course welcome to work on other tickets etc but just&#010;&gt;&gt;&gt;&gt;&gt; mind any big functionality is likely better to wait for next release.&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; There is however the expected transaction stuff for CDI as a PR in the&#010;&gt;&gt;&gt;&gt;&gt; works, and also a new iot component&#010;&gt;&gt;&gt;&gt;&gt; https://github.com/apache/camel/pulls&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; The CDI transaction support PR should be merged by end of week.&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; https://github.com/apache/camel/pull/1390&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; We should keep an eye on the CI servers to see how they are and fix&#010;&gt;&gt;&gt;&gt;&gt; any test failures etc. Recently we got them to build and test the OSGi&#010;&gt;&gt;&gt;&gt;&gt; and spring-boot specific tests so we should be able to better keep an&#010;&gt;&gt;&gt;&gt;&gt; eye on this now and in the future.&#010;&gt;&gt;&gt;&gt;&gt; https://builds.apache.org/view/A-D/view/Camel/&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; On Fri, Apr 7, 2017 at 8:45 AM, Gregor Zurowski&#010;&gt;&gt;&gt;&gt;&gt; &lt;gregor@list.zurowski.org&gt; wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt; Hi Claus,&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; Week 16 works for me.  I will send out another email shortly before&#010;&gt;&gt;&gt;&gt;&gt;&gt; starting to build the RC.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,&#010;&gt;&gt;&gt;&gt;&gt;&gt; Gregor&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Apr 5, 2017 at 3:08 PM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt;&#010;wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi Gregor&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yeah its April so we should get the 2.19.0 release out the door.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; We have just setup a 2.20.0 version in JIRA and folks should&#010;start&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; moving their tickets to that version if its something that they&#010;cannot&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; finish in time. Also we should refrain from doing bigger work&#010;at this&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; time as we should close down on last tickets, bug fixes, and&#010;get the&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; CI tests in good order, etc.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I will look at the JIRAs later this week and cleanup a bit so&#010;we have&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a better overview of what work is yet to be done.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; As April has the easter holidays. I wonder what you time schedule&#010;looks like?&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Maybe if you have time to help with the release after the holidays?&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Week 16 and 17 are the last 2 weeks in April after the holidays.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If we could maybe cut the RC in week 16 then that would be good.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Apr 3, 2017 at 2:14 PM, Gregor Zurowski&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;gregor@list.zurowski.org&gt; wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi,&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Are we getting closer to build a 2.19.0 release?  I would&#010;volunteer&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for creating the release, just wanted to check when would&#010;be a good&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; time to do so.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Gregor&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Mar 15, 2017 at 9:29 AM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt;&#010;wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Just wanted to bring up that we are closing in on a good&#010;time for&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; doing a new release.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For example in mid April it would be around 6 months&#010;since the last&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2.18.0 release.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Therefore we should start closing down and fixing bugs,&#010;and make sure&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the CI servers and tests are in good shape.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This morning we have fixed a number of recent test failures&#010;and are&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; down to only 1 test failure now.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jan 16, 2017 at 10:28 AM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt;&#010;wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is a bunch of stuff which we can/should have&#010;on the roadmap to&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; complete for the Camel 2.19 release.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Here is on top of my head&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Finish migrating the wiki documentation to adoc files.&#010;I think its&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; most of the EIP patterns that are missing. There&#010;is a basic list of&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; EIPs here: https://github.com/apache/camel/blob/master/camel-core/readme-eip.adoc&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Generate documentation and website. Maybe documentation&#010;first and then&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; we come up with a modern website later - when we&#010;have a new logo as&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; well.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mark more stuff to @deprecate so we dont drag them&#010;into Camel 3.0.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is both components / and other artifacts.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; And as well the camel-core APIs where there is maybe&#010;more we can deprecate.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For example the old stuff that was created prior&#010;to the component docs&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; we do now with the apt plugin at build time instead&#010;of this old code&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; with runtime that dont really pan out anyway.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 4)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Move spring-boot starters into the platforms folder.&#010;There is a ticket&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; about this.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 5)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; More improvements to spring boot auto configuration.&#010;We have a bunch&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of tickets on that.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 6)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Look at the health check API and see if there is&#010;something we can get&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; started on.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Possible some API to integrate with spring boot actuators&#010;(when using&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; SB) and allow each component to provide their own&#010;checks so they can&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; be implemented ad-hoc. There is a ticket about this.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 7)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Possible some more teaks to camel-catalog based on&#010;feedback from IDEA&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; plugin and the maven validate goal.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 8)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; That CDI JEE transaction PR on github.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ideally we would have had a transaction API in camel-core&#010;and then one&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; impl for camel-spring, and then another for camel-cdi-jee.&#010;But that&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; may require too much work.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 9)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Work on the Java 8 DSL such as get more community&#010;feedback, and then&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; resolve the TODOs with the documentation updates&#010;and look into other&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; areas where the API can benefit from Java 8 lambdas&#010;and whatnot. I&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; dont think we have a ticket about this.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 10)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Karaf users may want to improve/finish up the camel-test-karaf&#010;module&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; so its more usable and end users can use it to test&#010;integration tests&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; with Camel and Karaf.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 11)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Introduce Camel Connectors (more about this later)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Anything else?&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; --&#010;&gt;&gt;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; --&#010;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&#010;&gt;&gt;&#010;&gt;&gt;&#010;&gt;&gt; --&#010;&gt;&gt; Claus Ibsen&#010;&gt;&gt; -----------------&#010;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt; --&#010;&gt; Claus Ibsen&#010;&gt; -----------------&#010;&gt; http://davsclaus.com @davsclaus&#010;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;&#010;&#010;-- &#010;Claus Ibsen&#010;-----------------&#010;http://davsclaus.com @davsclaus&#010;Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3CCAGB5yNnn9d7JUWHqDfdU8Kcx6LmqLvP14GTN%3DBZ4bxv-gxen7Q%40mail.gmail.com%3E,2017-04-19 11:39:20,mail,15.0,                  Re: Camel 2.19 Roadmap
154,154,239.0,16.0,Luca Burgazzoli,"Hi,&#010;&#010;I have one little refactoring (rename LoadBalancer in camel cloud&#010;package to avoid confusion with LoadBalancer processor) and a little&#010;doc update that I'm trying to make by end of day.&#010;&#010;&#010;&#010;---&#010;Luca Burgazzoli&#010;&#010;&#010;On Wed, Apr 19, 2017 at 1:39 PM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt; wrote:&#010;&gt; Hi&#010;&gt;&#010;&gt; So the @Generated and Java 9 ought to be fixed now.&#010;&gt;&#010;&gt; There is a new version of Spring Boot 1.5.3 on the way. It may be&#010;&gt; beneficial to wait for that to be released so we are running on&#010;&gt; latest.&#010;&gt;&#010;&gt; On Wed, Apr 19, 2017 at 9:54 AM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt; wrote:&#010;&gt;&gt; Hi&#010;&gt;&gt;&#010;&gt;&gt; Okay so there is some last minute issues with the @Generated&#010;&gt;&gt; annotations we need to look into&#010;&gt;&gt; https://issues.apache.org/jira/browse/CAMEL-11165&#010;&gt;&gt;&#010;&gt;&gt; And an unforseen effect on java 9 builds&#010;&gt;&gt; https://issues.apache.org/jira/browse/CAMEL-11166&#010;&gt;&gt;&#010;&gt;&gt; The full test is passing now. And the Spring Boot and Karaf tests has&#010;&gt;&gt; also passed but failed recently due some maven download error or some&#010;&gt;&gt; other weird error. So lets kick new builds when we get the 2 tickets&#010;&gt;&gt; resolved above.&#010;&gt;&gt;&#010;&gt;&gt;&#010;&gt;&gt;&#010;&gt;&gt;&#010;&gt;&gt; On Tue, Apr 18, 2017 at 9:45 AM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt; wrote:&#010;&gt;&gt;&gt; Hi&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; Things start to look good. There is a itest that fails with spring&#010;&gt;&gt;&gt; boot which we need to look at and get fixed&#010;&gt;&gt;&gt; https://issues.apache.org/jira/browse/CAMEL-11154&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; The other tests was all passing recently and they ought to become blue&#010;&gt;&gt;&gt; again. But lets keep an eye on them:&#010;&gt;&gt;&gt; https://builds.apache.org/view/A-D/view/Camel/&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; On Thu, Apr 13, 2017 at 1:50 PM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt; wrote:&#010;&gt;&gt;&gt;&gt; Hi&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; Thanks Antonin that sounds great.&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; The JIRA tickets are down to 3&#010;&gt;&gt;&gt;&gt; https://issues.apache.org/jira/issues/?jql=project%20%3D%20CAMEL%20AND%20fixVersion%20%3D%202.19.0%20AND%20resolution%20%3D%20Unresolved&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; We have recently fixed up the missing component docs and fixed broken&#010;&gt;&gt;&gt;&gt; links from browsing on github.&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; We should keep an eye on the CI servers and output from the&#010;&gt;&gt;&gt;&gt; camel-catalog report, to see if it reports more missing stuff.&#010;&gt;&gt;&gt;&gt; It currently has a false positive on some missing docs for some of the&#010;&gt;&gt;&gt;&gt; test components. I will try to fix this later today.&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; However thats not all. At all time feel free to have fun and work on&#010;&gt;&gt;&gt;&gt; anything you like on Camel. There is still time for small improvements&#010;&gt;&gt;&gt;&gt; etc. But bigger stuff we should really defer to the next release.&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; On Wed, Apr 12, 2017 at 3:35 PM, Antonin Stefanutti&#010;&gt;&gt;&gt;&gt; &lt;antonin@stefanutti.fr&gt; wrote:&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; On 12 Apr 2017, at 15:22, Claus Ibsen &lt;claus.ibsen@gmail.com&gt;&#010;wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; Hi&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; Just a heads up that we plan to cut the RC for Camel 2.19 next week.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; So we are closing down on the last tickets, bugs, features etc to&#010;get&#010;&gt;&gt;&gt;&gt;&gt;&gt; the code base in shape.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; The JIRA has 9 tickets&#010;&gt;&gt;&gt;&gt;&gt;&gt; https://issues.apache.org/jira/issues/?jql=project%20%3D%20CAMEL%20AND%20fixVersion%20%3D%202.19.0%20AND%20resolution%20%3D%20Unresolved&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; But you are of course welcome to work on other tickets etc but just&#010;&gt;&gt;&gt;&gt;&gt;&gt; mind any big functionality is likely better to wait for next release.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; There is however the expected transaction stuff for CDI as a PR in&#010;the&#010;&gt;&gt;&gt;&gt;&gt;&gt; works, and also a new iot component&#010;&gt;&gt;&gt;&gt;&gt;&gt; https://github.com/apache/camel/pulls&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; The CDI transaction support PR should be merged by end of week.&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt; https://github.com/apache/camel/pull/1390&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; We should keep an eye on the CI servers to see how they are and fix&#010;&gt;&gt;&gt;&gt;&gt;&gt; any test failures etc. Recently we got them to build and test the&#010;OSGi&#010;&gt;&gt;&gt;&gt;&gt;&gt; and spring-boot specific tests so we should be able to better keep&#010;an&#010;&gt;&gt;&gt;&gt;&gt;&gt; eye on this now and in the future.&#010;&gt;&gt;&gt;&gt;&gt;&gt; https://builds.apache.org/view/A-D/view/Camel/&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Apr 7, 2017 at 8:45 AM, Gregor Zurowski&#010;&gt;&gt;&gt;&gt;&gt;&gt; &lt;gregor@list.zurowski.org&gt; wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi Claus,&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Week 16 works for me.  I will send out another email shortly&#010;before&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; starting to build the RC.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Gregor&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Apr 5, 2017 at 3:08 PM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt;&#010;wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi Gregor&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yeah its April so we should get the 2.19.0 release out the&#010;door.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; We have just setup a 2.20.0 version in JIRA and folks should&#010;start&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; moving their tickets to that version if its something that&#010;they cannot&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; finish in time. Also we should refrain from doing bigger&#010;work at this&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; time as we should close down on last tickets, bug fixes,&#010;and get the&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; CI tests in good order, etc.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I will look at the JIRAs later this week and cleanup a bit&#010;so we have&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; a better overview of what work is yet to be done.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; As April has the easter holidays. I wonder what you time&#010;schedule looks like?&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Maybe if you have time to help with the release after the&#010;holidays?&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Week 16 and 17 are the last 2 weeks in April after the holidays.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If we could maybe cut the RC in week 16 then that would be&#010;good.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Apr 3, 2017 at 2:14 PM, Gregor Zurowski&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;gregor@list.zurowski.org&gt; wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi,&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Are we getting closer to build a 2.19.0 release?  I would&#010;volunteer&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for creating the release, just wanted to check when would&#010;be a good&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; time to do so.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Gregor&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Mar 15, 2017 at 9:29 AM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt;&#010;wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Just wanted to bring up that we are closing in on&#010;a good time for&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; doing a new release.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For example in mid April it would be around 6 months&#010;since the last&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2.18.0 release.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Therefore we should start closing down and fixing&#010;bugs, and make sure&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the CI servers and tests are in good shape.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This morning we have fixed a number of recent test&#010;failures and are&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; down to only 1 test failure now.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jan 16, 2017 at 10:28 AM, Claus Ibsen &lt;claus.ibsen@gmail.com&gt;&#010;wrote:&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is a bunch of stuff which we can/should&#010;have on the roadmap to&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; complete for the Camel 2.19 release.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Here is on top of my head&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Finish migrating the wiki documentation to adoc&#010;files. I think its&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; most of the EIP patterns that are missing. There&#010;is a basic list of&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; EIPs here: https://github.com/apache/camel/blob/master/camel-core/readme-eip.adoc&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Generate documentation and website. Maybe documentation&#010;first and then&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; we come up with a modern website later - when&#010;we have a new logo as&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; well.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Mark more stuff to @deprecate so we dont drag&#010;them into Camel 3.0.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is both components / and other artifacts.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; And as well the camel-core APIs where there is&#010;maybe more we can deprecate.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For example the old stuff that was created prior&#010;to the component docs&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; we do now with the apt plugin at build time instead&#010;of this old code&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; with runtime that dont really pan out anyway.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 4)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Move spring-boot starters into the platforms&#010;folder. There is a ticket&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; about this.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 5)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; More improvements to spring boot auto configuration.&#010;We have a bunch&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of tickets on that.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 6)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Look at the health check API and see if there&#010;is something we can get&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; started on.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Possible some API to integrate with spring boot&#010;actuators (when using&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; SB) and allow each component to provide their&#010;own checks so they can&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; be implemented ad-hoc. There is a ticket about&#010;this.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 7)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Possible some more teaks to camel-catalog based&#010;on feedback from IDEA&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; plugin and the maven validate goal.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 8)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; That CDI JEE transaction PR on github.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ideally we would have had a transaction API in&#010;camel-core and then one&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; impl for camel-spring, and then another for camel-cdi-jee.&#010;But that&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; may require too much work.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 9)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Work on the Java 8 DSL such as get more community&#010;feedback, and then&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; resolve the TODOs with the documentation updates&#010;and look into other&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; areas where the API can benefit from Java 8 lambdas&#010;and whatnot. I&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; dont think we have a ticket about this.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 10)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Karaf users may want to improve/finish up the&#010;camel-test-karaf module&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; so its more usable and end users can use it to&#010;test integration tests&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; with Camel and Karaf.&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 11)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Introduce Camel Connectors (more about this later)&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Anything else?&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&gt;&gt; --&#010;&gt;&gt;&gt;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&gt; --&#010;&gt;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt;&#010;&gt;&gt;&gt; --&#010;&gt;&gt;&gt; Claus Ibsen&#010;&gt;&gt;&gt; -----------------&#010;&gt;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&gt;&#010;&gt;&gt;&#010;&gt;&gt;&#010;&gt;&gt; --&#010;&gt;&gt; Claus Ibsen&#010;&gt;&gt; -----------------&#010;&gt;&gt; http://davsclaus.com @davsclaus&#010;&gt;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt; --&#010;&gt; Claus Ibsen&#010;&gt; -----------------&#010;&gt; http://davsclaus.com @davsclaus&#010;&gt; Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3CCAMpNYoYivdY%2BiaTTOUn4RvYUoOpAGBs%2B9sdFDJ4FgPALWPzPeQ%40mail.gmail.com%3E,2017-04-19 12:21:57,mail,16.0,                    Re: Camel 2.19 Roadmap
155,155,91.0,562.0,Luca Burgazzoli (JIRA),"Luca Burgazzoli created CAMEL-11155:&#010;---------------------------------------&#010;&#010;             Summary: camel-infinispan: command and operation should match&#010;                 Key: CAMEL-11155&#010;                 URL: https://issues.apache.org/jira/browse/CAMEL-11155&#010;             Project: Camel&#010;          Issue Type: Improvement&#010;          Components: camel-infinispan&#010;            Reporter: Luca Burgazzoli&#010;            Assignee: Luca Burgazzoli&#010;            Priority: Minor&#010;             Fix For: 2.20.0&#010;&#010;&#010;As today in camel-infinispan you can configure which operation the producer should perform&#010;in two ways:&#010;- by setting the CamelInfinispanOperation header&#010;- by setting the command option in the endpoint&#010;&#010;The first thing to notice is that they use a different naming but for consistency we should&#010;use either operation or command but not both. The second thing is that if you set the operation&#010;on header you should use i.e. CamelInfinispanOperationPut but the same ""operation"" set to&#010;the command uri option is PUT so again there is a discrepancy in the naming used.&#010;&#010;As solution we should use:&#010;- CamelInfinispanOperation for the header&#010;- operation as endpoint option&#010;- the operation should be in the simple form like PUT, GET, etc as it is clear from the context&#010;that we are targeting Infinispan. &#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064616.1492502072000.303571.1492502081884%40Atlassian.JIRA%3E,2017-04-18 07:54:41,issues,566.0,  [jira] [Created] (CAMEL-11155) camel-infinispan: command and operation should match
166,166,100.0,573.0,Bjørn Hilstad (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11000?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15972349#comment-15972349&#010;] &#010;&#010;Bjørn Hilstad commented on CAMEL-11000:&#010;---------------------------------------&#010;&#010;This change does not actually seem to be in the 2.17.6 version. Something has gone wrong.&#010;&#010;&gt; Property 'accessExternalDTD' is not recognized by (all) Xerces&#010;&gt; --------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11000&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11000&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Bug&#010;&gt;          Components: camel-validator&#010;&gt;    Affects Versions: 2.17.5, 2.18.3&#010;&gt;            Reporter: Bernard Ligny&#010;&gt;            Assignee: Andrea Cosentino&#010;&gt;             Fix For: 2.17.6, 2.18.4, 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; When upgrading from v2.18.1 to 2.18.3, we encounter a (blocking) regression, preventing&#010;routes involving validator component to successfully start.&#010;&gt; Indeed, one of the recent validation-related changes is not fully compatible with all&#010;versions of Xerces. Especially when deployed on JBoss Wildlfy 10.1.0.Final :-(&#010;&gt; *Stack trace*:&#010;&gt; {code:java}&#010;&gt; Caused by: java.lang.IllegalStateException: org.xml.sax.SAXNotRecognizedException: Property&#010;'http://javax.xml.XMLConstants/property/accessExternalDTD' is not recognized.&#010;&gt; &#009;at org.apache.camel.processor.validation.SchemaReader.createSchemaFactory(SchemaReader.java:181)&#010;&gt; &#009;at org.apache.camel.processor.validation.SchemaReader.getSchemaFactory(SchemaReader.java:152)&#010;&gt; &#009;at org.apache.camel.processor.validation.SchemaReader.createSchema(SchemaReader.java:192)&#010;&gt; &#009;at org.apache.camel.processor.validation.SchemaReader.loadSchema(SchemaReader.java:84)&#010;&gt; &#009;at org.apache.camel.component.validator.ValidatorEndpoint.createProducer(ValidatorEndpoint.java:119)&#010;&gt; &#009;at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:574)&#010;&gt; &#009;... 78 more&#010;&gt; Caused by: org.xml.sax.SAXNotRecognizedException: Property 'http://javax.xml.XMLConstants/property/accessExternalDTD'&#010;is not recognized.&#010;&gt; &#009;at org.apache.xerces.jaxp.validation.XMLSchemaFactory.setProperty(XMLSchemaFactory.java:436)&#010;&gt; &#009;at __redirected.__SchemaFactory.setProperty(__SchemaFactory.java:143)&#010;&gt; &#009;at org.apache.camel.processor.validation.SchemaReader.createSchemaFactory(SchemaReader.java:178)&#010;&gt; &#009;... 83 more&#010;&gt; {code}&#010;&gt; In particular, in the following code:&#010;&gt; {code:java}&#010;&gt; protected SchemaFactory createSchemaFactory() {&#010;&gt;    ...&#010;&gt; &#009;try {&#010;&gt; &#009;&#009;factory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, """");&#010;&gt; &#009;} catch (SAXException e) {&#010;&gt; &#009;&#009;LOG.error(e.getMessage(), e);&#010;&gt; &#009;&#009;throw new IllegalStateException(e);&#010;&gt; &#009;} &#010;&gt;  &#010;&gt; }   &#010;&gt; {code} &#010;&gt;    &#010;&gt; Would it be possible to issue a simple warning, rather then raising an exception ?&#010;&gt; (&gt;see Oracle recommandations: https://docs.oracle.com/javase/tutorial/jaxp/properties/error.html)&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13050532.1489405412000.304013.1492505861849%40Atlassian.JIRA%3E,2017-04-18 08:57:41,issues,577.0,  [jira] [Commented] (CAMEL-11000) Property 'accessExternalDTD' is not recognized by (all) Xerces
173,173,106.0,359.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master d73893ffc -&gt; a49af7f1d&#010;&#010;&#010;CAMEL-11160: Component docs - ascii doc warns&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/a49af7f1&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/a49af7f1&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/a49af7f1&#010;&#010;Branch: refs/heads/master&#010;Commit: a49af7f1d899080d0e3ddcc200a0b89c9c1320a1&#010;Parents: d73893f&#010;Author: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Authored: Tue Apr 18 11:24:47 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Tue Apr 18 11:24:47 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../src/main/docs/ignite-component.adoc         | 123 ++++++++-----------&#010; .../src/main/docs/test-spring.adoc              |  73 +++++------&#010; 2 files changed, 79 insertions(+), 117 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/a49af7f1/components/camel-ignite/src/main/docs/ignite-component.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-ignite/src/main/docs/ignite-component.adoc b/components/camel-ignite/src/main/docs/ignite-component.adoc&#010;index a721719..36b1e39 100644&#010;--- a/components/camel-ignite/src/main/docs/ignite-component.adoc&#010;+++ b/components/camel-ignite/src/main/docs/ignite-component.adoc&#010;@@ -1,4 +1,3 @@&#010;-[[Ignite-Component]]&#010; ## Ignite Component&#010; &#010; *Available as of Camel version 2.17*&#010;@@ -40,9 +39,8 @@ If running in an OSGi container, please don't miss the &lt;&lt;Ignite-OsgiSupport,OSGi&#010; // endpoint options: END&#010; &#010; &#010;-[[Ignite-Cache]]&#010;-CACHE: Ignite Cache Endpoint&#010;-^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;+### CACHE: Ignite Cache Endpoint&#010;+&#010; This endpoint allows you to interact with an https://apacheignite.readme.io/docs/data-grid[Ignite&#010;Cache]:&#010; &#010; [source,text]&#010;@@ -56,8 +54,8 @@ The cache value is always the body of the message, whereas the cache key&#010;is alwa&#010; &#010; Even if you configure a fixed operation in the endpoint URI, you can vary it per-exchange&#010;by setting the `IgniteConstants.IGNITE_CACHE_OPERATION` message header.&#010; &#010;-Options&#010;-++++++&#010;+#### Options&#010;+&#010; [width=""100%"",cols=""1,1,1,4,1,1"",options=""header""]&#010; |=======================================================================&#010; | Option | Type | Default value | Description | Compulsory | Consumer/producer&#010;@@ -102,8 +100,8 @@ N | Consumer&#010; Time interval in millis on the Continuous Query (see Ignite docs). | N | Consumer&#010; |=======================================================================&#010; &#010;-Headers used&#010;-+++++++++++&#010;+#### Headers used&#010;+&#010; This endpoint uses the following headers:&#010; [width=""100%"",cols=""1,1,1,4"",options=""header""]&#010; |=======================================================================&#010;@@ -132,10 +130,9 @@ This header carries the old cache value when passed in the incoming cache&#010;event&#010; |=======================================================================&#010; &#010; &#010;-[[Ignite-Compute]]&#010;-COMPUTE: Ignite Compute Endpoint&#010;-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;-This endpoint allows you to run https://apacheignite.readme.io/docs/compute-grid[compute&#010;operations] on the cluster by passing in an IgniteCallable, an IgniteRunnable, an IgniteClosure,&#010;or collections of them, along with their parameters if necessary. &#010;+### COMPUTE: Ignite Compute Endpoint&#010;+&#010;+This endpoint allows you to run https://apacheignite.readme.io/docs/compute-grid[compute&#010;operations] on the cluster by passing in an IgniteCallable, an IgniteRunnable, an IgniteClosure,&#010;or collections of them, along with their parameters if necessary.&#010; &#010; [source,text]&#010; ----&#010;@@ -148,8 +145,8 @@ The host part of the endpoint URI is a symbolic endpoint ID, it is not&#010;used for&#010; &#010; The endpoint tries to run the object passed in the body of the IN message as the compute&#010;job. It expects different payload types depending on the execution type.&#010; &#010;-Expected payload types&#010;-+++++++++++++++++++++&#010;+#### Expected payload types&#010;+&#010; Each operation expects the indicated types:&#010; [width=""100%"",cols=""1,4"",options=""header""]&#010; |=======================================================================&#010;@@ -163,8 +160,8 @@ Each operation expects the indicated types:&#010; | AFFINITY_RUN | IgniteRunnable.&#010; |=======================================================================&#010; &#010;-Options&#010;-++++++&#010;+#### Options&#010;+&#010; [width=""100%"",cols=""1,1,1,4,1,1"",options=""header""]&#010; |=======================================================================&#010; | Option | Type | Default value | Description | Compulsory | Consumer/producer&#010;@@ -186,8 +183,8 @@ N | Producer&#010; | timeoutMillis | Long | --- | The timeout for the compute job. | N | Producer&#010; |=======================================================================&#010; &#010;-Headers used&#010;-+++++++++++&#010;+#### Headers used&#010;+&#010; This endpoint uses the following headers:&#010; [width=""100%"",cols=""1,1,1,4"",options=""header""]&#010; |=======================================================================&#010;@@ -209,9 +206,8 @@ Affinity key for the AFFINITY_CALL and AFFINITY_RUN operations.&#010; |=======================================================================&#010; &#010; &#010;-[[Ignite-Messaging]]&#010;-MESSAGING: Ignite Messaging Endpoint&#010;-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;+### MESSAGING: Ignite Messaging Endpoint&#010;+&#010; The Ignite Messaging endpoint allows you to send and consume messages from an https://apacheignite.readme.io/docs/messaging[Ignite&#010;topic].&#010; &#010; [source,text]&#010;@@ -221,8 +217,8 @@ ignite:messaging:topicName?option1=value1&amp;option2=value2...&#010; &#010; This endpoint supports producers (to send messages) and consumers (to receive messages).&#010; &#010;-Options&#010;-++++++&#010;+#### Options&#010;+&#010; [width=""100%"",cols=""1,1,1,4,1,1"",options=""header""]&#010; |=======================================================================&#010; | Option | Type | Default value | Description | Compulsory | Consumer/producer&#010;@@ -239,8 +235,8 @@ N | Producer&#010; N | Producer&#010; |=======================================================================&#010; &#010;-Headers used&#010;-+++++++++++&#010;+#### Headers used&#010;+&#010; This endpoint uses the following headers:&#010; [width=""100%"",cols=""1,1,1,4"",options=""header""]&#010; |=======================================================================&#010;@@ -254,9 +250,8 @@ This header is filled in with the UUID of the subscription when a message&#010;arrive&#010; |=======================================================================&#010; &#010; &#010;-[[Ignite-Events]]&#010;-EVENTS: Ignite Events Endpoint&#010;-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;+### EVENTS: Ignite Events Endpoint&#010;+&#010; The Ignite Events endpoint allows you to https://apacheignite.readme.io/docs/events[receive&#010;events] from the Ignite cluster by creating a local event listener.&#010; &#010; [source,text]&#010;@@ -267,8 +262,8 @@ ignite:events:endpointId?option1=value1&amp;option2=value2...&#010; This endpoint only supports consumers.&#010; The Exchanges created by this consumer put the received Event object into the body of the&#010;IN message.&#010; &#010;-Options&#010;-++++++&#010;+#### Options&#010;+&#010; [width=""100%"",cols=""1,1,1,4,1,1"",options=""header""]&#010; |=======================================================================&#010; | Option | Type | Default value | Description | Compulsory | Consumer/producer&#010;@@ -283,9 +278,8 @@ N | Consumer&#010; &#010; &#010; &#010;-[[Ignite-Sets]]&#010;-SETS: Ignite Sets Endpoint&#010;-^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;+### SETS: Ignite Sets Endpoint&#010;+&#010; The Ignite Sets endpoint allows you to interact with https://apacheignite.readme.io/docs/queue-and-set[Ignite&#010;Set data structures].&#010; &#010; [source,text]&#010;@@ -295,8 +289,8 @@ ignite:sets:setName?option1=value1&amp;option2=value2...&#010; &#010; This endpoint only supports producers.&#010; &#010;-Options&#010;-++++++&#010;+#### Options&#010;+&#010; [width=""100%"",cols=""1,1,1,4,1,1"",options=""header""]&#010; |=======================================================================&#010; | Option | Type | Default value | Description | Compulsory | Consumer/producer&#010;@@ -312,8 +306,8 @@ For example: ?config.backups=4 |&#010; N | Producer&#010; |=======================================================================&#010; &#010;-Headers used&#010;-+++++++++++&#010;+#### Headers used&#010;+&#010; This endpoint uses the following headers:&#010; [width=""100%"",cols=""1,1,1,4"",options=""header""]&#010; |=======================================================================&#010;@@ -323,9 +317,8 @@ Allows you to dynamically change the set operation.&#010; |=======================================================================&#010; &#010; &#010;-[[Ignite-Queues]]&#010;-QUEUES: Ignite Queue Endpoint&#010;-^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;+### QUEUES: Ignite Queue Endpoint&#010;+&#010; The Ignite Queue endpoint allows you to interact with https://apacheignite.readme.io/docs/queue-and-set[Ignite&#010;Queue data structures].&#010; &#010; [source,text]&#010;@@ -335,8 +328,8 @@ ignite:queue:queueName?option1=value1&amp;option2=value2...&#010; &#010; This endpoint only supports producers.&#010; &#010;-Options&#010;-++++++&#010;+#### Options&#010;+&#010; [width=""100%"",cols=""1,1,1,4,1,1"",options=""header""]&#010; |=======================================================================&#010; | Option | Type | Default value | Description | Compulsory | Consumer/producer&#010;@@ -360,8 +353,8 @@ The queue capacity if you'd like to use a bounded queue. |&#010; N | Producer&#010; |=======================================================================&#010; &#010;-Headers used&#010;-+++++++++++&#010;+#### Headers used&#010;+&#010; This endpoint uses the following headers:&#010; [width=""100%"",cols=""1,1,1,4"",options=""header""]&#010; |=======================================================================&#010;@@ -380,9 +373,8 @@ Dynamically sets the timeout in milliseconds to use when invoking the&#010;OFFER or P&#010; |=======================================================================&#010; &#010; &#010;-[[Ignite-IDGenerator]]&#010;-IDGEN: Ignite ID Generator Endpoint&#010;-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;+### IDGEN: Ignite ID Generator Endpoint&#010;+&#010; The Ignite ID Generator endpoint allows you to interact with https://apacheignite.readme.io/docs/id-generator[Ignite&#010;Atomic Sequences and ID Generators].&#010; &#010; [source,text]&#010;@@ -392,8 +384,8 @@ ignite:idgen:sequenceName?option1=value1&amp;option2=value2...&#010; &#010; This endpoint only supports producers.&#010; &#010;-Options&#010;-++++++&#010;+#### Options&#010;+&#010; [width=""100%"",cols=""1,1,1,4,1,1"",options=""header""]&#010; |=======================================================================&#010; | Option | Type | Default value | Description | Compulsory | Consumer/producer&#010;@@ -411,9 +403,8 @@ N | Producer&#010; &#010; &#010; &#010;-[[Ignite-InitializeComponent]]&#010;-Initializing the Ignite component&#010;-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;+### Initializing the Ignite component&#010;+&#010; Each instance of the Ignite component is associated with an underlying org.apache.ignite.Ignite&#010;instance. You can interact with two Ignite clusters by initializing two instances of the Ignite&#010;component and binding them to different IgniteConfigurations. There are 3 ways to initialize&#010;the Ignite component:&#010; &#010; * By passing in an existing org.apache.ignite.Ignite instance. Here's an example using Spring&#010;config:&#010;@@ -457,8 +448,7 @@ Additionally, if using Camel programmatically, there are several convenience&#010;sta&#010; &#010; You may use those methods to quickly create an IgniteComponent with your chosen configuration&#010;technique.&#010; &#010;-General options&#010;-^^^^^^^^^^^^^^&#010;+### General options&#010; &#010; All endpoints share the following options:&#010; [width=""100%"",cols=""1,1,1,4,1,1"",options=""header""]&#010;@@ -471,28 +461,13 @@ If the underlying Ignite operation returns void (no return type), this&#010;flag dete&#010; Some Ignite operations can deal with multiple elements at once, if passed a Collection. Enabling&#010;this option will treat Collections as a single object, invoking the operation variant for&#010;cardinality 1.&#010; |=======================================================================&#010; &#010;-OSGi Support&#010;-^^^^^^^^^^^&#010;+### OSGi Support&#010; &#010;-[TIP]&#010;-====&#010;-Apache Ignite supports OSGi from version 1.5.0.final onwards.&#010;-====&#010;+TIP: Apache Ignite supports OSGi from version 1.5.0.final onwards.&#010; &#010;+When installing on Apache Karaf:&#010; &#010;-[NOTE,title=when installing on Apache Karaf]&#010;-====&#010; 1. Installing the camel-ignite feature will require the Ignite feature repository to be present.&#010;-1. You must have exported from the JRE (system bundle) some low-level, non-standard packages&#010;that Ignite requires.&#010;-====&#010;-Please refer to the OSGi section in the Ignite documentation for more information.&#010;-&#010;+2. You must have exported from the JRE (system bundle) some low-level, non-standard packages&#010;that Ignite requires.&#010; &#010;-&#010;-See Also&#010;-^^^^^^^&#010;-&#010;-* http://camel.apache.org/configuring-camel.html[Configuring Camel]&#010;-* http://camel.apache.org/component.html[Component]&#010;-* http://camel.apache.org/endpoint.html[Endpoint]&#010;-* http://camel.apache.org/getting-started.html[Getting Started]&#010;\ No newline at end of file&#010;+Please refer to the OSGi section in the Ignite documentation for more information.&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/a49af7f1/components/camel-test-spring/src/main/docs/test-spring.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-test-spring/src/main/docs/test-spring.adoc b/components/camel-test-spring/src/main/docs/test-spring.adoc&#010;index 305c3e6..9cd8659 100644&#010;--- a/components/camel-test-spring/src/main/docs/test-spring.adoc&#010;+++ b/components/camel-test-spring/src/main/docs/test-spring.adoc&#010;@@ -77,9 +77,8 @@ a|&#010; &#010; &#010; &#010;-[[SpringTesting-CamelSpringTestSupport]]&#010;-CamelSpringTestSupport&#010;-^^^^^^^^^^^^^^^^^^^^^&#010;+### CamelSpringTestSupport&#010;+&#010; The following Spring test support classes:&#010; &#010; * `org.apache.camel.test.CamelSpringTestSupport`&#010;@@ -103,13 +102,12 @@ You are responsible for the instantiation of the Spring context in the&#010;method im&#010; &#010; &#010; &#010;-[[SpringTesting-PlainSpringTest]]&#010;-Plain Spring Test&#010;-^^^^^^^^^^^^^^^^^^&#010;+### Plain Spring Test&#010;+&#010; In this approach, your test classes directly inherit from the Spring Test abstract test classes&#010;or use the JUnit 4.x test runner provided in Spring Test.  This approach supports dependency&#010;injection into your test class and the full suite of Spring Test annotations. However, it&#010;does not support the features provided by the `CamelSpringTestSupport` classes.&#010; &#010;-Plain Spring Test using JUnit 3.x with XML Config Example&#010;-+++++++++++++++++++++++++++++++++++++++++++++++++++++++++&#010;+#### Plain Spring Test using JUnit 3.x with XML Config Example&#010;+&#010; Here is a simple unit test using JUnit 3.x support from Spring Test using http://svn.apache.org/repos/asf/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/patterns/FilterTest.java[XML&#010;Config].&#010; [source,java]&#010; ----&#010;@@ -183,8 +181,8 @@ src/test/java/org/apache/camel/spring/patterns/FilterTest.java&#010; src/test/resources/org/apache/camel/spring/patterns/FilterTest-context.xml&#010; ----&#010; &#010;-Plain Spring Test Using JUnit 4.x With Java Config Example&#010;-+++++++++++++++++++++++++++++++++++++++++++++++++++++++++&#010;+#### Plain Spring Test Using JUnit 4.x With Java Config Example&#010;+&#010; You can completely avoid using an XML configuration file by using http://camel.apache.org/spring-java-config.html[Spring&#010;Java Config].  Here is a unit test using JUnit 4.x support from Spring Test using http://svn.apache.org/repos/asf/camel/trunk/components/camel-spring-javaconfig/src/test/java/org/apache/camel/spring/javaconfig/patterns/FilterTest.java[Java&#010;Config].&#010; [source,text]&#010; ----&#010;@@ -238,13 +236,12 @@ public class FilterTest extends AbstractJUnit4SpringContextTests {&#010; &#010; This is similar to the XML Config example above except that there is no XML file and instead&#010;the nested `ContextConfig` class does all of the configuration; so your entire test case is&#010;contained in a single Java class. We currently have to reference by class name this class&#010;in the `@ContextConfiguration` which is a bit ugly. Please vote for http://jira.springframework.org/browse/SJC-238[SJC-238]&#010;to address this and make Spring Test work more cleanly with Spring JavaConfig.&#010; &#010;-Plain Spring Test Using JUnit 4.0.x Runner With XML Config&#010;-+++++++++++++++++++++++++++++++++++++++++++++++++++++++++&#010;+#### Plain Spring Test Using JUnit 4.0.x Runner With XML Config&#010;+&#010; You can avoid extending Spring classes by using the `SpringJUnit4ClassRunner` provided by&#010;Spring Test.  This custom JUnit runner means you are free to choose your own class hierarchy&#010;while retaining all the capabilities of Spring Test.&#010;-[INFO]&#010;-====&#010;-This is for Spring 4.0.x. If you use Spring 4.1 or newer, then see the next section.&#010;-====&#010;+&#010;+TIP: This is for Spring 4.0.x. If you use Spring 4.1 or newer, then see the next section.&#010;+&#010; [source,java]&#010; ----&#010; @RunWith(SpringJUnit4ClassRunner.class)&#010;@@ -267,13 +264,12 @@ public class MyCamelTest {&#010; }&#010; ----&#010; &#010;-Plain Spring Test Using JUnit 4.1.x Runner With XML Config&#010;-+++++++++++++++++++++++++++++++++++++++++++++++++++++++++&#010;+#### Plain Spring Test Using JUnit 4.1.x Runner With XML Config&#010;+&#010; You can avoid extending Spring classes by using the `SpringJUnit4ClassRunner` provided by&#010;Spring Test.  This custom JUnit runner means you are free to choose your own class hierarchy&#010;while retaining all the capabilities of Spring Test.&#010;-[INFO]&#010;-====&#010;-From *Spring 4.1*, you need to use the `@BootstrapWith` annotation to configure it to use&#010;Camel testing, as shown below.&#010;-====&#010;+&#010;+TIP: From *Spring 4.1*, you need to use the `@BootstrapWith` annotation to configure it to&#010;use Camel testing, as shown below.&#010;+&#010; [source,java]&#010; ----&#010; @RunWith(CamelSpringJUnit4ClassRunner.class)&#010;@@ -298,16 +294,14 @@ public class MyCamelTest {&#010; ----&#010; &#010; &#010;+### Camel Enhanced Spring Test&#010; &#010;-[[SpringTesting-CamelEnhancedSpringTest]]&#010;-Camel Enhanced Spring Test&#010;-^^^^^^^^^^^^^^^^^^^^^^^^^^&#010; Using the `org.apache.camel.test.junit4.CamelSpringJUnit4ClassRunner` runner with the `@RunWith`&#010;annotation or extending `org.apache.camel.testng.AbstractCamelTestNGSpringContextTests` provides&#010;the full feature set of Spring Test with support for the feature set provided in the `CamelTestSupport`&#010;classes.&#010; &#010; A number of Camel specific annotations have been developed in order to provide for declarative&#010;manipulation of the Camel context(s) involved in the test.  These annotations free your test&#010;classes from having to inherit from the `CamelSpringTestSupport` classes and also reduce the&#010;amount of code required to customize the tests.&#010; [width=""100%"",cols=""1,1,4,1,1"",options=""header"",]&#010; |=======================================================================&#010;-|Annotation Class |Applies To |Description |Default Behavioir If Not Present |Default Behavior&#010;If Present&#010;+|Annotation Class |Applies To |Description |Default Behaviour If Not Present |Default Behavior&#010;If Present&#010; |org.apache.camel.test.spring.DisableJmx a|Class a|&#010; Indicates if JMX should be globally disabled in the CamelContexts that are bootstrapped &#010;during the test through the use of Spring Test loaded application contexts. a|&#010; JMX is disabled a|JMX is disabled&#010;@@ -352,10 +346,9 @@ a|Override properties&#010; |=======================================================================&#010; &#010; The following example illustrates the use of the `@MockEndpoints` annotation in order to&#010;setup mock endpoints as interceptors on all endpoints using the Camel Log component and the&#010;`@DisableJmx` annotation to enable JMX which is disabled during tests by default.&#010;-[INFO]&#010;-====&#010;-Note: we still use the `@DirtiesContext` annotation to ensure that the CamelContext, routes,&#010;and mock endpoints are reinitialized between test methods.&#010;-====&#010;+&#010;+TIP: We still use the `@DirtiesContext` annotation to ensure that the CamelContext, routes,&#010;and mock endpoints are reinitialized between test methods.&#010;+&#010; [source,java]&#010; ----&#010; @RunWith(CamelSpringJUnit4ClassRunner.class)&#010;@@ -391,9 +384,9 @@ public class CamelSpringJUnit4ClassRunnerPlainTest {&#010; ----&#010; &#010; &#010;-Adding More Mock Expectations&#010;-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;-If you wish to programmatically add any new assertions to your test you can easily do so&#010;with the following. Notice how we use `@EndpointInject` to inject a Camel endpoint into our&#010;code then the http://camel.apache.org/mock.html[Mock] API to add an expectation on a specific&#010;message.&#010;+### Adding More Mock Expectations&#010;+&#010;+If you wish to add any new assertions to your test you can easily do so with the following.&#010;Notice how we use `@EndpointInject` to inject a Camel endpoint into our code then the http://camel.apache.org/mock.html[Mock]&#010;API to add an expectation on a specific message.&#010; [source,java]&#010; ----&#010; @ContextConfiguration&#010;@@ -414,8 +407,8 @@ public class MyCamelTest extends AbstractJUnit38SpringContextTests {&#010; ----&#010; &#010; &#010;-Further Processing the Received Messages&#010;-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;+### Further Processing the Received Messages&#010;+&#010; Sometimes once a http://camel.apache.org/mock.html[Mock] endpoint has received some messages&#010;you want to then process them further to add further assertions that your test case worked&#010;as you expect.&#010; &#010; So you can then process the received message exchanges if you like...&#010;@@ -444,8 +437,8 @@ public class MyCamelTest extends AbstractJUnit38SpringContextTests {&#010; }&#010; ----&#010; &#010;-Sending and Receiving Messages&#010;-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#010;+### Sending and Receiving Messages&#010;+&#010; It might be that the http://camel.apache.org/enterprise-integration-patterns.html[Enterprise&#010;Integration Patterns] you have defined in either http://camel.apache.org/spring.html[Spring]&#010;XML or using the Java http://camel.apache.org/dsl.html[DSL] do all of the sending and receiving&#010;and you might just work with the http://camel.apache.org/mock.html[Mock] endpoints as described&#010;above. However sometimes in a test case its useful to explicitly send or receive messages&#010;directly.&#010; &#010; To send or receive messages you should use the http://camel.apache.org/bean-integration.html[Bean&#010;Integration] mechanism. For example to send messages inject a `ProducerTemplate` using the&#010;`@EndpointInject` annotation then call the various send methods on this object to send a message&#010;to an endpoint. To consume messages use the `@MessageDriven` annotation on a method to have&#010;the method invoked when a message is received.&#010;@@ -468,10 +461,4 @@ public class Foo {&#010; }&#010; ----&#010; &#010;-See Also&#010;-^^^^^^^^&#010; &#010;-* A https://svn.apache.org/repos/asf/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/mock/InterceptSendToMockEndpointStrategyTest.java[real&#010;example test case using Mock and Spring] along with its https://svn.apache.org/repos/asf/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/mock/InterceptSendToMockEndpointStrategyTest.xml[Spring&#010;XML]&#010;-* http://camel.apache.org/bean-integration.html[Bean Integration]&#010;-* http://camel.apache.org/mock.html[Mock] endpoint&#010;-* http://camel.apache.org/test.html[Test] endpoint&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cfcf4e09a71a545ceb32101b629d433a3%40git.apache.org%3E,2017-04-18 09:25:03,commits,359.0,camel git commit: CAMEL-11160: Component docs - ascii doc warns
176,176,103.0,357.0,acosent...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master c5bd87682 -&gt; dd3eec651&#010;&#010;&#010;Upgrade Docker Java to version 3.0.9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/dd3eec65&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/dd3eec65&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/dd3eec65&#010;&#010;Branch: refs/heads/master&#010;Commit: dd3eec6512ad2bde3a3511aa411c28f720d440f8&#010;Parents: c5bd876&#010;Author: Andrea Cosentino &lt;ancosen@gmail.com&gt;&#010;Authored: Tue Apr 18 10:32:57 2017 +0200&#010;Committer: Andrea Cosentino &lt;ancosen@gmail.com&gt;&#010;Committed: Tue Apr 18 10:32:57 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; parent/pom.xml                                                   | 2 +-&#010; .../spring-boot/components-starter/camel-docker-starter/pom.xml  | 4 ----&#010; 2 files changed, 1 insertion(+), 5 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/dd3eec65/parent/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/parent/pom.xml b/parent/pom.xml&#010;index f661ee3..d5954e8 100644&#010;--- a/parent/pom.xml&#010;+++ b/parent/pom.xml&#010;@@ -167,7 +167,7 @@&#010;     &lt;disruptor-version&gt;3.3.6&lt;/disruptor-version&gt;&#010;     &lt;dnsjava-version&gt;2.1.8&lt;/dnsjava-version&gt;&#010;     &lt;dnsjava-bundle-version&gt;2.1.8_1&lt;/dnsjava-bundle-version&gt;&#010;-    &lt;docker-java-version&gt;3.0.8&lt;/docker-java-version&gt;&#010;+    &lt;docker-java-version&gt;3.0.9&lt;/docker-java-version&gt;&#010;     &lt;dom4j-bundle-version&gt;1.6.1_5&lt;/dom4j-bundle-version&gt;&#010;     &lt;dozer-version&gt;5.5.1&lt;/dozer-version&gt;&#010;     &lt;drools-version&gt;6.5.0.Final&lt;/drools-version&gt;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/dd3eec65/platforms/spring-boot/components-starter/camel-docker-starter/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-docker-starter/pom.xml b/platforms/spring-boot/components-starter/camel-docker-starter/pom.xml&#010;index 5d889b2..f5ff82f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-docker-starter/pom.xml&#010;+++ b/platforms/spring-boot/components-starter/camel-docker-starter/pom.xml&#010;@@ -39,10 +39,6 @@&#010;       &lt;!--START OF GENERATED CODE--&gt;&#010;       &lt;exclusions&gt;&#010;         &lt;exclusion&gt;&#010;-          &lt;groupId&gt;commons-logging&lt;/groupId&gt;&#010;-          &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;&#010;-        &lt;/exclusion&gt;&#010;-        &lt;exclusion&gt;&#010;           &lt;groupId&gt;log4j&lt;/groupId&gt;&#010;           &lt;artifactId&gt;log4j&lt;/artifactId&gt;&#010;         &lt;/exclusion&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C1ae914a52b5249f1bfda7237015c36ae%40git.apache.org%3E,2017-04-18 09:00:40,commits,357.0,camel git commit: Upgrade Docker Java to version 3.0.9
177,177,105.0,358.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master dd3eec651 -&gt; d73893ffc&#010;&#010;&#010;Fix pom.xml so camel-catalog javadoc can be generated as the copy/rename tasks must be run&#010;in same maven phase&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/d73893ff&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/d73893ff&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/d73893ff&#010;&#010;Branch: refs/heads/master&#010;Commit: d73893ffcacdb60d45107ff530153d547a494f60&#010;Parents: dd3eec6&#010;Author: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Authored: Tue Apr 18 11:07:03 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Tue Apr 18 11:08:12 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; platforms/camel-catalog/pom.xml | 2 +-&#010; 1 file changed, 1 insertion(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d73893ff/platforms/camel-catalog/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/camel-catalog/pom.xml b/platforms/camel-catalog/pom.xml&#010;index 6c71fcb..07046c9 100644&#010;--- a/platforms/camel-catalog/pom.xml&#010;+++ b/platforms/camel-catalog/pom.xml&#010;@@ -130,7 +130,7 @@&#010;         &lt;version&gt;1.5.3&lt;/version&gt;&#010;         &lt;executions&gt;&#010;           &lt;execution&gt;&#010;-            &lt;phase&gt;process-sources&lt;/phase&gt;&#010;+            &lt;phase&gt;generate-sources&lt;/phase&gt;&#010;             &lt;goals&gt;&#010;               &lt;goal&gt;replace&lt;/goal&gt;&#010;             &lt;/goals&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C0d55a5f64d1c4e188602fa31519e3a36%40git.apache.org%3E,2017-04-18 09:08:19,commits,358.0,camel git commit: Fix pom.xml so camel-catalog javadoc can be generated as the copy/rename tasks must be run in same maven phase
178,178,110.0,580.0,Luca Burgazzoli (JIRA),Luca Burgazzoli created CAMEL-11161:&#010;---------------------------------------&#010;&#010;             Summary: Service Call : allow to use properties to further customize the underlying&#010;camel component used to implement service-call concepts&#010;                 Key: CAMEL-11161&#010;                 URL: https://issues.apache.org/jira/browse/CAMEL-11161&#010;             Project: Camel&#010;          Issue Type: Improvement&#010;          Components: camel-core&#010;            Reporter: Luca Burgazzoli&#010;            Assignee: Luca Burgazzoli&#010;             Fix For: 2.19.0&#010;&#010;&#010;As today the configuration via dsl of service call's concpetts (i.e. service discovery) is&#010;limited to the options we have hard coded into the dsl but it would be nice to leverage the&#010;available properties to further customize the underlying components.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064660.1492510699000.304643.1492510722119%40Atlassian.JIRA%3E,2017-04-18 10:18:42,issues,584.0,  [jira] [Created] (CAMEL-11161) Service Call : allow to use properties to further customize the underlying camel component used to implement service-call concepts
179,179,114.0,364.0,lburgazz...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 89ba56d3d -&gt; 60675efc3&#010;&#010;&#010;Add ServiceCall EIP documentation&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/60675efc&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/60675efc&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/60675efc&#010;&#010;Branch: refs/heads/master&#010;Commit: 60675efc3ac420b35da219542607bdc01e9f9598&#010;Parents: 89ba56d&#010;Author: lburgazzoli &lt;lburgazzoli@gmail.com&gt;&#010;Authored: Tue Apr 18 13:09:12 2017 +0200&#010;Committer: lburgazzoli &lt;lburgazzoli@gmail.com&gt;&#010;Committed: Tue Apr 18 13:09:30 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../src/main/docs/eips/serviceCall-eip.adoc     | 420 +++++++++++++++++++&#010; 1 file changed, 420 insertions(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/60675efc/camel-core/src/main/docs/eips/serviceCall-eip.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/camel-core/src/main/docs/eips/serviceCall-eip.adoc b/camel-core/src/main/docs/eips/serviceCall-eip.adoc&#010;new file mode 100644&#010;index 0000000..35965ea&#010;--- /dev/null&#010;+++ b/camel-core/src/main/docs/eips/serviceCall-eip.adoc&#010;@@ -0,0 +1,420 @@&#010;+## Service Call EIP&#010;+&#010;+The serviceCall EIP allows to call remote services in a distributed system. The service to&#010;call is looked up in a service registry of some sorts such as Kubernetes, Consul, Etcd, Zookeeper,&#010;DNS. The EIP separates the configuration of the service registry from the calling of the service.&#010;+&#010;+When calling a service you may just refer to the name of the service in the EIP as shown&#010;below:&#010;+&#010;+[source,java]&#010;+.Java DSL&#010;+----&#010;+from(""direct:start"")&#010;+    .serviceCall(""foo"")&#010;+    .to(""mock:result"");&#010;+----&#010;+&#010;+[source,xml]&#010;+.XML DSL&#010;+----&#010;+&lt;camelContext xmlns=""http://camel.apache.org/schema/spring""&gt;&#010;+  &lt;route&gt;&#010;+    &lt;from uri=""direct:start""/&gt;&#010;+    &lt;serviceCall name=""foo""/&gt;&#010;+    &lt;to uri=""mock:result""/&gt;&#010;+  &lt;/route&gt;&#010;+&lt;/camelContext&gt;&#010;+----&#010;+&#010;+Camel will then:&#010;+&#010;+* search for a service call configuration from the Camel context and registry&#010;+* lookup a service with the name ```foo``` from an external service registry&#010;+* filter the servers&#010;+* select the server to use&#010;+* build a Camel URI using the choosen server info&#010;+&#010;+By default the Service Call EIP uses camel-http4 so assuming that the selected service instance&#010;runs on host ```myhost.com``` on port ```80```, the computed Camel URI will be:&#010;+&#010;+[source]&#010;+----&#010;+    http4:myhost.com:80&#010;+----&#010;+&#010;+### Service Name to Camel URI Examples&#010;+&#010;+It is often needed to build more complex Camel URI which may include options or paths which&#010;is possible through different options:name: value&#010;+&#010;+* The *service name* supports a limited uri like syntax, here some examples&#010;++&#010;+[width=""100%"",cols=""25%a,75%a"",options=""header""]&#010;+|===&#010;+|Name |Resolution&#010;+&#010;+|foo | http4://host:port&#010;+|foo/path | http4://host:port/path&#010;+|foo/path?foo=bar | http4://host:port/path?foo=bar&#010;+|===&#010;++&#010;+[source,java]&#010;+----&#010;+from(""direct:start"")&#010;+    .serviceCall(""foo/hello"")&#010;+    .to(""mock:result"");&#010;+----&#010;++&#010;+* If you wan to have more control over the uri construction, you can use the *uri* directive:&#010;++&#010;+[width=""100%"",cols=""25%a,40%a,35%a"",options=""header""]&#010;+|===&#010;+|Name | URI | Resolution&#010;+&#010;+|foo | undertow:http://foo/hellp | undertow:http://host:port/hello&#010;+|foo | undertow:http://foo.host:foo.port/hello | undertow:http://host:port/hello&#010;+|===&#010;++&#010;+[source,java]&#010;+----&#010;+from(""direct:start"")&#010;+    .serviceCall(""foo"", ""undertow:http://foo/hello"")&#010;+    .to(""mock:result"");&#010;+----&#010;++&#010;+* Advanced users can have full control over the uri construction through expressions:&#010;++&#010;+[source,java]&#010;+----&#010;+from(""direct:start"")&#010;+    .serviceCall()&#010;+        .name(""foo"")&#010;+        .expression()&#010;+            .simple(""undertow:http://${header.CamelServiceCallServiceHost}:${header.CamelServiceCallServicePort}/hello"");&#010;+----&#010;+&#010;+### Configuring Service Call&#010;+&#010;+The Service Call EIP can be configured through the following options:&#010;+&#010;+[width=""100%"",cols=""3,1m,6"",options=""header""]&#010;+|=======================================================================&#010;+| Name | Java Type | Description&#010;+| name | String | *Required* Sets the name of the service to use&#010;+| uri | String | The uri of the endpoint to send to.&#010;+| component | String | The component to use.&#010;+| pattern | ExchangePattern | Sets the optional ExchangePattern used to invoke this endpoint&#010;+| configurationRef | String | Refers to a ServiceCall configuration to use&#010;+| serviceDiscoveryRef | String | Sets a reference to a custom ServiceDiscovery to use.&#010;+| serviceDiscovery | ServiceDiscovery | Sets the ServiceDiscovery to use ([.underline]_Java&#010;DSL only_).&#010;+| serviceFilterRef | String | Sets a reference to a custom ServiceFilter to use.&#010;+| serviceFilter | ServiceFilter | Sets the ServiceFilter to use ([.underline]_Java DSL only_).&#010;+| serviceChooserRef | String | Sets a reference to a custom ServiceChooser to use.&#010;+| serviceChooser | ServiceChooser | Sets the ServiceChooser to use ([.underline]_Java DSL&#010;only_).&#010;+| loadBalancerRef | String | Sets a reference to a custom LoadBalancer to use.&#010;+| loadBalancer | LoadBalancer | Sets the LoadBalancer to use ([.underline]_Java DSL only_).&#010;+| expressionRef | String | Set a reference to a custom Expression to use.&#010;+| expression | Expression | Set the Expression to use to compute the Camel URI ([.underline]_Java&#010;DSL only_).&#010;+|=======================================================================&#010;+&#010;+In addition to ref/binding configuration style you can leverage specific configuration DSL&#010;to customize specific options:&#010;+&#010;+* *Consul Service Discovery:*&#010;++&#010;+To leverage Consul for Service Discover, maven users will need to add the following dependency&#010;to their pom.xml&#010;++&#010;+[source,xml]&#010;+----&#010;+&lt;dependency&gt;&#010;+    &lt;groupId&gt;org.apache.camel&lt;/groupId&gt;&#010;+    &lt;artifactId&gt;camel-consul&lt;/artifactId&gt;&#010;+    &lt;!-- use the same version as your Camel core version --&gt;&#010;+    &lt;version&gt;x.y.z&lt;/version&gt;&#010;+&lt;/dependency&gt;&#010;+----&#010;++&#010;+*Available options:*&#010;++&#010;+[width=""100%"",cols=""3,1m,6"",options=""header""]&#010;+|=======================================================================&#010;+| Name | Java Type | Description&#010;+| url | String | The Consul agent URL&#010;+| datacenter | String | The data center&#010;+| aclToken | String | Sets the ACL token to be used with Consul&#010;+| userName | String | Sets the username to be used for basic authentication&#010;+| password | String | Sets the password to be used for basic authentication&#010;+| connectTimeoutMillis | Long | Connect timeout for OkHttpClient&#010;+| readTimeoutMillis | Long | Read timeout for OkHttpClient&#010;+| writeTimeoutMillis | Long | Write timeout for OkHttpClient&#010;+|=======================================================================&#010;++&#010;+[source,java]&#010;+.Example&#010;+----&#010;+from(""direct:start"")&#010;+    .serviceCall(""foo"")&#010;+        .consulServiceDiscovery()&#010;+            .url(""http://consul-cluster:8500"")&#010;+            .datacenter(""neverland"")&#010;+            .end()&#010;+    .to(""mock:result"");&#010;+----&#010;+&#010;+* *DNS Service Discovery:*&#010;++&#010;+To leverage DNS for Service Discover, maven users will need to add the following dependency&#010;to their pom.xml&#010;++&#010;+[source,xml]&#010;+----&#010;+&lt;dependency&gt;&#010;+    &lt;groupId&gt;org.apache.camel&lt;/groupId&gt;&#010;+    &lt;artifactId&gt;camel-dns&lt;/artifactId&gt;&#010;+    &lt;!-- use the same version as your Camel core version --&gt;&#010;+    &lt;version&gt;x.y.z&lt;/version&gt;&#010;+&lt;/dependency&gt;&#010;+----&#010;++&#010;+[source,xml]&#010;+.XML DSL&#010;+----&#010;+&lt;camelContext xmlns=""http://camel.apache.org/schema/spring""&gt;&#010;+  &lt;route&gt;&#010;+    &lt;from uri=""direct:start""/&gt;&#010;+    &lt;serviceCall name=""foo""&gt;&#010;+      &lt;consulServiceDiscovery url=""http://consul-cluster:8500"" datacenter=""neverland""/&gt;&#010;+    &lt;/serviceCall&gt;&#010;+    &lt;to uri=""mock:result""/&gt;&#010;+  &lt;/route&gt;&#010;+&lt;/camelContext&gt;&#010;+----&#010;+&#010;++&#010;+*Available options:*&#010;++&#010;+[width=""100%"",cols=""3,1m,6"",options=""header""]&#010;+|=======================================================================&#010;+| Name | Java Type | Description&#010;+| proto | String | The transport protocol of the desired service, default ""_tcp""&#010;+| domain | String | The user name to use for basic authentication&#010;+|=======================================================================&#010;++&#010;+[source,java]&#010;+.Example&#010;+----&#010;+from(""direct:start"")&#010;+    .serviceCall(""foo"")&#010;+        .dnsServiceDiscovery(""my.domain.com"")&#010;+    .to(""mock:result"");&#010;+----&#010;++&#010;+[source,xml]&#010;+.XML DSL&#010;+----&#010;+&lt;camelContext xmlns=""http://camel.apache.org/schema/spring""&gt;&#010;+  &lt;route&gt;&#010;+    &lt;from uri=""direct:start""/&gt;&#010;+    &lt;serviceCall name=""foo""&gt;&#010;+      &lt;dnsServiceDiscovery domain=""my.domain.com""/&gt;&#010;+    &lt;/serviceCall&gt;&#010;+    &lt;to uri=""mock:result""/&gt;&#010;+  &lt;/route&gt;&#010;+&lt;/camelContext&gt;&#010;+----&#010;+&#010;+* *Etcd Service Discovery:*&#010;++&#010;+To leverage Etcd for Service Discover, maven users will need to add the following dependency&#010;to their pom.xml&#010;++&#010;+[source,xml]&#010;+----&#010;+&lt;dependency&gt;&#010;+    &lt;groupId&gt;org.apache.camel&lt;/groupId&gt;&#010;+    &lt;artifactId&gt;camel-etcd&lt;/artifactId&gt;&#010;+    &lt;!-- use the same version as your Camel core version --&gt;&#010;+    &lt;version&gt;x.y.z&lt;/version&gt;&#010;+&lt;/dependency&gt;&#010;+----&#010;++&#010;+*Available options:*&#010;++&#010;+[width=""100%"",cols=""3,1m,6"",options=""header""]&#010;+|=======================================================================&#010;+| Name | Java Type | Description&#010;+| uris | String | The URIs the client can connect to&#010;+| userName | String | The user name to use for basic authentication&#010;+| password | String | The password to use for basic authentication&#010;+| timeout | Long | To set the maximum time an action could take to complete&#010;+| servicePath | String | The path to look for for service discovery, default ""/services""&#010;+| type | String | To set the discovery type, valid values are on-demand and watch.&#010;+|=======================================================================&#010;++&#010;+[source,java]&#010;+.Example&#010;+----&#010;+from(""direct:start"")&#010;+    .serviceCall(""foo"")&#010;+        .etcdServiceDiscovery()&#010;+            .uris(""http://etcd1:4001,http://etcd2:4001"")&#010;+            .servicePath(""/camel/services"")&#010;+            .end()&#010;+    .to(""mock:result"");&#010;+----&#010;++&#010;+[source,xml]&#010;+.XML DSL&#010;+----&#010;+&lt;camelContext xmlns=""http://camel.apache.org/schema/spring""&gt;&#010;+  &lt;route&gt;&#010;+    &lt;from uri=""direct:start""/&gt;&#010;+    &lt;serviceCall name=""foo""&gt;&#010;+      &lt;etcdServiceDiscovery uris=""http://etcd1:4001,http://etcd2:4001"" servicePath=""/camel/services""/&gt;&#010;+    &lt;/serviceCall&gt;&#010;+    &lt;to uri=""mock:result""/&gt;&#010;+  &lt;/route&gt;&#010;+&lt;/camelContext&gt;&#010;+----&#010;+&#010;+* *Kubernetes Service Discovery:*&#010;++&#010;+To leverage Kubernetes for Service Discover, maven users will need to add the following dependency&#010;to their pom.xml&#010;++&#010;+[source,xml]&#010;+----&#010;+&lt;dependency&gt;&#010;+    &lt;groupId&gt;org.apache.camel&lt;/groupId&gt;&#010;+    &lt;artifactId&gt;camel-kubernetes&lt;/artifactId&gt;&#010;+    &lt;!-- use the same version as your Camel core version --&gt;&#010;+    &lt;version&gt;x.y.z&lt;/version&gt;&#010;+&lt;/dependency&gt;&#010;+----&#010;++&#010;+*Available options:*&#010;++&#010;+[width=""100%"",cols=""3,1m,6"",options=""header""]&#010;+|=======================================================================&#010;+| Name | Java Type | Description&#010;+| lookup | String | How to perform service lookup. Possible values: client, dns, environment&#010;+| apiVersion | String | Kubernetes API version when using client lookup&#010;+| caCertData | String | Sets the Certificate Authority data when using client lookup&#010;+| caCertFile | String | Sets the Certificate Authority data that are loaded from the file&#010;when using client lookup&#010;+| clientCertData | String | Sets the Client Certificate data when using client lookup&#010;+| clientCertFile | String | Sets the Client Certificate data that are loaded from the file&#010;when using client lookup&#010;+| clientKeyAlgo | String | Sets the Client Keystore algorithm, such as RSA when using client&#010;lookup&#010;+| clientKeyData | String | Sets the Client Keystore data when using client lookup&#010;+| clientKeyFile | String | Sets the Client Keystore data that are loaded from the file when&#010;using client lookup&#010;+| clientKeyPassphrase | String | Sets the Client Keystore passphrase when using client lookup&#010;+| dnsDomain | String | Sets the DNS domain to use for dns lookup&#010;+| namespace | String | The Kubernetes namespace to use. By default the namespace's name is&#010;taken from the environment variable KUBERNETES_MASTER&#010;+| oauthToken | String | Sets the OAUTH token for authentication (instead of username/password)&#010;when using client lookup&#010;+| username | String | Sets the username for authentication when using client lookup&#010;+| password | String | Sets the password for authentication when using client lookup&#010;+| trustCerts | Boolean | Sets whether to turn on trust certificate check when using client&#010;lookup&#010;+|=======================================================================&#010;++&#010;+[source,java]&#010;+.Java DSL&#010;+----&#010;+from(""direct:start"")&#010;+    .serviceCall(""foo"")&#010;+        .kubernetesServiceDiscovery()&#010;+            .lookup(""dns"")&#010;+            .namespace(""myNamespace"")&#010;+            .dnsDomain(""my.domain.com"")&#010;+            .end()&#010;+    .to(""mock:result"");&#010;+----&#010;++&#010;+[source,xml]&#010;+.XML DSL&#010;+----&#010;+&lt;camelContext xmlns=""http://camel.apache.org/schema/spring""&gt;&#010;+  &lt;route&gt;&#010;+    &lt;from uri=""direct:start""/&gt;&#010;+    &lt;serviceCall name=""foo""&gt;&#010;+      &lt;kubernetesServiceDiscovery lookup=""dns"" namespace=""myNamespace"" dnsDomain=""my.domain.com""/&gt;&#010;+    &lt;/serviceCall&gt;&#010;+    &lt;to uri=""mock:result""/&gt;&#010;+  &lt;/route&gt;&#010;+&lt;/camelContext&gt;&#010;+----&#010;+&#010;+### Shared configurations&#010;+&#010;+The Service CAll EIP can be configured straight on the route definition or through shared&#010;configurations, here an example with two configurations registered in the Camel Context:&#010;+&#010;+[source,java]&#010;+.Example&#010;+----&#010;+ServiceCallConfigurationDefinition globalConf = new ServiceCallConfigurationDefinition();&#010;+globalConf.setServiceDiscovery(&#010;+    name -&gt; Arrays.asList(&#010;+        new DefaultServiceDefinition(name, ""my.host1.com"", 8080),&#010;+        new DefaultServiceDefinition(name, ""my.host2.com"", 443))&#010;+);&#010;+globalConf.setServiceChooser(&#010;+    list -&gt; list.get(ThreadLocalRandom.current().nextInt(list.size()))&#010;+);&#010;+&#010;+ServiceCallConfigurationDefinition httpsConf = new ServiceCallConfigurationDefinition();&#010;+httpsConf.setServiceFilter(&#010;+    list -&gt; list.stream().filter(s -&gt; s.getPort() == 443).collect(toList())&#010;+);&#010;+&#010;+getContext().setServiceCallConfiguration(globalConf);&#010;+getContext().addServiceCallConfiguration(""https"", httpsConf);&#010;+----&#010;+&#010;+Each Service Call definition and configuration will inheriths from the ```globalConf``` which&#010;can be see as default configuration, then you can reference the ```httpsConf``` in your rute&#010;as follow:&#010;+&#010;+[source,java]&#010;+.Example&#010;+----&#010;+rom(""direct_:start"")&#010;+    .serviceCall()&#010;+        .name(""foo"")&#010;+        .serviceCallConfiguration(""https"")&#010;+        .end()&#010;+    .to(""mock:result"");&#010;+----&#010;+&#010;+This route will leverages the service discovery and service chooser from ```globalConf```&#010;and the service filter from ```httpsConf``` but you can override any of them if needed straight&#010;on the route:&#010;+&#010;+[source,java]&#010;+.Example&#010;+----&#010;+rom(""direc_:start"")&#010;+    .serviceCall()&#010;+        .name(""foo"")&#010;+        .serviceCallConfiguration(""https"")&#010;+        .serviceChooser(list -&gt; list.get(0))&#010;+        .end()&#010;+    .to(""mock:result"");&#010;+----&#010;+&#010;+### Spring Boot support&#010;+&#010;+In a Spring-Boot application you can externalize most of the configuration options:&#010;+&#010;+[source,properties]&#010;+.application.properties&#010;+----&#010;+# this can be configured stright tot he route and it has been included to show&#010;+# property placeholders support&#010;+service.name = foo&#010;+&#010;+# this property is not mandatory and it has been included to show how to configure&#010;+# the service discovery implementation provided by camel-consul&#010;+camel.cloud.consul.service-discovery.url = http://localhost:8500&#010;+&#010;+# Add a static list of servers for the service named foo&#010;+camel.cloud.service-discovery.services[foo] = host1.static:8080,host2.static:8080&#010;+----&#010;+&#010;+[source,java]&#010;+.Routes&#010;+----&#010;+@Component&#010;+public class MyRouteBuilder implements RouteBuilder {&#010;+    @Override&#010;+    public void configure() throws Exception {&#010;+        from(""direct:start"")&#010;+            .serviceCall(""{{service.name}}"");&#010;+    }&#010;+}&#010;+----&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C0be5337630534f32b8226bf42f53098d%40git.apache.org%3E,2017-04-18 11:09:43,commits,364.0,camel git commit: Add ServiceCall EIP documentation
180,180,126.0,581.0,Luca Burgazzoli (JIRA),&#010;     [ https://issues.apache.org/jira/browse/CAMEL-11161?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&#010;]&#010;&#010;Work on CAMEL-11161 started by Luca Burgazzoli.&#010;-----------------------------------------------&#010;&gt; Service Call : allow to use properties to further customize the underlying camel component&#010;used to implement service-call concepts&#010;&gt; ----------------------------------------------------------------------------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11161&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11161&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Improvement&#010;&gt;          Components: camel-core&#010;&gt;            Reporter: Luca Burgazzoli&#010;&gt;            Assignee: Luca Burgazzoli&#010;&gt;             Fix For: 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; As today the configuration via dsl of service call's concpetts (i.e. service discovery)&#010;is limited to the options we have hard coded into the dsl but it would be nice to leverage&#010;the available properties to further customize the underlying components.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064660.1492510699000.305128.1492516721554%40Atlassian.JIRA%3E,2017-04-18 11:58:41,issues,585.0,  [jira] [Work started] (CAMEL-11161) Service Call : allow to use properties to further customize the underlying camel component used to implement service-call concepts
183,183,113.0,362.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master e961a2a8e -&gt; 89ba56d3d&#010;&#010;&#010;Polished example&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/89ba56d3&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/89ba56d3&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/89ba56d3&#010;&#010;Branch: refs/heads/master&#010;Commit: 89ba56d3de1b7181e158ac36d38d4d80ea56eca7&#010;Parents: e961a2a&#010;Author: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Authored: Tue Apr 18 13:08:20 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Tue Apr 18 13:08:20 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../README.adoc                                 |  3 +-&#010; .../service/src/main/bash/consul-run-linux.sh   | 52 ++++++++++++++++++&#010; .../service/src/main/bash/consul-run-osx.sh     | 55 ++++++++++++++++++++&#010; .../service/src/main/bash/consul-run.sh         | 52 ------------------&#010; 4 files changed, 109 insertions(+), 53 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/89ba56d3/examples/camel-example-spring-cloud-servicecall/README.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-spring-cloud-servicecall/README.adoc b/examples/camel-example-spring-cloud-servicecall/README.adoc&#010;index 8d5f385..0d0fbce 100644&#010;--- a/examples/camel-example-spring-cloud-servicecall/README.adoc&#010;+++ b/examples/camel-example-spring-cloud-servicecall/README.adoc&#010;@@ -24,7 +24,8 @@ Using multiple shells:&#010;  - start consul:&#010; &#010;   $ cd services&#010;-  $ src/main/bash/consul-run.sh&#010;+  $ src/main/bash/consul-run-linux.sh    (for linux)&#010;+  $ src/main/bash/consul-run-osx.sh      (for mac osx)&#010; &#010;  - start the service:&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/89ba56d3/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-linux.sh&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-linux.sh&#010;b/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-linux.sh&#010;new file mode 100755&#010;index 0000000..14afcfe&#010;--- /dev/null&#010;+++ b/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-linux.sh&#010;@@ -0,0 +1,52 @@&#010;+#!/usr/bin/env bash&#010;+&#010;+CONSUL_VER=""0.8.1""&#010;+CONSUL_ZIP=""consul_${CONSUL_VER}_linux_amd64.zip""&#010;+&#010;+# cleanup&#010;+rm -rf ""target/consul-data""&#010;+rm -rf ""target/consul-config""&#010;+rm -rf ""target/consul""&#010;+&#010;+mkdir -p target/&#010;+mkdir -p target/consul-data&#010;+mkdir -p target/consul-config&#010;+&#010;+if [ ! -f target/${CONSUL_ZIP} ]; then&#010;+    wget ""https://releases.hashicorp.com/consul/${CONSUL_VER}/${CONSUL_ZIP}"" -O target/${CONSUL_ZIP}&#010;+fi&#010;+&#010;+cat &gt; target/consul-config/services.json &lt;&lt;EOF&#010;+{&#010;+  ""services"": [{&#010;+    ""id"": ""s1i1"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9011&#010;+  }, {&#010;+    ""id"": ""s1i2"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9012&#010;+  }, {&#010;+    ""id"": ""s1i3"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9013&#010;+  }, {&#010;+    ""id"": ""s1i4"", ""name"": ""service-1"", ""address"": ""localhost"", ""port"": 9014&#010;+  }, {&#010;+    ""id"": ""s2i1"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9021&#010;+  }, {&#010;+    ""id"": ""s2i2"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9022&#010;+  }, {&#010;+    ""id"": ""s2i3"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9023&#010;+  }, {&#010;+    ""id"": ""s2i4"", ""name"": ""service-2"", ""address"": ""localhost"", ""port"": 9024&#010;+  }]&#010;+}&#010;+EOF&#010;+&#010;+unzip -d target target/${CONSUL_ZIP}&#010;+&#010;+target/consul \&#010;+    agent \&#010;+    -server \&#010;+    -bootstrap \&#010;+    -datacenter camel \&#010;+    -advertise 127.0.0.1 \&#010;+    -bind 0.0.0.0 \&#010;+    -log-level trace \&#010;+    -data-dir target/consul-data \&#010;+    -config-dir target/consul-config&#010;\ No newline at end of file&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/89ba56d3/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-osx.sh&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-osx.sh&#010;b/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-osx.sh&#010;new file mode 100755&#010;index 0000000..4b62282&#010;--- /dev/null&#010;+++ b/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-osx.sh&#010;@@ -0,0 +1,55 @@&#010;+#!/usr/bin/env bash&#010;+&#010;+CONSUL_VER=""0.8.1""&#010;+CONSUL_ZIP=""consul_${CONSUL_VER}_darwin_amd64.zip""&#010;+&#010;+# cleanup&#010;+rm -rf ""target/consul-data""&#010;+rm -rf ""target/consul-config""&#010;+rm -rf ""target/consul""&#010;+&#010;+mkdir -p target/&#010;+mkdir -p target/consul-data&#010;+mkdir -p target/consul-config&#010;+&#010;+&#010;+if [ ! -f target/$CONSUL_ZIP ]; then&#010;+    echo Downloading: https://releases.hashicorp.com/consul/$CONSUL_VER/$CONSUL_ZIP &#010;+    curl -o target/$CONSUL_ZIP ""https://releases.hashicorp.com/consul/$CONSUL_VER/$CONSUL_ZIP""&#010;+fi&#010;+&#010;+cat &gt; target/consul-config/services.json &lt;&lt;EOF&#010;+{&#010;+  ""services"": [{&#010;+    ""id"": ""s1i1"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9011&#010;+  }, {&#010;+    ""id"": ""s1i2"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9012&#010;+  }, {&#010;+    ""id"": ""s1i3"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9013&#010;+  }, {&#010;+    ""id"": ""s1i4"", ""name"": ""service-1"", ""address"": ""localhost"", ""port"": 9014&#010;+  }, {&#010;+    ""id"": ""s2i1"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9021&#010;+  }, {&#010;+    ""id"": ""s2i2"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9022&#010;+  }, {&#010;+    ""id"": ""s2i3"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9023&#010;+  }, {&#010;+    ""id"": ""s2i4"", ""name"": ""service-2"", ""address"": ""localhost"", ""port"": 9024&#010;+  }]&#010;+}&#010;+EOF&#010;+&#010;+unzip -d target target/$CONSUL_ZIP&#010;+chmod +x target/consul&#010;+&#010;+target/consul \&#010;+    agent \&#010;+    -server \&#010;+    -bootstrap \&#010;+    -datacenter camel \&#010;+    -advertise 127.0.0.1 \&#010;+    -bind 0.0.0.0 \&#010;+    -log-level trace \&#010;+    -data-dir target/consul-data \&#010;+    -config-dir target/consul-config&#010;\ No newline at end of file&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/89ba56d3/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run.sh&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run.sh&#010;b/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run.sh&#010;deleted file mode 100755&#010;index f5ac79c..0000000&#010;--- a/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run.sh&#010;+++ /dev/null&#010;@@ -1,52 +0,0 @@&#010;-#!/usr/bin/env bash&#010;-&#010;-CONSUL_VER=""0.7.5""&#010;-CONSUL_ZIP=""consul_${CONSUL_VER}_linux_amd64.zip""&#010;-&#010;-# cleanup&#010;-rm -rf ""target/consul-data""&#010;-rm -rf ""target/consul-config""&#010;-rm -rf ""target/consul""&#010;-&#010;-mkdir -p target/&#010;-mkdir -p target/consul-data&#010;-mkdir -p target/consul-config&#010;-&#010;-if [ ! -f target/${CONSUL_ZIP} ]; then&#010;-    wget ""https://releases.hashicorp.com/consul/${CONSUL_VER}/${CONSUL_ZIP}"" -O target/${CONSUL_ZIP}&#010;-fi&#010;-&#010;-cat &gt; target/consul-config/services.json &lt;&lt;EOF&#010;-{&#010;-  ""services"": [{&#010;-    ""id"": ""s1i1"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9011&#010;-  }, {&#010;-    ""id"": ""s1i2"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9012&#010;-  }, {&#010;-    ""id"": ""s1i3"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9013&#010;-  }, {&#010;-    ""id"": ""s1i4"", ""name"": ""service-1"", ""address"": ""localhost"", ""port"": 9014&#010;-  }, {&#010;-    ""id"": ""s2i1"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9021&#010;-  }, {&#010;-    ""id"": ""s2i2"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9022&#010;-  }, {&#010;-    ""id"": ""s2i3"", ""name"": ""service-2"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9023&#010;-  }, {&#010;-    ""id"": ""s2i4"", ""name"": ""service-2"", ""address"": ""localhost"", ""port"": 9024&#010;-  }]&#010;-}&#010;-EOF&#010;-&#010;-unzip -d target target/${CONSUL_ZIP}&#010;-&#010;-target/consul \&#010;-    agent \&#010;-    -server \&#010;-    -bootstrap \&#010;-    -datacenter camel \&#010;-    -advertise 127.0.0.1 \&#010;-    -bind 0.0.0.0 \&#010;-    -log-level trace \&#010;-    -data-dir target/consul-data \&#010;-    -config-dir target/consul-config&#010;\ No newline at end of file&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C639ed319227c4d7b9e413e844ebeae34%40git.apache.org%3E,2017-04-18 11:08:29,commits,362.0,  camel git commit: Polished example
184,184,124.0,363.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 4f01b7861 -&gt; bef5ab7ec&#010;&#010;&#010;Polished example&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/bef5ab7e&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/bef5ab7e&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/bef5ab7e&#010;&#010;Branch: refs/heads/master&#010;Commit: bef5ab7ec52a55394ea516dd9836fb62d7cac571&#010;Parents: 4f01b78&#010;Author: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Authored: Tue Apr 18 13:38:05 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Tue Apr 18 13:38:12 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../README.adoc                                 | 12 ++++-&#010; .../services/src/main/bash/consul-run-linux.sh  | 43 ++++++++++++++++++&#010; .../services/src/main/bash/consul-run-osx.sh    | 46 ++++++++++++++++++++&#010; .../services/src/main/bash/consul-run.sh        | 42 ------------------&#010; .../README.adoc                                 |  8 ++++&#010; .../service/src/main/bash/consul-run-linux.sh   |  3 +-&#010; .../service/src/main/bash/consul-run-osx.sh     |  3 +-&#010; 7 files changed, 112 insertions(+), 45 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/bef5ab7e/examples/camel-example-spring-boot-servicecall/README.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-spring-boot-servicecall/README.adoc b/examples/camel-example-spring-boot-servicecall/README.adoc&#010;index 2a0d097..e02ce31 100644&#010;--- a/examples/camel-example-spring-boot-servicecall/README.adoc&#010;+++ b/examples/camel-example-spring-boot-servicecall/README.adoc&#010;@@ -31,7 +31,8 @@ Using multiple shells:&#010;  - start consul:&#010; &#010;   $ cd services&#010;-  $ src/main/bash/consul-run.sh&#010;+  $ src/main/bash/consul-run-linx.sh       (for linux)&#010;+  $ src/main/bash/consul-run-osx.sh        (for mac osx)&#010; &#010;  - start the service-1 service group:&#010; &#010;@@ -59,6 +60,15 @@ In a new shell:&#010; &#010; If you keep calling the http endpoint you'll notice they are consumed using a round robin&#010;policy and that one of the services registered in consul is not taken into account according&#010;to the blacklist.&#010; &#010;+## Web console&#010;+&#010;+You can open the Consul web console&#010;+&#010;+     http://localhost:8500/ui&#010;+&#010;+Where you can find information about the services and its state.&#010;+     &#010;+&#010; ## More information&#010; &#010; You can find more information about Apache Camel at the website: http://camel.apache.org/&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/bef5ab7e/examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run-linux.sh&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run-linux.sh&#010;b/examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run-linux.sh&#010;new file mode 100755&#010;index 0000000..aa5dd3f&#010;--- /dev/null&#010;+++ b/examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run-linux.sh&#010;@@ -0,0 +1,43 @@&#010;+#!/usr/bin/env bash&#010;+&#010;+CONSUL_VER=""0.8.1""&#010;+CONSUL_ZIP=""consul_${CONSUL_VER}_linux_amd64.zip""&#010;+&#010;+# cleanup&#010;+rm -rf ""target/consul-data""&#010;+rm -rf ""target/consul-config""&#010;+rm -rf ""target/consul""&#010;+&#010;+mkdir -p target/&#010;+mkdir -p target/consul-data&#010;+mkdir -p target/consul-config&#010;+&#010;+if [ ! -f target/${CONSUL_ZIP} ]; then&#010;+    wget ""https://releases.hashicorp.com/consul/${CONSUL_VER}/${CONSUL_ZIP}"" -O target/${CONSUL_ZIP}&#010;+fi&#010;+&#010;+cat &gt; target/consul-config/services.json &lt;&lt;EOF&#010;+{&#010;+  ""services"": [{&#010;+    ""id"": ""s1i1"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9011&#010;+  }, {&#010;+    ""id"": ""s1i2"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9012&#010;+  }, {&#010;+    ""id"": ""s1i3"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9013&#010;+  }]&#010;+}&#010;+EOF&#010;+&#010;+unzip -d target target/${CONSUL_ZIP}&#010;+&#010;+target/consul \&#010;+    agent \&#010;+    -server \&#010;+    -bootstrap \&#010;+    -datacenter camel \&#010;+    -advertise 127.0.0.1 \&#010;+    -bind 0.0.0.0 \&#010;+    -log-level trace \&#010;+    -data-dir target/consul-data \&#010;+    -config-dir target/consul-config \&#010;+    -ui&#010;\ No newline at end of file&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/bef5ab7e/examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run-osx.sh&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run-osx.sh&#010;b/examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run-osx.sh&#010;new file mode 100755&#010;index 0000000..b3be9e1&#010;--- /dev/null&#010;+++ b/examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run-osx.sh&#010;@@ -0,0 +1,46 @@&#010;+#!/usr/bin/env bash&#010;+&#010;+CONSUL_VER=""0.8.1""&#010;+CONSUL_ZIP=""consul_${CONSUL_VER}_darwin_amd64.zip""&#010;+&#010;+# cleanup&#010;+rm -rf ""target/consul-data""&#010;+rm -rf ""target/consul-config""&#010;+rm -rf ""target/consul""&#010;+&#010;+mkdir -p target/&#010;+mkdir -p target/consul-data&#010;+mkdir -p target/consul-config&#010;+&#010;+&#010;+if [ ! -f target/$CONSUL_ZIP ]; then&#010;+    echo Downloading: https://releases.hashicorp.com/consul/$CONSUL_VER/$CONSUL_ZIP &#010;+    curl -o target/$CONSUL_ZIP ""https://releases.hashicorp.com/consul/$CONSUL_VER/$CONSUL_ZIP""&#010;+fi&#010;+&#010;+cat &gt; target/consul-config/services.json &lt;&lt;EOF&#010;+{&#010;+  ""services"": [{&#010;+    ""id"": ""s1i1"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9011&#010;+  }, {&#010;+    ""id"": ""s1i2"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9012&#010;+  }, {&#010;+    ""id"": ""s1i3"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9013&#010;+  }]&#010;+}&#010;+EOF&#010;+&#010;+unzip -d target target/$CONSUL_ZIP&#010;+chmod +x target/consul&#010;+&#010;+target/consul \&#010;+    agent \&#010;+    -server \&#010;+    -bootstrap \&#010;+    -datacenter camel \&#010;+    -advertise 127.0.0.1 \&#010;+    -bind 0.0.0.0 \&#010;+    -log-level trace \&#010;+    -data-dir target/consul-data \&#010;+    -config-dir target/consul-config \&#010;+    -ui&#010;\ No newline at end of file&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/bef5ab7e/examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run.sh&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run.sh&#010;b/examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run.sh&#010;deleted file mode 100755&#010;index bb74d96..0000000&#010;--- a/examples/camel-example-spring-boot-servicecall/services/src/main/bash/consul-run.sh&#010;+++ /dev/null&#010;@@ -1,42 +0,0 @@&#010;-#!/usr/bin/env bash&#010;-&#010;-CONSUL_VER=""0.7.5""&#010;-CONSUL_ZIP=""consul_${CONSUL_VER}_linux_amd64.zip""&#010;-&#010;-# cleanup&#010;-rm -rf ""target/consul-data""&#010;-rm -rf ""target/consul-config""&#010;-rm -rf ""target/consul""&#010;-&#010;-mkdir -p target/&#010;-mkdir -p target/consul-data&#010;-mkdir -p target/consul-config&#010;-&#010;-if [ ! -f target/${CONSUL_ZIP} ]; then&#010;-    wget ""https://releases.hashicorp.com/consul/${CONSUL_VER}/${CONSUL_ZIP}"" -O target/${CONSUL_ZIP}&#010;-fi&#010;-&#010;-cat &gt; target/consul-config/services.json &lt;&lt;EOF&#010;-{&#010;-  ""services"": [{&#010;-    ""id"": ""s1i1"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9011&#010;-  }, {&#010;-    ""id"": ""s1i2"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9012&#010;-  }, {&#010;-    ""id"": ""s1i3"", ""name"": ""service-1"", ""tags"": [""camel"", ""service-call""], ""address"": ""localhost"",&#010;""port"": 9013&#010;-  }]&#010;-}&#010;-EOF&#010;-&#010;-unzip -d target target/${CONSUL_ZIP}&#010;-&#010;-target/consul \&#010;-    agent \&#010;-    -server \&#010;-    -bootstrap \&#010;-    -datacenter camel \&#010;-    -advertise 127.0.0.1 \&#010;-    -bind 0.0.0.0 \&#010;-    -log-level trace \&#010;-    -data-dir target/consul-data \&#010;-    -config-dir target/consul-config&#010;\ No newline at end of file&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/bef5ab7e/examples/camel-example-spring-cloud-servicecall/README.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-spring-cloud-servicecall/README.adoc b/examples/camel-example-spring-cloud-servicecall/README.adoc&#010;index 0d0fbce..3e66d3b 100644&#010;--- a/examples/camel-example-spring-cloud-servicecall/README.adoc&#010;+++ b/examples/camel-example-spring-cloud-servicecall/README.adoc&#010;@@ -48,6 +48,14 @@ In a new shell:&#010; &#010; If you keep calling the http endpoint you'll notice they are consumed using a round robin&#010;policy and that only the services matching specific tags are consumed.&#010; &#010;+## Web console&#010;+&#010;+You can open the Consul web console&#010;+&#010;+     http://localhost:8500/ui&#010;+&#010;+Where you can find information about the services and its state.&#010;+&#010; ## More information&#010; &#010; You can find more information about Apache Camel at the website: http://camel.apache.org/&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/bef5ab7e/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-linux.sh&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-linux.sh&#010;b/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-linux.sh&#010;index 14afcfe..c170c04 100755&#010;--- a/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-linux.sh&#010;+++ b/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-linux.sh&#010;@@ -49,4 +49,5 @@ target/consul \&#010;     -bind 0.0.0.0 \&#010;     -log-level trace \&#010;     -data-dir target/consul-data \&#010;-    -config-dir target/consul-config&#010;\ No newline at end of file&#010;+    -config-dir target/consul-config \&#010;+    -ui&#010;\ No newline at end of file&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/bef5ab7e/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-osx.sh&#010;----------------------------------------------------------------------&#010;diff --git a/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-osx.sh&#010;b/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-osx.sh&#010;index 4b62282..ff314cc 100755&#010;--- a/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-osx.sh&#010;+++ b/examples/camel-example-spring-cloud-servicecall/service/src/main/bash/consul-run-osx.sh&#010;@@ -52,4 +52,5 @@ target/consul \&#010;     -bind 0.0.0.0 \&#010;     -log-level trace \&#010;     -data-dir target/consul-data \&#010;-    -config-dir target/consul-config&#010;\ No newline at end of file&#010;+    -config-dir target/consul-config \&#010;+    -ui&#010;\ No newline at end of file&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cf8b363ce36914d9397d29cac12a2cd88%40git.apache.org%3E,2017-04-18 11:38:19,commits,363.0,  camel git commit: Polished example
185,185,115.0,206.0,dmvolod,"GitHub user dmvolod opened a pull request:&#010;&#010;    https://github.com/apache/camel/pull/1636&#010;&#010;    Protobuf issue&#010;&#010;    Check if the running OS platform supports the protobuf generator plugin. &#010;    If the platform doesn't support, the protobuf test code generation, their  assembly and&#010;launch will be skipped &#010;    Supported platforms are: &#010;    - Linux (x86 32 and 64-bit)&#010;    - Windows (x86 32 and 64-bit)&#010;    - OSX (x86 32 and 64-bit)&#010;    This prevents fails when build without ""fastinstall"" profile will run on unsupported by&#010;protoc plugin platform&#010;&#010;You can merge this pull request into a Git repository by running:&#010;&#010;    $ git pull https://github.com/dmvolod/camel protobuf-issue&#010;&#010;Alternatively you can review and apply these changes as the patch at:&#010;&#010;    https://github.com/apache/camel/pull/1636.patch&#010;&#010;To close this pull request, make a commit to your master/trunk branch&#010;with (at least) the following in the commit message:&#010;&#010;    This closes #1636&#010;    &#010;----&#010;commit 35ab9fa64958ba451cc5d2ca81a499059831ddc1&#010;Author: Dmitry Volodin &lt;dmvolod@gmail.com&gt;&#010;Date:   2017-04-18T10:59:18Z&#010;&#010;    camel-protobuf: Check if the OS supports the protobuf generator plugin&#010;&#010;commit cb9e031f46ec917793775f49535633af88da02c3&#010;Author: Dmitry Volodin &lt;dmvolod@gmail.com&gt;&#010;Date:   2017-04-18T11:08:10Z&#010;&#010;    camel-protobuf: set gmaven-plugin version to global param&#010;&#010;----&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3Cgit-pr-1636-camel%40git.apache.org%3E,2017-04-18 11:10:54,mail,206.0,[GitHub] camel pull request #1636: Protobuf issue
186,186,117.0,366.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 33bb03fb2 -&gt; b3f0c7407&#010;&#010;&#010;camel-protobuf: set gmaven-plugin version to global param&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/b3f0c740&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/b3f0c740&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/b3f0c740&#010;&#010;Branch: refs/heads/master&#010;Commit: b3f0c7407633538fd4648175a87522343dd28f05&#010;Parents: ecaf006&#010;Author: Dmitry Volodin &lt;dmvolod@gmail.com&gt;&#010;Authored: Tue Apr 18 14:08:10 2017 +0300&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Tue Apr 18 13:20:19 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; components/camel-protobuf/pom.xml | 2 +-&#010; 1 file changed, 1 insertion(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/b3f0c740/components/camel-protobuf/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-protobuf/pom.xml b/components/camel-protobuf/pom.xml&#010;index f97679c..536d95c 100644&#010;--- a/components/camel-protobuf/pom.xml&#010;+++ b/components/camel-protobuf/pom.xml&#010;@@ -107,7 +107,7 @@&#010;       &lt;plugin&gt;&#010;         &lt;groupId&gt;org.codehaus.gmaven&lt;/groupId&gt;&#010;         &lt;artifactId&gt;gmaven-plugin&lt;/artifactId&gt;&#010;-        &lt;version&gt;1.5&lt;/version&gt;&#010;+        &lt;version&gt;${gmaven-plugin-version}&lt;/version&gt;&#010;         &lt;executions&gt;&#010;           &lt;execution&gt;&#010;             &lt;phase&gt;validate&lt;/phase&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cc9356b760c6d4805b7146ca866dd8676%40git.apache.org%3E,2017-04-18 11:21:09,commits,366.0,[1/2] camel git commit: camel-protobuf: set gmaven-plugin version to global param
187,187,118.0,367.0,davscl...@apache.org,"camel-protobuf: Check if the OS supports the protobuf generator plugin&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/ecaf0064&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/ecaf0064&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/ecaf0064&#010;&#010;Branch: refs/heads/master&#010;Commit: ecaf006408b55857abf341a505124befc4fb4be5&#010;Parents: 33bb03f&#010;Author: Dmitry Volodin &lt;dmvolod@gmail.com&gt;&#010;Authored: Tue Apr 18 13:59:18 2017 +0300&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Tue Apr 18 13:20:19 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; components/camel-protobuf/pom.xml | 58 ++++++++++++++++++++++++++++++++--&#010; 1 file changed, 55 insertions(+), 3 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/ecaf0064/components/camel-protobuf/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-protobuf/pom.xml b/components/camel-protobuf/pom.xml&#010;index 6785890..f97679c 100644&#010;--- a/components/camel-protobuf/pom.xml&#010;+++ b/components/camel-protobuf/pom.xml&#010;@@ -17,6 +17,7 @@&#010; --&gt;&#010; &lt;project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#010;          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd""&gt;&#010;+  &#010;   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#010; &#010;   &lt;parent&gt;&#010;@@ -51,7 +52,7 @@&#010;       &lt;version&gt;${protobuf-version}&lt;/version&gt;&#010;     &lt;/dependency&gt;&#010;     &lt;dependency&gt;&#010;-    &lt;groupId&gt;commons-io&lt;/groupId&gt;&#010;+      &lt;groupId&gt;commons-io&lt;/groupId&gt;&#010;       &lt;artifactId&gt;commons-io&lt;/artifactId&gt;&#010;     &lt;/dependency&gt;&#010; &#010;@@ -82,7 +83,7 @@&#010;       &lt;scope&gt;test&lt;/scope&gt;&#010;     &lt;/dependency&gt;&#010;   &lt;/dependencies&gt;&#010;-  &#010;+&#010;   &lt;build&gt;&#010;     &lt;extensions&gt;&#010;       &lt;!-- Operating system and CPU architecture detection extension --&gt;&#010;@@ -92,8 +93,34 @@&#010;         &lt;version&gt;1.4.1.Final&lt;/version&gt;&#010;       &lt;/extension&gt;&#010;     &lt;/extensions&gt;&#010;-    &#010;+&#010;     &lt;plugins&gt;&#010;+      &lt;!--&#010;+        Check if the running OS platform supports the protobuf generator plugin. &#010;+        If the platform doesn't support, the protobuf test code generation, their &#010;+        assembly and launch will be skipped &#010;+        Supported platforms are: &#010;+        - Linux (x86 32 and 64-bit)&#010;+        - Windows (x86 32 and 64-bit)&#010;+        - OSX (x86 32 and 64-bit)&#010;+      --&gt;&#010;+      &lt;plugin&gt;&#010;+        &lt;groupId&gt;org.codehaus.gmaven&lt;/groupId&gt;&#010;+        &lt;artifactId&gt;gmaven-plugin&lt;/artifactId&gt;&#010;+        &lt;version&gt;1.5&lt;/version&gt;&#010;+        &lt;executions&gt;&#010;+          &lt;execution&gt;&#010;+            &lt;phase&gt;validate&lt;/phase&gt;&#010;+            &lt;goals&gt;&#010;+              &lt;goal&gt;execute&lt;/goal&gt;&#010;+            &lt;/goals&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;source&gt;&lt;![CDATA[pom.properties['skip-test']=pom.properties['os.detected.classifier'].matches('^.*?(linux|windows|osx)-x86.*$')&#010;? 'false' : 'true';]]&gt;&lt;/source&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/execution&gt;&#010;+        &lt;/executions&gt;&#010;+      &lt;/plugin&gt;&#010;+&#010;       &lt;!-- Protobuf Java code generator plugin --&gt;&#010;       &lt;plugin&gt;&#010;         &lt;groupId&gt;org.xolstice.maven.plugins&lt;/groupId&gt;&#010;@@ -107,10 +134,35 @@&#010;             &lt;/goals&gt;&#010;             &lt;configuration&gt;&#010;               &lt;protocArtifact&gt;com.google.protobuf:protoc:${protobuf-version}:exe:${os.detected.classifier}&lt;/protocArtifact&gt;&#010;+              &lt;skip&gt;${skip-test}&lt;/skip&gt;&#010;             &lt;/configuration&gt;&#010;           &lt;/execution&gt;&#010;         &lt;/executions&gt;&#010;       &lt;/plugin&gt;&#010;+&#010;+      &lt;plugin&gt;&#010;+        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#010;+        &lt;executions&gt;&#010;+          &lt;execution&gt;&#010;+            &lt;id&gt;default-testCompile&lt;/id&gt;&#010;+            &lt;phase&gt;test-compile&lt;/phase&gt;&#010;+            &lt;goals&gt;&#010;+              &lt;goal&gt;testCompile&lt;/goal&gt;&#010;+            &lt;/goals&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;skip&gt;${skip-test}&lt;/skip&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/execution&gt;&#010;+        &lt;/executions&gt;&#010;+      &lt;/plugin&gt;&#010;+&#010;+      &lt;plugin&gt;&#010;+        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#010;+        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+        &lt;configuration&gt;&#010;+          &lt;skipTests&gt;${skip-test}&lt;/skipTests&gt;&#010;+        &lt;/configuration&gt;&#010;+      &lt;/plugin&gt;&#010;     &lt;/plugins&gt;&#010;   &lt;/build&gt;&#010; &lt;/project&gt;&#010;\ No newline at end of file&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C971bc01990b54dd98b543e3fea3351da%40git.apache.org%3E,2017-04-18 11:21:10,commits,367.0,  [2/2] camel git commit: camel-protobuf: Check if the OS supports the protobuf generator plugin
188,188,125.0,207.0,dmvolod,"Github user dmvolod closed the pull request at:&#010;&#010;    https://github.com/apache/camel/pull/1636&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170418114251.D3BB3DFC70%40git1-us-west.apache.org%3E,2017-04-18 11:42:51,mail,207.0,  [GitHub] camel pull request #1636: Protobuf issue
189,189,129.0,208.0,dmvolod,"GitHub user dmvolod opened a pull request:&#010;&#010;    https://github.com/apache/camel/pull/1637&#010;&#010;    camel-grpc: Check if the OS supports the protoc/grpc generator plugin&#010;&#010;    Check if the running OS platform supports the protobuf generator plugin.&#010;    If the platform doesn't support, the protobuf test code generation, their  assembly and&#010;launch will be skipped. This prevents fails when build without ""fastinstall"" profile will&#010;run on unsupported by protoc plugin platform.&#010;&#010;You can merge this pull request into a Git repository by running:&#010;&#010;    $ git pull https://github.com/dmvolod/camel grpc-issue&#010;&#010;Alternatively you can review and apply these changes as the patch at:&#010;&#010;    https://github.com/apache/camel/pull/1637.patch&#010;&#010;To close this pull request, make a commit to your master/trunk branch&#010;with (at least) the following in the commit message:&#010;&#010;    This closes #1637&#010;    &#010;----&#010;commit 1d82e2074266f2ae75abe79128344acc5ebb88c9&#010;Author: Dmitry Volodin &lt;dmvolod@gmail.com&gt;&#010;Date:   2017-04-18T12:10:44Z&#010;&#010;    camel-grpc: Check if the OS supports the protobuf generator plugin&#010;&#010;----&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3Cgit-pr-1637-camel%40git.apache.org%3E,2017-04-18 12:14:39,mail,208.0,[GitHub] camel pull request #1637: camel-grpc: Check if the OS supports the protoc/gr...
190,190,132.0,369.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master bef5ab7ec -&gt; 1d82e2074&#010;&#010;&#010;camel-grpc: Check if the OS supports the protobuf generator plugin&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/1d82e207&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/1d82e207&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/1d82e207&#010;&#010;Branch: refs/heads/master&#010;Commit: 1d82e2074266f2ae75abe79128344acc5ebb88c9&#010;Parents: bef5ab7&#010;Author: Dmitry Volodin &lt;dmvolod@gmail.com&gt;&#010;Authored: Tue Apr 18 15:10:44 2017 +0300&#010;Committer: Dmitry Volodin &lt;dmvolod@gmail.com&gt;&#010;Committed: Tue Apr 18 15:10:44 2017 +0300&#010;&#010;----------------------------------------------------------------------&#010; components/camel-grpc/pom.xml | 63 ++++++++++++++++++++++++++++++++++----&#010; 1 file changed, 57 insertions(+), 6 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/1d82e207/components/camel-grpc/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-grpc/pom.xml b/components/camel-grpc/pom.xml&#010;index 4d45f0c..af65988 100644&#010;--- a/components/camel-grpc/pom.xml&#010;+++ b/components/camel-grpc/pom.xml&#010;@@ -16,7 +16,8 @@&#010;   limitations under the License.&#010; --&gt;&#010; &lt;project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#010;-  xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd""&gt;&#010;+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd""&gt;&#010;+&#010;   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#010; &#010;   &lt;parent&gt;&#010;@@ -29,7 +30,7 @@&#010;   &lt;packaging&gt;jar&lt;/packaging&gt;&#010;   &lt;name&gt;Camel :: gRPC&lt;/name&gt;&#010;   &lt;description&gt;Camel component for gRPC (Remote Procedure Call) support&lt;/description&gt;&#010;-  &#010;+&#010;   &lt;properties&gt;&#010;     &lt;camel.osgi.export.pkg&gt;org.apache.camel.component.grpc.*;${camel.osgi.version}&lt;/camel.osgi.export.pkg&gt;&#010;     &lt;camel.osgi.export.service&gt;org.apache.camel.spi.ComponentResolver;component=grpc&lt;/camel.osgi.export.service&gt;&#010;@@ -55,7 +56,7 @@&#010;       &lt;artifactId&gt;grpc-stub&lt;/artifactId&gt;&#010;       &lt;version&gt;${grpc-version}&lt;/version&gt;&#010;     &lt;/dependency&gt;&#010;-    &#010;+&#010;     &lt;dependency&gt;&#010;       &lt;groupId&gt;org.springframework&lt;/groupId&gt;&#010;       &lt;artifactId&gt;spring-core&lt;/artifactId&gt;&#010;@@ -90,7 +91,7 @@&#010;       &lt;scope&gt;test&lt;/scope&gt;&#010;     &lt;/dependency&gt;&#010;   &lt;/dependencies&gt;&#010;-  &#010;+&#010;   &lt;build&gt;&#010;     &lt;extensions&gt;&#010;       &lt;!-- Operating system and CPU architecture detection extension --&gt;&#010;@@ -100,8 +101,34 @@&#010;         &lt;version&gt;1.4.1.Final&lt;/version&gt;&#010;       &lt;/extension&gt;&#010;     &lt;/extensions&gt;&#010;-    &#010;+&#010;     &lt;plugins&gt;&#010;+      &lt;!--&#010;+        Check if the running OS platform supports the protobuf generator plugin. &#010;+        If the platform doesn't support, the protobuf test code generation, their &#010;+        assembly and launch will be skipped &#010;+        Supported platforms are: &#010;+        - Linux (x86 32 and 64-bit)&#010;+        - Windows (x86 32 and 64-bit)&#010;+        - OSX (x86 32 and 64-bit)&#010;+      --&gt;&#010;+      &lt;plugin&gt;&#010;+        &lt;groupId&gt;org.codehaus.gmaven&lt;/groupId&gt;&#010;+        &lt;artifactId&gt;gmaven-plugin&lt;/artifactId&gt;&#010;+        &lt;version&gt;${gmaven-plugin-version}&lt;/version&gt;&#010;+        &lt;executions&gt;&#010;+          &lt;execution&gt;&#010;+            &lt;phase&gt;validate&lt;/phase&gt;&#010;+            &lt;goals&gt;&#010;+              &lt;goal&gt;execute&lt;/goal&gt;&#010;+            &lt;/goals&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;source&gt;&lt;![CDATA[pom.properties['skip-test']=pom.properties['os.detected.classifier'].matches('^.*?(linux|windows|osx)-x86.*$')&#010;? 'false' : 'true';]]&gt;&lt;/source&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/execution&gt;&#010;+        &lt;/executions&gt;&#010;+      &lt;/plugin&gt;&#010;+&#010;       &lt;!-- gRPC and protobuf Java code generator plugin --&gt;&#010;       &lt;plugin&gt;&#010;         &lt;groupId&gt;org.xolstice.maven.plugins&lt;/groupId&gt;&#010;@@ -111,6 +138,7 @@&#010;           &lt;protocArtifact&gt;com.google.protobuf:protoc:${protobuf-version}:exe:${os.detected.classifier}&lt;/protocArtifact&gt;&#010;           &lt;pluginId&gt;grpc-java&lt;/pluginId&gt;&#010;           &lt;pluginArtifact&gt;io.grpc:protoc-gen-grpc-java:${grpc-version}:exe:${os.detected.classifier}&lt;/pluginArtifact&gt;&#010;+          &lt;skip&gt;${skip-test}&lt;/skip&gt;&#010;         &lt;/configuration&gt;&#010;         &lt;executions&gt;&#010;           &lt;execution&gt;&#010;@@ -121,7 +149,30 @@&#010;           &lt;/execution&gt;&#010;         &lt;/executions&gt;&#010;       &lt;/plugin&gt;&#010;+&#010;+      &lt;plugin&gt;&#010;+        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#010;+        &lt;executions&gt;&#010;+          &lt;execution&gt;&#010;+            &lt;id&gt;default-testCompile&lt;/id&gt;&#010;+            &lt;phase&gt;test-compile&lt;/phase&gt;&#010;+            &lt;goals&gt;&#010;+              &lt;goal&gt;testCompile&lt;/goal&gt;&#010;+            &lt;/goals&gt;&#010;+            &lt;configuration&gt;&#010;+              &lt;skip&gt;${skip-test}&lt;/skip&gt;&#010;+            &lt;/configuration&gt;&#010;+          &lt;/execution&gt;&#010;+        &lt;/executions&gt;&#010;+      &lt;/plugin&gt;&#010;+&#010;+      &lt;plugin&gt;&#010;+        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#010;+        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#010;+        &lt;configuration&gt;&#010;+          &lt;skipTests&gt;${skip-test}&lt;/skipTests&gt;&#010;+        &lt;/configuration&gt;&#010;+      &lt;/plugin&gt;&#010;     &lt;/plugins&gt;&#010;   &lt;/build&gt;&#010;-  &#010; &lt;/project&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C29a67d48337041cb9a58ce5068414454%40git.apache.org%3E,2017-04-18 12:26:07,commits,369.0,camel git commit: camel-grpc: Check if the OS supports the protobuf generator plugin
193,193,116.0,365.0,acosent...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 60675efc3 -&gt; 33bb03fb2&#010;&#010;&#010;Avoid the use of StringUtils in favor of ObjectHelper&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/33bb03fb&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/33bb03fb&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/33bb03fb&#010;&#010;Branch: refs/heads/master&#010;Commit: 33bb03fb24db0df2489686513cf0676983a3df27&#010;Parents: 60675ef&#010;Author: Andrea Cosentino &lt;ancosen@gmail.com&gt;&#010;Authored: Tue Apr 18 13:14:59 2017 +0200&#010;Committer: Andrea Cosentino &lt;ancosen@gmail.com&gt;&#010;Committed: Tue Apr 18 13:17:11 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../java/org/apache/camel/component/grpc/GrpcProducer.java     | 6 +++---&#010; 1 file changed, 3 insertions(+), 3 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/33bb03fb/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcProducer.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcProducer.java&#010;b/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcProducer.java&#010;index 10d8faf..232b8d7 100644&#010;--- a/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcProducer.java&#010;+++ b/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcProducer.java&#010;@@ -27,9 +27,9 @@ import org.apache.camel.AsyncProcessor;&#010; import org.apache.camel.Exchange;&#010; import org.apache.camel.Message;&#010; import org.apache.camel.impl.DefaultProducer;&#010;+import org.apache.camel.util.ObjectHelper;&#010; import org.slf4j.Logger;&#010; import org.slf4j.LoggerFactory;&#010;-import org.springframework.util.StringUtils;&#010; &#010; /**&#010;  * Represents asynchronous and synchronous gRPC producer implementations.&#010;@@ -122,10 +122,10 @@ public class GrpcProducer extends DefaultProducer implements AsyncProcessor&#010;{&#010;     }&#010; &#010;     protected void initializeChannel() {&#010;-        if (!StringUtils.isEmpty(configuration.getHost()) &amp;&amp; !StringUtils.isEmpty(configuration.getPort()))&#010;{&#010;+        if (!ObjectHelper.isEmpty(configuration.getHost()) &amp;&amp; !ObjectHelper.isEmpty(configuration.getPort()))&#010;{&#010;             LOG.info(""Creating channel to the remote gRPC server "" + configuration.getHost()&#010;+ "":"" + configuration.getPort());&#010;             channel = ManagedChannelBuilder.forAddress(configuration.getHost(), configuration.getPort()).usePlaintext(configuration.getUsePlainText()).build();&#010;-        } else if (!StringUtils.isEmpty(configuration.getTarget())) {&#010;+        } else if (!ObjectHelper.isEmpty(configuration.getTarget())) {&#010;             LOG.info(""Creating channel to the remote gRPC server "" + configuration.getTarget());&#010;             channel = ManagedChannelBuilder.forTarget(configuration.getTarget()).usePlaintext(configuration.getUsePlainText()).build();&#010;         } else {&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C043bf010120840de9dcc5e49fb1d0ebb%40git.apache.org%3E,2017-04-18 11:17:25,commits,365.0,camel git commit: Avoid the use of StringUtils in favor of ObjectHelper
196,196,134.0,370.0,acosent...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 1d82e2074 -&gt; 915b53685&#010;&#010;&#010;Upgrade Kubernetes Model to version 1.0.72&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/49ae86c4&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/49ae86c4&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/49ae86c4&#010;&#010;Branch: refs/heads/master&#010;Commit: 49ae86c4868b2fc82ce094efe0eac90f1f966140&#010;Parents: 1d82e20&#010;Author: Andrea Cosentino &lt;ancosen@gmail.com&gt;&#010;Authored: Tue Apr 18 14:21:15 2017 +0200&#010;Committer: Andrea Cosentino &lt;ancosen@gmail.com&gt;&#010;Committed: Tue Apr 18 14:26:42 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; parent/pom.xml | 2 +-&#010; 1 file changed, 1 insertion(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/49ae86c4/parent/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/parent/pom.xml b/parent/pom.xml&#010;index d5954e8..99168ff 100644&#010;--- a/parent/pom.xml&#010;+++ b/parent/pom.xml&#010;@@ -405,7 +405,7 @@&#010;     &lt;kie-version&gt;6.5.0.Final&lt;/kie-version&gt;&#010;     &lt;krati-version&gt;0.4.9&lt;/krati-version&gt;&#010;     &lt;kubernetes-client-version&gt;2.2.13&lt;/kubernetes-client-version&gt;&#010;-    &lt;kubernetes-model-version&gt;1.0.67&lt;/kubernetes-model-version&gt;&#010;+    &lt;kubernetes-model-version&gt;1.0.72&lt;/kubernetes-model-version&gt;&#010;     &lt;kxml2-bundle-version&gt;2.3.0_3&lt;/kxml2-bundle-version&gt;&#010;     &lt;leveldbjni-version&gt;1.8&lt;/leveldbjni-version&gt;&#010;     &lt;libphonenumber-version&gt;8.3.3&lt;/libphonenumber-version&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Ce0df644a013f4f298599ab186e64347d%40git.apache.org%3E,2017-04-18 12:27:16,commits,370.0,[1/2] camel git commit: Upgrade Kubernetes Model to version 1.0.72
197,197,135.0,371.0,acosent...@apache.org,"Upgrade Kubernetes Client to version 2.2.14&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/915b5368&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/915b5368&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/915b5368&#010;&#010;Branch: refs/heads/master&#010;Commit: 915b5368566d250dad2e58b4b6b9813bed335a61&#010;Parents: 49ae86c&#010;Author: Andrea Cosentino &lt;ancosen@gmail.com&gt;&#010;Authored: Tue Apr 18 14:21:36 2017 +0200&#010;Committer: Andrea Cosentino &lt;ancosen@gmail.com&gt;&#010;Committed: Tue Apr 18 14:26:43 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; parent/pom.xml | 2 +-&#010; 1 file changed, 1 insertion(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/915b5368/parent/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/parent/pom.xml b/parent/pom.xml&#010;index 99168ff..b3284be 100644&#010;--- a/parent/pom.xml&#010;+++ b/parent/pom.xml&#010;@@ -404,7 +404,7 @@&#010;     &lt;karaf4-version&gt;4.1.1&lt;/karaf4-version&gt;&#010;     &lt;kie-version&gt;6.5.0.Final&lt;/kie-version&gt;&#010;     &lt;krati-version&gt;0.4.9&lt;/krati-version&gt;&#010;-    &lt;kubernetes-client-version&gt;2.2.13&lt;/kubernetes-client-version&gt;&#010;+    &lt;kubernetes-client-version&gt;2.2.14&lt;/kubernetes-client-version&gt;&#010;     &lt;kubernetes-model-version&gt;1.0.72&lt;/kubernetes-model-version&gt;&#010;     &lt;kxml2-bundle-version&gt;2.3.0_3&lt;/kxml2-bundle-version&gt;&#010;     &lt;leveldbjni-version&gt;1.8&lt;/leveldbjni-version&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Ccc4f4a1bbbdb4c96aa1ddfae3862d806%40git.apache.org%3E,2017-04-18 12:27:17,commits,371.0,  [2/2] camel git commit: Upgrade Kubernetes Client to version 2.2.14
200,200,144.0,376.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master ff463456a -&gt; b3ac9932f&#010;&#010;&#010;CAMEL-11144: Add components to component table, add description&#010;&#010;Signed-off-by: Jens Reimann &lt;jreimann@redhat.com&gt;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/8b277e6d&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/8b277e6d&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/8b277e6d&#010;&#010;Branch: refs/heads/master&#010;Commit: 8b277e6db5ff7fc796e32cfa33f043a2d5ee6584&#010;Parents: ff46345&#010;Author: Jens Reimann &lt;jreimann@redhat.com&gt;&#010;Authored: Fri Apr 14 10:42:43 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Tue Apr 18 16:01:37 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../org/apache/camel/component/milo/client/MiloClientEndpoint.java | 2 +-&#010; 1 file changed, 1 insertion(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/8b277e6d/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientEndpoint.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientEndpoint.java&#010;b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientEndpoint.java&#010;index ba07ea4..56041ff 100644&#010;--- a/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientEndpoint.java&#010;+++ b/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/MiloClientEndpoint.java&#010;@@ -34,7 +34,7 @@ import org.eclipse.milo.opcua.stack.core.types.builtin.ExpandedNodeId;&#010;  * Connect to OPC UA servers using the binary protocol for acquiring telemetry&#010;  * data&#010;  */&#010;-@UriEndpoint(firstVersion = ""2.19.0"", scheme = ""milo-client"", syntax = ""milo-client:endpointUri"",&#010;title = ""Milo based OPC UA Client"", consumerClass = MiloClientConsumer.class, label = ""iot"")&#010;+@UriEndpoint(firstVersion = ""2.19.0"", scheme = ""milo-client"", syntax = ""milo-client:endpointUri"",&#010;title = ""OPC UA Client"", consumerClass = MiloClientConsumer.class, label = ""iot"")&#010; public class MiloClientEndpoint extends DefaultEndpoint implements MiloClientItemConfiguration&#010;{&#010; &#010;     /**&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cb0d782fc27d5476ea7adeff0c0c190b4%40git.apache.org%3E,2017-04-18 14:04:53,commits,376.0,"[1/2] camel git commit: CAMEL-11144: Add components to component table, add description"
201,201,145.0,377.0,davscl...@apache.org,"Regen&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/b3ac9932&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/b3ac9932&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/b3ac9932&#010;&#010;Branch: refs/heads/master&#010;Commit: b3ac9932f100660755818028260338c02d780881&#010;Parents: 8b277e6&#010;Author: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Authored: Tue Apr 18 16:04:44 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Tue Apr 18 16:04:44 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../camel-milo/src/main/docs/milo-client-component.adoc     | 6 +++---&#010; components/readme.adoc                                      | 9 +++------&#010; docs/user-manual/en/SUMMARY.md                              | 3 +--&#010; 3 files changed, 7 insertions(+), 11 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/b3ac9932/components/camel-milo/src/main/docs/milo-client-component.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-milo/src/main/docs/milo-client-component.adoc b/components/camel-milo/src/main/docs/milo-client-component.adoc&#010;index 1be664f..a6dd6e0 100644&#010;--- a/components/camel-milo/src/main/docs/milo-client-component.adoc&#010;+++ b/components/camel-milo/src/main/docs/milo-client-component.adoc&#010;@@ -1,4 +1,4 @@&#010;-## Milo based OPC UA Client Component&#010;+## OPC UA Client Component&#010; &#010; *Available as of Camel version 2.19*&#010; &#010;@@ -26,7 +26,7 @@ for this component:&#010; &#010; &#010; // component options: START&#010;-The Milo based OPC UA Client component supports 6 options which are listed below.&#010;+The OPC UA Client component supports 6 options which are listed below.&#010; &#010; &#010; &#010;@@ -83,7 +83,7 @@ In other words, shared connections located by the combination of endpoint&#010;URI an&#010; &#010; &#010; // endpoint options: START&#010;-The Milo based OPC UA Client endpoint is configured using URI syntax:&#010;+The OPC UA Client endpoint is configured using URI syntax:&#010; &#010;     milo-client:endpointUri&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/b3ac9932/components/readme.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/components/readme.adoc b/components/readme.adoc&#010;index fbf16b9..09c9bf1 100644&#010;--- a/components/readme.adoc&#010;+++ b/components/readme.adoc&#010;@@ -293,9 +293,6 @@ Number of Components: 231 in 184 JAR artifacts (14 deprecated)&#010; | link:camel-ibatis/src/main/docs/ibatis-component.adoc[iBatis] (camel-ibatis) +&#010; `ibatis:statement` | 1.2 | *deprecated* Performs a query poll insert update or delete in&#010;a relational database using Apache iBATIS.&#010; &#010;-| link:camel-ignite/src/main/docs/ignite-component.adoc[Ignite] (camel-ignite) +&#010;-`ignite:endpointName` | 1.17 | The Ignite Component integrates Apache Camel with Apache Ignite&#010;-&#010; | link:camel-infinispan/src/main/docs/infinispan-component.adoc[Infinispan] (camel-infinispan)&#010;+&#010; `infinispan:cacheName` | 2.13 | For reading/writing from/to Infinispan distributed key/value&#010;store and data grid.&#010; &#010;@@ -392,9 +389,6 @@ Number of Components: 231 in 184 JAR artifacts (14 deprecated)&#010; | link:camel-metrics/src/main/docs/metrics-component.adoc[Metrics] (camel-metrics) +&#010; `metrics:metricsType:metricsName` | 2.14 | To collect various metrics directly from Camel&#010;routes using the DropWizard metrics library.&#010; &#010;-| link:camel-milo/src/main/docs/milo-client-component.adoc[Milo based OPC UA Client] (camel-milo)&#010;+&#010;-`milo-client:endpointUri` | 2.19 | Connect to OPC UA servers using the binary protocol for&#010;acquiring telemetry data&#010;-&#010; | link:camel-mina/src/main/docs/mina-component.adoc[Mina] (camel-mina) +&#010; `mina:protocol:host:port` | 1.0 | *deprecated* Socket level networking using TCP or UDP with&#010;the Apache Mina 1.x library.&#010; &#010;@@ -455,6 +449,9 @@ Number of Components: 231 in 184 JAR artifacts (14 deprecated)&#010; | link:camel-olingo4/camel-olingo4-component/src/main/docs/olingo4-component.adoc[Olingo4]&#010;(camel-olingo4) +&#010; `olingo4:apiName/methodName` | 2.19 | Communicates with OData 4.0 services using Apache Olingo&#010;OData API.&#010; &#010;+| link:camel-milo/src/main/docs/milo-client-component.adoc[OPC UA Client] (camel-milo) +&#010;+`milo-client:endpointUri` | 2.19 | Connect to OPC UA servers using the binary protocol for&#010;acquiring telemetry data&#010;+&#010; | link:camel-milo/src/main/docs/milo-server-component.adoc[OPC UA Server] (camel-milo) +&#010; `milo-server:itemId` | 2.19 | Make telemetry data available as an OPC UA server&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/b3ac9932/docs/user-manual/en/SUMMARY.md&#010;----------------------------------------------------------------------&#010;diff --git a/docs/user-manual/en/SUMMARY.md b/docs/user-manual/en/SUMMARY.md&#010;index a1bbc02..25968df 100644&#010;--- a/docs/user-manual/en/SUMMARY.md&#010;+++ b/docs/user-manual/en/SUMMARY.md&#010;@@ -209,7 +209,6 @@&#010; &#009;* [HTTP](http-component.adoc)&#010; &#009;* [HTTP4](http4-component.adoc)&#010; &#009;* [iBatis](ibatis-component.adoc)&#010;-&#009;* [Ignite](ignite-component.adoc)&#010; &#009;* [IMAP](imap-component.adoc)&#010; &#009;* [Infinispan](infinispan-component.adoc)&#010; &#009;* [InfluxDB](influxdb-component.adoc)&#010;@@ -240,7 +239,6 @@&#010; &#009;* [Lucene](lucene-component.adoc)&#010; &#009;* [Lumberjack](lumberjack-component.adoc)&#010; &#009;* [Metrics](metrics-component.adoc)&#010;-&#009;* [Milo based OPC UA Client](milo-client-component.adoc)&#010; &#009;* [Mina](mina-component.adoc)&#010; &#009;* [Mina2](mina2-component.adoc)&#010; &#009;* [MLLP](mllp-component.adoc)&#010;@@ -260,6 +258,7 @@&#010; &#009;* [Netty4 HTTP](netty4-http-component.adoc)&#010; &#009;* [Olingo2](olingo2-component.adoc)&#010; &#009;* [Olingo4](olingo4-component.adoc)&#010;+&#009;* [OPC UA Client](milo-client-component.adoc)&#010; &#009;* [OPC UA Server](milo-server-component.adoc)&#010; &#009;* [OpenShift](openshift-component.adoc)&#010; &#009;* [OpenStack Cinder](openstack-cinder-component.adoc)&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C3e213d571ef24fc5bbb47a5e324142b1%40git.apache.org%3E,2017-04-18 14:04:54,commits,377.0,  [2/2] camel git commit: Regen
202,202,152.0,193.0,ctron,"Github user ctron closed the pull request at:&#010;&#010;    https://github.com/apache/camel/pull/1632&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170418150528.3EF8ADFBDA%40git1-us-west.apache.org%3E,2017-04-18 15:05:28,mail,193.0,"  [GitHub] camel pull request #1632: CAMEL-11144: Add components to component table, ad..."
205,205,227.0,136.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 4f415029d -&gt; 1d1daefe8&#010;&#010;&#010;Polished&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/1d1daefe&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/1d1daefe&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/1d1daefe&#010;&#010;Branch: refs/heads/master&#010;Commit: 1d1daefe899db83383d5e46bbb4bd67db71fad2a&#010;Parents: 4f41502&#010;Author: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Authored: Wed Apr 19 13:04:35 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Wed Apr 19 13:04:35 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; components/camel-milo/src/main/docs/milo-client-component.adoc | 6 ------&#010; components/camel-milo/src/main/docs/milo-server-component.adoc | 6 ------&#010; 2 files changed, 12 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/1d1daefe/components/camel-milo/src/main/docs/milo-client-component.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-milo/src/main/docs/milo-client-component.adoc b/components/camel-milo/src/main/docs/milo-client-component.adoc&#010;index a6dd6e0..2fc8535 100644&#010;--- a/components/camel-milo/src/main/docs/milo-client-component.adoc&#010;+++ b/components/camel-milo/src/main/docs/milo-client-component.adoc&#010;@@ -2,15 +2,9 @@&#010; &#010; *Available as of Camel version 2.19*&#010; &#010;-### Milo Client Component&#010;-&#010;-*Available as of Camel 2.19*&#010;-&#010; The *Milo Client* component provides access to OPC UA servers using the&#010; http://eclipse.org/milo[Eclipse Milo™] implementation.&#010; &#010;-*Java 8*: This component requires Java 8 at runtime. &#010;-&#010; Maven users will need to add the following dependency to their `pom.xml`&#010; for this component:&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/1d1daefe/components/camel-milo/src/main/docs/milo-server-component.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-milo/src/main/docs/milo-server-component.adoc b/components/camel-milo/src/main/docs/milo-server-component.adoc&#010;index 6b4d828..2573f9d 100644&#010;--- a/components/camel-milo/src/main/docs/milo-server-component.adoc&#010;+++ b/components/camel-milo/src/main/docs/milo-server-component.adoc&#010;@@ -2,10 +2,6 @@&#010; &#010; *Available as of Camel version 2.19*&#010; &#010;-### Eclipse Milo Server Component&#010;-&#010;-*Available as of Camel 2.19*&#010;-&#010; The *Milo Server* component provides an OPC UA server using the&#010; http://eclipse.org/milo[Eclipse Milo™] implementation.&#010; &#010;@@ -27,8 +23,6 @@ Messages sent to the endpoint from Camel will be available from the OPC&#010;UA serve&#010; Value write requests from OPC UA Client will trigger messages which are sent into Apache&#010;Camel.&#010; &#010; &#010;-&#010;-&#010; // component options: START&#010; The OPC UA Server component supports 19 options which are listed below.&#010; &#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C6b96bcc6a4f7438da64f023f5b7d409e%40git.apache.org%3E,2017-04-19 11:04:44,commits,136.0,  camel git commit: Polished
206,206,139.0,194.0,Ancil hameed,"I working on JBoss Fuse, I want to put my SOAP request in Active MQ Queue.&#010;After putting SOAP request in Queue I want a response sent back to my SOAP&#010;request.&#010;&#010;Sample Code snippet: Below is my camel context, i have replace &lt; &gt; with ( )&#010;&#010;(cxf:cxfEndpoint    address=""http://localhost:8181/cxf/hello""&#010;id=""SOAPInput"" serviceClass=""com.ws.demo.HelloWorld""/)&#010;(bean class=""com.ws.demo.SoapResProcessor"" id=""soapResProcessor""/) &#010;(camelContext id=""camelContext"" &#010;xmlns=""http://camel.apache.org/schema/spring"")&#010;(route id=""route1"" streamCache=""true"")&#010;(from id=""sampleFrom"" uri=""cxf:bean:SOAPInput?&#010;dataFormat=PAYLOAD&amp;amp;exchangePattern=InOut""/)&#010;(when id=""whenBatch"")&#010;(xpath)starts-with(substring-after((/v1:processMessageRequest/name/text()), &#010;'DEST_NAME='), ""Sample"")(/xpath)`enter code here`&#010;(to id=""toSampleQ"" uri=""activemq:queue:SAMPLEQ?jmsMessageType=Text""/)&#010;(process id=""soapResProcess"" ref=""soapResProcessor""/)&#010;(/when)&#010;&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Active-MQ-Put-Soap-Request-in-Active-MQ-and-get-back-SOAP-response-tp5797816.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492520014899-5797816.post%40n5.nabble.com%3E,2017-04-18 12:53:34,users,195.0,Active MQ; Put Soap Request in Active MQ and get back SOAP response
207,207,154.0,200.0,"Andathodan Tiringoli, Ancil Hameed","Hi Claus Ibsen, can you please help on below&#010;I working on JBoss Fuse, I want to put my SOAP request in Active MQ Queue. After putting SOAP&#010;request in Queue I want a response sent back to my SOAP request.&#010;Sample Code snippet: Below is my camel context&#010;&lt;cxf:cxfEndpoint    address=""http://localhost:8181/cxf/hello""&#010;id=""SOAPInput"" serviceClass=""com.ws.demo.HelloWorld""/&gt;&#010;&lt;bean class=""com.ws.demo.SoapResProcessor"" id=""soapResProcessor""/&gt;&#010;&lt;camelContext id=""camelContext""&#010;xmlns=""http://camel.apache.org/schema/spring""&gt;&#010;&lt;route id=""route1"" streamCache=""true""&gt;&#010;&lt;from id=""sampleFrom"" uri=""cxf:bean:SOAPInput?&#010;dataFormat=PAYLOAD&amp;amp;exchangePattern=InOut""/&gt;&#010;&lt;when id=""whenBatch""&gt;&#010;&lt;xpath&gt;starts-with(substring-after((/v1:processMessageRequest/name/text()),&#010;'DEST_NAME='), ""Sample"")&lt;/xpath&gt;`enter code here`&#010;&lt;to id=""toSampleQ"" uri=""activemq:queue:SAMPLEQ?jmsMessageType=Text""/&gt;&#010;&lt;process id=""soapResProcess"" ref=""soapResProcessor""/&gt;&#010;&lt;/when&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C88aeb3caabab4192b8106b90b04fc672%40SW933EXP001.visa.com%3E,2017-04-18 15:20:06,users,201.0,Re: How to use request reply in JMS
208,208,140.0,586.0,Zoran Regvart (JIRA),Zoran Regvart created CAMEL-11163:&#010;-------------------------------------&#010;&#010;             Summary: Add @Generated annotation in REST DSL Swagger generated code&#010;                 Key: CAMEL-11163&#010;                 URL: https://issues.apache.org/jira/browse/CAMEL-11163&#010;             Project: Camel&#010;          Issue Type: Improvement&#010;          Components: tooling&#010;            Reporter: Zoran Regvart&#010;            Assignee: Zoran Regvart&#010;            Priority: Trivial&#010;&#010;&#010;REST DSL Swagger code generation should add {{@Generated}} annotation to the source code this&#010;will help IDEs and code analysis tools to treat the generated code as generated.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064693.1492521308000.305569.1492521341890%40Atlassian.JIRA%3E,2017-04-18 13:15:41,issues,590.0,  [jira] [Created] (CAMEL-11163) Add @Generated annotation in REST DSL Swagger generated code
209,209,141.0,374.0,zregv...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 13d16f1db -&gt; ff463456a&#010;&#010;&#010;CAMEL-11163 Add @Generated annotation in REST D...&#010;&#010;SL Swagger generated code&#010;&#010;Adds the `@Generated` annotation to the generated source code of&#010;`RouteBuilder` implementations. This way IDEs and source code analysis&#010;tools know that the code was generated.&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/ff463456&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/ff463456&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/ff463456&#010;&#010;Branch: refs/heads/master&#010;Commit: ff463456afb5a66b9576806311deb9737a00c6c7&#010;Parents: 13d16f1&#010;Author: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Authored: Tue Apr 18 15:08:08 2017 +0200&#010;Committer: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Committed: Tue Apr 18 15:17:02 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../swagger/RestDslSourceCodeGenerator.java        | 17 +++++++++++++++++&#010; .../generator/swagger/RestDslGeneratorTest.java    | 10 +++++++---&#010; .../src/test/resources/MyRestRoute.txt             |  5 +++++&#010; .../src/test/resources/SwaggerPetstore.txt         |  5 +++++&#010; 4 files changed, 34 insertions(+), 3 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/ff463456/tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/RestDslSourceCodeGenerator.java&#010;----------------------------------------------------------------------&#010;diff --git a/tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/RestDslSourceCodeGenerator.java&#010;b/tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/RestDslSourceCodeGenerator.java&#010;index cd27c3b..bbc4b22 100644&#010;--- a/tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/RestDslSourceCodeGenerator.java&#010;+++ b/tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/RestDslSourceCodeGenerator.java&#010;@@ -17,11 +17,14 @@&#010; package org.apache.camel.generator.swagger;&#010; &#010; import java.io.IOException;&#010;+import java.time.Instant;&#010; import java.util.function.Function;&#010; import java.util.stream.Collector;&#010; &#010;+import javax.annotation.Generated;&#010; import javax.lang.model.element.Modifier;&#010; &#010;+import com.squareup.javapoet.AnnotationSpec;&#010; import com.squareup.javapoet.JavaFile;&#010; import com.squareup.javapoet.MethodSpec;&#010; import com.squareup.javapoet.TypeSpec;&#010;@@ -43,6 +46,8 @@ public abstract class RestDslSourceCodeGenerator&lt;T&gt; extends RestDslGenerator&lt;Res&#010; &#010;     private Function&lt;Swagger, String&gt; classNameGenerator = RestDslSourceCodeGenerator::generateClassName;&#010; &#010;+    private Instant generated = Instant.now();&#010;+&#010;     private String indent = DEFAULT_INDENT;&#010; &#010;     private Function&lt;Swagger, String&gt; packageNameGenerator = RestDslSourceCodeGenerator::generatePackageName;&#010;@@ -85,6 +90,10 @@ public abstract class RestDslSourceCodeGenerator&lt;T&gt; extends RestDslGenerator&lt;Res&#010;         return emitter.result();&#010;     }&#010; &#010;+    Instant generated() {&#010;+        return generated;&#010;+    }&#010;+&#010;     JavaFile generateSourceCode() {&#010;         final MethodSpec methodSpec = generateConfigureMethod(swagger);&#010; &#010;@@ -92,6 +101,8 @@ public abstract class RestDslSourceCodeGenerator&lt;T&gt; extends RestDslGenerator&lt;Res&#010; &#010;         final TypeSpec generatedRouteBulder = TypeSpec.classBuilder(classNameToUse).superclass(RouteBuilder.class)&#010;             .addModifiers(Modifier.PUBLIC, Modifier.FINAL).addMethod(methodSpec)&#010;+            .addAnnotation(AnnotationSpec.builder(Generated.class).addMember(""value"", ""$S"",&#010;getClass().getName())&#010;+                .addMember(""date"", ""$S"", generated()).build())&#010;             .addJavadoc(""Generated from Swagger specification by Camel REST DSL generator.\n"").build();&#010; &#010;         final String packageNameToUse = packageNameGenerator.apply(swagger);&#010;@@ -99,6 +110,12 @@ public abstract class RestDslSourceCodeGenerator&lt;T&gt; extends RestDslGenerator&lt;Res&#010;         return JavaFile.builder(packageNameToUse, generatedRouteBulder).indent(indent).build();&#010;     }&#010; &#010;+    RestDslSourceCodeGenerator&lt;T&gt; withGeneratedTime(final Instant generated) {&#010;+        this.generated = generated;&#010;+&#010;+        return this;&#010;+    }&#010;+&#010;     static String generateClassName(final Swagger swagger) {&#010;         final Info info = swagger.getInfo();&#010;         if (info == null) {&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/ff463456/tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/RestDslGeneratorTest.java&#010;----------------------------------------------------------------------&#010;diff --git a/tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/RestDslGeneratorTest.java&#010;b/tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/RestDslGeneratorTest.java&#010;index 3602654..69aee57 100644&#010;--- a/tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/RestDslGeneratorTest.java&#010;+++ b/tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/RestDslGeneratorTest.java&#010;@@ -22,6 +22,7 @@ import java.net.URISyntaxException;&#010; import java.nio.charset.StandardCharsets;&#010; import java.nio.file.Files;&#010; import java.nio.file.Paths;&#010;+import java.time.Instant;&#010; &#010; import io.swagger.models.Swagger;&#010; import io.swagger.parser.SwaggerParser;&#010;@@ -35,6 +36,8 @@ import static org.assertj.core.api.Assertions.assertThat;&#010; &#010; public class RestDslGeneratorTest {&#010; &#010;+    final Instant generated = Instant.parse(""2017-10-17T00:00:00.000Z"");&#010;+&#010;     final Swagger swagger = new SwaggerParser().read(""petstore.json"");&#010; &#010;     @Test&#010;@@ -50,7 +53,7 @@ public class RestDslGeneratorTest {&#010;     public void shouldGenerateSourceCodeWithDefaults() throws IOException, URISyntaxException&#010;{&#010;         final StringBuilder code = new StringBuilder();&#010; &#010;-        RestDslGenerator.toAppendable(swagger).generate(code);&#010;+        RestDslGenerator.toAppendable(swagger).withGeneratedTime(generated).generate(code);&#010; &#010;         final URI file = RestDslGeneratorTest.class.getResource(""/SwaggerPetstore.txt"").toURI();&#010;         final String expectedContent = new String(Files.readAllBytes(Paths.get(file)), StandardCharsets.UTF_8);&#010;@@ -62,8 +65,9 @@ public class RestDslGeneratorTest {&#010;     public void shouldGenerateSourceCodeWithOptions() throws IOException, URISyntaxException&#010;{&#010;         final StringBuilder code = new StringBuilder();&#010; &#010;-        RestDslGenerator.toAppendable(swagger).withClassName(""MyRestRoute"").withPackageName(""com.example"")&#010;-            .withIndent(""\t"").withDestinationGenerator(o -&gt; ""direct:rest-"" + o.getOperationId()).generate(code);&#010;+        RestDslGenerator.toAppendable(swagger).withGeneratedTime(generated).withClassName(""MyRestRoute"")&#010;+            .withPackageName(""com.example"").withIndent(""\t"")&#010;+            .withDestinationGenerator(o -&gt; ""direct:rest-"" + o.getOperationId()).generate(code);&#010; &#010;         final URI file = RestDslGeneratorTest.class.getResource(""/MyRestRoute.txt"").toURI();&#010;         final String expectedContent = new String(Files.readAllBytes(Paths.get(file)), StandardCharsets.UTF_8);&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/ff463456/tooling/swagger-rest-dsl-generator/src/test/resources/MyRestRoute.txt&#010;----------------------------------------------------------------------&#010;diff --git a/tooling/swagger-rest-dsl-generator/src/test/resources/MyRestRoute.txt b/tooling/swagger-rest-dsl-generator/src/test/resources/MyRestRoute.txt&#010;index 4b19f69..d782300 100644&#010;--- a/tooling/swagger-rest-dsl-generator/src/test/resources/MyRestRoute.txt&#010;+++ b/tooling/swagger-rest-dsl-generator/src/test/resources/MyRestRoute.txt&#010;@@ -1,5 +1,6 @@&#010; package com.example;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.builder.RouteBuilder;&#010; import org.apache.camel.model.rest.CollectionFormat;&#010; import org.apache.camel.model.rest.RestParamType;&#010;@@ -7,6 +8,10 @@ import org.apache.camel.model.rest.RestParamType;&#010; /**&#010;  * Generated from Swagger specification by Camel REST DSL generator.&#010;  */&#010;+@Generated(&#010;+&#009;&#009;value = ""org.apache.camel.generator.swagger.AppendableGenerator"",&#010;+&#009;&#009;date = ""2017-10-17T00:00:00Z""&#010;+)&#010; public final class MyRestRoute extends RouteBuilder {&#010; &#009;/**&#010; &#009; * Defines Apache Camel routes using REST DSL fluent API.&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/ff463456/tooling/swagger-rest-dsl-generator/src/test/resources/SwaggerPetstore.txt&#010;----------------------------------------------------------------------&#010;diff --git a/tooling/swagger-rest-dsl-generator/src/test/resources/SwaggerPetstore.txt b/tooling/swagger-rest-dsl-generator/src/test/resources/SwaggerPetstore.txt&#010;index 21d259c..6a4cb0f 100644&#010;--- a/tooling/swagger-rest-dsl-generator/src/test/resources/SwaggerPetstore.txt&#010;+++ b/tooling/swagger-rest-dsl-generator/src/test/resources/SwaggerPetstore.txt&#010;@@ -1,5 +1,6 @@&#010; package io.swagger.petstore;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.builder.RouteBuilder;&#010; import org.apache.camel.model.rest.CollectionFormat;&#010; import org.apache.camel.model.rest.RestParamType;&#010;@@ -7,6 +8,10 @@ import org.apache.camel.model.rest.RestParamType;&#010; /**&#010;  * Generated from Swagger specification by Camel REST DSL generator.&#010;  */&#010;+@Generated(&#010;+        value = ""org.apache.camel.generator.swagger.AppendableGenerator"",&#010;+        date = ""2017-10-17T00:00:00Z""&#010;+)&#010; public final class SwaggerPetstore extends RouteBuilder {&#010;     /**&#010;      * Defines Apache Camel routes using REST DSL fluent API.&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C694d96e31ace475a9426b02ad8bcbfff%40git.apache.org%3E,2017-04-18 13:17:12,commits,374.0,  camel git commit: CAMEL-11163 Add @Generated annotation in REST D...
210,210,142.0,587.0,Zoran Regvart (JIRA),&#010;     [ https://issues.apache.org/jira/browse/CAMEL-11163?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&#010;]&#010;&#010;Zoran Regvart resolved CAMEL-11163.&#010;-----------------------------------&#010;       Resolution: Implemented&#010;    Fix Version/s: 2.19.0&#010;&#010;&gt; Add @Generated annotation in REST DSL Swagger generated code&#010;&gt; ------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11163&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11163&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Improvement&#010;&gt;          Components: tooling&#010;&gt;            Reporter: Zoran Regvart&#010;&gt;            Assignee: Zoran Regvart&#010;&gt;            Priority: Trivial&#010;&gt;             Fix For: 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; REST DSL Swagger code generation should add {{@Generated}} annotation to the source code&#010;this will help IDEs and code analysis tools to treat the generated code as generated.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064693.1492521308000.305582.1492521461631%40Atlassian.JIRA%3E,2017-04-18 13:17:41,issues,591.0,  [jira] [Resolved] (CAMEL-11163) Add @Generated annotation in REST DSL Swagger generated code
211,211,201.0,588.0,Zoran Regvart (JIRA),&#010;     [ https://issues.apache.org/jira/browse/CAMEL-11163?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&#010;]&#010;&#010;Zoran Regvart reopened CAMEL-11163:&#010;-----------------------------------&#010;&#010;The {{date}} property on the {{@Generated}} annotation should be optional.&#010;&#010;&gt; Add @Generated annotation in REST DSL Swagger generated code&#010;&gt; ------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11163&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11163&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Improvement&#010;&gt;          Components: tooling&#010;&gt;            Reporter: Zoran Regvart&#010;&gt;            Assignee: Zoran Regvart&#010;&gt;            Priority: Trivial&#010;&gt;             Fix For: 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; REST DSL Swagger code generation should add {{@Generated}} annotation to the source code&#010;this will help IDEs and code analysis tools to treat the generated code as generated.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064693.1492521308000.315761.1492591181591%40Atlassian.JIRA%3E,2017-04-19 08:39:41,issues,592.0,  [jira] [Reopened] (CAMEL-11163) Add @Generated annotation in REST DSL Swagger generated code
212,212,204.0,375.0,zregv...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 9cf875246 -&gt; 30308c9f9&#010;&#010;&#010;CAMEL-11163 Add @Generated annotation in REST D...&#010;&#010;...SL Swagger generated code&#010;&#010;This makes the `date` annotation member of `@Generated` annotation&#010;optional and its generation turned off by default.&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/30308c9f&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/30308c9f&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/30308c9f&#010;&#010;Branch: refs/heads/master&#010;Commit: 30308c9f9c453fb0731ca726a7821de839a4a1dd&#010;Parents: 9cf8752&#010;Author: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Authored: Wed Apr 19 10:47:43 2017 +0200&#010;Committer: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Committed: Wed Apr 19 10:47:59 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../swagger/RestDslSourceCodeGenerator.java     | 24 ++++++++++++++++++--&#010; .../generator/swagger/RestDslGeneratorTest.java |  2 +-&#010; .../src/test/resources/SwaggerPetstore.txt      |  5 +---&#010; 3 files changed, 24 insertions(+), 7 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/30308c9f/tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/RestDslSourceCodeGenerator.java&#010;----------------------------------------------------------------------&#010;diff --git a/tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/RestDslSourceCodeGenerator.java&#010;b/tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/RestDslSourceCodeGenerator.java&#010;index bbc4b22..252bc40 100644&#010;--- a/tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/RestDslSourceCodeGenerator.java&#010;+++ b/tooling/swagger-rest-dsl-generator/src/main/java/org/apache/camel/generator/swagger/RestDslSourceCodeGenerator.java&#010;@@ -52,6 +52,8 @@ public abstract class RestDslSourceCodeGenerator&lt;T&gt; extends RestDslGenerator&lt;Res&#010; &#010;     private Function&lt;Swagger, String&gt; packageNameGenerator = RestDslSourceCodeGenerator::generatePackageName;&#010; &#010;+    private boolean sourceCodeTimestamps;&#010;+&#010;     RestDslSourceCodeGenerator(final Swagger swagger) {&#010;         super(swagger);&#010;     }&#010;@@ -71,6 +73,12 @@ public abstract class RestDslSourceCodeGenerator&lt;T&gt; extends RestDslGenerator&lt;Res&#010;         return this;&#010;     }&#010; &#010;+    public RestDslSourceCodeGenerator&lt;T&gt; withoutSourceCodeTimestamps() {&#010;+        sourceCodeTimestamps = false;&#010;+&#010;+        return this;&#010;+    }&#010;+&#010;     public RestDslSourceCodeGenerator&lt;T&gt; withPackageName(final String packageName)&#010;{&#010;         notEmpty(packageName, ""packageName"");&#010;         this.packageNameGenerator = (s) -&gt; packageName;&#010;@@ -78,6 +86,12 @@ public abstract class RestDslSourceCodeGenerator&lt;T&gt; extends RestDslGenerator&lt;Res&#010;         return this;&#010;     }&#010; &#010;+    public RestDslSourceCodeGenerator&lt;T&gt; withSourceCodeTimestamps() {&#010;+        sourceCodeTimestamps = true;&#010;+&#010;+        return this;&#010;+    }&#010;+&#010;     MethodSpec generateConfigureMethod(final Swagger swagger) {&#010;         final MethodSpec.Builder configure = MethodSpec.methodBuilder(""configure"").addModifiers(Modifier.PUBLIC)&#010;             .returns(void.class).addJavadoc(""Defines Apache Camel routes using REST DSL fluent&#010;API.\n"");&#010;@@ -99,10 +113,16 @@ public abstract class RestDslSourceCodeGenerator&lt;T&gt; extends RestDslGenerator&lt;Res&#010; &#010;         final String classNameToUse = classNameGenerator.apply(swagger);&#010; &#010;+        final AnnotationSpec.Builder generatedAnnotation = AnnotationSpec.builder(Generated.class).addMember(""value"",&#010;+            ""$S"", getClass().getName());&#010;+&#010;+        if (sourceCodeTimestamps) {&#010;+            generatedAnnotation.addMember(""date"", ""$S"", generated());&#010;+        }&#010;+&#010;         final TypeSpec generatedRouteBulder = TypeSpec.classBuilder(classNameToUse).superclass(RouteBuilder.class)&#010;             .addModifiers(Modifier.PUBLIC, Modifier.FINAL).addMethod(methodSpec)&#010;-            .addAnnotation(AnnotationSpec.builder(Generated.class).addMember(""value"", ""$S"",&#010;getClass().getName())&#010;-                .addMember(""date"", ""$S"", generated()).build())&#010;+            .addAnnotation(generatedAnnotation.build())&#010;             .addJavadoc(""Generated from Swagger specification by Camel REST DSL generator.\n"").build();&#010; &#010;         final String packageNameToUse = packageNameGenerator.apply(swagger);&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/30308c9f/tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/RestDslGeneratorTest.java&#010;----------------------------------------------------------------------&#010;diff --git a/tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/RestDslGeneratorTest.java&#010;b/tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/RestDslGeneratorTest.java&#010;index 69aee57..ba0a553 100644&#010;--- a/tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/RestDslGeneratorTest.java&#010;+++ b/tooling/swagger-rest-dsl-generator/src/test/java/org/apache/camel/generator/swagger/RestDslGeneratorTest.java&#010;@@ -66,7 +66,7 @@ public class RestDslGeneratorTest {&#010;         final StringBuilder code = new StringBuilder();&#010; &#010;         RestDslGenerator.toAppendable(swagger).withGeneratedTime(generated).withClassName(""MyRestRoute"")&#010;-            .withPackageName(""com.example"").withIndent(""\t"")&#010;+            .withPackageName(""com.example"").withIndent(""\t"").withSourceCodeTimestamps()&#010;             .withDestinationGenerator(o -&gt; ""direct:rest-"" + o.getOperationId()).generate(code);&#010; &#010;         final URI file = RestDslGeneratorTest.class.getResource(""/MyRestRoute.txt"").toURI();&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/30308c9f/tooling/swagger-rest-dsl-generator/src/test/resources/SwaggerPetstore.txt&#010;----------------------------------------------------------------------&#010;diff --git a/tooling/swagger-rest-dsl-generator/src/test/resources/SwaggerPetstore.txt b/tooling/swagger-rest-dsl-generator/src/test/resources/SwaggerPetstore.txt&#010;index 6a4cb0f..ab99611 100644&#010;--- a/tooling/swagger-rest-dsl-generator/src/test/resources/SwaggerPetstore.txt&#010;+++ b/tooling/swagger-rest-dsl-generator/src/test/resources/SwaggerPetstore.txt&#010;@@ -8,10 +8,7 @@ import org.apache.camel.model.rest.RestParamType;&#010; /**&#010;  * Generated from Swagger specification by Camel REST DSL generator.&#010;  */&#010;-@Generated(&#010;-        value = ""org.apache.camel.generator.swagger.AppendableGenerator"",&#010;-        date = ""2017-10-17T00:00:00Z""&#010;-)&#010;+@Generated(""org.apache.camel.generator.swagger.AppendableGenerator"")&#010; public final class SwaggerPetstore extends RouteBuilder {&#010;     /**&#010;      * Defines Apache Camel routes using REST DSL fluent API.&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C9994eb304dcc40f09f0b494ac5215a45%40git.apache.org%3E,2017-04-19 08:48:23,commits,375.0,  camel git commit: CAMEL-11163 Add @Generated annotation in REST D...
215,215,143.0,196.0,akpcnu,"I am using CAMEL 2.17.3 and having two IN clauses in SQL query causes below&#010;exception:&#010;&#010;org.springframework.jdbc.UncategorizedSQLException:&#010;PreparedStatementCallback; uncategorized SQLException for SQL []; SQL state&#010;[null]; error code [0]; Number of parameters mismatch. Expected: 4, was: 8;&#010;nested exception is java.sql.SQLException: Number of parameters mismatch.&#010;Expected: 4, was: 8&#010;&#010;If I have one IN clause query is working fine. Is this known bug or&#010;behavior? if yes, any alternative? &#010;&#010;ex:&#010;&#010;SELECT column1, column2... &#010;FROM &lt;&#010;&gt;&#010;WHERE column1 IN (:#in:&lt;&lt;dynamically build&gt;&gt;)&#010;column2 IN (:#in:&lt;&lt;dynamically build&gt;&gt;)&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Camel-SQL-more-than-one-IN-clauses-in-SQL-throws-Exception-tp5797818.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492523259121-5797818.post%40n5.nabble.com%3E,2017-04-18 13:47:39,users,197.0,Camel-SQL more than one IN clauses in SQL throws Exception
216,216,146.0,197.0,Claus Ibsen,"Try newer Camel version&#010;&#010;On Tue, Apr 18, 2017 at 3:47 PM, akpcnu &lt;srinivas@live.com&gt; wrote:&#010;&gt; I am using CAMEL 2.17.3 and having two IN clauses in SQL query causes below&#010;&gt; exception:&#010;&gt;&#010;&gt; org.springframework.jdbc.UncategorizedSQLException:&#010;&gt; PreparedStatementCallback; uncategorized SQLException for SQL []; SQL state&#010;&gt; [null]; error code [0]; Number of parameters mismatch. Expected: 4, was: 8;&#010;&gt; nested exception is java.sql.SQLException: Number of parameters mismatch.&#010;&gt; Expected: 4, was: 8&#010;&gt;&#010;&gt; If I have one IN clause query is working fine. Is this known bug or&#010;&gt; behavior? if yes, any alternative?&#010;&gt;&#010;&gt; ex:&#010;&gt;&#010;&gt; SELECT column1, column2...&#010;&gt; FROM &lt;&#010;&gt;&gt;&#010;&gt; WHERE column1 IN (:#in:&lt;&lt;dynamically build&gt;&gt;)&#010;&gt; column2 IN (:#in:&lt;&lt;dynamically build&gt;&gt;)&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt; --&#010;&gt; View this message in context: http://camel.465427.n5.nabble.com/Camel-SQL-more-than-one-IN-clauses-in-SQL-throws-Exception-tp5797818.html&#010;&gt; Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;&#010;&#010;-- &#010;Claus Ibsen&#010;-----------------&#010;http://davsclaus.com @davsclaus&#010;Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yNm54tvOqwQ%2BmHihvU1kwQYmheFB12Z7rwLGHiEd5yfAdQ%40mail.gmail.com%3E,2017-04-18 14:05:59,users,198.0,  Re: Camel-SQL more than one IN clauses in SQL throws Exception
217,217,155.0,198.0,akpcnu,"Thanks Clause, It worked on 2.18.3&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Camel-SQL-more-than-one-IN-clauses-in-SQL-throws-Exception-tp5797818p5797826.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492529869830-5797826.post%40n5.nabble.com%3E,2017-04-18 15:37:49,users,199.0,    Re: Camel-SQL more than one IN clauses in SQL throws Exception
218,218,166.0,199.0,Claus Ibsen,"It might also work on the latest 2.17.x release in case you want to&#010;stay on that release branch.&#010;&#010;On Tue, Apr 18, 2017 at 5:37 PM, akpcnu &lt;srinivas@live.com&gt; wrote:&#010;&gt; Thanks Clause, It worked on 2.18.3&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt; --&#010;&gt; View this message in context: http://camel.465427.n5.nabble.com/Camel-SQL-more-than-one-IN-clauses-in-SQL-throws-Exception-tp5797818p5797826.html&#010;&gt; Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;&#010;&#010;-- &#010;Claus Ibsen&#010;-----------------&#010;http://davsclaus.com @davsclaus&#010;Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yNn7DCpuvFgG-CeEZd7V63QiRNRi2AJiOHFbU6SAnWN4kg%40mail.gmail.com%3E,2017-04-19 07:07:12,users,200.0,      Re: Camel-SQL more than one IN clauses in SQL throws Exception
219,219,147.0,591.0,Zoran Regvart (JIRA),Zoran Regvart created CAMEL-11164:&#010;-------------------------------------&#010;&#010;             Summary: Add @Generated annotation Salesforce generated code&#010;                 Key: CAMEL-11164&#010;                 URL: https://issues.apache.org/jira/browse/CAMEL-11164&#010;             Project: Camel&#010;          Issue Type: Improvement&#010;            Reporter: Zoran Regvart&#010;            Assignee: Zoran Regvart&#010;            Priority: Trivial&#010;&#010;&#010;The Salesforce Maven plugin generates source code for data transfer objects (DTOs) that can&#010;be used to exchange data with the Salesforce API. To help IDEs and code analysis tools they&#010;should be annotated with {{@Generated}}.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064723.1492525172000.306176.1492525181634%40Atlassian.JIRA%3E,2017-04-18 14:19:41,issues,595.0,  [jira] [Created] (CAMEL-11164) Add @Generated annotation Salesforce generated code
220,220,217.0,403.0,zregv...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 424273fa9 -&gt; d9f4ff922&#010;&#010;&#010;CAMEL-11164 Add @Generated annotation Salesforc...&#010;&#010;...e generated code&#010;&#010;Adds `@Generated` annotation to DTOs generated by the Salesforce Maven&#010;plugin to help IDEs and code analysis tools.&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/d9f4ff92&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/d9f4ff92&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/d9f4ff92&#010;&#010;Branch: refs/heads/master&#010;Commit: d9f4ff92225593274759a47e0018eebc5642347f&#010;Parents: 424273f&#010;Author: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Authored: Tue Apr 18 23:45:20 2017 +0200&#010;Committer: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Committed: Wed Apr 19 11:45:20 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../src/main/resources/sobject-picklist.vm                        | 3 +++&#010; .../src/main/resources/sobject-pojo-optional.vm                   | 3 +++&#010; .../src/main/resources/sobject-pojo.vm                            | 3 +++&#010; .../src/main/resources/sobject-query-records-optional.vm          | 2 ++&#010; .../src/main/resources/sobject-query-records.vm                   | 2 ++&#010; .../src/test/resources/generated/Case.java                        | 3 +++&#010; .../src/test/resources/generated/Case_PickListAccentMarkEnum.java | 3 +++&#010; .../test/resources/generated/Case_PickListQuotationMarkEnum.java  | 3 +++&#010; .../src/test/resources/generated/Case_PickListSlashEnum.java      | 3 +++&#010; .../src/test/resources/generated/ComplexCalculatedFormula.java    | 3 +++&#010; .../src/test/resources/generated/QueryRecordsCase.java            | 2 ++&#010; .../resources/generated/QueryRecordsComplexCalculatedFormula.java | 2 ++&#010; 12 files changed, 32 insertions(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d9f4ff92/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-picklist.vm&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-picklist.vm&#010;b/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-picklist.vm&#010;index 58bf3e6..847bbfc 100644&#010;--- a/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-picklist.vm&#010;+++ b/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-picklist.vm&#010;@@ -21,12 +21,15 @@&#010;  */&#010; package $packageName;&#010; &#010;+import javax.annotation.Generated;&#010;+&#010; import com.fasterxml.jackson.annotation.JsonCreator;&#010; import com.fasterxml.jackson.annotation.JsonValue;&#010; &#010; /**&#010;  * Salesforce Enumeration DTO for picklist $field.Name&#010;  */&#010;+@Generated(""org.apache.camel.maven.CamelSalesforceMojo"")&#010; public enum $enumName {&#010; #set ( $values = $utility.getUniqueValues($field) )&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d9f4ff92/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo-optional.vm&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo-optional.vm&#010;b/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo-optional.vm&#010;index 4842307..9dcfca0 100644&#010;--- a/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo-optional.vm&#010;+++ b/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo-optional.vm&#010;@@ -23,6 +23,8 @@ package $packageName;&#010; &#010; import java.util.Optional;&#010; &#010;+import javax.annotation.Generated;&#010;+&#010; ## add imports for XStreamConverter and PicklistEnumConverter if needed&#010; #set ( $hasPicklists = $utility.hasPicklists($desc) )&#010; #set ( $hasMultiSelectPicklists = $utility.hasMultiSelectPicklists($desc) )&#010;@@ -54,6 +56,7 @@ import com.fasterxml.jackson.databind.annotation.JsonSerialize;&#010; /**&#010;  * Salesforce DTO for SObject $desc.Name&#010;  */&#010;+@Generated(""org.apache.camel.maven.CamelSalesforceMojo"")&#010; @XStreamAlias(""${desc.Name}Optional"")&#010; public class ${desc.Name}Optional extends AbstractSObjectBase {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d9f4ff92/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo.vm&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo.vm&#010;b/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo.vm&#010;index 35b6f4a..9087f47 100644&#010;--- a/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo.vm&#010;+++ b/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo.vm&#010;@@ -24,6 +24,8 @@ package $packageName;&#010; import java.util.ArrayList;&#010; import java.util.List;&#010; &#010;+import javax.annotation.Generated;&#010;+&#010; ## add imports for XStreamConverter and PicklistEnumConverter if needed&#010; #set ( $hasPicklists = $utility.hasPicklists($desc) )&#010; #set ( $hasMultiSelectPicklists = $utility.hasMultiSelectPicklists($desc) )&#010;@@ -66,6 +68,7 @@ import com.fasterxml.jackson.annotation.JsonInclude.Include;&#010; /**&#010;  * Salesforce DTO for SObject $desc.Name&#010;  */&#010;+@Generated(""org.apache.camel.maven.CamelSalesforceMojo"")&#010; @XStreamAlias(""$desc.Name"")&#010; public class $desc.Name extends AbstractDescribedSObjectBase {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d9f4ff92/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records-optional.vm&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records-optional.vm&#010;b/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records-optional.vm&#010;index 56a6f25..c8c6bbf 100644&#010;--- a/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records-optional.vm&#010;+++ b/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records-optional.vm&#010;@@ -25,11 +25,13 @@ import com.thoughtworks.xstream.annotations.XStreamImplicit;&#010; import org.apache.camel.component.salesforce.api.dto.AbstractQueryRecordsBase;&#010; &#010; import java.util.List;&#010;+import javax.annotation.Generated;&#010; &#010; /**&#010;  * Salesforce QueryRecords DTO for type $desc.Name&#010;  */&#010; #set( $descName = ""${desc.Name}Optional"" )&#010;+@Generated(""org.apache.camel.maven.CamelSalesforceMojo"")&#010; public class QueryRecords$descName extends AbstractQueryRecordsBase {&#010; &#010;     @XStreamImplicit&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d9f4ff92/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records.vm&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records.vm&#010;b/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records.vm&#010;index d17468a..893bef8 100644&#010;--- a/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records.vm&#010;+++ b/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-query-records.vm&#010;@@ -25,11 +25,13 @@ import com.thoughtworks.xstream.annotations.XStreamImplicit;&#010; import org.apache.camel.component.salesforce.api.dto.AbstractQueryRecordsBase;&#010; &#010; import java.util.List;&#010;+import javax.annotation.Generated;&#010; &#010; /**&#010;  * Salesforce QueryRecords DTO for type $desc.Name&#010;  */&#010; #set( $descName = $desc.Name )&#010;+@Generated(""org.apache.camel.maven.CamelSalesforceMojo"")&#010; public class QueryRecords$descName extends AbstractQueryRecordsBase {&#010; &#010;     @XStreamImplicit&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d9f4ff92/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case.java&#010;b/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case.java&#010;index df282c3..af37bd1 100644&#010;--- a/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case.java&#010;+++ b/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case.java&#010;@@ -7,6 +7,8 @@ package $packageName;&#010; import java.util.ArrayList;&#010; import java.util.List;&#010; &#010;+import javax.annotation.Generated;&#010;+&#010; import com.thoughtworks.xstream.annotations.XStreamAlias;&#010; import com.thoughtworks.xstream.annotations.XStreamConverter;&#010; &#010;@@ -25,6 +27,7 @@ import com.fasterxml.jackson.annotation.JsonProperty;&#010; /**&#010;  * Salesforce DTO for SObject Case&#010;  */&#010;+@Generated(""org.apache.camel.maven.CamelSalesforceMojo"")&#010; @XStreamAlias(""Case"")&#010; public class Case extends AbstractDescribedSObjectBase {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d9f4ff92/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case_PickListAccentMarkEnum.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case_PickListAccentMarkEnum.java&#010;b/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case_PickListAccentMarkEnum.java&#010;index 915d143..6af6914 100644&#010;--- a/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case_PickListAccentMarkEnum.java&#010;+++ b/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case_PickListAccentMarkEnum.java&#010;@@ -4,12 +4,15 @@&#010;  */&#010; package $packageName;&#010; &#010;+import javax.annotation.Generated;&#010;+&#010; import com.fasterxml.jackson.annotation.JsonCreator;&#010; import com.fasterxml.jackson.annotation.JsonValue;&#010; &#010; /**&#010;  * Salesforce Enumeration DTO for picklist PickListAccentMark&#010;  */&#010;+@Generated(""org.apache.camel.maven.CamelSalesforceMojo"")&#010; public enum Case_PickListAccentMarkEnum {&#010; &#010;     // Audiencia de ConciliaciÃ³n&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d9f4ff92/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case_PickListQuotationMarkEnum.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case_PickListQuotationMarkEnum.java&#010;b/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case_PickListQuotationMarkEnum.java&#010;index 3f55dd2..7719fa2 100644&#010;--- a/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case_PickListQuotationMarkEnum.java&#010;+++ b/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case_PickListQuotationMarkEnum.java&#010;@@ -4,12 +4,15 @@&#010;  */&#010; package $packageName;&#010; &#010;+import javax.annotation.Generated;&#010;+&#010; import com.fasterxml.jackson.annotation.JsonCreator;&#010; import com.fasterxml.jackson.annotation.JsonValue;&#010; &#010; /**&#010;  * Salesforce Enumeration DTO for picklist PickListQuotationMark&#010;  */&#010;+@Generated(""org.apache.camel.maven.CamelSalesforceMojo"")&#010; public enum Case_PickListQuotationMarkEnum {&#010; &#010;     // No apretar ""miralo""&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d9f4ff92/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case_PickListSlashEnum.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case_PickListSlashEnum.java&#010;b/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case_PickListSlashEnum.java&#010;index fca520a..4ad2758 100644&#010;--- a/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case_PickListSlashEnum.java&#010;+++ b/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/Case_PickListSlashEnum.java&#010;@@ -4,12 +4,15 @@&#010;  */&#010; package $packageName;&#010; &#010;+import javax.annotation.Generated;&#010;+&#010; import com.fasterxml.jackson.annotation.JsonCreator;&#010; import com.fasterxml.jackson.annotation.JsonValue;&#010; &#010; /**&#010;  * Salesforce Enumeration DTO for picklist PickListSlash&#010;  */&#010;+@Generated(""org.apache.camel.maven.CamelSalesforceMojo"")&#010; public enum Case_PickListSlashEnum {&#010; &#010;     // Acciones relacionadas con cotizaciones y/o avisos de entrega&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d9f4ff92/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/ComplexCalculatedFormula.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/ComplexCalculatedFormula.java&#010;b/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/ComplexCalculatedFormula.java&#010;index 3eeaef1..4e550d9 100644&#010;--- a/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/ComplexCalculatedFormula.java&#010;+++ b/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/ComplexCalculatedFormula.java&#010;@@ -7,6 +7,8 @@ package $packageName;&#010; import java.util.ArrayList;&#010; import java.util.List;&#010; &#010;+import javax.annotation.Generated;&#010;+&#010; import com.thoughtworks.xstream.annotations.XStreamAlias;&#010; &#010; import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;&#010;@@ -23,6 +25,7 @@ import com.fasterxml.jackson.annotation.JsonProperty;&#010; /**&#010;  * Salesforce DTO for SObject ComplexCalculatedFormula&#010;  */&#010;+@Generated(""org.apache.camel.maven.CamelSalesforceMojo"")&#010; @XStreamAlias(""ComplexCalculatedFormula"")&#010; public class ComplexCalculatedFormula extends AbstractDescribedSObjectBase {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d9f4ff92/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/QueryRecordsCase.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/QueryRecordsCase.java&#010;b/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/QueryRecordsCase.java&#010;index a644a31..7b23a8f 100644&#010;--- a/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/QueryRecordsCase.java&#010;+++ b/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/QueryRecordsCase.java&#010;@@ -8,10 +8,12 @@ import com.thoughtworks.xstream.annotations.XStreamImplicit;&#010; import org.apache.camel.component.salesforce.api.dto.AbstractQueryRecordsBase;&#010; &#010; import java.util.List;&#010;+import javax.annotation.Generated;&#010; &#010; /**&#010;  * Salesforce QueryRecords DTO for type Case&#010;  */&#010;+@Generated(""org.apache.camel.maven.CamelSalesforceMojo"")&#010; public class QueryRecordsCase extends AbstractQueryRecordsBase {&#010; &#010;     @XStreamImplicit&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/d9f4ff92/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/QueryRecordsComplexCalculatedFormula.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/QueryRecordsComplexCalculatedFormula.java&#010;b/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/QueryRecordsComplexCalculatedFormula.java&#010;index 279373b..951a70a 100644&#010;--- a/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/QueryRecordsComplexCalculatedFormula.java&#010;+++ b/components/camel-salesforce/camel-salesforce-maven-plugin/src/test/resources/generated/QueryRecordsComplexCalculatedFormula.java&#010;@@ -8,10 +8,12 @@ import com.thoughtworks.xstream.annotations.XStreamImplicit;&#010; import org.apache.camel.component.salesforce.api.dto.AbstractQueryRecordsBase;&#010; &#010; import java.util.List;&#010;+import javax.annotation.Generated;&#010; &#010; /**&#010;  * Salesforce QueryRecords DTO for type ComplexCalculatedFormula&#010;  */&#010;+@Generated(""org.apache.camel.maven.CamelSalesforceMojo"")&#010; public class QueryRecordsComplexCalculatedFormula extends AbstractQueryRecordsBase {&#010; &#010;     @XStreamImplicit&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C56cff17005604f0a9939df7a8fba43c8%40git.apache.org%3E,2017-04-19 09:45:35,commits,403.0,camel git commit: CAMEL-11164 Add @Generated annotation Salesforc...
223,223,148.0,594.0,Zoran Regvart (JIRA),Zoran Regvart created CAMEL-11165:&#010;-------------------------------------&#010;&#010;             Summary: Add @Generated annotation to code generated by SpringBootAutoConfigurationMojo&#010;                 Key: CAMEL-11165&#010;                 URL: https://issues.apache.org/jira/browse/CAMEL-11165&#010;             Project: Camel&#010;          Issue Type: Improvement&#010;          Components: tooling&#010;            Reporter: Zoran Regvart&#010;            Assignee: Zoran Regvart&#010;            Priority: Trivial&#010;&#010;&#010;To help IDEs and code analysis tools classes generated by the Camel Maven plugin for Spring&#010;Boot configuration support should be annotated with {{@Generated}}.&#010;&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064724.1492525323000.306194.1492525361672%40Atlassian.JIRA%3E,2017-04-18 14:22:41,issues,598.0,  [jira] [Created] (CAMEL-11165) Add @Generated annotation to code generated by SpringBootAutoConfigurationMojo
224,224,149.0,378.0,zregv...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master b3ac9932f -&gt; 110d1c9d6&#010;&#010;&#010;CAMEL-11165 Add @Generated annotation to code g...&#010;&#010;...enerated by SpringBootAutoConfigurationMojo&#010;&#010;Adds `@Generated` annotation to Spring Boot auto-configuration generated&#010;source files.&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/110d1c9d&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/110d1c9d&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/110d1c9d&#010;&#010;Branch: refs/heads/master&#010;Commit: 110d1c9d6acf386bceed3e6b2f5f6e2046607236&#010;Parents: b3ac993&#010;Author: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Authored: Tue Apr 18 16:31:08 2017 +0200&#010;Committer: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Committed: Tue Apr 18 16:35:27 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../SpringBootAutoConfigurationMojo.java        | 26 ++++++++++++++++++++&#010; 1 file changed, 26 insertions(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/110d1c9d/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java&#010;----------------------------------------------------------------------&#010;diff --git a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java&#010;b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java&#010;index d7eac27..a2f5fcd 100644&#010;--- a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java&#010;+++ b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java&#010;@@ -27,6 +27,7 @@ import java.lang.reflect.Modifier;&#010; import java.net.MalformedURLException;&#010; import java.net.URL;&#010; import java.net.URLClassLoader;&#010;+import java.time.Instant;&#010; import java.util.ArrayList;&#010; import java.util.Arrays;&#010; import java.util.Collections;&#010;@@ -42,6 +43,8 @@ import java.util.TreeSet;&#010; import java.util.regex.Pattern;&#010; import java.util.stream.Collectors;&#010; &#010;+import javax.annotation.Generated;&#010;+&#010; import com.google.gson.Gson;&#010; import com.google.gson.GsonBuilder;&#010; import org.apache.camel.maven.packaging.model.ComponentModel;&#010;@@ -289,6 +292,8 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;             doc = model.getDescription() + ""\n\n"" + doc;&#010;         }&#010;         commonClass.getJavaDoc().setFullText(doc);&#010;+        commonClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;+        .setStringValue(""date"", Instant.now().toString());&#010; &#010;         for (OtherOptionModel option : model.getOptions()) {&#010;             String type = option.getJavaType();&#010;@@ -334,6 +339,8 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;             configClass.setPackage(packageName);&#010;             configClass.setName(configName);&#010;             configClass.extendSuperType(commonClass);&#010;+            configClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;+            .setStringValue(""date"", Instant.now().toString());&#010;             configClass.addAnnotation(""org.springframework.boot.context.properties.ConfigurationProperties"").setStringValue(""prefix"",&#010;propertiesPrefix);&#010;             configClass.addImport(Map.class);&#010;             configClass.addImport(HashMap.class);&#010;@@ -383,6 +390,8 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         JavaClassSource javaClass = Roaster.create(JavaClassSource.class);&#010;         javaClass.setPackage(packageName);&#010;         javaClass.setName(className);&#010;+        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;+        .setStringValue(""date"", Instant.now().toString());&#010;         javaClass.addAnnotation(""org.springframework.boot.context.properties.ConfigurationProperties"").setStringValue(""prefix"",&#010;propertiesPrefix);&#010; &#010;         String doc = ""Generated by camel-package-maven-plugin - do not edit this file!"";&#010;@@ -446,6 +455,8 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         String doc = ""Generated by camel-package-maven-plugin - do not edit this file!"";&#010;         javaClass.getJavaDoc().setFullText(doc);&#010; &#010;+        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;+        .setStringValue(""date"", Instant.now().toString());&#010;         javaClass.addAnnotation(Configuration.class);&#010;         javaClass.addAnnotation(ConditionalOnBean.class).setStringValue(""type"", ""org.apache.camel.spring.boot.CamelAutoConfiguration"");&#010;         javaClass.addAnnotation(ConditionalOnProperty.class).setStringValue(""name"", ""camel.rest.enabled"").setLiteralValue(""matchIfMissing"",&#010;""true"");&#010;@@ -670,6 +681,8 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         String prefix = ""camel.component."" + (overrideComponentName != null ? overrideComponentName&#010;: model.getScheme());&#010;         // make sure prefix is in lower case&#010;         prefix = prefix.toLowerCase(Locale.US);&#010;+        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;+        .setStringValue(""date"", Instant.now().toString());&#010;         javaClass.addAnnotation(""org.springframework.boot.context.properties.ConfigurationProperties"").setStringValue(""prefix"",&#010;prefix);&#010; &#010;         Set&lt;JavaClassSource&gt; nestedTypes = new HashSet&lt;&gt;();&#010;@@ -1021,6 +1034,8 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         String prefix = ""camel.dataformat."" + (overrideDataFormatName != null ? overrideDataFormatName&#010;: model.getName());&#010;         // make sure prefix is in lower case&#010;         prefix = prefix.toLowerCase(Locale.US);&#010;+        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;+        .setStringValue(""date"", Instant.now().toString());&#010;         javaClass.addAnnotation(""org.springframework.boot.context.properties.ConfigurationProperties"").setStringValue(""prefix"",&#010;prefix);&#010; &#010;         for (DataFormatOptionModel option : model.getDataFormatOptions()) {&#010;@@ -1083,6 +1098,8 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         String prefix = ""camel.language."" + (overrideLanguageName != null ? overrideLanguageName&#010;: model.getName());&#010;         // make sure prefix is in lower case&#010;         prefix = prefix.toLowerCase(Locale.US);&#010;+        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;+        .setStringValue(""date"", Instant.now().toString());&#010;         javaClass.addAnnotation(""org.springframework.boot.context.properties.ConfigurationProperties"").setStringValue(""prefix"",&#010;prefix);&#010; &#010;         for (LanguageOptionModel option : model.getLanguageOptions()) {&#010;@@ -1172,6 +1189,8 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         String doc = ""Generated by camel-package-maven-plugin - do not edit this file!"";&#010;         javaClass.getJavaDoc().setFullText(doc);&#010; &#010;+        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;+            .setStringValue(""date"", Instant.now().toString());&#010;         javaClass.addAnnotation(Configuration.class);&#010;         javaClass.addAnnotation(ConditionalOnBean.class).setStringValue(""type"", ""org.apache.camel.spring.boot.CamelAutoConfiguration"");&#010;         javaClass.addAnnotation(Conditional.class).setLiteralValue(name + "".Condition.class"");&#010;@@ -1246,6 +1265,8 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         String doc = ""Generated by camel-package-maven-plugin - do not edit this file!"";&#010;         javaClass.getJavaDoc().setFullText(doc);&#010; &#010;+        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;+        .setStringValue(""date"", Instant.now().toString());&#010;         javaClass.addAnnotation(Configuration.class);&#010;         javaClass.addAnnotation(ConditionalOnBean.class).setStringValue(""type"", ""org.apache.camel.spring.boot.CamelAutoConfiguration"");&#010;         javaClass.addAnnotation(Conditional.class).setLiteralValue(name + "".Condition.class"");&#010;@@ -1322,6 +1343,8 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         String doc = ""Generated by camel-package-maven-plugin - do not edit this file!"";&#010;         javaClass.getJavaDoc().setFullText(doc);&#010; &#010;+        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;+        .setStringValue(""date"", Instant.now().toString());&#010;         javaClass.addAnnotation(Configuration.class);&#010;         javaClass.addAnnotation(ConditionalOnBean.class).setStringValue(""type"", ""org.apache.camel.spring.boot.CamelAutoConfiguration"");&#010;         javaClass.addAnnotation(Conditional.class).setLiteralValue(name + "".Condition.class"");&#010;@@ -2023,6 +2046,9 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         condition.extendSuperType(SpringBootCondition.class);&#010;         condition.setPublic();&#010;         condition.setStatic(true);&#010;+        &#010;+        condition.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;+        .setStringValue(""date"", Instant.now().toString());&#010; &#010;         String fullQualifiedType = prefix.endsWith(""."") ? prefix +  type : prefix + ""."" +&#010;type;&#010; &#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C48cac69905244aeba244c92c38de6780%40git.apache.org%3E,2017-04-18 14:40:02,commits,378.0,camel git commit: CAMEL-11165 Add @Generated annotation to code g...
225,225,150.0,595.0,Zoran Regvart (JIRA),&#010;     [ https://issues.apache.org/jira/browse/CAMEL-11165?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&#010;]&#010;&#010;Zoran Regvart resolved CAMEL-11165.&#010;-----------------------------------&#010;       Resolution: Implemented&#010;    Fix Version/s: 2.19.0&#010;&#010;&gt; Add @Generated annotation to code generated by SpringBootAutoConfigurationMojo&#010;&gt; ------------------------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11165&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11165&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Improvement&#010;&gt;          Components: tooling&#010;&gt;            Reporter: Zoran Regvart&#010;&gt;            Assignee: Zoran Regvart&#010;&gt;            Priority: Trivial&#010;&gt;             Fix For: 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; To help IDEs and code analysis tools classes generated by the Camel Maven plugin for&#010;Spring Boot configuration support should be annotated with {{@Generated}}.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064724.1492525323000.306505.1492526441536%40Atlassian.JIRA%3E,2017-04-18 14:40:41,issues,599.0,  [jira] [Resolved] (CAMEL-11165) Add @Generated annotation to code generated by SpringBootAutoConfigurationMojo
226,226,163.0,596.0,Claus Ibsen (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11165?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15974201#comment-15974201&#010;] &#010;&#010;Claus Ibsen commented on CAMEL-11165:&#010;-------------------------------------&#010;&#010;I dont think we should include timestamp as it causes the source files to change on each build,&#010;eg&#010;&#010;+    @Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"",&#010;date = ""2017-04-19T07:04:18.056Z"")&#010;&#010;should just be&#010;&#010;+    @Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;&#010;&gt; Add @Generated annotation to code generated by SpringBootAutoConfigurationMojo&#010;&gt; ------------------------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11165&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11165&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Improvement&#010;&gt;          Components: tooling&#010;&gt;            Reporter: Zoran Regvart&#010;&gt;            Assignee: Zoran Regvart&#010;&gt;            Priority: Trivial&#010;&gt;             Fix For: 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; To help IDEs and code analysis tools classes generated by the Camel Maven plugin for&#010;Spring Boot configuration support should be annotated with {{@Generated}}.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13064724.1492525323000.315126.1492585541584%40Atlassian.JIRA%3E,2017-04-19 07:05:41,issues,600.0,  [jira] [Commented] (CAMEL-11165) Add @Generated annotation to code generated by SpringBootAutoConfigurationMojo
231,231,187.0,385.0,zregv...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master dd940e926 -&gt; 492bef343&#010;&#010;&#010;CAMEL-11165 Add @Generated annotation to code g...&#010;&#010;...enerated by SpringBootAutoConfigurationMojo&#010;&#010;This removes the `date` annotation member, so that generation timestamps&#010;do not create source code difference when code gets regenerated on clean&#010;build.&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/583d6dce&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/583d6dce&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/583d6dce&#010;&#010;Branch: refs/heads/master&#010;Commit: 583d6dce4f42ae320107c4a16b13af68870b228b&#010;Parents: dd940e9&#010;Author: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Authored: Wed Apr 19 10:00:45 2017 +0200&#010;Committer: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Committed: Wed Apr 19 10:29:00 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../SpringBootAutoConfigurationMojo.java        | 33 +++++++-------------&#010; 1 file changed, 11 insertions(+), 22 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/583d6dce/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java&#010;----------------------------------------------------------------------&#010;diff --git a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java&#010;b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java&#010;index bba8ecf..57dd4649d 100644&#010;--- a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java&#010;+++ b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java&#010;@@ -304,8 +304,7 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;             doc = model.getDescription() + ""\n\n"" + doc;&#010;         }&#010;         commonClass.getJavaDoc().setFullText(doc);&#010;-        commonClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;-        .setStringValue(""date"", Instant.now().toString());&#010;+        commonClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName());&#010; &#010;         for (OtherOptionModel option : model.getOptions()) {&#010;             String type = option.getJavaType();&#010;@@ -351,8 +350,7 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;             configClass.setPackage(packageName);&#010;             configClass.setName(configName);&#010;             configClass.extendSuperType(commonClass);&#010;-            configClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;-            .setStringValue(""date"", Instant.now().toString());&#010;+            configClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName());&#010;             configClass.addAnnotation(""org.springframework.boot.context.properties.ConfigurationProperties"").setStringValue(""prefix"",&#010;propertiesPrefix);&#010;             configClass.addImport(Map.class);&#010;             configClass.addImport(HashMap.class);&#010;@@ -402,8 +400,7 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         JavaClassSource javaClass = Roaster.create(JavaClassSource.class);&#010;         javaClass.setPackage(packageName);&#010;         javaClass.setName(className);&#010;-        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;-        .setStringValue(""date"", Instant.now().toString());&#010;+        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName());&#010;         javaClass.addAnnotation(""org.springframework.boot.context.properties.ConfigurationProperties"").setStringValue(""prefix"",&#010;propertiesPrefix);&#010; &#010;         String doc = ""Generated by camel-package-maven-plugin - do not edit this file!"";&#010;@@ -467,8 +464,7 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         String doc = ""Generated by camel-package-maven-plugin - do not edit this file!"";&#010;         javaClass.getJavaDoc().setFullText(doc);&#010; &#010;-        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;-        .setStringValue(""date"", Instant.now().toString());&#010;+        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName());&#010;         javaClass.addAnnotation(Configuration.class);&#010;         javaClass.addAnnotation(ConditionalOnBean.class).setStringValue(""type"", ""org.apache.camel.spring.boot.CamelAutoConfiguration"");&#010;         javaClass.addAnnotation(ConditionalOnProperty.class).setStringValue(""name"", ""camel.rest.enabled"").setLiteralValue(""matchIfMissing"",&#010;""true"");&#010;@@ -693,8 +689,7 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         String prefix = ""camel.component."" + (overrideComponentName != null ? overrideComponentName&#010;: model.getScheme());&#010;         // make sure prefix is in lower case&#010;         prefix = prefix.toLowerCase(Locale.US);&#010;-        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;-        .setStringValue(""date"", Instant.now().toString());&#010;+        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName());&#010;         javaClass.addAnnotation(""org.springframework.boot.context.properties.ConfigurationProperties"").setStringValue(""prefix"",&#010;prefix);&#010; &#010;         Set&lt;JavaClassSource&gt; nestedTypes = new HashSet&lt;&gt;();&#010;@@ -1046,8 +1041,7 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         String prefix = ""camel.dataformat."" + (overrideDataFormatName != null ? overrideDataFormatName&#010;: model.getName());&#010;         // make sure prefix is in lower case&#010;         prefix = prefix.toLowerCase(Locale.US);&#010;-        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;-        .setStringValue(""date"", Instant.now().toString());&#010;+        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName());&#010;         javaClass.addAnnotation(""org.springframework.boot.context.properties.ConfigurationProperties"").setStringValue(""prefix"",&#010;prefix);&#010; &#010;         for (DataFormatOptionModel option : model.getDataFormatOptions()) {&#010;@@ -1110,8 +1104,7 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         String prefix = ""camel.language."" + (overrideLanguageName != null ? overrideLanguageName&#010;: model.getName());&#010;         // make sure prefix is in lower case&#010;         prefix = prefix.toLowerCase(Locale.US);&#010;-        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;-        .setStringValue(""date"", Instant.now().toString());&#010;+        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName());&#010;         javaClass.addAnnotation(""org.springframework.boot.context.properties.ConfigurationProperties"").setStringValue(""prefix"",&#010;prefix);&#010; &#010;         for (LanguageOptionModel option : model.getLanguageOptions()) {&#010;@@ -1201,8 +1194,7 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         String doc = ""Generated by camel-package-maven-plugin - do not edit this file!"";&#010;         javaClass.getJavaDoc().setFullText(doc);&#010; &#010;-        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;-            .setStringValue(""date"", Instant.now().toString());&#010;+        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName());&#010;         javaClass.addAnnotation(Configuration.class);&#010;         javaClass.addAnnotation(ConditionalOnBean.class).setStringValue(""type"", ""org.apache.camel.spring.boot.CamelAutoConfiguration"");&#010;         javaClass.addAnnotation(Conditional.class).setLiteralValue(name + "".Condition.class"");&#010;@@ -1277,8 +1269,7 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         String doc = ""Generated by camel-package-maven-plugin - do not edit this file!"";&#010;         javaClass.getJavaDoc().setFullText(doc);&#010; &#010;-        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;-        .setStringValue(""date"", Instant.now().toString());&#010;+        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName());&#010;         javaClass.addAnnotation(Configuration.class);&#010;         javaClass.addAnnotation(ConditionalOnBean.class).setStringValue(""type"", ""org.apache.camel.spring.boot.CamelAutoConfiguration"");&#010;         javaClass.addAnnotation(Conditional.class).setLiteralValue(name + "".Condition.class"");&#010;@@ -1355,8 +1346,7 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         String doc = ""Generated by camel-package-maven-plugin - do not edit this file!"";&#010;         javaClass.getJavaDoc().setFullText(doc);&#010; &#010;-        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;-        .setStringValue(""date"", Instant.now().toString());&#010;+        javaClass.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName());&#010;         javaClass.addAnnotation(Configuration.class);&#010;         javaClass.addAnnotation(ConditionalOnBean.class).setStringValue(""type"", ""org.apache.camel.spring.boot.CamelAutoConfiguration"");&#010;         javaClass.addAnnotation(Conditional.class).setLiteralValue(name + "".Condition.class"");&#010;@@ -2059,8 +2049,7 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;         condition.setPublic();&#010;         condition.setStatic(true);&#010;         &#010;-        condition.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName())&#010;-        .setStringValue(""date"", Instant.now().toString());&#010;+        condition.addAnnotation(Generated.class).setStringValue(""value"", SpringBootAutoConfigurationMojo.class.getName());&#010; &#010;         String fullQualifiedType = prefix.endsWith(""."") ? prefix +  type : prefix + ""."" +&#010;type;&#010; &#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C532bd530059b491faaab8e91173b5fd8%40git.apache.org%3E,2017-04-19 08:35:46,commits,385.0,[01/13] camel git commit: CAMEL-11165 Add @Generated annotation to code g...
232,232,188.0,386.0,zregv...@apache.org,"http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/XmlBeansDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/XmlBeansDataFormatAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/XmlBeansDataFormatAutoConfiguration.java&#010;index 7ec6a95..cfd5297 100644&#010;--- a/platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/XmlBeansDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/XmlBeansDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.converter.xmlbeans.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(XmlBeansDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class XmlBeansDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/XmlBeansDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/XmlBeansDataFormatConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/XmlBeansDataFormatConfiguration.java&#010;index eef7b64..1ff358b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/XmlBeansDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-xmlbeans-starter/src/main/java/org/apache/camel/converter/xmlbeans/springboot/XmlBeansDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.converter.xmlbeans.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.xmlbeans"")&#010; public class XmlBeansDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/XmlJsonDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/XmlJsonDataFormatAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/XmlJsonDataFormatAutoConfiguration.java&#010;index 6c6c7b7..ad00be1 100644&#010;--- a/platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/XmlJsonDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/XmlJsonDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.xmljson.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(XmlJsonDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class XmlJsonDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/XmlJsonDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/XmlJsonDataFormatConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/XmlJsonDataFormatConfiguration.java&#010;index 013bdc0..63741af 100644&#010;--- a/platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/XmlJsonDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-xmljson-starter/src/main/java/org/apache/camel/dataformat/xmljson/springboot/XmlJsonDataFormatConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.dataformat.xmljson.springboot;&#010; &#010; import java.util.List;&#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.xmljson"")&#010; public class XmlJsonDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/component/xmlrpc/springboot/XmlRpcComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/component/xmlrpc/springboot/XmlRpcComponentAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/component/xmlrpc/springboot/XmlRpcComponentAutoConfiguration.java&#010;index ab993bb..c4ae448 100644&#010;--- a/platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/component/xmlrpc/springboot/XmlRpcComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/component/xmlrpc/springboot/XmlRpcComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.xmlrpc.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.xmlrpc.XmlRpcComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(XmlRpcComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class XmlRpcComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/XmlRpcDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/XmlRpcDataFormatAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/XmlRpcDataFormatAutoConfiguration.java&#010;index 79d2439..81f0b5e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/XmlRpcDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/XmlRpcDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.xmlrpc.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(XmlRpcDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class XmlRpcDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/XmlRpcDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/XmlRpcDataFormatConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/XmlRpcDataFormatConfiguration.java&#010;index b13729f..b66d2c3 100644&#010;--- a/platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/XmlRpcDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-xmlrpc-starter/src/main/java/org/apache/camel/dataformat/xmlrpc/springboot/XmlRpcDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.xmlrpc.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.xmlrpc"")&#010; public class XmlRpcDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/XmlSignatureComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/XmlSignatureComponentAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/XmlSignatureComponentAutoConfiguration.java&#010;index dfcd3de..67fb7a6 100644&#010;--- a/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/XmlSignatureComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/XmlSignatureComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.xmlsecurity.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.xmlsecurity.XmlSignatureComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(XmlSignatureComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class XmlSignatureComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/XmlSignatureComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/XmlSignatureComponentConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/XmlSignatureComponentConfiguration.java&#010;index 443724d..0c3f804 100644&#010;--- a/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/XmlSignatureComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/component/xmlsecurity/springboot/XmlSignatureComponentConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.xmlsecurity.springboot;&#010; &#010; import java.util.List;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import javax.xml.crypto.AlgorithmMethod;&#010; import javax.xml.crypto.KeySelector;&#010; import javax.xml.crypto.URIDereferencer;&#010;@@ -35,6 +36,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.xmlsecurity"")&#010; public class XmlSignatureComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/XMLSecurityDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/XMLSecurityDataFormatAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/XMLSecurityDataFormatAutoConfiguration.java&#010;index 62ca4d5..7bb1d70 100644&#010;--- a/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/XMLSecurityDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/XMLSecurityDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.xmlsecurity.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(XMLSecurityDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class XMLSecurityDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/XMLSecurityDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/XMLSecurityDataFormatConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/XMLSecurityDataFormatConfiguration.java&#010;index 9c725c7..772b52c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/XMLSecurityDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-xmlsecurity-starter/src/main/java/org/apache/camel/dataformat/xmlsecurity/springboot/XMLSecurityDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.xmlsecurity.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.securexml"")&#010; public class XMLSecurityDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-xmpp-starter/src/main/java/org/apache/camel/component/xmpp/springboot/XmppComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-xmpp-starter/src/main/java/org/apache/camel/component/xmpp/springboot/XmppComponentAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-xmpp-starter/src/main/java/org/apache/camel/component/xmpp/springboot/XmppComponentAutoConfiguration.java&#010;index a48647e..5b21da0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-xmpp-starter/src/main/java/org/apache/camel/component/xmpp/springboot/XmppComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-xmpp-starter/src/main/java/org/apache/camel/component/xmpp/springboot/XmppComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.xmpp.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.xmpp.XmppComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(XmppComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class XmppComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/JsonDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/JsonDataFormatAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/JsonDataFormatAutoConfiguration.java&#010;index b45b669..58f86c8 100644&#010;--- a/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/JsonDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/JsonDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.xstream.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JsonDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class JsonDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/JsonDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/JsonDataFormatConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/JsonDataFormatConfiguration.java&#010;index 522c52e..d56f19a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/JsonDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/JsonDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.xstream.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.dataformat.xstream.JsonDataFormat;&#010; import org.apache.camel.model.dataformat.JsonLibrary;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.json-xstream"")&#010; public class JsonDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/XStreamDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/XStreamDataFormatAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/XStreamDataFormatAutoConfiguration.java&#010;index c132cab..3d5b520 100644&#010;--- a/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/XStreamDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/XStreamDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.xstream.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(XStreamDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class XStreamDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/XStreamDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/XStreamDataFormatConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/XStreamDataFormatConfiguration.java&#010;index 8e953c6..4921355 100644&#010;--- a/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/XStreamDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-xstream-starter/src/main/java/org/apache/camel/dataformat/xstream/springboot/XStreamDataFormatConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.xstream.springboot;&#010; &#010; import java.util.List;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.xstream"")&#010; public class XStreamDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/YammerComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/YammerComponentAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/YammerComponentAutoConfiguration.java&#010;index 006d096..219e800 100644&#010;--- a/platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/YammerComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/YammerComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.yammer.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.yammer.YammerComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(YammerComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class YammerComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/YammerComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/YammerComponentConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/YammerComponentConfiguration.java&#010;index 1168a36..752766f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/YammerComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-yammer-starter/src/main/java/org/apache/camel/component/yammer/springboot/YammerComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.yammer.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.yammer.ApiRequestor;&#010; import org.apache.camel.component.yammer.YammerFunctionType;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.yammer"")&#010; public class YammerComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/ZendeskComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/ZendeskComponentAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/ZendeskComponentAutoConfiguration.java&#010;index d181838..0bd35c0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/ZendeskComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/ZendeskComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.zendesk.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.zendesk.ZendeskComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ZendeskComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class ZendeskComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/ZendeskComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/ZendeskComponentConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/ZendeskComponentConfiguration.java&#010;index 8defaca..e81d23f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/ZendeskComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-zendesk-starter/src/main/java/org/apache/camel/component/zendesk/springboot/ZendeskComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.zendesk.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010; import org.zendesk.client.v2.Zendesk;&#010;@@ -25,6 +26,7 @@ import org.zendesk.client.v2.Zendesk;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.zendesk"")&#010; public class ZendeskComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/ZipFileDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/ZipFileDataFormatAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/ZipFileDataFormatAutoConfiguration.java&#010;index a0a3213..9772e7d 100644&#010;--- a/platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/ZipFileDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/ZipFileDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.zipfile.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ZipFileDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class ZipFileDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/ZipFileDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/ZipFileDataFormatConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/ZipFileDataFormatConfiguration.java&#010;index fa42d9e..d08996a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/ZipFileDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-zipfile-starter/src/main/java/org/apache/camel/dataformat/zipfile/springboot/ZipFileDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.zipfile.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.zipfile"")&#010; public class ZipFileDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/MasterComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/MasterComponentAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/MasterComponentAutoConfiguration.java&#010;index 5afd8cc..1162a59 100644&#010;--- a/platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/MasterComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/MasterComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.zookeepermaster.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.zookeepermaster.MasterComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(MasterComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class MasterComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/MasterComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/MasterComponentConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/MasterComponentConfiguration.java&#010;index 8529a4d..5e0ed69 100644&#010;--- a/platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/MasterComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-zookeeper-master-starter/src/main/java/org/apache/camel/component/zookeepermaster/springboot/MasterComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.zookeepermaster.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.zookeepermaster.ContainerIdFactory;&#010; import org.apache.curator.framework.CuratorFramework;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -27,6 +28,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.zookeeper-master"")&#010; public class MasterComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/ZooKeeperComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/ZooKeeperComponentAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/ZooKeeperComponentAutoConfiguration.java&#010;index 1478c95..209747a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/ZooKeeperComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/ZooKeeperComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.zookeeper.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.zookeeper.ZooKeeperComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ZooKeeperComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class ZooKeeperComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/ZooKeeperComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/ZooKeeperComponentConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/ZooKeeperComponentConfiguration.java&#010;index 7f40e02..9e4d2cc 100644&#010;--- a/platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/ZooKeeperComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-zookeeper-starter/src/main/java/org/apache/camel/component/zookeeper/springboot/ZooKeeperComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.zookeeper.springboot;&#010; &#010; import java.util.List;&#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.DeprecatedConfigurationProperty;&#010; &#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.DeprecatedConfigurationProper&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.zookeeper"")&#010; public class ZooKeeperComponentConfiguration {&#010; &#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C19ba0daee4734fc1b83147288089a447%40git.apache.org%3E,2017-04-19 08:35:47,commits,386.0,  [02/13] camel git commit: CAMEL-11165 Add @Generated annotation to code g...
233,233,189.0,387.0,zregv...@apache.org,"http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/SplunkComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/SplunkComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/SplunkComponentConfiguration.java&#010;index 8e1d97b..ede27fc 100644&#010;--- a/platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/SplunkComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/SplunkComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.splunk.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.splunk.SplunkConfigurationFactory;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.splunk"")&#010; public class SplunkComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/SpringBatchComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/SpringBatchComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/SpringBatchComponentAutoConfiguration.java&#010;index 380c1fe..fb3fad0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/SpringBatchComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/SpringBatchComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.spring.batch.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.spring.batch.SpringBatchComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SpringBatchComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class SpringBatchComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/SpringBatchComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/SpringBatchComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/SpringBatchComponentConfiguration.java&#010;index 4aff6a2..85fb173 100644&#010;--- a/platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/SpringBatchComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-spring-batch-starter/src/main/java/org/apache/camel/component/spring/batch/springboot/SpringBatchComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.spring.batch.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.batch.core.configuration.JobRegistry;&#010; import org.springframework.batch.core.launch.JobLauncher;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -27,6 +28,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.spring-batch"")&#010; public class SpringBatchComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-spring-integration-starter/src/main/java/org/apache/camel/component/spring/integration/springboot/SpringIntegrationComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-spring-integration-starter/src/main/java/org/apache/camel/component/spring/integration/springboot/SpringIntegrationComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-spring-integration-starter/src/main/java/org/apache/camel/component/spring/integration/springboot/SpringIntegrationComponentAutoConfiguration.java&#010;index e0bf058..c0cc013 100644&#010;--- a/platforms/spring-boot/components-starter/camel-spring-integration-starter/src/main/java/org/apache/camel/component/spring/integration/springboot/SpringIntegrationComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-spring-integration-starter/src/main/java/org/apache/camel/component/spring/integration/springboot/SpringIntegrationComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.spring.integration.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.spring.integration.SpringIntegrationComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SpringIntegrationComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class SpringIntegrationComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-spring-ldap-starter/src/main/java/org/apache/camel/component/springldap/springboot/SpringLdapComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-spring-ldap-starter/src/main/java/org/apache/camel/component/springldap/springboot/SpringLdapComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-spring-ldap-starter/src/main/java/org/apache/camel/component/springldap/springboot/SpringLdapComponentAutoConfiguration.java&#010;index fef476d..1a032a4 100644&#010;--- a/platforms/spring-boot/components-starter/camel-spring-ldap-starter/src/main/java/org/apache/camel/component/springldap/springboot/SpringLdapComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-spring-ldap-starter/src/main/java/org/apache/camel/component/springldap/springboot/SpringLdapComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.springldap.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.springldap.SpringLdapComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SpringLdapComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class SpringLdapComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-spring-redis-starter/src/main/java/org/apache/camel/component/redis/springboot/RedisComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-spring-redis-starter/src/main/java/org/apache/camel/component/redis/springboot/RedisComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-spring-redis-starter/src/main/java/org/apache/camel/component/redis/springboot/RedisComponentAutoConfiguration.java&#010;index 66bd1be..adcdd1c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-spring-redis-starter/src/main/java/org/apache/camel/component/redis/springboot/RedisComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-spring-redis-starter/src/main/java/org/apache/camel/component/redis/springboot/RedisComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.redis.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.redis.RedisComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(RedisComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class RedisComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/component/event/springboot/EventComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/component/event/springboot/EventComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/component/event/springboot/EventComponentAutoConfiguration.java&#010;index 62b26a0..6fea192 100644&#010;--- a/platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/component/event/springboot/EventComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/component/event/springboot/EventComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.event.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.event.EventComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(EventComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class EventComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/SpelLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/SpelLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/SpelLanguageAutoConfiguration.java&#010;index c41a22c..eb7e21f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/SpelLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/SpelLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.spel.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.spel.SpelLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SpelLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class SpelLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/SpelLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/SpelLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/SpelLanguageConfiguration.java&#010;index b8dddfd..37968ae 100644&#010;--- a/platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/SpelLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-spring-starter/src/main/java/org/apache/camel/language/spel/springboot/SpelLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.spel.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.spel"")&#010; public class SpelLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/SpringWebserviceComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/SpringWebserviceComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/SpringWebserviceComponentAutoConfiguration.java&#010;index 42c56db..d64e3b0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/SpringWebserviceComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/SpringWebserviceComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.spring.ws.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.spring.ws.SpringWebserviceComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SpringWebserviceComponentAutoConfiguration.Condition.class)&#010;@@ -85,6 +87,7 @@ public class SpringWebserviceComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/SpringWebserviceComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/SpringWebserviceComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/SpringWebserviceComponentConfiguration.java&#010;index a24699a..4d7bf1c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/SpringWebserviceComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-spring-ws-starter/src/main/java/org/apache/camel/component/spring/ws/springboot/SpringWebserviceComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.spring.ws.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.spring-ws"")&#010; public class SpringWebserviceComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/SqlComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/SqlComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/SqlComponentAutoConfiguration.java&#010;index facfb76..0783c16 100644&#010;--- a/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/SqlComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/SqlComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.sql.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.sql.SqlComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SqlComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class SqlComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/SqlComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/SqlComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/SqlComponentConfiguration.java&#010;index 99df47c..41b913a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/SqlComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/springboot/SqlComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.sql.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import javax.sql.DataSource;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.sql"")&#010; public class SqlComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/SqlStoredComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/SqlStoredComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/SqlStoredComponentAutoConfiguration.java&#010;index 68190dc..c9ef4e5 100644&#010;--- a/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/SqlStoredComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/SqlStoredComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.sql.stored.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.sql.stored.SqlStoredComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SqlStoredComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class SqlStoredComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/SqlStoredComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/SqlStoredComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/SqlStoredComponentConfiguration.java&#010;index 310d2d3..234b800 100644&#010;--- a/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/SqlStoredComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-sql-starter/src/main/java/org/apache/camel/component/sql/stored/springboot/SqlStoredComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.sql.stored.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import javax.sql.DataSource;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.sql-stored"")&#010; public class SqlStoredComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/SshComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/SshComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/SshComponentAutoConfiguration.java&#010;index e9f3ced..87750a7 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/SshComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/SshComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.ssh.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.ssh.SshComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SshComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class SshComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/SshComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/SshComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/SshComponentConfiguration.java&#010;index 4befc2f..2f31426 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/SshComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ssh-starter/src/main/java/org/apache/camel/component/ssh/springboot/SshComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.ssh.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.sshd.common.KeyPairProvider;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.DeprecatedConfigurationProperty;&#010;@@ -27,6 +28,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.ssh"")&#010; public class SshComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-stax-starter/src/main/java/org/apache/camel/component/stax/springboot/StAXComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-stax-starter/src/main/java/org/apache/camel/component/stax/springboot/StAXComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-stax-starter/src/main/java/org/apache/camel/component/stax/springboot/StAXComponentAutoConfiguration.java&#010;index bee7380..fa6e299 100644&#010;--- a/platforms/spring-boot/components-starter/camel-stax-starter/src/main/java/org/apache/camel/component/stax/springboot/StAXComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-stax-starter/src/main/java/org/apache/camel/component/stax/springboot/StAXComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.stax.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.stax.StAXComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(StAXComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class StAXComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/StompComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/StompComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/StompComponentAutoConfiguration.java&#010;index c46611e..08f7262 100644&#010;--- a/platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/StompComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/StompComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.stomp.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.stomp.StompComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(StompComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class StompComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/StompComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/StompComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/StompComponentConfiguration.java&#010;index f2be104..2671bd5 100644&#010;--- a/platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/StompComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-stomp-starter/src/main/java/org/apache/camel/component/stomp/springboot/StompComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.stomp.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.util.jsse.SSLContextParameters;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.stomp"")&#010; public class StompComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-stream-starter/src/main/java/org/apache/camel/component/stream/springboot/StreamComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-stream-starter/src/main/java/org/apache/camel/component/stream/springboot/StreamComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-stream-starter/src/main/java/org/apache/camel/component/stream/springboot/StreamComponentAutoConfiguration.java&#010;index 8f72be2..8b5177d 100644&#010;--- a/platforms/spring-boot/components-starter/camel-stream-starter/src/main/java/org/apache/camel/component/stream/springboot/StreamComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-stream-starter/src/main/java/org/apache/camel/component/stream/springboot/StreamComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.stream.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.stream.StreamComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(StreamComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class StreamComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-stringtemplate-starter/src/main/java/org/apache/camel/component/stringtemplate/springboot/StringTemplateComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-stringtemplate-starter/src/main/java/org/apache/camel/component/stringtemplate/springboot/StringTemplateComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-stringtemplate-starter/src/main/java/org/apache/camel/component/stringtemplate/springboot/StringTemplateComponentAutoConfiguration.java&#010;index 098d350..9409ab2 100644&#010;--- a/platforms/spring-boot/components-starter/camel-stringtemplate-starter/src/main/java/org/apache/camel/component/stringtemplate/springboot/StringTemplateComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-stringtemplate-starter/src/main/java/org/apache/camel/component/stringtemplate/springboot/StringTemplateComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.stringtemplate.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.stringtemplate.StringTemplateComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(StringTemplateComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class StringTemplateComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/SyslogDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/SyslogDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/SyslogDataFormatAutoConfiguration.java&#010;index 6c96a3f..0645a74 100644&#010;--- a/platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/SyslogDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/SyslogDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.syslog.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SyslogDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class SyslogDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/SyslogDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/SyslogDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/SyslogDataFormatConfiguration.java&#010;index afdc18f..3ef518f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/SyslogDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-syslog-starter/src/main/java/org/apache/camel/component/syslog/springboot/SyslogDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.syslog.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.syslog"")&#010; public class SyslogDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/TidyMarkupDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/TidyMarkupDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/TidyMarkupDataFormatAutoConfiguration.java&#010;index b9f2ed8..6ee00da 100644&#010;--- a/platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/TidyMarkupDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/TidyMarkupDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.tagsoup.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(TidyMarkupDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class TidyMarkupDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/TidyMarkupDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/TidyMarkupDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/TidyMarkupDataFormatConfiguration.java&#010;index 0e45ec6..a7fb06a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/TidyMarkupDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-tagsoup-starter/src/main/java/org/apache/camel/dataformat/tagsoup/springboot/TidyMarkupDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.tagsoup.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.tidymarkup"")&#010; public class TidyMarkupDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/TarFileDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/TarFileDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/TarFileDataFormatAutoConfiguration.java&#010;index 24b34f7..2427e92 100644&#010;--- a/platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/TarFileDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/TarFileDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.tarfile.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(TarFileDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class TarFileDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/TarFileDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/TarFileDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/TarFileDataFormatConfiguration.java&#010;index 6d96c3b..ab7836b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/TarFileDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-tarfile-starter/src/main/java/org/apache/camel/dataformat/tarfile/springboot/TarFileDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.tarfile.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.tarfile"")&#010; public class TarFileDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/TelegramComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/TelegramComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/TelegramComponentAutoConfiguration.java&#010;index ef588b197..0dfd831 100644&#010;--- a/platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/TelegramComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/TelegramComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.telegram.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.telegram.TelegramComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(TelegramComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class TelegramComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/TelegramComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/TelegramComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/TelegramComponentConfiguration.java&#010;index b4b53fd..b27d2c9 100644&#010;--- a/platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/TelegramComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-telegram-starter/src/main/java/org/apache/camel/component/telegram/springboot/TelegramComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.telegram.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.telegram"")&#010; public class TelegramComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-tika-starter/src/main/java/org/apache/camel/component/tika/springboot/TikaComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-tika-starter/src/main/java/org/apache/camel/component/tika/springboot/TikaComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-tika-starter/src/main/java/org/apache/camel/component/tika/springboot/TikaComponentAutoConfiguration.java&#010;index 72c4d56..c6ab08c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-tika-starter/src/main/java/org/apache/camel/component/tika/springboot/TikaComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-tika-starter/src/main/java/org/apache/camel/component/tika/springboot/TikaComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.tika.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.tika.TikaComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(TikaComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class TikaComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/TwitterComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/TwitterComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/TwitterComponentAutoConfiguration.java&#010;index b31610b..985ec37 100644&#010;--- a/platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/TwitterComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/TwitterComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.twitter.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.twitter.TwitterComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(TwitterComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class TwitterComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/TwitterComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/TwitterComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/TwitterComponentConfiguration.java&#010;index 21cd925..624f274 100644&#010;--- a/platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/TwitterComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-twitter-starter/src/main/java/org/apache/camel/component/twitter/springboot/TwitterComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.twitter.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.twitter"")&#010; public class TwitterComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/UndertowComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/UndertowComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/UndertowComponentAutoConfiguration.java&#010;index 8676805..554bd17 100644&#010;--- a/platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/UndertowComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/UndertowComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.undertow.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.undertow.UndertowComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(UndertowComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class UndertowComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/UndertowComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/UndertowComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/UndertowComponentConfiguration.java&#010;index ba44c7f..0548f3f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/UndertowComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/UndertowComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.undertow.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.undertow.UndertowHttpBinding;&#010; import org.apache.camel.util.jsse.SSLContextParameters;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -27,6 +28,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.undertow"")&#010; public class UndertowComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityCsvDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityCsvDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityCsvDataFormatAutoConfiguration.java&#010;index 9430915..fc798a6 100644&#010;--- a/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityCsvDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityCsvDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.univocity.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(UniVocityCsvDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class UniVocityCsvDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityCsvDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityCsvDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityCsvDataFormatConfiguration.java&#010;index 6b4bb84..7c826b0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityCsvDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityCsvDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.univocity.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.univocity-csv"")&#010; public class UniVocityCsvDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityFixedWidthDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityFixedWidthDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityFixedWidthDataFormatAutoConfiguration.java&#010;index b7e50b3..44313ec 100644&#010;--- a/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityFixedWidthDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityFixedWidthDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.univocity.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(UniVocityFixedWidthDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class UniVocityFixedWidthDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityFixedWidthDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityFixedWidthDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityFixedWidthDataFormatConfiguration.java&#010;index 6fada79..4ac1cf8 100644&#010;--- a/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityFixedWidthDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityFixedWidthDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.univocity.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.univocity-fixed"")&#010; public class UniVocityFixedWidthDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityTsvDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityTsvDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityTsvDataFormatAutoConfiguration.java&#010;index aaaff6c..d4e5513 100644&#010;--- a/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityTsvDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityTsvDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.univocity.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(UniVocityTsvDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class UniVocityTsvDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityTsvDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityTsvDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityTsvDataFormatConfiguration.java&#010;index 110369f..a04fa0c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityTsvDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-univocity-parsers-starter/src/main/java/org/apache/camel/dataformat/univocity/springboot/UniVocityTsvDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.univocity.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.univocity-tsv"")&#010; public class UniVocityTsvDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/VelocityComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/VelocityComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/VelocityComponentAutoConfiguration.java&#010;index 77c26bb..34f7d3c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/VelocityComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/VelocityComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.velocity.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.velocity.VelocityComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(VelocityComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class VelocityComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/VelocityComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/VelocityComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/VelocityComponentConfiguration.java&#010;index 365d4af..ab13c27 100644&#010;--- a/platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/VelocityComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-velocity-starter/src/main/java/org/apache/camel/component/velocity/springboot/VelocityComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.velocity.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.velocity.app.VelocityEngine;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.velocity"")&#010; public class VelocityComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/VertxComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/VertxComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/VertxComponentAutoConfiguration.java&#010;index 5677d99..d5c6724 100644&#010;--- a/platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/VertxComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/VertxComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.vertx.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.vertx.VertxComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(VertxComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class VertxComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/VertxComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/VertxComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/VertxComponentConfiguration.java&#010;index 0a44bdf..12d6417 100644&#010;--- a/platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/VertxComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-vertx-starter/src/main/java/org/apache/camel/component/vertx/springboot/VertxComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.vertx.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import io.vertx.core.Vertx;&#010; import io.vertx.core.VertxOptions;&#010; import io.vertx.core.spi.VertxFactory;&#010;@@ -28,6 +29,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.vertx"")&#010; public class VertxComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-weather-starter/src/main/java/org/apache/camel/component/weather/springboot/WeatherComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-weather-starter/src/main/java/org/apache/camel/component/weather/springboot/WeatherComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-weather-starter/src/main/java/org/apache/camel/component/weather/springboot/WeatherComponentAutoConfiguration.java&#010;index be36aaa..6e09f0d 100644&#010;--- a/platforms/spring-boot/components-starter/camel-weather-starter/src/main/java/org/apache/camel/component/weather/springboot/WeatherComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-weather-starter/src/main/java/org/apache/camel/component/weather/springboot/WeatherComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.weather.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.weather.WeatherComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(WeatherComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class WeatherComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/WebsocketComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/WebsocketComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/WebsocketComponentAutoConfiguration.java&#010;index 9e2ad4b..864d4f3 100644&#010;--- a/platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/WebsocketComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/WebsocketComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.websocket.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.websocket.WebsocketComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(WebsocketComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class WebsocketComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/WebsocketComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/WebsocketComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/WebsocketComponentConfiguration.java&#010;index ec61ac0..27331a6 100644&#010;--- a/platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/WebsocketComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-websocket-starter/src/main/java/org/apache/camel/component/websocket/springboot/WebsocketComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.websocket.springboot;&#010; &#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.websocket.WebSocketFactory;&#010; import org.apache.camel.util.jsse.SSLContextParameters;&#010; import org.eclipse.jetty.util.thread.ThreadPool;&#010;@@ -29,6 +30,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.websocket"")&#010; public class WebsocketComponentConfiguration {&#010; &#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cc04c2513dd764094bfebc8ac9fcb9cb7%40git.apache.org%3E,2017-04-19 08:35:48,commits,387.0,  [03/13] camel git commit: CAMEL-11165 Add @Generated annotation to code g...
234,234,190.0,388.0,zregv...@apache.org,"http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentAutoConfiguration.java&#010;index 52f4ef1..56064f2 100644&#010;--- a/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.rest.swagger.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.rest.swagger.RestSwaggerComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(RestSwaggerComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class RestSwaggerComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentConfiguration.java&#010;index 1d59966..cf01faa 100644&#010;--- a/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.rest.swagger.springboot;&#010; &#010; import java.net.URI;&#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.rest-swagger"")&#010; public class RestSwaggerComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/RestletComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/RestletComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/RestletComponentAutoConfiguration.java&#010;index de4f785..254cb73 100644&#010;--- a/platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/RestletComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/RestletComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.restlet.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.restlet.RestletComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(RestletComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class RestletComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/RestletComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/RestletComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/RestletComponentConfiguration.java&#010;index 38d23c6..1d485e8 100644&#010;--- a/platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/RestletComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-restlet-starter/src/main/java/org/apache/camel/component/restlet/springboot/RestletComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.restlet.springboot;&#010; &#010; import java.util.List;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.spi.HeaderFilterStrategy;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.restlet"")&#010; public class RestletComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-rmi-starter/src/main/java/org/apache/camel/component/rmi/springboot/RmiComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-rmi-starter/src/main/java/org/apache/camel/component/rmi/springboot/RmiComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-rmi-starter/src/main/java/org/apache/camel/component/rmi/springboot/RmiComponentAutoConfiguration.java&#010;index b7c0ee3..275a09e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-rmi-starter/src/main/java/org/apache/camel/component/rmi/springboot/RmiComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-rmi-starter/src/main/java/org/apache/camel/component/rmi/springboot/RmiComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.rmi.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.rmi.RmiComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(RmiComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class RmiComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-routebox-starter/src/main/java/org/apache/camel/component/routebox/springboot/RouteboxComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-routebox-starter/src/main/java/org/apache/camel/component/routebox/springboot/RouteboxComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-routebox-starter/src/main/java/org/apache/camel/component/routebox/springboot/RouteboxComponentAutoConfiguration.java&#010;index a5e8023..87984cd 100644&#010;--- a/platforms/spring-boot/components-starter/camel-routebox-starter/src/main/java/org/apache/camel/component/routebox/springboot/RouteboxComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-routebox-starter/src/main/java/org/apache/camel/component/routebox/springboot/RouteboxComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.routebox.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.routebox.RouteboxComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(RouteboxComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class RouteboxComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/component/rss/springboot/RssComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/component/rss/springboot/RssComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/component/rss/springboot/RssComponentAutoConfiguration.java&#010;index 6d0a272..1f27ae1 100644&#010;--- a/platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/component/rss/springboot/RssComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/component/rss/springboot/RssComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.rss.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.rss.RssComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(RssComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class RssComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/RssDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/RssDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/RssDataFormatAutoConfiguration.java&#010;index 708a3bd..32d10e0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/RssDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/RssDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.rss.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(RssDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class RssDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/RssDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/RssDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/RssDataFormatConfiguration.java&#010;index 405e8af..ae0813f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/RssDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-rss-starter/src/main/java/org/apache/camel/dataformat/rss/springboot/RssDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.rss.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.rss"")&#010; public class RssDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/SalesforceComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/SalesforceComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/SalesforceComponentAutoConfiguration.java&#010;index b38fd21..153c330 100644&#010;--- a/platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/SalesforceComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/SalesforceComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.salesforce.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.salesforce.SalesforceComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SalesforceComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class SalesforceComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/SalesforceComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/SalesforceComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/SalesforceComponentConfiguration.java&#010;index e36d5a6..3cde2be 100644&#010;--- a/platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/SalesforceComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-salesforce-starter/src/main/java/org/apache/camel/component/salesforce/springboot/SalesforceComponentConfiguration.java&#010;@@ -19,6 +19,7 @@ package org.apache.camel.component.salesforce.springboot;&#010; import java.util.List;&#010; import java.util.Map;&#010; import java.util.Set;&#010;+import javax.annotation.Generated;&#010; import com.fasterxml.jackson.databind.ObjectMapper;&#010; import org.apache.camel.component.salesforce.AuthenticationType;&#010; import org.apache.camel.component.salesforce.NotFoundBehaviour;&#010;@@ -41,6 +42,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.salesforce"")&#010; public class SalesforceComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-sap-netweaver-starter/src/main/java/org/apache/camel/component/sap/netweaver/springboot/NetWeaverComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-sap-netweaver-starter/src/main/java/org/apache/camel/component/sap/netweaver/springboot/NetWeaverComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-sap-netweaver-starter/src/main/java/org/apache/camel/component/sap/netweaver/springboot/NetWeaverComponentAutoConfiguration.java&#010;index f58e734..88da568 100644&#010;--- a/platforms/spring-boot/components-starter/camel-sap-netweaver-starter/src/main/java/org/apache/camel/component/sap/netweaver/springboot/NetWeaverComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-sap-netweaver-starter/src/main/java/org/apache/camel/component/sap/netweaver/springboot/NetWeaverComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.sap.netweaver.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.sap.netweaver.NetWeaverComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(NetWeaverComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class NetWeaverComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/XQueryComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/XQueryComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/XQueryComponentAutoConfiguration.java&#010;index f81c5bd..2542c9b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/XQueryComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/XQueryComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.xquery.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.xquery.XQueryComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(XQueryComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class XQueryComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/XQueryComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/XQueryComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/XQueryComponentConfiguration.java&#010;index 86adaef..69b7644 100644&#010;--- a/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/XQueryComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/component/xquery/springboot/XQueryComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.xquery.springboot;&#010; &#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import net.sf.saxon.Configuration;&#010; import net.sf.saxon.lib.ModuleURIResolver;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -27,6 +28,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.xquery"")&#010; public class XQueryComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/XQueryLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/XQueryLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/XQueryLanguageAutoConfiguration.java&#010;index b53f4c8..c970cf3 100644&#010;--- a/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/XQueryLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/XQueryLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.xquery.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.xquery.XQueryLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(XQueryLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class XQueryLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/XQueryLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/XQueryLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/XQueryLanguageConfiguration.java&#010;index d45e4c4..d479273 100644&#010;--- a/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/XQueryLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-saxon-starter/src/main/java/org/apache/camel/language/xquery/springboot/XQueryLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.xquery.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.xquery"")&#010; public class XQueryLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-schematron-starter/src/main/java/org/apache/camel/component/schematron/springboot/SchematronComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-schematron-starter/src/main/java/org/apache/camel/component/schematron/springboot/SchematronComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-schematron-starter/src/main/java/org/apache/camel/component/schematron/springboot/SchematronComponentAutoConfiguration.java&#010;index 30d3f0f..6b5e42f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-schematron-starter/src/main/java/org/apache/camel/component/schematron/springboot/SchematronComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-schematron-starter/src/main/java/org/apache/camel/component/schematron/springboot/SchematronComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.schematron.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.schematron.SchematronComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SchematronComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class SchematronComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/JavaScriptLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/JavaScriptLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/JavaScriptLanguageAutoConfiguration.java&#010;index fff186c..7a2e636 100644&#010;--- a/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/JavaScriptLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/JavaScriptLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.builder.script.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.builder.script.JavaScriptLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JavaScriptLanguageAutoConfiguration.Condition.class)&#010;@@ -71,6 +73,7 @@ public class JavaScriptLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/JavaScriptLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/JavaScriptLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/JavaScriptLanguageConfiguration.java&#010;index d7be77d..bbd9a57 100644&#010;--- a/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/JavaScriptLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/JavaScriptLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.builder.script.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.javascript"")&#010; public class JavaScriptLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PhpLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PhpLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PhpLanguageAutoConfiguration.java&#010;index 3c8cd52..23202cd 100644&#010;--- a/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PhpLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PhpLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.builder.script.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.builder.script.PhpLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(PhpLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class PhpLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PhpLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PhpLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PhpLanguageConfiguration.java&#010;index 0bdee8e..4d6641b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PhpLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PhpLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.builder.script.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.php"")&#010; public class PhpLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PythonLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PythonLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PythonLanguageAutoConfiguration.java&#010;index 1741771..6cac0e9 100644&#010;--- a/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PythonLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PythonLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.builder.script.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.builder.script.PythonLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(PythonLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class PythonLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PythonLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PythonLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PythonLanguageConfiguration.java&#010;index 1b0f256..214f23a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PythonLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/PythonLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.builder.script.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.python"")&#010; public class PythonLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/RubyLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/RubyLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/RubyLanguageAutoConfiguration.java&#010;index 727b5d4..c480b3b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/RubyLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/RubyLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.builder.script.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.builder.script.RubyLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(RubyLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class RubyLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/RubyLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/RubyLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/RubyLanguageConfiguration.java&#010;index 865fb78..8811497 100644&#010;--- a/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/RubyLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-script-starter/src/main/java/org/apache/camel/builder/script/springboot/RubyLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.builder.script.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.ruby"")&#010; public class RubyLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/ServiceNowComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/ServiceNowComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/ServiceNowComponentAutoConfiguration.java&#010;index 3ef4ed8..f201ffe 100644&#010;--- a/platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/ServiceNowComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/ServiceNowComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.servicenow.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.servicenow.ServiceNowComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ServiceNowComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class ServiceNowComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/ServiceNowComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/ServiceNowComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/ServiceNowComponentConfiguration.java&#010;index 4bc2a61..4b7fc5b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/ServiceNowComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-servicenow-starter/src/main/java/org/apache/camel/component/servicenow/springboot/ServiceNowComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.servicenow.springboot;&#010; &#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import com.fasterxml.jackson.databind.ObjectMapper;&#010; import org.apache.camel.component.servicenow.ServiceNowComponent;&#010; import org.apache.camel.component.servicenow.ServiceNowRelease;&#010;@@ -32,6 +33,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.servicenow"")&#010; public class ServiceNowComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/ServletComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/ServletComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/ServletComponentAutoConfiguration.java&#010;index 86cc6be..7b6ae53 100644&#010;--- a/platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/ServletComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/ServletComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.servlet.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.servlet.ServletComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ServletComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class ServletComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/ServletComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/ServletComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/ServletComponentConfiguration.java&#010;index bddd727..a54938a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/ServletComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-servlet-starter/src/main/java/org/apache/camel/component/servlet/springboot/ServletComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.servlet.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.servlet.HttpRegistry;&#010; import org.apache.camel.http.common.HttpBinding;&#010; import org.apache.camel.http.common.HttpConfiguration;&#010;@@ -29,6 +30,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.servlet"")&#010; public class ServletComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-sip-starter/src/main/java/org/apache/camel/component/sip/springboot/SipComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-sip-starter/src/main/java/org/apache/camel/component/sip/springboot/SipComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-sip-starter/src/main/java/org/apache/camel/component/sip/springboot/SipComponentAutoConfiguration.java&#010;index 48122e0..9a3d7a6 100644&#010;--- a/platforms/spring-boot/components-starter/camel-sip-starter/src/main/java/org/apache/camel/component/sip/springboot/SipComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-sip-starter/src/main/java/org/apache/camel/component/sip/springboot/SipComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.sip.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.sip.SipComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SipComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class SipComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/SjmsBatchComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/SjmsBatchComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/SjmsBatchComponentAutoConfiguration.java&#010;index 442a3e7..b7bc6fa 100644&#010;--- a/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/SjmsBatchComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/SjmsBatchComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.sjms.batch.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.sjms.batch.SjmsBatchComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SjmsBatchComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class SjmsBatchComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/SjmsBatchComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/SjmsBatchComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/SjmsBatchComponentConfiguration.java&#010;index 5b9ac23..90ad059 100644&#010;--- a/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/SjmsBatchComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/batch/springboot/SjmsBatchComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.sjms.batch.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import javax.jms.ConnectionFactory;&#010; import org.apache.camel.spi.HeaderFilterStrategy;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -27,6 +28,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.sjms-batch"")&#010; public class SjmsBatchComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/SjmsComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/SjmsComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/SjmsComponentAutoConfiguration.java&#010;index a931c21..30022fc 100644&#010;--- a/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/SjmsComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/SjmsComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.sjms.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.sjms.SjmsComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SjmsComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class SjmsComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/SjmsComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/SjmsComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/SjmsComponentConfiguration.java&#010;index f099d09..6e8bdce 100644&#010;--- a/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/SjmsComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-sjms-starter/src/main/java/org/apache/camel/component/sjms/springboot/SjmsComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.sjms.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import javax.jms.ConnectionFactory;&#010; import org.apache.camel.component.sjms.TransactionCommitStrategy;&#010; import org.apache.camel.component.sjms.jms.ConnectionResource;&#010;@@ -32,6 +33,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.sjms"")&#010; public class SjmsComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/Sjms2ComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/Sjms2ComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/Sjms2ComponentAutoConfiguration.java&#010;index 4be32a4..fa2a166 100644&#010;--- a/platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/Sjms2ComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/Sjms2ComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.sjms2.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.sjms2.Sjms2Component;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(Sjms2ComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class Sjms2ComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/Sjms2ComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/Sjms2ComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/Sjms2ComponentConfiguration.java&#010;index a4a503b..e5f8ad5 100644&#010;--- a/platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/Sjms2ComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-sjms2-starter/src/main/java/org/apache/camel/component/sjms2/springboot/Sjms2ComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.sjms2.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import javax.jms.ConnectionFactory;&#010; import org.apache.camel.component.sjms.TransactionCommitStrategy;&#010; import org.apache.camel.component.sjms.jms.ConnectionResource;&#010;@@ -33,6 +34,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.sjms2"")&#010; public class Sjms2ComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/SlackComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/SlackComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/SlackComponentAutoConfiguration.java&#010;index 296d80e..3a09bd4 100644&#010;--- a/platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/SlackComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/SlackComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.slack.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.slack.SlackComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SlackComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class SlackComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/SlackComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/SlackComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/SlackComponentConfiguration.java&#010;index aa92aa0..8e5ce18 100644&#010;--- a/platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/SlackComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-slack-starter/src/main/java/org/apache/camel/component/slack/springboot/SlackComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.slack.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.slack"")&#010; public class SlackComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/SmppComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/SmppComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/SmppComponentAutoConfiguration.java&#010;index 8f62937..3153fc9 100644&#010;--- a/platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/SmppComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/SmppComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.smpp.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.smpp.SmppComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SmppComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class SmppComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/SmppComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/SmppComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/SmppComponentConfiguration.java&#010;index a0f489f..285e097 100644&#010;--- a/platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/SmppComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-smpp-starter/src/main/java/org/apache/camel/component/smpp/springboot/SmppComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.smpp.springboot;&#010; &#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.smpp.SmppComponent;&#010; import org.apache.camel.component.smpp.SmppSplittingPolicy;&#010; import org.jsmpp.session.SessionStateListener;&#010;@@ -27,6 +28,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.smpp"")&#010; public class SmppComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/SnakeYAMLDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/SnakeYAMLDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/SnakeYAMLDataFormatAutoConfiguration.java&#010;index c5595d9..8e990fc 100644&#010;--- a/platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/SnakeYAMLDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/SnakeYAMLDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.snakeyaml.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SnakeYAMLDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class SnakeYAMLDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/SnakeYAMLDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/SnakeYAMLDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/SnakeYAMLDataFormatConfiguration.java&#010;index 368e1e4..e0e1d90 100644&#010;--- a/platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/SnakeYAMLDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-snakeyaml-starter/src/main/java/org/apache/camel/component/snakeyaml/springboot/SnakeYAMLDataFormatConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.snakeyaml.springboot;&#010; &#010; import java.util.List;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.snakeyaml.SnakeYAMLDataFormat;&#010; import org.apache.camel.model.dataformat.YAMLLibrary;&#010; import org.apache.camel.model.dataformat.YAMLTypeFilterDefinition;&#010;@@ -27,6 +28,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.yaml-snakeyaml"")&#010; public class SnakeYAMLDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-snmp-starter/src/main/java/org/apache/camel/component/snmp/springboot/SnmpComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-snmp-starter/src/main/java/org/apache/camel/component/snmp/springboot/SnmpComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-snmp-starter/src/main/java/org/apache/camel/component/snmp/springboot/SnmpComponentAutoConfiguration.java&#010;index 14839fa..82cd4cb 100644&#010;--- a/platforms/spring-boot/components-starter/camel-snmp-starter/src/main/java/org/apache/camel/component/snmp/springboot/SnmpComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-snmp-starter/src/main/java/org/apache/camel/component/snmp/springboot/SnmpComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.snmp.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.snmp.SnmpComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SnmpComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class SnmpComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/SoapJaxbDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/SoapJaxbDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/SoapJaxbDataFormatAutoConfiguration.java&#010;index 85e6b5d..6b575e0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/SoapJaxbDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/SoapJaxbDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.soap.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SoapJaxbDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class SoapJaxbDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/SoapJaxbDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/SoapJaxbDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/SoapJaxbDataFormatConfiguration.java&#010;index 311d951..a1769ac 100644&#010;--- a/platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/SoapJaxbDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-soap-starter/src/main/java/org/apache/camel/dataformat/soap/springboot/SoapJaxbDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.soap.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.soapjaxb"")&#010; public class SoapJaxbDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-solr-starter/src/main/java/org/apache/camel/component/solr/springboot/SolrComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-solr-starter/src/main/java/org/apache/camel/component/solr/springboot/SolrComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-solr-starter/src/main/java/org/apache/camel/component/solr/springboot/SolrComponentAutoConfiguration.java&#010;index 341a6ba..1afb281 100644&#010;--- a/platforms/spring-boot/components-starter/camel-solr-starter/src/main/java/org/apache/camel/component/solr/springboot/SolrComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-solr-starter/src/main/java/org/apache/camel/component/solr/springboot/SolrComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.solr.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.solr.SolrComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SolrComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class SolrComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/SparkComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/SparkComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/SparkComponentAutoConfiguration.java&#010;index 38a2264..bcfbf96 100644&#010;--- a/platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/SparkComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/SparkComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.spark.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.spark.SparkComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SparkComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class SparkComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/SparkComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/SparkComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/SparkComponentConfiguration.java&#010;index 2d52a1f..98a55a4 100644&#010;--- a/platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/SparkComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-spark-starter/src/main/java/org/apache/camel/component/spark/springboot/SparkComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.spark.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.spark.RddCallback;&#010; import org.apache.spark.api.java.JavaRDDLike;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -27,6 +28,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.spark"")&#010; public class SparkComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/SplunkComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/SplunkComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/SplunkComponentAutoConfiguration.java&#010;index f8a1ee2..d80d4d1 100644&#010;--- a/platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/SplunkComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-splunk-starter/src/main/java/org/apache/camel/component/splunk/springboot/SplunkComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.splunk.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.splunk.SplunkComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SplunkComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class SplunkComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C464e4f3daf11494cb2bdb1dba9d6af41%40git.apache.org%3E,2017-04-19 08:35:49,commits,388.0,  [04/13] camel git commit: CAMEL-11165 Add @Generated annotation to code g...
235,235,191.0,389.0,zregv...@apache.org,"http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/component/mvel/springboot/MvelComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/component/mvel/springboot/MvelComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/component/mvel/springboot/MvelComponentAutoConfiguration.java&#010;index 9761226..bfaef25 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/component/mvel/springboot/MvelComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/component/mvel/springboot/MvelComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.mvel.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.mvel.MvelComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(MvelComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class MvelComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/MvelLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/MvelLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/MvelLanguageAutoConfiguration.java&#010;index e864e35..0072cfe 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/MvelLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/MvelLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.mvel.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.mvel.MvelLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(MvelLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class MvelLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/MvelLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/MvelLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/MvelLanguageConfiguration.java&#010;index cad6bd9..9eeb3e7 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/MvelLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mvel-starter/src/main/java/org/apache/camel/language/mvel/springboot/MvelLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.mvel.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.mvel"")&#010; public class MvelLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/MyBatisComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/MyBatisComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/MyBatisComponentAutoConfiguration.java&#010;index 5995490..b0e516a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/MyBatisComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/MyBatisComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.mybatis.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.mybatis.MyBatisComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(MyBatisComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class MyBatisComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/MyBatisComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/MyBatisComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/MyBatisComponentConfiguration.java&#010;index 3d67f47..d3152c4 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/MyBatisComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mybatis-starter/src/main/java/org/apache/camel/component/mybatis/springboot/MyBatisComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.mybatis.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.ibatis.session.SqlSessionFactory;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.mybatis"")&#010; public class MyBatisComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/NagiosComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/NagiosComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/NagiosComponentAutoConfiguration.java&#010;index 7d6984d..ff72f2b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/NagiosComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/NagiosComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.nagios.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.nagios.NagiosComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(NagiosComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class NagiosComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/NagiosComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/NagiosComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/NagiosComponentConfiguration.java&#010;index a621c46..ddcf6cb 100644&#010;--- a/platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/NagiosComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-nagios-starter/src/main/java/org/apache/camel/component/nagios/springboot/NagiosComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.nagios.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import com.googlecode.jsendnsca.core.NagiosSettings;&#010; import org.apache.camel.component.nagios.NagiosEncryptionMethod;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.nagios"")&#010; public class NagiosComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/NatsComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/NatsComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/NatsComponentAutoConfiguration.java&#010;index 52780ce..5f0a19f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/NatsComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/NatsComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.nats.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.nats.NatsComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(NatsComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class NatsComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/NatsComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/NatsComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/NatsComponentConfiguration.java&#010;index 92cbe0c..fb872db 100644&#010;--- a/platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/NatsComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-nats-starter/src/main/java/org/apache/camel/component/nats/springboot/NatsComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.nats.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.nats"")&#010; public class NatsComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/NettyHttpComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/NettyHttpComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/NettyHttpComponentAutoConfiguration.java&#010;index e1238d2..1ed1da4 100644&#010;--- a/platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/NettyHttpComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/NettyHttpComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.netty.http.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.netty.http.NettyHttpComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(NettyHttpComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class NettyHttpComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/NettyHttpComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/NettyHttpComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/NettyHttpComponentConfiguration.java&#010;index fc4064b..e105a34 100644&#010;--- a/platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/NettyHttpComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-netty-http-starter/src/main/java/org/apache/camel/component/netty/http/springboot/NettyHttpComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.netty.http.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.LoggingLevel;&#010; import org.apache.camel.component.netty.http.NettyHttpBinding;&#010; import org.apache.camel.component.netty.http.SecurityAuthenticator;&#010;@@ -29,6 +30,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.netty-http"")&#010; public class NettyHttpComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/NettyComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/NettyComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/NettyComponentAutoConfiguration.java&#010;index 0d54763..c80984a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/NettyComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/NettyComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.netty.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.netty.NettyComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(NettyComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class NettyComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/NettyComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/NettyComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/NettyComponentConfiguration.java&#010;index 0468394..9509391 100644&#010;--- a/platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/NettyComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-netty-starter/src/main/java/org/apache/camel/component/netty/springboot/NettyComponentConfiguration.java&#010;@@ -19,6 +19,7 @@ package org.apache.camel.component.netty.springboot;&#010; import java.io.File;&#010; import java.util.List;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.LoggingLevel;&#010; import org.apache.camel.component.netty.ClientPipelineFactory;&#010; import org.apache.camel.component.netty.NettyComponent;&#010;@@ -40,6 +41,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.netty"")&#010; public class NettyComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/NettyHttpComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/NettyHttpComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/NettyHttpComponentAutoConfiguration.java&#010;index 3898d9a..6478cfc 100644&#010;--- a/platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/NettyHttpComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/NettyHttpComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.netty4.http.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.netty4.http.NettyHttpComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(NettyHttpComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class NettyHttpComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/NettyHttpComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/NettyHttpComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/NettyHttpComponentConfiguration.java&#010;index 3c88189..7ac1105 100644&#010;--- a/platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/NettyHttpComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-netty4-http-starter/src/main/java/org/apache/camel/component/netty4/http/springboot/NettyHttpComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.netty4.http.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import io.netty.util.concurrent.EventExecutorGroup;&#010; import org.apache.camel.LoggingLevel;&#010; import org.apache.camel.component.netty4.http.NettyHttpBinding;&#010;@@ -30,6 +31,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.netty4-http"")&#010; public class NettyHttpComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/NettyComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/NettyComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/NettyComponentAutoConfiguration.java&#010;index 8696765..afb784c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/NettyComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/NettyComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.netty4.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.netty4.NettyComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(NettyComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class NettyComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/NettyComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/NettyComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/NettyComponentConfiguration.java&#010;index 4d8621f..659ea39 100644&#010;--- a/platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/NettyComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-netty4-starter/src/main/java/org/apache/camel/component/netty4/springboot/NettyComponentConfiguration.java&#010;@@ -19,6 +19,7 @@ package org.apache.camel.component.netty4.springboot;&#010; import java.io.File;&#010; import java.util.List;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import io.netty.channel.ChannelHandler;&#010; import io.netty.channel.EventLoopGroup;&#010; import io.netty.channel.group.ChannelGroup;&#010;@@ -40,6 +41,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.netty4"")&#010; public class NettyComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/OgnlLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/OgnlLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/OgnlLanguageAutoConfiguration.java&#010;index eb87fa8..4d6bcc0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/OgnlLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/OgnlLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.ognl.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.ognl.OgnlLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(OgnlLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class OgnlLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/OgnlLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/OgnlLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/OgnlLanguageConfiguration.java&#010;index c0db250..77c4b6b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/OgnlLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ognl-starter/src/main/java/org/apache/camel/language/ognl/springboot/OgnlLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.ognl.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.ognl"")&#010; public class OgnlLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/Olingo2ComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/Olingo2ComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/Olingo2ComponentAutoConfiguration.java&#010;index 33a4304..bf91860 100644&#010;--- a/platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/Olingo2ComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/Olingo2ComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.olingo2.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.olingo2.Olingo2Component;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(Olingo2ComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class Olingo2ComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/Olingo2ComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/Olingo2ComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/Olingo2ComponentConfiguration.java&#010;index 1ea121d..a808800 100644&#010;--- a/platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/Olingo2ComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-olingo2-starter/src/main/java/org/apache/camel/component/olingo2/springboot/Olingo2ComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.olingo2.springboot;&#010; &#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.olingo2.internal.Olingo2ApiName;&#010; import org.apache.camel.util.jsse.SSLContextParameters;&#010; import org.apache.http.HttpHost;&#010;@@ -30,6 +31,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.olingo2"")&#010; public class Olingo2ComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/Olingo4ComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/Olingo4ComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/Olingo4ComponentAutoConfiguration.java&#010;index f3e685d..6cdf4b1 100644&#010;--- a/platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/Olingo4ComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/Olingo4ComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.olingo4.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.olingo4.Olingo4Component;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(Olingo4ComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class Olingo4ComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/Olingo4ComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/Olingo4ComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/Olingo4ComponentConfiguration.java&#010;index 664c51a..105cd2d 100644&#010;--- a/platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/Olingo4ComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-olingo4-starter/src/main/java/org/apache/camel/component/olingo4/springboot/Olingo4ComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.olingo4.springboot;&#010; &#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.olingo4.internal.Olingo4ApiName;&#010; import org.apache.camel.util.jsse.SSLContextParameters;&#010; import org.apache.http.HttpHost;&#010;@@ -30,6 +31,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.olingo4"")&#010; public class Olingo4ComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/OpenShiftComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/OpenShiftComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/OpenShiftComponentAutoConfiguration.java&#010;index f86b79b..d08dda4 100644&#010;--- a/platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/OpenShiftComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/OpenShiftComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.openshift.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.openshift.OpenShiftComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(OpenShiftComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class OpenShiftComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/OpenShiftComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/OpenShiftComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/OpenShiftComponentConfiguration.java&#010;index b4ccb37..d0d7a95 100644&#010;--- a/platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/OpenShiftComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-openshift-starter/src/main/java/org/apache/camel/component/openshift/springboot/OpenShiftComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.openshift.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.openshift"")&#010; public class OpenShiftComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/cinder/springboot/CinderComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/cinder/springboot/CinderComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/cinder/springboot/CinderComponentAutoConfiguration.java&#010;index 4defed1..4890d66 100644&#010;--- a/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/cinder/springboot/CinderComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/cinder/springboot/CinderComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.openstack.cinder.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.openstack.cinder.CinderComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(CinderComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class CinderComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/glance/springboot/GlanceComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/glance/springboot/GlanceComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/glance/springboot/GlanceComponentAutoConfiguration.java&#010;index a404e64..5ea5b1b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/glance/springboot/GlanceComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/glance/springboot/GlanceComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.openstack.glance.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.openstack.glance.GlanceComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(GlanceComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class GlanceComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/keystone/springboot/KeystoneComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/keystone/springboot/KeystoneComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/keystone/springboot/KeystoneComponentAutoConfiguration.java&#010;index ac5053e..7816c7f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/keystone/springboot/KeystoneComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/keystone/springboot/KeystoneComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.openstack.keystone.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.openstack.keystone.KeystoneComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(KeystoneComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class KeystoneComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/neutron/springboot/NeutronComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/neutron/springboot/NeutronComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/neutron/springboot/NeutronComponentAutoConfiguration.java&#010;index 8d9d54c..69ca7d2 100644&#010;--- a/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/neutron/springboot/NeutronComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/neutron/springboot/NeutronComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.openstack.neutron.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.openstack.neutron.NeutronComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(NeutronComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class NeutronComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/nova/springboot/NovaComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/nova/springboot/NovaComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/nova/springboot/NovaComponentAutoConfiguration.java&#010;index 59f6f9a..69a2033 100644&#010;--- a/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/nova/springboot/NovaComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/nova/springboot/NovaComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.openstack.nova.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.openstack.nova.NovaComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(NovaComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class NovaComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/swift/springboot/SwiftComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/swift/springboot/SwiftComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/swift/springboot/SwiftComponentAutoConfiguration.java&#010;index 2a21ed9..49220ba 100644&#010;--- a/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/swift/springboot/SwiftComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-openstack-starter/src/main/java/org/apache/camel/component/openstack/swift/springboot/SwiftComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.openstack.swift.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.openstack.swift.SwiftComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SwiftComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class SwiftComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-optaplanner-starter/src/main/java/org/apache/camel/component/optaplanner/springboot/OptaPlannerComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-optaplanner-starter/src/main/java/org/apache/camel/component/optaplanner/springboot/OptaPlannerComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-optaplanner-starter/src/main/java/org/apache/camel/component/optaplanner/springboot/OptaPlannerComponentAutoConfiguration.java&#010;index 62047ab..06ecb5f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-optaplanner-starter/src/main/java/org/apache/camel/component/optaplanner/springboot/OptaPlannerComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-optaplanner-starter/src/main/java/org/apache/camel/component/optaplanner/springboot/OptaPlannerComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.optaplanner.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.optaplanner.OptaPlannerComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(OptaPlannerComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class OptaPlannerComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/PahoComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/PahoComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/PahoComponentAutoConfiguration.java&#010;index e156732..13c6342 100644&#010;--- a/platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/PahoComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/PahoComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.paho.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.paho.PahoComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(PahoComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class PahoComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/PahoComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/PahoComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/PahoComponentConfiguration.java&#010;index fcc757d..cf2b40b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/PahoComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-paho-starter/src/main/java/org/apache/camel/component/paho/springboot/PahoComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.paho.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.eclipse.paho.client.mqttv3.MqttConnectOptions;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.paho"")&#010; public class PahoComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-pdf-starter/src/main/java/org/apache/camel/component/pdf/springboot/PdfComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-pdf-starter/src/main/java/org/apache/camel/component/pdf/springboot/PdfComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-pdf-starter/src/main/java/org/apache/camel/component/pdf/springboot/PdfComponentAutoConfiguration.java&#010;index 8076b67..c9098e9 100644&#010;--- a/platforms/spring-boot/components-starter/camel-pdf-starter/src/main/java/org/apache/camel/component/pdf/springboot/PdfComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-pdf-starter/src/main/java/org/apache/camel/component/pdf/springboot/PdfComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.pdf.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.pdf.PdfComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(PdfComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class PdfComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-pgevent-starter/src/main/java/org/apache/camel/component/pgevent/springboot/PgEventComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-pgevent-starter/src/main/java/org/apache/camel/component/pgevent/springboot/PgEventComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-pgevent-starter/src/main/java/org/apache/camel/component/pgevent/springboot/PgEventComponentAutoConfiguration.java&#010;index 7314c24..04998ad 100644&#010;--- a/platforms/spring-boot/components-starter/camel-pgevent-starter/src/main/java/org/apache/camel/component/pgevent/springboot/PgEventComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-pgevent-starter/src/main/java/org/apache/camel/component/pgevent/springboot/PgEventComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.pgevent.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.pgevent.PgEventComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(PgEventComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class PgEventComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-printer-starter/src/main/java/org/apache/camel/component/printer/springboot/PrinterComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-printer-starter/src/main/java/org/apache/camel/component/printer/springboot/PrinterComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-printer-starter/src/main/java/org/apache/camel/component/printer/springboot/PrinterComponentAutoConfiguration.java&#010;index a9db24a..281f1d1 100644&#010;--- a/platforms/spring-boot/components-starter/camel-printer-starter/src/main/java/org/apache/camel/component/printer/springboot/PrinterComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-printer-starter/src/main/java/org/apache/camel/component/printer/springboot/PrinterComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.printer.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.printer.PrinterComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(PrinterComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class PrinterComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/ProtobufDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/ProtobufDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/ProtobufDataFormatAutoConfiguration.java&#010;index 417d610..20ae50e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/ProtobufDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/ProtobufDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.protobuf.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ProtobufDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class ProtobufDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/ProtobufDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/ProtobufDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/ProtobufDataFormatConfiguration.java&#010;index 85a6319..74ed36a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/ProtobufDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-protobuf-starter/src/main/java/org/apache/camel/dataformat/protobuf/springboot/ProtobufDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.protobuf.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.dataformat.protobuf.ProtobufDataFormat;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.protobuf"")&#010; public class ProtobufDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/PubNubComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/PubNubComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/PubNubComponentAutoConfiguration.java&#010;index 897f9d4..671c1ce 100644&#010;--- a/platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/PubNubComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/PubNubComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.pubnub.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.pubnub.PubNubComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(PubNubComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class PubNubComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/QuartzComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/QuartzComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/QuartzComponentAutoConfiguration.java&#010;index 0714400..058162a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/QuartzComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/QuartzComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.quartz2.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.quartz2.QuartzComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(QuartzComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class QuartzComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/QuartzComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/QuartzComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/QuartzComponentConfiguration.java&#010;index 55ae924..b064f26 100644&#010;--- a/platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/QuartzComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-quartz2-starter/src/main/java/org/apache/camel/component/quartz2/springboot/QuartzComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.quartz2.springboot;&#010; &#010; import java.util.Properties;&#010;+import javax.annotation.Generated;&#010; import org.quartz.Scheduler;&#010; import org.quartz.SchedulerFactory;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -27,6 +28,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.quartz2"")&#010; public class QuartzComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/QuickfixjComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/QuickfixjComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/QuickfixjComponentAutoConfiguration.java&#010;index 5934230..1d6b54f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/QuickfixjComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/QuickfixjComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.quickfixj.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.quickfixj.QuickfixjComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(QuickfixjComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class QuickfixjComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/QuickfixjComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/QuickfixjComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/QuickfixjComponentConfiguration.java&#010;index de88743..14aadb0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/QuickfixjComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-quickfix-starter/src/main/java/org/apache/camel/component/quickfixj/springboot/QuickfixjComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.quickfixj.springboot;&#010; &#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.quickfixj.QuickfixjConfiguration;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -30,6 +31,7 @@ import quickfix.MessageStoreFactory;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.quickfix"")&#010; public class QuickfixjComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-rabbitmq-starter/src/main/java/org/apache/camel/component/rabbitmq/springboot/RabbitMQComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-rabbitmq-starter/src/main/java/org/apache/camel/component/rabbitmq/springboot/RabbitMQComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-rabbitmq-starter/src/main/java/org/apache/camel/component/rabbitmq/springboot/RabbitMQComponentAutoConfiguration.java&#010;index fa00891..fa5e7d9 100644&#010;--- a/platforms/spring-boot/components-starter/camel-rabbitmq-starter/src/main/java/org/apache/camel/component/rabbitmq/springboot/RabbitMQComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-rabbitmq-starter/src/main/java/org/apache/camel/component/rabbitmq/springboot/RabbitMQComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.rabbitmq.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.rabbitmq.RabbitMQComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(RabbitMQComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class RabbitMQComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/ReactiveStreamsComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/ReactiveStreamsComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/ReactiveStreamsComponentAutoConfiguration.java&#010;index 10f6dad..2e26698 100644&#010;--- a/platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/ReactiveStreamsComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/ReactiveStreamsComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.reactive.streams.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.reactive.streams.ReactiveStreamsComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ReactiveStreamsComponentAutoConfiguration.Condition.class)&#010;@@ -85,6 +87,7 @@ public class ReactiveStreamsComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/ReactiveStreamsComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/ReactiveStreamsComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/ReactiveStreamsComponentConfiguration.java&#010;index 5fb6dd4..d75bcbd 100644&#010;--- a/platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/ReactiveStreamsComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-reactive-streams-starter/src/main/java/org/apache/camel/component/reactive/streams/springboot/ReactiveStreamsComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.reactive.streams.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.reactive.streams.ReactiveStreamsBackpressureStrategy;&#010; import org.apache.camel.component.reactive.streams.ReactiveStreamsComponent;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.reactive-streams"")&#010; public class ReactiveStreamsComponentConfiguration {&#010; &#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cfd0bc43441814d50a8ceed0660539f1a%40git.apache.org%3E,2017-04-19 08:35:50,commits,389.0,  [05/13] camel git commit: CAMEL-11165 Add @Generated annotation to code g...
236,236,192.0,390.0,zregv...@apache.org,"http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/JpaComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/JpaComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/JpaComponentAutoConfiguration.java&#010;index 3aa6b0e..e8c56a7 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/JpaComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/JpaComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.jpa.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.jpa.JpaComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JpaComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class JpaComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/JpaComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/JpaComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/JpaComponentConfiguration.java&#010;index ed73738..93064c1 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/JpaComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jpa-starter/src/main/java/org/apache/camel/component/jpa/springboot/JpaComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.jpa.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import javax.persistence.EntityManagerFactory;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -27,6 +28,7 @@ import org.springframework.transaction.PlatformTransactionManager;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.jpa"")&#010; public class JpaComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/ScpComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/ScpComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/ScpComponentAutoConfiguration.java&#010;index fcff156..d626d83 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/ScpComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/ScpComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.scp.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.scp.ScpComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ScpComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class ScpComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/ScpComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/ScpComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/ScpComponentConfiguration.java&#010;index 5ec146c..3423184 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/ScpComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jsch-starter/src/main/java/org/apache/camel/component/scp/springboot/ScpComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.scp.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.scp"")&#010; public class ScpComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/JsonPathLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/JsonPathLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/JsonPathLanguageAutoConfiguration.java&#010;index 86e337e..654c8c8 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/JsonPathLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/JsonPathLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.jsonpath.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.jsonpath.JsonPathLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JsonPathLanguageAutoConfiguration.Condition.class)&#010;@@ -71,6 +73,7 @@ public class JsonPathLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/JsonPathLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/JsonPathLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/JsonPathLanguageConfiguration.java&#010;index 616362d..e812a7f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/JsonPathLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jsonpath-starter/src/main/java/org/apache/camel/jsonpath/springboot/JsonPathLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.jsonpath.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.jsonpath"")&#010; public class JsonPathLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/Jt400ComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/Jt400ComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/Jt400ComponentAutoConfiguration.java&#010;index d7e1d1d..28e9128 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/Jt400ComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/Jt400ComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.jt400.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.jt400.Jt400Component;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(Jt400ComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class Jt400ComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/Jt400ComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/Jt400ComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/Jt400ComponentConfiguration.java&#010;index 1da21d4..7fa9c36 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/Jt400ComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jt400-starter/src/main/java/org/apache/camel/component/jt400/springboot/Jt400ComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.jt400.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import com.ibm.as400.access.AS400ConnectionPool;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.jt400"")&#010; public class Jt400ComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/JuelLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/JuelLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/JuelLanguageAutoConfiguration.java&#010;index b419281..0ec2827 100644&#010;--- a/platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/JuelLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/JuelLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.juel.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.juel.JuelLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JuelLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class JuelLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/JuelLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/JuelLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/JuelLanguageConfiguration.java&#010;index 08ae2da..87b9baf 100644&#010;--- a/platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/JuelLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-juel-starter/src/main/java/org/apache/camel/language/juel/springboot/JuelLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.juel.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.el"")&#010; public class JuelLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/JXPathLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/JXPathLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/JXPathLanguageAutoConfiguration.java&#010;index 928aba9..3816ffd 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/JXPathLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/JXPathLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.jxpath.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.jxpath.JXPathLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JXPathLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class JXPathLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/JXPathLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/JXPathLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/JXPathLanguageConfiguration.java&#010;index ca46049..5fc6add 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/JXPathLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jxpath-starter/src/main/java/org/apache/camel/language/jxpath/springboot/JXPathLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.jxpath.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.jxpath"")&#010; public class JXPathLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/KafkaComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/KafkaComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/KafkaComponentAutoConfiguration.java&#010;index a3022ee..0c8d81a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/KafkaComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/KafkaComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.kafka.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.kafka.KafkaComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(KafkaComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class KafkaComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/KafkaComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/KafkaComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/KafkaComponentConfiguration.java&#010;index 3843e8a..160c552 100644&#010;--- a/platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/KafkaComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-kafka-starter/src/main/java/org/apache/camel/component/kafka/springboot/KafkaComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.kafka.springboot;&#010; &#010; import java.util.concurrent.ExecutorService;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.spi.StateRepository;&#010; import org.apache.camel.util.jsse.SSLContextParameters;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -28,6 +29,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.kafka"")&#010; public class KafkaComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/KestrelComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/KestrelComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/KestrelComponentAutoConfiguration.java&#010;index d6be15e..c1e238c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/KestrelComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/KestrelComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.kestrel.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.kestrel.KestrelComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(KestrelComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class KestrelComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/KestrelComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/KestrelComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/KestrelComponentConfiguration.java&#010;index 9d62010..2f04772 100644&#010;--- a/platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/KestrelComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-kestrel-starter/src/main/java/org/apache/camel/component/kestrel/springboot/KestrelComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.kestrel.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.kestrel"")&#010; public class KestrelComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-krati-starter/src/main/java/org/apache/camel/component/krati/springboot/KratiComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-krati-starter/src/main/java/org/apache/camel/component/krati/springboot/KratiComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-krati-starter/src/main/java/org/apache/camel/component/krati/springboot/KratiComponentAutoConfiguration.java&#010;index 9930712..8147c37 100644&#010;--- a/platforms/spring-boot/components-starter/camel-krati-starter/src/main/java/org/apache/camel/component/krati/springboot/KratiComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-krati-starter/src/main/java/org/apache/camel/component/krati/springboot/KratiComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.krati.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.krati.KratiComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(KratiComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class KratiComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-kubernetes-starter/src/main/java/org/apache/camel/component/kubernetes/springboot/KubernetesComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-kubernetes-starter/src/main/java/org/apache/camel/component/kubernetes/springboot/KubernetesComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-kubernetes-starter/src/main/java/org/apache/camel/component/kubernetes/springboot/KubernetesComponentAutoConfiguration.java&#010;index c3b5545..5bcd127 100644&#010;--- a/platforms/spring-boot/components-starter/camel-kubernetes-starter/src/main/java/org/apache/camel/component/kubernetes/springboot/KubernetesComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-kubernetes-starter/src/main/java/org/apache/camel/component/kubernetes/springboot/KubernetesComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.kubernetes.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.kubernetes.KubernetesComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(KubernetesComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class KubernetesComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ldap-starter/src/main/java/org/apache/camel/component/ldap/springboot/LdapComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ldap-starter/src/main/java/org/apache/camel/component/ldap/springboot/LdapComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-ldap-starter/src/main/java/org/apache/camel/component/ldap/springboot/LdapComponentAutoConfiguration.java&#010;index 9a541be..7f4bc3e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ldap-starter/src/main/java/org/apache/camel/component/ldap/springboot/LdapComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ldap-starter/src/main/java/org/apache/camel/component/ldap/springboot/LdapComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.ldap.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.ldap.LdapComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(LdapComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class LdapComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentAutoConfiguration.java&#010;index c183aba..4bc8079 100644&#010;--- a/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.linkedin.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.linkedin.LinkedInComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(LinkedInComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class LinkedInComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java&#010;index 86ab776..d7b753a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-linkedin-starter/src/main/java/org/apache/camel/component/linkedin/springboot/LinkedInComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.linkedin.springboot;&#010; &#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.linkedin.api.OAuthScope;&#010; import org.apache.camel.component.linkedin.api.OAuthSecureStorage;&#010; import org.apache.camel.component.linkedin.internal.LinkedInApiName;&#010;@@ -28,6 +29,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.linkedin"")&#010; public class LinkedInComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/LuceneComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/LuceneComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/LuceneComponentAutoConfiguration.java&#010;index 358005c..64eec42 100644&#010;--- a/platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/LuceneComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/LuceneComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.lucene.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.lucene.LuceneComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(LuceneComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class LuceneComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/LuceneComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/LuceneComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/LuceneComponentConfiguration.java&#010;index 25aaf95..6513191 100644&#010;--- a/platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/LuceneComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-lucene-starter/src/main/java/org/apache/camel/component/lucene/springboot/LuceneComponentConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.lucene.springboot;&#010; &#010; import java.io.File;&#010; import java.net.URI;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.lucene.LuceneOperation;&#010; import org.apache.lucene.analysis.Analyzer;&#010; import org.apache.lucene.util.Version;&#010;@@ -29,6 +30,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.lucene"")&#010; public class LuceneComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/LumberjackComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/LumberjackComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/LumberjackComponentAutoConfiguration.java&#010;index 070766e..df79781 100644&#010;--- a/platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/LumberjackComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/LumberjackComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.lumberjack.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.lumberjack.LumberjackComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(LumberjackComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class LumberjackComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/LumberjackComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/LumberjackComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/LumberjackComponentConfiguration.java&#010;index 6836fb6..611df02 100644&#010;--- a/platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/LumberjackComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-lumberjack-starter/src/main/java/org/apache/camel/component/lumberjack/springboot/LumberjackComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.lumberjack.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.util.jsse.SSLContextParameters;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.lumberjack"")&#010; public class LumberjackComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/LZFDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/LZFDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/LZFDataFormatAutoConfiguration.java&#010;index fdffdef..cd137da 100644&#010;--- a/platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/LZFDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/LZFDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.lzf.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(LZFDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class LZFDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/LZFDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/LZFDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/LZFDataFormatConfiguration.java&#010;index 9a716b6..f04ab15 100644&#010;--- a/platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/LZFDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-lzf-starter/src/main/java/org/apache/camel/dataformat/lzf/springboot/LZFDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.lzf.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.lzf"")&#010; public class LZFDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/MailComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/MailComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/MailComponentAutoConfiguration.java&#010;index 9e6e7b3..fcd9d5e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/MailComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/MailComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.mail.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.mail.MailComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(MailComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class MailComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/MailComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/MailComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/MailComponentConfiguration.java&#010;index fb45260..3439866 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/MailComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/MailComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.mail.springboot;&#010; &#010; import java.util.Properties;&#010;+import javax.annotation.Generated;&#010; import javax.mail.Session;&#010; import org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver;&#010; import org.apache.camel.component.mail.ContentTypeResolver;&#010;@@ -30,6 +31,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.mail"")&#010; public class MailComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/MimeMultipartDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/MimeMultipartDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/MimeMultipartDataFormatAutoConfiguration.java&#010;index 3e97726..d95972e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/MimeMultipartDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/MimeMultipartDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.mime.multipart.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(MimeMultipartDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class MimeMultipartDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/MimeMultipartDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/MimeMultipartDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/MimeMultipartDataFormatConfiguration.java&#010;index 9c2202a..c88a4a1 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/MimeMultipartDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mail-starter/src/main/java/org/apache/camel/dataformat/mime/multipart/springboot/MimeMultipartDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.mime.multipart.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.mime-multipart"")&#010; public class MimeMultipartDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/MetricsComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/MetricsComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/MetricsComponentAutoConfiguration.java&#010;index e3f2e87..6f000b7 100644&#010;--- a/platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/MetricsComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/MetricsComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.metrics.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.metrics.MetricsComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(MetricsComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class MetricsComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/MetricsComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/MetricsComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/MetricsComponentConfiguration.java&#010;index 6c2306b..1f6e350 100644&#010;--- a/platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/MetricsComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-metrics-starter/src/main/java/org/apache/camel/component/metrics/springboot/MetricsComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.metrics.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import com.codahale.metrics.MetricRegistry;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.metrics"")&#010; public class MetricsComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentAutoConfiguration.java&#010;index 36e6961..245a1e6 100644&#010;--- a/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.milo.client.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.milo.client.MiloClientComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(MiloClientComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class MiloClientComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java&#010;index ad0ebed..0760771 100644&#010;--- a/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/client/springboot/MiloClientComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.milo.client.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.milo-client"")&#010; public class MiloClientComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/MiloServerComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/MiloServerComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/MiloServerComponentAutoConfiguration.java&#010;index 46d80a9..620cacd 100644&#010;--- a/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/MiloServerComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/MiloServerComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.milo.server.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.milo.server.MiloServerComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(MiloServerComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class MiloServerComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/MiloServerComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/MiloServerComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/MiloServerComponentConfiguration.java&#010;index 14745d8..4a368e0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/MiloServerComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-milo-starter/src/main/java/org/apache/camel/component/milo/server/springboot/MiloServerComponentConfiguration.java&#010;@@ -20,6 +20,7 @@ import java.io.File;&#010; import java.util.Collection;&#010; import java.util.Set;&#010; import java.util.function.Supplier;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.milo.KeyStoreLoader.Result;&#010; import org.eclipse.milo.opcua.stack.core.application.CertificateManager;&#010; import org.eclipse.milo.opcua.stack.core.application.CertificateValidator;&#010;@@ -33,6 +34,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.milo-server"")&#010; public class MiloServerComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/Mina2ComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/Mina2ComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/Mina2ComponentAutoConfiguration.java&#010;index d8a22a2..5b919b5 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/Mina2ComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/Mina2ComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.mina2.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.mina2.Mina2Component;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(Mina2ComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class Mina2ComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/Mina2ComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/Mina2ComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/Mina2ComponentConfiguration.java&#010;index 5fee68f..1448d76 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/Mina2ComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mina2-starter/src/main/java/org/apache/camel/component/mina2/springboot/Mina2ComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.mina2.springboot;&#010; &#010; import java.util.List;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.LoggingLevel;&#010; import org.apache.camel.component.mina2.Mina2Component;&#010; import org.apache.camel.component.mina2.Mina2TextLineDelimiter;&#010;@@ -30,6 +31,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.mina2"")&#010; public class Mina2ComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mllp-starter/src/main/java/org/apache/camel/component/mllp/springboot/MllpComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mllp-starter/src/main/java/org/apache/camel/component/mllp/springboot/MllpComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-mllp-starter/src/main/java/org/apache/camel/component/mllp/springboot/MllpComponentAutoConfiguration.java&#010;index 1386dd4..aa05c12 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mllp-starter/src/main/java/org/apache/camel/component/mllp/springboot/MllpComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mllp-starter/src/main/java/org/apache/camel/component/mllp/springboot/MllpComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.mllp.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.mllp.MllpComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(MllpComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class MllpComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mongodb-gridfs-starter/src/main/java/org/apache/camel/component/mongodb/gridfs/springboot/GridFsComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mongodb-gridfs-starter/src/main/java/org/apache/camel/component/mongodb/gridfs/springboot/GridFsComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-mongodb-gridfs-starter/src/main/java/org/apache/camel/component/mongodb/gridfs/springboot/GridFsComponentAutoConfiguration.java&#010;index 4ee9881..3306a78 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mongodb-gridfs-starter/src/main/java/org/apache/camel/component/mongodb/gridfs/springboot/GridFsComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mongodb-gridfs-starter/src/main/java/org/apache/camel/component/mongodb/gridfs/springboot/GridFsComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.mongodb.gridfs.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.mongodb.gridfs.GridFsComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(GridFsComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class GridFsComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mongodb-starter/src/main/java/org/apache/camel/component/mongodb/springboot/MongoDbComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mongodb-starter/src/main/java/org/apache/camel/component/mongodb/springboot/MongoDbComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-mongodb-starter/src/main/java/org/apache/camel/component/mongodb/springboot/MongoDbComponentAutoConfiguration.java&#010;index aa68ff1..6c0bace 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mongodb-starter/src/main/java/org/apache/camel/component/mongodb/springboot/MongoDbComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mongodb-starter/src/main/java/org/apache/camel/component/mongodb/springboot/MongoDbComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.mongodb.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.mongodb.MongoDbComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(MongoDbComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class MongoDbComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mongodb3-starter/src/main/java/org/apache/camel/component/mongodb3/springboot/MongoDbComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mongodb3-starter/src/main/java/org/apache/camel/component/mongodb3/springboot/MongoDbComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-mongodb3-starter/src/main/java/org/apache/camel/component/mongodb3/springboot/MongoDbComponentAutoConfiguration.java&#010;index 38f7dc7..24c20db 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mongodb3-starter/src/main/java/org/apache/camel/component/mongodb3/springboot/MongoDbComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mongodb3-starter/src/main/java/org/apache/camel/component/mongodb3/springboot/MongoDbComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.mongodb3.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.mongodb3.MongoDbComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(MongoDbComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class MongoDbComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/MQTTComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/MQTTComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/MQTTComponentAutoConfiguration.java&#010;index 17477b7..8bfa98c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/MQTTComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/MQTTComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.mqtt.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.mqtt.MQTTComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(MQTTComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class MQTTComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/MQTTComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/MQTTComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/MQTTComponentConfiguration.java&#010;index f3c45c5..a449f1b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/MQTTComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mqtt-starter/src/main/java/org/apache/camel/component/mqtt/springboot/MQTTComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.mqtt.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.mqtt"")&#010; public class MQTTComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/MsvComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/MsvComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/MsvComponentAutoConfiguration.java&#010;index 7d923c2..ec86706 100644&#010;--- a/platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/MsvComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/MsvComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.validator.msv.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.validator.msv.MsvComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(MsvComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class MsvComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/MsvComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/MsvComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/MsvComponentConfiguration.java&#010;index 66ddfb9..5a5165f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/MsvComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-msv-starter/src/main/java/org/apache/camel/component/validator/msv/springboot/MsvComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.validator.msv.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import javax.xml.validation.SchemaFactory;&#010; import org.apache.camel.component.validator.ValidatorResourceResolverFactory;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.msv"")&#010; public class MsvComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/MustacheComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/MustacheComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/MustacheComponentAutoConfiguration.java&#010;index a66bd3d..fb6ca8d 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/MustacheComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/MustacheComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.mustache.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.mustache.MustacheComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(MustacheComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class MustacheComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/MustacheComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/MustacheComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/MustacheComponentConfiguration.java&#010;index 0393a2d..32cf515 100644&#010;--- a/platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/MustacheComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-mustache-starter/src/main/java/org/apache/camel/component/mustache/springboot/MustacheComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.mustache.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import com.github.mustachejava.MustacheFactory;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.mustache"")&#010; public class MustacheComponentConfiguration {&#010; &#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C8a85b0ba129c45eb82ed94eff0cea425%40git.apache.org%3E,2017-04-19 08:35:51,commits,390.0,  [06/13] camel git commit: CAMEL-11165 Add @Generated annotation to code g...
237,237,193.0,391.0,zregv...@apache.org,"http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/HessianDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/HessianDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/HessianDataFormatAutoConfiguration.java&#010;index 11c817e..4629150 100644&#010;--- a/platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/HessianDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/HessianDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.hessian.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(HessianDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class HessianDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/HessianDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/HessianDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/HessianDataFormatConfiguration.java&#010;index b00d46d..2a48dc4 100644&#010;--- a/platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/HessianDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-hessian-starter/src/main/java/org/apache/camel/dataformat/hessian/springboot/HessianDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.hessian.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.hessian"")&#010; public class HessianDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-hipchat-starter/src/main/java/org/apache/camel/component/hipchat/springboot/HipchatComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-hipchat-starter/src/main/java/org/apache/camel/component/hipchat/springboot/HipchatComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-hipchat-starter/src/main/java/org/apache/camel/component/hipchat/springboot/HipchatComponentAutoConfiguration.java&#010;index 7e450a4..ee16b53 100644&#010;--- a/platforms/spring-boot/components-starter/camel-hipchat-starter/src/main/java/org/apache/camel/component/hipchat/springboot/HipchatComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-hipchat-starter/src/main/java/org/apache/camel/component/hipchat/springboot/HipchatComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.hipchat.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.hipchat.HipchatComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(HipchatComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class HipchatComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/HL7DataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/HL7DataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/HL7DataFormatAutoConfiguration.java&#010;index 55a1bed..242569d 100644&#010;--- a/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/HL7DataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/HL7DataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.hl7.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(HL7DataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class HL7DataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/HL7DataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/HL7DataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/HL7DataFormatConfiguration.java&#010;index f25f772..f20bde9 100644&#010;--- a/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/HL7DataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/HL7DataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.hl7.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.hl7"")&#010; public class HL7DataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/TerserLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/TerserLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/TerserLanguageAutoConfiguration.java&#010;index f64fe5e..bdeb045 100644&#010;--- a/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/TerserLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/TerserLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.hl7.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.component.hl7.TerserLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(TerserLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class TerserLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/TerserLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/TerserLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/TerserLanguageConfiguration.java&#010;index 8551aa9..e13994a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/TerserLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-hl7-starter/src/main/java/org/apache/camel/component/hl7/springboot/TerserLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.hl7.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.terser"")&#010; public class TerserLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/HttpComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/HttpComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/HttpComponentAutoConfiguration.java&#010;index 338d58a..96daf13 100644&#010;--- a/platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/HttpComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/HttpComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.http.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.http.HttpComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(HttpComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class HttpComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/HttpComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/HttpComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/HttpComponentConfiguration.java&#010;index 02c86e8..62b4821 100644&#010;--- a/platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/HttpComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-http-starter/src/main/java/org/apache/camel/component/http/springboot/HttpComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.http.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.http.HttpClientConfigurer;&#010; import org.apache.camel.http.common.HttpBinding;&#010; import org.apache.camel.http.common.HttpConfiguration;&#010;@@ -29,6 +30,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.http"")&#010; public class HttpComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/HttpComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/HttpComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/HttpComponentAutoConfiguration.java&#010;index 4530a87..040655f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/HttpComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/HttpComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.http4.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.http4.HttpComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(HttpComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class HttpComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/HttpComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/HttpComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/HttpComponentConfiguration.java&#010;index d80edc8..78aa3ff 100644&#010;--- a/platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/HttpComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-http4-starter/src/main/java/org/apache/camel/component/http4/springboot/HttpComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.http4.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import javax.net.ssl.HostnameVerifier;&#010; import org.apache.camel.component.http4.HttpClientConfigurer;&#010; import org.apache.camel.http.common.HttpBinding;&#010;@@ -33,6 +34,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.http4"")&#010; public class HttpComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/ICalDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/ICalDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/ICalDataFormatAutoConfiguration.java&#010;index b799b7d..36ec2a5 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/ICalDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/ICalDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.ical.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ICalDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class ICalDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/ICalDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/ICalDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/ICalDataFormatConfiguration.java&#010;index 88ddfa0..2b654ae 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/ICalDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ical-starter/src/main/java/org/apache/camel/component/ical/springboot/ICalDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.ical.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.ical"")&#010; public class ICalDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/InfinispanComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/InfinispanComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/InfinispanComponentAutoConfiguration.java&#010;index 144791c..ae496d2 100644&#010;--- a/platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/InfinispanComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/InfinispanComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.infinispan.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.infinispan.InfinispanComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(InfinispanComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class InfinispanComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/InfinispanComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/InfinispanComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/InfinispanComponentConfiguration.java&#010;index c4afece..8fc56dd 100644&#010;--- a/platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/InfinispanComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-infinispan-starter/src/main/java/org/apache/camel/component/infinispan/springboot/InfinispanComponentConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.infinispan.springboot;&#010; &#010; import java.util.Map;&#010; import java.util.Set;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.infinispan.InfinispanCustomListener;&#010; import org.apache.camel.component.infinispan.InfinispanQueryBuilder;&#010; import org.infinispan.commons.api.BasicCacheContainer;&#010;@@ -31,6 +32,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.infinispan"")&#010; public class InfinispanComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-influxdb-starter/src/main/java/org/apache/camel/component/influxdb/springboot/InfluxDbComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-influxdb-starter/src/main/java/org/apache/camel/component/influxdb/springboot/InfluxDbComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-influxdb-starter/src/main/java/org/apache/camel/component/influxdb/springboot/InfluxDbComponentAutoConfiguration.java&#010;index f7a0e26..9aa6fe0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-influxdb-starter/src/main/java/org/apache/camel/component/influxdb/springboot/InfluxDbComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-influxdb-starter/src/main/java/org/apache/camel/component/influxdb/springboot/InfluxDbComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.influxdb.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.influxdb.InfluxDbComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(InfluxDbComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class InfluxDbComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/IrcComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/IrcComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/IrcComponentAutoConfiguration.java&#010;index 67d9cf8..741a06e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/IrcComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/IrcComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.irc.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.irc.IrcComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(IrcComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class IrcComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/IrcComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/IrcComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/IrcComponentConfiguration.java&#010;index 02daefb..fe89d50 100644&#010;--- a/platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/IrcComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-irc-starter/src/main/java/org/apache/camel/component/irc/springboot/IrcComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.irc.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.irc"")&#010; public class IrcComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ironmq-starter/src/main/java/org/apache/camel/component/ironmq/springboot/IronMQComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ironmq-starter/src/main/java/org/apache/camel/component/ironmq/springboot/IronMQComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-ironmq-starter/src/main/java/org/apache/camel/component/ironmq/springboot/IronMQComponentAutoConfiguration.java&#010;index 5053f68..de636c0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ironmq-starter/src/main/java/org/apache/camel/component/ironmq/springboot/IronMQComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ironmq-starter/src/main/java/org/apache/camel/component/ironmq/springboot/IronMQComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.ironmq.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.ironmq.IronMQComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(IronMQComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class IronMQComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/JacksonDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/JacksonDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/JacksonDataFormatAutoConfiguration.java&#010;index 406b5af..5099b19 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/JacksonDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/JacksonDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.jackson.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JacksonDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class JacksonDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/JacksonDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/JacksonDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/JacksonDataFormatConfiguration.java&#010;index e5dcbc2..8f69717 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/JacksonDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jackson-starter/src/main/java/org/apache/camel/component/jackson/springboot/JacksonDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.jackson.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.jackson.JacksonDataFormat;&#010; import org.apache.camel.model.dataformat.JsonLibrary;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.json-jackson"")&#010; public class JacksonDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/JacksonXMLDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/JacksonXMLDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/JacksonXMLDataFormatAutoConfiguration.java&#010;index 30c2f63..3a22f52 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/JacksonXMLDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/JacksonXMLDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.jacksonxml.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JacksonXMLDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class JacksonXMLDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/JacksonXMLDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/JacksonXMLDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/JacksonXMLDataFormatConfiguration.java&#010;index 50c8062..389e38a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/JacksonXMLDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jacksonxml-starter/src/main/java/org/apache/camel/component/jacksonxml/springboot/JacksonXMLDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.jacksonxml.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.jacksonxml"")&#010; public class JacksonXMLDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-javaspace-starter/src/main/java/org/apache/camel/component/javaspace/springboot/JavaSpaceComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-javaspace-starter/src/main/java/org/apache/camel/component/javaspace/springboot/JavaSpaceComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-javaspace-starter/src/main/java/org/apache/camel/component/javaspace/springboot/JavaSpaceComponentAutoConfiguration.java&#010;index 567af38..a409ff9 100644&#010;--- a/platforms/spring-boot/components-starter/camel-javaspace-starter/src/main/java/org/apache/camel/component/javaspace/springboot/JavaSpaceComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-javaspace-starter/src/main/java/org/apache/camel/component/javaspace/springboot/JavaSpaceComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.javaspace.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.javaspace.JavaSpaceComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JavaSpaceComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class JavaSpaceComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/JaxbDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/JaxbDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/JaxbDataFormatAutoConfiguration.java&#010;index 3562119..a8388f1 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/JaxbDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/JaxbDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.converter.jaxb.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JaxbDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class JaxbDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/JaxbDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/JaxbDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/JaxbDataFormatConfiguration.java&#010;index a980537..4d28036 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/JaxbDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jaxb-starter/src/main/java/org/apache/camel/converter/jaxb/springboot/JaxbDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.converter.jaxb.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.jaxb"")&#010; public class JaxbDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jbpm-starter/src/main/java/org/apache/camel/component/jbpm/springboot/JBPMComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jbpm-starter/src/main/java/org/apache/camel/component/jbpm/springboot/JBPMComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jbpm-starter/src/main/java/org/apache/camel/component/jbpm/springboot/JBPMComponentAutoConfiguration.java&#010;index e744a5a..13ede67 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jbpm-starter/src/main/java/org/apache/camel/component/jbpm/springboot/JBPMComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jbpm-starter/src/main/java/org/apache/camel/component/jbpm/springboot/JBPMComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.jbpm.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.jbpm.JBPMComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JBPMComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class JBPMComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/JCacheComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/JCacheComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/JCacheComponentAutoConfiguration.java&#010;index d552b5f..37137b4 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/JCacheComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/JCacheComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.jcache.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.jcache.JCacheComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JCacheComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class JCacheComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/JCacheComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/JCacheComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/JCacheComponentConfiguration.java&#010;index b0d9f5e..be5ced1 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/JCacheComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jcache-starter/src/main/java/org/apache/camel/component/jcache/springboot/JCacheComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.jcache.springboot;&#010; &#010; import java.util.Properties;&#010;+import javax.annotation.Generated;&#010; import javax.cache.configuration.Configuration;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.jcache"")&#010; public class JCacheComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jcr-starter/src/main/java/org/apache/camel/component/jcr/springboot/JcrComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jcr-starter/src/main/java/org/apache/camel/component/jcr/springboot/JcrComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jcr-starter/src/main/java/org/apache/camel/component/jcr/springboot/JcrComponentAutoConfiguration.java&#010;index 21ea150..8aebcc2 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jcr-starter/src/main/java/org/apache/camel/component/jcr/springboot/JcrComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jcr-starter/src/main/java/org/apache/camel/component/jcr/springboot/JcrComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.jcr.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.jcr.JcrComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JcrComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class JcrComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/JdbcComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/JdbcComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/JdbcComponentAutoConfiguration.java&#010;index fe8cb68..2424bdc 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/JdbcComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/JdbcComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.jdbc.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.jdbc.JdbcComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JdbcComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class JdbcComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/JdbcComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/JdbcComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/JdbcComponentConfiguration.java&#010;index 49df11b..f2e6234 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/JdbcComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jdbc-starter/src/main/java/org/apache/camel/component/jdbc/springboot/JdbcComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.jdbc.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import javax.sql.DataSource;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.jdbc"")&#010; public class JdbcComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/JettyHttpComponentAutoConfiguration9.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/JettyHttpComponentAutoConfiguration9.java b/platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/JettyHttpComponentAutoConfiguration9.java&#010;index 3ac3ed9..c887d25 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/JettyHttpComponentAutoConfiguration9.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/JettyHttpComponentAutoConfiguration9.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.jetty9.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.jetty9.JettyHttpComponent9;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JettyHttpComponentAutoConfiguration9.Condition.class)&#010;@@ -84,6 +86,7 @@ public class JettyHttpComponentAutoConfiguration9 {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/JettyHttpComponentConfiguration9.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/JettyHttpComponentConfiguration9.java b/platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/JettyHttpComponentConfiguration9.java&#010;index 6cfc3dc..dc841bb 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/JettyHttpComponentConfiguration9.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jetty9-starter/src/main/java/org/apache/camel/component/jetty9/springboot/JettyHttpComponentConfiguration9.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.jetty9.springboot;&#010; &#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.jetty.JettyHttpBinding;&#010; import org.apache.camel.http.common.HttpBinding;&#010; import org.apache.camel.http.common.HttpConfiguration;&#010;@@ -35,6 +36,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.jetty"")&#010; public class JettyHttpComponentConfiguration9 {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/JGroupsComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/JGroupsComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/JGroupsComponentAutoConfiguration.java&#010;index a6d263f..492439c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/JGroupsComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/JGroupsComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.jgroups.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.jgroups.JGroupsComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JGroupsComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class JGroupsComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/JGroupsComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/JGroupsComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/JGroupsComponentConfiguration.java&#010;index 8f61eb1..0c2e812 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/JGroupsComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jgroups-starter/src/main/java/org/apache/camel/component/jgroups/springboot/JGroupsComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.jgroups.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.jgroups.JChannel;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.jgroups"")&#010; public class JGroupsComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/JibxDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/JibxDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/JibxDataFormatAutoConfiguration.java&#010;index 179701a..1597cbd 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/JibxDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/JibxDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.jibx.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JibxDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class JibxDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/JibxDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/JibxDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/JibxDataFormatConfiguration.java&#010;index 47af923..a2e21b7 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/JibxDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jibx-starter/src/main/java/org/apache/camel/dataformat/jibx/springboot/JibxDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.jibx.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.jibx"")&#010; public class JibxDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jing-starter/src/main/java/org/apache/camel/component/validator/jing/springboot/JingComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jing-starter/src/main/java/org/apache/camel/component/validator/jing/springboot/JingComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jing-starter/src/main/java/org/apache/camel/component/validator/jing/springboot/JingComponentAutoConfiguration.java&#010;index b318b2c..eeb94b4 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jing-starter/src/main/java/org/apache/camel/component/validator/jing/springboot/JingComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jing-starter/src/main/java/org/apache/camel/component/validator/jing/springboot/JingComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.validator.jing.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.validator.jing.JingComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JingComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class JingComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jira-starter/src/main/java/org/apache/camel/component/jira/springboot/JIRAComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jira-starter/src/main/java/org/apache/camel/component/jira/springboot/JIRAComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jira-starter/src/main/java/org/apache/camel/component/jira/springboot/JIRAComponentAutoConfiguration.java&#010;index a40a8c1..1a1a48e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jira-starter/src/main/java/org/apache/camel/component/jira/springboot/JIRAComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jira-starter/src/main/java/org/apache/camel/component/jira/springboot/JIRAComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.jira.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.jira.JIRAComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JIRAComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class JIRAComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/JmsComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/JmsComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/JmsComponentAutoConfiguration.java&#010;index c7761fa..9cf6e26 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/JmsComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/JmsComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.jms.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.jms.JmsComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JmsComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class JmsComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/JmsComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/JmsComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/JmsComponentConfiguration.java&#010;index 7225161..1f1130e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/JmsComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/JmsComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.jms.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import javax.jms.ConnectionFactory;&#010; import javax.jms.ExceptionListener;&#010; import org.apache.camel.LoggingLevel;&#010;@@ -46,6 +47,7 @@ import org.springframework.util.ErrorHandler;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.jms"")&#010; public class JmsComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jmx-starter/src/main/java/org/apache/camel/component/jmx/springboot/JMXComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jmx-starter/src/main/java/org/apache/camel/component/jmx/springboot/JMXComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jmx-starter/src/main/java/org/apache/camel/component/jmx/springboot/JMXComponentAutoConfiguration.java&#010;index 2230be6..ec8d6c3 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jmx-starter/src/main/java/org/apache/camel/component/jmx/springboot/JMXComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jmx-starter/src/main/java/org/apache/camel/component/jmx/springboot/JMXComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.jmx.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.jmx.JMXComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JMXComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class JMXComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/JohnzonDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/JohnzonDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/JohnzonDataFormatAutoConfiguration.java&#010;index 0f5d2e0..e20fde9 100644&#010;--- a/platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/JohnzonDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/JohnzonDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.johnzon.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JohnzonDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class JohnzonDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/JohnzonDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/JohnzonDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/JohnzonDataFormatConfiguration.java&#010;index 47b9093..67c542b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/JohnzonDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-johnzon-starter/src/main/java/org/apache/camel/component/johnzon/springboot/JohnzonDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.johnzon.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.johnzon.JohnzonDataFormat;&#010; import org.apache.camel.model.dataformat.JsonLibrary;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.json-johnzon"")&#010; public class JohnzonDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/JoltComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/JoltComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/JoltComponentAutoConfiguration.java&#010;index 7b6552d..1c53972 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/JoltComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/JoltComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.jolt.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.jolt.JoltComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(JoltComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class JoltComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/JoltComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/JoltComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/JoltComponentConfiguration.java&#010;index c14d949..e1017f0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/JoltComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-jolt-starter/src/main/java/org/apache/camel/component/jolt/springboot/JoltComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.jolt.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import com.bazaarvoice.jolt.Transform;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.jolt"")&#010; public class JoltComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/SqlLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/SqlLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/SqlLanguageAutoConfiguration.java&#010;index 0bc0a5d..8a993a6 100644&#010;--- a/platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/SqlLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/SqlLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.sql.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.sql.SqlLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SqlLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class SqlLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/SqlLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/SqlLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/SqlLanguageConfiguration.java&#010;index 1816393..6060fb5 100644&#010;--- a/platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/SqlLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-josql-starter/src/main/java/org/apache/camel/language/sql/springboot/SqlLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.sql.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.sql"")&#010; public class SqlLanguageConfiguration {&#010; &#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C6b16c48f14ad48ab8ec2f241a9d0f7b5%40git.apache.org%3E,2017-04-19 08:35:52,commits,391.0,  [07/13] camel git commit: CAMEL-11165 Add @Generated annotation to code g...
238,238,194.0,392.0,zregv...@apache.org,"http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/ElsqlComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/ElsqlComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/ElsqlComponentAutoConfiguration.java&#010;index cb4bf49..344a03a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/ElsqlComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/ElsqlComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.elsql.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.elsql.ElsqlComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ElsqlComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class ElsqlComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/ElsqlComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/ElsqlComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/ElsqlComponentConfiguration.java&#010;index c6a1577..da283bd 100644&#010;--- a/platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/ElsqlComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-elsql-starter/src/main/java/org/apache/camel/component/elsql/springboot/ElsqlComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.elsql.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import javax.sql.DataSource;&#010; import com.opengamma.elsql.ElSqlConfig;&#010; import org.apache.camel.component.elsql.ElSqlDatabaseVendor;&#010;@@ -28,6 +29,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.elsql"")&#010; public class ElsqlComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/EtcdComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/EtcdComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/EtcdComponentAutoConfiguration.java&#010;index 26290f1..c48f095 100644&#010;--- a/platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/EtcdComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/EtcdComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.etcd.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.etcd.EtcdComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(EtcdComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class EtcdComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/EtcdComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/EtcdComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/EtcdComponentConfiguration.java&#010;index 0e2cbdb..a7168a6 100644&#010;--- a/platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/EtcdComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-etcd-starter/src/main/java/org/apache/camel/component/etcd/springboot/EtcdComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.etcd.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.util.jsse.SSLContextParameters;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -27,6 +28,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.etcd"")&#010; public class EtcdComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-exec-starter/src/main/java/org/apache/camel/component/exec/springboot/ExecComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-exec-starter/src/main/java/org/apache/camel/component/exec/springboot/ExecComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-exec-starter/src/main/java/org/apache/camel/component/exec/springboot/ExecComponentAutoConfiguration.java&#010;index 0b3c115..8337190 100644&#010;--- a/platforms/spring-boot/components-starter/camel-exec-starter/src/main/java/org/apache/camel/component/exec/springboot/ExecComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-exec-starter/src/main/java/org/apache/camel/component/exec/springboot/ExecComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.exec.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.exec.ExecComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ExecComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class ExecComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/FacebookComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/FacebookComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/FacebookComponentAutoConfiguration.java&#010;index baa8e05..9bfa887 100644&#010;--- a/platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/FacebookComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/FacebookComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.facebook.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.facebook.FacebookComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(FacebookComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class FacebookComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/FacebookComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/FacebookComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/FacebookComponentConfiguration.java&#010;index 28b2963..e164fe7 100644&#010;--- a/platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/FacebookComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-facebook-starter/src/main/java/org/apache/camel/component/facebook/springboot/FacebookComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.facebook.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.facebook"")&#010; public class FacebookComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/component/flatpack/springboot/FlatpackComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/component/flatpack/springboot/FlatpackComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/component/flatpack/springboot/FlatpackComponentAutoConfiguration.java&#010;index 2a9c2f1..19e04d4 100644&#010;--- a/platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/component/flatpack/springboot/FlatpackComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/component/flatpack/springboot/FlatpackComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.flatpack.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.flatpack.FlatpackComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(FlatpackComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class FlatpackComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/FlatpackDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/FlatpackDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/FlatpackDataFormatAutoConfiguration.java&#010;index ce9a747..553ccb6 100644&#010;--- a/platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/FlatpackDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/FlatpackDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.flatpack.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(FlatpackDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class FlatpackDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/FlatpackDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/FlatpackDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/FlatpackDataFormatConfiguration.java&#010;index 4d81857..0f07c9a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/FlatpackDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-flatpack-starter/src/main/java/org/apache/camel/dataformat/flatpack/springboot/FlatpackDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.flatpack.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.flatpack"")&#010; public class FlatpackDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/FlinkComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/FlinkComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/FlinkComponentAutoConfiguration.java&#010;index d505ab5..31cd17c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/FlinkComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/FlinkComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.flink.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.flink.FlinkComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(FlinkComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class FlinkComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/FlinkComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/FlinkComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/FlinkComponentConfiguration.java&#010;index c6ebc59..5387af1 100644&#010;--- a/platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/FlinkComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-flink-starter/src/main/java/org/apache/camel/component/flink/springboot/FlinkComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.flink.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.flink.DataSetCallback;&#010; import org.apache.camel.component.flink.DataStreamCallback;&#010; import org.apache.flink.api.java.DataSet;&#010;@@ -28,6 +29,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.flink"")&#010; public class FlinkComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-fop-starter/src/main/java/org/apache/camel/component/fop/springboot/FopComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-fop-starter/src/main/java/org/apache/camel/component/fop/springboot/FopComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-fop-starter/src/main/java/org/apache/camel/component/fop/springboot/FopComponentAutoConfiguration.java&#010;index b5afd94..d2c0108 100644&#010;--- a/platforms/spring-boot/components-starter/camel-fop-starter/src/main/java/org/apache/camel/component/fop/springboot/FopComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-fop-starter/src/main/java/org/apache/camel/component/fop/springboot/FopComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.fop.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.fop.FopComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(FopComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class FopComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/FreemarkerComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/FreemarkerComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/FreemarkerComponentAutoConfiguration.java&#010;index d0c68ae..4b57873 100644&#010;--- a/platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/FreemarkerComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/FreemarkerComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.freemarker.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.freemarker.FreemarkerComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(FreemarkerComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class FreemarkerComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/FreemarkerComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/FreemarkerComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/FreemarkerComponentConfiguration.java&#010;index 25d1d83..2ccdfaa 100644&#010;--- a/platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/FreemarkerComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-freemarker-starter/src/main/java/org/apache/camel/component/freemarker/springboot/FreemarkerComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.freemarker.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import freemarker.template.Configuration;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.freemarker"")&#010; public class FreemarkerComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/FtpComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/FtpComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/FtpComponentAutoConfiguration.java&#010;index 80427e3..756a65b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/FtpComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/FtpComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.file.remote.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.file.remote.FtpComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(FtpComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class FtpComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/FtpsComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/FtpsComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/FtpsComponentAutoConfiguration.java&#010;index 731b91b..db13a00 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/FtpsComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/FtpsComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.file.remote.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.file.remote.FtpsComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(FtpsComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class FtpsComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/FtpsComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/FtpsComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/FtpsComponentConfiguration.java&#010;index 45a36e2..667f643 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/FtpsComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/FtpsComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.file.remote.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.ftps"")&#010; public class FtpsComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/SftpComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/SftpComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/SftpComponentAutoConfiguration.java&#010;index 1c728ea..883e8f2 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/SftpComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ftp-starter/src/main/java/org/apache/camel/component/file/remote/springboot/SftpComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.file.remote.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.file.remote.SftpComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SftpComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class SftpComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/GangliaComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/GangliaComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/GangliaComponentAutoConfiguration.java&#010;index a325c6b..3d2fa32 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/GangliaComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/GangliaComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.ganglia.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.ganglia.GangliaComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(GangliaComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class GangliaComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/GangliaComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/GangliaComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/GangliaComponentConfiguration.java&#010;index 7763525..6f82f77 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/GangliaComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ganglia-starter/src/main/java/org/apache/camel/component/ganglia/springboot/GangliaComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.ganglia.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import info.ganglia.gmetric4j.gmetric.GMetric.UDPAddressingMode;&#010; import info.ganglia.gmetric4j.gmetric.GMetricSlope;&#010; import info.ganglia.gmetric4j.gmetric.GMetricType;&#010;@@ -28,6 +29,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.ganglia"")&#010; public class GangliaComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-geocoder-starter/src/main/java/org/apache/camel/component/geocoder/springboot/GeoCoderComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-geocoder-starter/src/main/java/org/apache/camel/component/geocoder/springboot/GeoCoderComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-geocoder-starter/src/main/java/org/apache/camel/component/geocoder/springboot/GeoCoderComponentAutoConfiguration.java&#010;index f3f4725..a0291e0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-geocoder-starter/src/main/java/org/apache/camel/component/geocoder/springboot/GeoCoderComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-geocoder-starter/src/main/java/org/apache/camel/component/geocoder/springboot/GeoCoderComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.geocoder.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.geocoder.GeoCoderComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(GeoCoderComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class GeoCoderComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-git-starter/src/main/java/org/apache/camel/component/git/springboot/GitComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-git-starter/src/main/java/org/apache/camel/component/git/springboot/GitComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-git-starter/src/main/java/org/apache/camel/component/git/springboot/GitComponentAutoConfiguration.java&#010;index f63c61e..886a699 100644&#010;--- a/platforms/spring-boot/components-starter/camel-git-starter/src/main/java/org/apache/camel/component/git/springboot/GitComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-git-starter/src/main/java/org/apache/camel/component/git/springboot/GitComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.git.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.git.GitComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(GitComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class GitComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-github-starter/src/main/java/org/apache/camel/component/github/springboot/GitHubComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-github-starter/src/main/java/org/apache/camel/component/github/springboot/GitHubComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-github-starter/src/main/java/org/apache/camel/component/github/springboot/GitHubComponentAutoConfiguration.java&#010;index 69f7757..82ffa4a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-github-starter/src/main/java/org/apache/camel/component/github/springboot/GitHubComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-github-starter/src/main/java/org/apache/camel/component/github/springboot/GitHubComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.github.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.github.GitHubComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(GitHubComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class GitHubComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/GoogleCalendarComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/GoogleCalendarComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/GoogleCalendarComponentAutoConfiguration.java&#010;index 771dad5..ee870b5 100644&#010;--- a/platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/GoogleCalendarComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/GoogleCalendarComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.google.calendar.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.google.calendar.GoogleCalendarComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(GoogleCalendarComponentAutoConfiguration.Condition.class)&#010;@@ -85,6 +87,7 @@ public class GoogleCalendarComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/GoogleCalendarComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/GoogleCalendarComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/GoogleCalendarComponentConfiguration.java&#010;index 68c5683..600fab6 100644&#010;--- a/platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/GoogleCalendarComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-google-calendar-starter/src/main/java/org/apache/camel/component/google/calendar/springboot/GoogleCalendarComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.google.calendar.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.google.calendar.GoogleCalendarClientFactory;&#010; import org.apache.camel.component.google.calendar.internal.GoogleCalendarApiName;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.google-calendar"")&#010; public class GoogleCalendarComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/GoogleDriveComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/GoogleDriveComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/GoogleDriveComponentAutoConfiguration.java&#010;index 4fd6229..d643326 100644&#010;--- a/platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/GoogleDriveComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/GoogleDriveComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.google.drive.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.google.drive.GoogleDriveComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(GoogleDriveComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class GoogleDriveComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/GoogleDriveComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/GoogleDriveComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/GoogleDriveComponentConfiguration.java&#010;index 3aee8f5..31d46dd 100644&#010;--- a/platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/GoogleDriveComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-google-drive-starter/src/main/java/org/apache/camel/component/google/drive/springboot/GoogleDriveComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.google.drive.springboot;&#010; &#010; import java.util.List;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.google.drive.GoogleDriveClientFactory;&#010; import org.apache.camel.component.google.drive.internal.GoogleDriveApiName;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -28,6 +29,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.google-drive"")&#010; public class GoogleDriveComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/GoogleMailComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/GoogleMailComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/GoogleMailComponentAutoConfiguration.java&#010;index 6c7b5b5..69b8493 100644&#010;--- a/platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/GoogleMailComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/GoogleMailComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.google.mail.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.google.mail.GoogleMailComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(GoogleMailComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class GoogleMailComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/GoogleMailComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/GoogleMailComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/GoogleMailComponentConfiguration.java&#010;index 13cf940..de05160 100644&#010;--- a/platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/GoogleMailComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-google-mail-starter/src/main/java/org/apache/camel/component/google/mail/springboot/GoogleMailComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.google.mail.springboot;&#010; &#010; import java.util.List;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.google.mail.GoogleMailClientFactory;&#010; import org.apache.camel.component.google.mail.internal.GoogleMailApiName;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -27,6 +28,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.google-mail"")&#010; public class GoogleMailComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/GooglePubsubComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/GooglePubsubComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/GooglePubsubComponentAutoConfiguration.java&#010;index 31f14b9..f018f70 100644&#010;--- a/platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/GooglePubsubComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/GooglePubsubComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.google.pubsub.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.google.pubsub.GooglePubsubComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(GooglePubsubComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class GooglePubsubComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/GooglePubsubComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/GooglePubsubComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/GooglePubsubComponentConfiguration.java&#010;index 1c3116c..80e22f8 100644&#010;--- a/platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/GooglePubsubComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-google-pubsub-starter/src/main/java/org/apache/camel/component/google/pubsub/springboot/GooglePubsubComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.google.pubsub.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.google-pubsub"")&#010; public class GooglePubsubComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-gora-starter/src/main/java/org/apache/camel/component/gora/springboot/GoraComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-gora-starter/src/main/java/org/apache/camel/component/gora/springboot/GoraComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-gora-starter/src/main/java/org/apache/camel/component/gora/springboot/GoraComponentAutoConfiguration.java&#010;index 8bc3294..431f241 100644&#010;--- a/platforms/spring-boot/components-starter/camel-gora-starter/src/main/java/org/apache/camel/component/gora/springboot/GoraComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-gora-starter/src/main/java/org/apache/camel/component/gora/springboot/GoraComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.gora.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.gora.GoraComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(GoraComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class GoraComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/GroovyLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/GroovyLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/GroovyLanguageAutoConfiguration.java&#010;index 31ae769..f1d4da7 100644&#010;--- a/platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/GroovyLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/GroovyLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.groovy.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.groovy.GroovyLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(GroovyLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class GroovyLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/GroovyLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/GroovyLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/GroovyLanguageConfiguration.java&#010;index 8b34501..a10a018 100644&#010;--- a/platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/GroovyLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-groovy-starter/src/main/java/org/apache/camel/language/groovy/springboot/GroovyLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.groovy.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.groovy"")&#010; public class GroovyLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-grpc-starter/src/main/java/org/apache/camel/component/grpc/springboot/GrpcComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-grpc-starter/src/main/java/org/apache/camel/component/grpc/springboot/GrpcComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-grpc-starter/src/main/java/org/apache/camel/component/grpc/springboot/GrpcComponentAutoConfiguration.java&#010;index f511eb0..2b584d5 100644&#010;--- a/platforms/spring-boot/components-starter/camel-grpc-starter/src/main/java/org/apache/camel/component/grpc/springboot/GrpcComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-grpc-starter/src/main/java/org/apache/camel/component/grpc/springboot/GrpcComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.grpc.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.grpc.GrpcComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(GrpcComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class GrpcComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/GsonDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/GsonDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/GsonDataFormatAutoConfiguration.java&#010;index 97122f2..09db4a2 100644&#010;--- a/platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/GsonDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/GsonDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.gson.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(GsonDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class GsonDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/GsonDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/GsonDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/GsonDataFormatConfiguration.java&#010;index cf25b31..4897562 100644&#010;--- a/platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/GsonDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-gson-starter/src/main/java/org/apache/camel/component/gson/springboot/GsonDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.gson.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.gson.GsonDataFormat;&#010; import org.apache.camel.model.dataformat.JsonLibrary;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.json-gson"")&#010; public class GsonDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/GuavaEventBusComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/GuavaEventBusComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/GuavaEventBusComponentAutoConfiguration.java&#010;index 23aa142..cf23c1e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/GuavaEventBusComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/GuavaEventBusComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.guava.eventbus.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.guava.eventbus.GuavaEventBusComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(GuavaEventBusComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class GuavaEventBusComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/GuavaEventBusComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/GuavaEventBusComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/GuavaEventBusComponentConfiguration.java&#010;index 6dbcc5c..1b13339 100644&#010;--- a/platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/GuavaEventBusComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-guava-eventbus-starter/src/main/java/org/apache/camel/component/guava/eventbus/springboot/GuavaEventBusComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.guava.eventbus.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import com.google.common.eventbus.EventBus;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.guava-eventbus"")&#010; public class GuavaEventBusComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/HazelcastComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/HazelcastComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/HazelcastComponentAutoConfiguration.java&#010;index 182007c..f779771 100644&#010;--- a/platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/HazelcastComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/HazelcastComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.hazelcast.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.hazelcast.HazelcastComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(HazelcastComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class HazelcastComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/HazelcastComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/HazelcastComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/HazelcastComponentConfiguration.java&#010;index a6a8fec..abda166 100644&#010;--- a/platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/HazelcastComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-hazelcast-starter/src/main/java/org/apache/camel/component/hazelcast/springboot/HazelcastComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.hazelcast.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import com.hazelcast.core.HazelcastInstance;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.hazelcast"")&#010; public class HazelcastComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/HBaseComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/HBaseComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/HBaseComponentAutoConfiguration.java&#010;index 6118483..3ce6fae 100644&#010;--- a/platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/HBaseComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/HBaseComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.hbase.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.hbase.HBaseComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(HBaseComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class HBaseComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/HBaseComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/HBaseComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/HBaseComponentConfiguration.java&#010;index 74eff3f..a9540d4 100644&#010;--- a/platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/HBaseComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-hbase-starter/src/main/java/org/apache/camel/component/hbase/springboot/HBaseComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.hbase.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.hadoop.conf.Configuration;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.hbase"")&#010; public class HBaseComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/HdfsComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/HdfsComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/HdfsComponentAutoConfiguration.java&#010;index d128b0f..2da832e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/HdfsComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/HdfsComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.hdfs.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.hdfs.HdfsComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(HdfsComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class HdfsComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/HdfsComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/HdfsComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/HdfsComponentConfiguration.java&#010;index 324f869..83f62eb 100644&#010;--- a/platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/HdfsComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-hdfs-starter/src/main/java/org/apache/camel/component/hdfs/springboot/HdfsComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.hdfs.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import javax.security.auth.login.Configuration;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.hdfs"")&#010; public class HdfsComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentAutoConfiguration.java&#010;index 88b86d2..5e7cc06 100644&#010;--- a/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentAutoConfiguration.java&#010;@@ -41,7 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;-@Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"", date = ""2017-04-19T08:03:41.690Z"")&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(HdfsComponentAutoConfiguration.Condition.class)&#010;@@ -85,7 +85,7 @@ public class HdfsComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;-    @Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"", date = ""2017-04-19T08:03:41.738Z"")&#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentConfiguration.java&#010;index 29d8a56..4c45bf1 100644&#010;--- a/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentConfiguration.java&#010;@@ -25,7 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;-@Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"", date = ""2017-04-19T08:03:41.545Z"")&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.hdfs2"")&#010; public class HdfsComponentConfiguration {&#010; &#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C399093a95cdb4277b5c497f2e80c60a3%40git.apache.org%3E,2017-04-19 08:35:53,commits,392.0,  [08/13] camel git commit: CAMEL-11165 Add @Generated annotation to code g...
239,239,195.0,393.0,zregv...@apache.org,"http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/SimpleLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/SimpleLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/SimpleLanguageAutoConfiguration.java&#010;index e793c92..dadfb85 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/SimpleLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/SimpleLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.simple.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.simple.SimpleLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SimpleLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class SimpleLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/SimpleLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/SimpleLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/SimpleLanguageConfiguration.java&#010;index 4c1e2e9..f987583 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/SimpleLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/SimpleLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.simple.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.simple"")&#010; public class SimpleLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/TokenizeLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/TokenizeLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/TokenizeLanguageAutoConfiguration.java&#010;index 1dbb098..41c56f6 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/TokenizeLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/TokenizeLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.tokenizer.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.tokenizer.TokenizeLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(TokenizeLanguageAutoConfiguration.Condition.class)&#010;@@ -71,6 +73,7 @@ public class TokenizeLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/TokenizeLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/TokenizeLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/TokenizeLanguageConfiguration.java&#010;index 9a30c9b..e74795d 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/TokenizeLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/TokenizeLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.tokenizer.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.tokenize"")&#010; public class TokenizeLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/XMLTokenizeLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/XMLTokenizeLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/XMLTokenizeLanguageAutoConfiguration.java&#010;index d346612..52ca01e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/XMLTokenizeLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/XMLTokenizeLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.tokenizer.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.tokenizer.XMLTokenizeLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(XMLTokenizeLanguageAutoConfiguration.Condition.class)&#010;@@ -71,6 +73,7 @@ public class XMLTokenizeLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/XMLTokenizeLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/XMLTokenizeLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/XMLTokenizeLanguageConfiguration.java&#010;index 10f37c7..0c00c48 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/XMLTokenizeLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/tokenizer/springboot/XMLTokenizeLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.tokenizer.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.xtokenize"")&#010; public class XMLTokenizeLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/XPathLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/XPathLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/XPathLanguageAutoConfiguration.java&#010;index dc8526d..30b2c06 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/XPathLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/XPathLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.xpath.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.xpath.XPathLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(XPathLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class XPathLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/XPathLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/XPathLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/XPathLanguageConfiguration.java&#010;index efa0046..ae8e690 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/XPathLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/xpath/springboot/XPathLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.xpath.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.xpath"")&#010; public class XPathLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ConsulServiceCallServiceDiscoveryConfigurationCommon.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ConsulServiceCallServiceDiscoveryConfigurationCommon.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ConsulServiceCallServiceDiscoveryConfigurationCommon.java&#010;index cc8ae52..f0212f7 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ConsulServiceCallServiceDiscoveryConfigurationCommon.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ConsulServiceCallServiceDiscoveryConfigurationCommon.java&#010;@@ -17,10 +17,12 @@&#010; package org.apache.camel.model.cloud.springboot;&#010; &#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; &#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; public class ConsulServiceCallServiceDiscoveryConfigurationCommon {&#010; &#010;     /**&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ConsulServiceCallServiceDiscoveryConfigurationProperties.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ConsulServiceCallServiceDiscoveryConfigurationProperties.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ConsulServiceCallServiceDiscoveryConfigurationProperties.java&#010;index 57d2588..3df09fb 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ConsulServiceCallServiceDiscoveryConfigurationProperties.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/ConsulServiceCallServiceDiscoveryConfigurationProperties.java&#010;@@ -18,8 +18,10 @@ package org.apache.camel.model.cloud.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.cloud.consul.service-discovery"")&#010; public class ConsulServiceCallServiceDiscoveryConfigurationProperties&#010;         extends&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/DnsServiceCallServiceDiscoveryConfigurationCommon.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/DnsServiceCallServiceDiscoveryConfigurationCommon.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/DnsServiceCallServiceDiscoveryConfigurationCommon.java&#010;index 42fe393..8a9bc7a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/DnsServiceCallServiceDiscoveryConfigurationCommon.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/DnsServiceCallServiceDiscoveryConfigurationCommon.java&#010;@@ -17,10 +17,12 @@&#010; package org.apache.camel.model.cloud.springboot;&#010; &#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; &#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; public class DnsServiceCallServiceDiscoveryConfigurationCommon {&#010; &#010;     /**&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/DnsServiceCallServiceDiscoveryConfigurationProperties.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/DnsServiceCallServiceDiscoveryConfigurationProperties.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/DnsServiceCallServiceDiscoveryConfigurationProperties.java&#010;index 76f9c7a..1d83f91 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/DnsServiceCallServiceDiscoveryConfigurationProperties.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/DnsServiceCallServiceDiscoveryConfigurationProperties.java&#010;@@ -18,8 +18,10 @@ package org.apache.camel.model.cloud.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.cloud.dns.service-discovery"")&#010; public class DnsServiceCallServiceDiscoveryConfigurationProperties&#010;         extends&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/EtcdServiceCallServiceDiscoveryConfigurationCommon.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/EtcdServiceCallServiceDiscoveryConfigurationCommon.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/EtcdServiceCallServiceDiscoveryConfigurationCommon.java&#010;index 0109284..4f7f946 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/EtcdServiceCallServiceDiscoveryConfigurationCommon.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/EtcdServiceCallServiceDiscoveryConfigurationCommon.java&#010;@@ -17,10 +17,12 @@&#010; package org.apache.camel.model.cloud.springboot;&#010; &#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; &#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; public class EtcdServiceCallServiceDiscoveryConfigurationCommon {&#010; &#010;     /**&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/EtcdServiceCallServiceDiscoveryConfigurationProperties.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/EtcdServiceCallServiceDiscoveryConfigurationProperties.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/EtcdServiceCallServiceDiscoveryConfigurationProperties.java&#010;index 9d6353d..357863d 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/EtcdServiceCallServiceDiscoveryConfigurationProperties.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/EtcdServiceCallServiceDiscoveryConfigurationProperties.java&#010;@@ -18,8 +18,10 @@ package org.apache.camel.model.cloud.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.cloud.etcd.service-discovery"")&#010; public class EtcdServiceCallServiceDiscoveryConfigurationProperties&#010;         extends&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/KubernetesServiceCallServiceDiscoveryConfigurationCommon.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/KubernetesServiceCallServiceDiscoveryConfigurationCommon.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/KubernetesServiceCallServiceDiscoveryConfigurationCommon.java&#010;index 5ffac09..cdfd5a9 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/KubernetesServiceCallServiceDiscoveryConfigurationCommon.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/KubernetesServiceCallServiceDiscoveryConfigurationCommon.java&#010;@@ -17,10 +17,12 @@&#010; package org.apache.camel.model.cloud.springboot;&#010; &#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; &#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; public class KubernetesServiceCallServiceDiscoveryConfigurationCommon {&#010; &#010;     /**&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/KubernetesServiceCallServiceDiscoveryConfigurationProperties.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/KubernetesServiceCallServiceDiscoveryConfigurationProperties.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/KubernetesServiceCallServiceDiscoveryConfigurationProperties.java&#010;index 4807d33..76db8f9 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/KubernetesServiceCallServiceDiscoveryConfigurationProperties.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/KubernetesServiceCallServiceDiscoveryConfigurationProperties.java&#010;@@ -18,8 +18,10 @@ package org.apache.camel.model.cloud.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.cloud.kubernetes.service-discovery"")&#010; public class KubernetesServiceCallServiceDiscoveryConfigurationProperties&#010;         extends&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationCommon.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationCommon.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationCommon.java&#010;index d45c3cc..d25dc3d 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationCommon.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationCommon.java&#010;@@ -17,10 +17,12 @@&#010; package org.apache.camel.model.cloud.springboot;&#010; &#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; &#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; public class RibbonServiceCallLoadBalancerConfigurationCommon {&#010; &#010;     /**&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationProperties.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationProperties.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationProperties.java&#010;index a826984..d0f230a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationProperties.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationProperties.java&#010;@@ -18,8 +18,10 @@ package org.apache.camel.model.cloud.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.cloud.ribbon.load-balancer"")&#010; public class RibbonServiceCallLoadBalancerConfigurationProperties&#010;         extends&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.java&#010;index 3ea9cbe..067858c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/RestConfigurationDefinitionAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.model.rest.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.model.rest.RestConstants;&#010; import org.apache.camel.spi.RestConfiguration;&#010;@@ -36,6 +37,7 @@ import org.springframework.context.annotation.Lazy;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @ConditionalOnProperty(name = ""camel.rest.enabled"", matchIfMissing = true)&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/RestConfigurationDefinitionProperties.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/RestConfigurationDefinitionProperties.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/RestConfigurationDefinitionProperties.java&#010;index ec134c2..174134e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/RestConfigurationDefinitionProperties.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/rest/springboot/RestConfigurationDefinitionProperties.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.model.rest.springboot;&#010; &#010; import java.util.List;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.model.rest.RestBindingMode;&#010; import org.apache.camel.model.rest.RestHostNameResolver;&#010; import org.apache.camel.model.rest.RestPropertyDefinition;&#010;@@ -27,6 +28,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.rest"")&#010; public class RestConfigurationDefinitionProperties {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/HystrixConfigurationDefinitionCommon.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/HystrixConfigurationDefinitionCommon.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/HystrixConfigurationDefinitionCommon.java&#010;index 7947788..acf095b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/HystrixConfigurationDefinitionCommon.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/HystrixConfigurationDefinitionCommon.java&#010;@@ -15,11 +15,15 @@&#010;  * limitations under the License.&#010;  */&#010; package org.apache.camel.model.springboot;&#010;+&#010;+import javax.annotation.Generated;&#010;+&#010; /**&#010;  * Hystrix Circuit Breaker EIP configuration&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; public class HystrixConfigurationDefinitionCommon {&#010; &#010;     /**&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/HystrixConfigurationDefinitionProperties.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/HystrixConfigurationDefinitionProperties.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/HystrixConfigurationDefinitionProperties.java&#010;index 5cf7c99..706b8a7 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/HystrixConfigurationDefinitionProperties.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/springboot/HystrixConfigurationDefinitionProperties.java&#010;@@ -18,8 +18,10 @@ package org.apache.camel.model.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.hystrix"")&#010; public class HystrixConfigurationDefinitionProperties&#010;         extends&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-couchbase-starter/src/main/java/org/apache/camel/component/couchbase/springboot/CouchbaseComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-couchbase-starter/src/main/java/org/apache/camel/component/couchbase/springboot/CouchbaseComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-couchbase-starter/src/main/java/org/apache/camel/component/couchbase/springboot/CouchbaseComponentAutoConfiguration.java&#010;index e9bdd3b..2c5f4c8 100644&#010;--- a/platforms/spring-boot/components-starter/camel-couchbase-starter/src/main/java/org/apache/camel/component/couchbase/springboot/CouchbaseComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-couchbase-starter/src/main/java/org/apache/camel/component/couchbase/springboot/CouchbaseComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.couchbase.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.couchbase.CouchbaseComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(CouchbaseComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class CouchbaseComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-couchdb-starter/src/main/java/org/apache/camel/component/couchdb/springboot/CouchDbComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-couchdb-starter/src/main/java/org/apache/camel/component/couchdb/springboot/CouchDbComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-couchdb-starter/src/main/java/org/apache/camel/component/couchdb/springboot/CouchDbComponentAutoConfiguration.java&#010;index e5ebbc6..dbd2332 100644&#010;--- a/platforms/spring-boot/components-starter/camel-couchdb-starter/src/main/java/org/apache/camel/component/couchdb/springboot/CouchDbComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-couchdb-starter/src/main/java/org/apache/camel/component/couchdb/springboot/CouchDbComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.couchdb.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.couchdb.CouchDbComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(CouchDbComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class CouchDbComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/DigitalSignatureComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/DigitalSignatureComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/DigitalSignatureComponentAutoConfiguration.java&#010;index 59a7117..403dbeb 100644&#010;--- a/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/DigitalSignatureComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/DigitalSignatureComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.crypto.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.crypto.DigitalSignatureComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(DigitalSignatureComponentAutoConfiguration.Condition.class)&#010;@@ -85,6 +87,7 @@ public class DigitalSignatureComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/DigitalSignatureComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/DigitalSignatureComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/DigitalSignatureComponentConfiguration.java&#010;index 34a0e4c..8c314a6 100644&#010;--- a/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/DigitalSignatureComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/component/crypto/springboot/DigitalSignatureComponentConfiguration.java&#010;@@ -21,6 +21,7 @@ import java.security.PrivateKey;&#010; import java.security.PublicKey;&#010; import java.security.SecureRandom;&#010; import java.security.cert.Certificate;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.crypto.CryptoOperation;&#010; import org.apache.camel.util.jsse.KeyStoreParameters;&#010;@@ -33,6 +34,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.crypto"")&#010; public class DigitalSignatureComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/CryptoDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/CryptoDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/CryptoDataFormatAutoConfiguration.java&#010;index 4b13322..62d9a5f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/CryptoDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/CryptoDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.converter.crypto.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(CryptoDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class CryptoDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/CryptoDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/CryptoDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/CryptoDataFormatConfiguration.java&#010;index 867db4b..855c3dd 100644&#010;--- a/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/CryptoDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/CryptoDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.converter.crypto.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.crypto"")&#010; public class CryptoDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/PGPDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/PGPDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/PGPDataFormatAutoConfiguration.java&#010;index 8dd787a..7b0d209 100644&#010;--- a/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/PGPDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/PGPDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.converter.crypto.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(PGPDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class PGPDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/PGPDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/PGPDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/PGPDataFormatConfiguration.java&#010;index 4e39f7f..5f55ec7 100644&#010;--- a/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/PGPDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-crypto-starter/src/main/java/org/apache/camel/converter/crypto/springboot/PGPDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.converter.crypto.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.pgp"")&#010; public class PGPDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/CsvDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/CsvDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/CsvDataFormatAutoConfiguration.java&#010;index 0eccf24..6845752 100644&#010;--- a/platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/CsvDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/CsvDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.csv.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(CsvDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class CsvDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/CsvDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/CsvDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/CsvDataFormatConfiguration.java&#010;index bf5f8c4..0d08c6f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/CsvDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-csv-starter/src/main/java/org/apache/camel/dataformat/csv/springboot/CsvDataFormatConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.dataformat.csv.springboot;&#010; &#010; import java.util.List;&#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.csv"")&#010; public class CsvDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/CxfRsComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/CxfRsComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/CxfRsComponentAutoConfiguration.java&#010;index 370db9a..395254b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/CxfRsComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/CxfRsComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.cxf.jaxrs.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.cxf.jaxrs.CxfRsComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(CxfRsComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class CxfRsComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/CxfRsComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/CxfRsComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/CxfRsComponentConfiguration.java&#010;index 3667f87..8f2d390 100644&#010;--- a/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/CxfRsComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/jaxrs/springboot/CxfRsComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.cxf.jaxrs.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.spi.HeaderFilterStrategy;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.cxfrs"")&#010; public class CxfRsComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/CxfComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/CxfComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/CxfComponentAutoConfiguration.java&#010;index 1a569d1..f0d939a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/CxfComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/CxfComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.cxf.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.cxf.CxfComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(CxfComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class CxfComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/CxfComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/CxfComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/CxfComponentConfiguration.java&#010;index 740acf0..7d7d474 100644&#010;--- a/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/CxfComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-cxf-starter/src/main/java/org/apache/camel/component/cxf/springboot/CxfComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.cxf.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.spi.HeaderFilterStrategy;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.cxf"")&#010; public class CxfComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-digitalocean-starter/src/main/java/org/apache/camel/component/digitalocean/springboot/DigitalOceanComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-digitalocean-starter/src/main/java/org/apache/camel/component/digitalocean/springboot/DigitalOceanComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-digitalocean-starter/src/main/java/org/apache/camel/component/digitalocean/springboot/DigitalOceanComponentAutoConfiguration.java&#010;index c095a33..d9995b3 100644&#010;--- a/platforms/spring-boot/components-starter/camel-digitalocean-starter/src/main/java/org/apache/camel/component/digitalocean/springboot/DigitalOceanComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-digitalocean-starter/src/main/java/org/apache/camel/component/digitalocean/springboot/DigitalOceanComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.digitalocean.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.digitalocean.DigitalOceanComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(DigitalOceanComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class DigitalOceanComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/DisruptorComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/DisruptorComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/DisruptorComponentAutoConfiguration.java&#010;index 2ede6c8..9e25274 100644&#010;--- a/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/DisruptorComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/DisruptorComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.disruptor.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.disruptor.DisruptorComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(DisruptorComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class DisruptorComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/DisruptorComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/DisruptorComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/DisruptorComponentConfiguration.java&#010;index cea8f0c..4456cf0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/DisruptorComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/springboot/DisruptorComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.disruptor.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.disruptor.DisruptorComponent;&#010; import org.apache.camel.component.disruptor.DisruptorProducerType;&#010; import org.apache.camel.component.disruptor.DisruptorWaitStrategy;&#010;@@ -28,6 +29,7 @@ import org.springframework.boot.context.properties.DeprecatedConfigurationProper&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.disruptor"")&#010; public class DisruptorComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/DisruptorVmComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/DisruptorVmComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/DisruptorVmComponentAutoConfiguration.java&#010;index 6b9fc29..bd68968 100644&#010;--- a/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/DisruptorVmComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/DisruptorVmComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.disruptor.vm.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.disruptor.vm.DisruptorVmComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(DisruptorVmComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class DisruptorVmComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/DisruptorVmComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/DisruptorVmComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/DisruptorVmComponentConfiguration.java&#010;index 3c025af..ca9bac0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/DisruptorVmComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-disruptor-starter/src/main/java/org/apache/camel/component/disruptor/vm/springboot/DisruptorVmComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.disruptor.vm.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.disruptor.DisruptorProducerType;&#010; import org.apache.camel.component.disruptor.DisruptorWaitStrategy;&#010; import org.apache.camel.component.disruptor.vm.DisruptorVmComponent;&#010;@@ -28,6 +29,7 @@ import org.springframework.boot.context.properties.DeprecatedConfigurationProper&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.disruptor-vm"")&#010; public class DisruptorVmComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-dns-starter/src/main/java/org/apache/camel/component/dns/springboot/DnsComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-dns-starter/src/main/java/org/apache/camel/component/dns/springboot/DnsComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-dns-starter/src/main/java/org/apache/camel/component/dns/springboot/DnsComponentAutoConfiguration.java&#010;index 5925f5e..c5006a3 100644&#010;--- a/platforms/spring-boot/components-starter/camel-dns-starter/src/main/java/org/apache/camel/component/dns/springboot/DnsComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-dns-starter/src/main/java/org/apache/camel/component/dns/springboot/DnsComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.dns.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.dns.DnsComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(DnsComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class DnsComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/DockerComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/DockerComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/DockerComponentAutoConfiguration.java&#010;index 4412ce2..29c7f7a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/DockerComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/DockerComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.docker.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.docker.DockerComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(DockerComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class DockerComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/DockerComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/DockerComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/DockerComponentConfiguration.java&#010;index b788091..5c55879 100644&#010;--- a/platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/DockerComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-docker-starter/src/main/java/org/apache/camel/component/docker/springboot/DockerComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.docker.springboot;&#010; &#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.docker.DockerOperation;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.docker"")&#010; public class DockerComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-dozer-starter/src/main/java/org/apache/camel/component/dozer/springboot/DozerComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-dozer-starter/src/main/java/org/apache/camel/component/dozer/springboot/DozerComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-dozer-starter/src/main/java/org/apache/camel/component/dozer/springboot/DozerComponentAutoConfiguration.java&#010;index df0348d..21d94c0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-dozer-starter/src/main/java/org/apache/camel/component/dozer/springboot/DozerComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-dozer-starter/src/main/java/org/apache/camel/component/dozer/springboot/DozerComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.dozer.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.dozer.DozerComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(DozerComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class DozerComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-drill-starter/src/main/java/org/apache/camel/component/drill/springboot/DrillComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-drill-starter/src/main/java/org/apache/camel/component/drill/springboot/DrillComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-drill-starter/src/main/java/org/apache/camel/component/drill/springboot/DrillComponentAutoConfiguration.java&#010;index fdfdc09..e0c8b63 100644&#010;--- a/platforms/spring-boot/components-starter/camel-drill-starter/src/main/java/org/apache/camel/component/drill/springboot/DrillComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-drill-starter/src/main/java/org/apache/camel/component/drill/springboot/DrillComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.drill.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.drill.DrillComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(DrillComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class DrillComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-dropbox-starter/src/main/java/org/apache/camel/component/dropbox/springboot/DropboxComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-dropbox-starter/src/main/java/org/apache/camel/component/dropbox/springboot/DropboxComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-dropbox-starter/src/main/java/org/apache/camel/component/dropbox/springboot/DropboxComponentAutoConfiguration.java&#010;index 53b7c8a..9d498f0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-dropbox-starter/src/main/java/org/apache/camel/component/dropbox/springboot/DropboxComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-dropbox-starter/src/main/java/org/apache/camel/component/dropbox/springboot/DropboxComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.dropbox.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.dropbox.DropboxComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(DropboxComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class DropboxComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ehcache-starter/src/main/java/org/apache/camel/component/ehcache/springboot/EhcacheComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ehcache-starter/src/main/java/org/apache/camel/component/ehcache/springboot/EhcacheComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-ehcache-starter/src/main/java/org/apache/camel/component/ehcache/springboot/EhcacheComponentAutoConfiguration.java&#010;index 00e8355..ece5cf2 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ehcache-starter/src/main/java/org/apache/camel/component/ehcache/springboot/EhcacheComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ehcache-starter/src/main/java/org/apache/camel/component/ehcache/springboot/EhcacheComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.ehcache.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.ehcache.EhcacheComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(EhcacheComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class EhcacheComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/ElasticsearchComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/ElasticsearchComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/ElasticsearchComponentAutoConfiguration.java&#010;index 3d1cade..d8cf1b7 100644&#010;--- a/platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/ElasticsearchComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/ElasticsearchComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.elasticsearch.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.elasticsearch.ElasticsearchComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ElasticsearchComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class ElasticsearchComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/ElasticsearchComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/ElasticsearchComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/ElasticsearchComponentConfiguration.java&#010;index 50fb329..830b97e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/ElasticsearchComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-elasticsearch-starter/src/main/java/org/apache/camel/component/elasticsearch/springboot/ElasticsearchComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.elasticsearch.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.elasticsearch.client.Client;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.elasticsearch"")&#010; public class ElasticsearchComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-elasticsearch5-starter/src/main/java/org/apache/camel/component/elasticsearch5/springboot/ElasticsearchComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-elasticsearch5-starter/src/main/java/org/apache/camel/component/elasticsearch5/springboot/ElasticsearchComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-elasticsearch5-starter/src/main/java/org/apache/camel/component/elasticsearch5/springboot/ElasticsearchComponentAutoConfiguration.java&#010;index 3e9a70b..34cfc66 100644&#010;--- a/platforms/spring-boot/components-starter/camel-elasticsearch5-starter/src/main/java/org/apache/camel/component/elasticsearch5/springboot/ElasticsearchComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-elasticsearch5-starter/src/main/java/org/apache/camel/component/elasticsearch5/springboot/ElasticsearchComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.elasticsearch5.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.elasticsearch5.ElasticsearchComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ElasticsearchComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class ElasticsearchComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cba063c0840a44aa5902d9ed7d584880a%40git.apache.org%3E,2017-04-19 08:35:54,commits,393.0,  [09/13] camel git commit: CAMEL-11165 Add @Generated annotation to code g...
240,240,196.0,394.0,zregv...@apache.org,"http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataset/springboot/DataSetComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataset/springboot/DataSetComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataset/springboot/DataSetComponentAutoConfiguration.java&#010;index e3d205c..98405d6 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataset/springboot/DataSetComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataset/springboot/DataSetComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.dataset.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.dataset.DataSetComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(DataSetComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class DataSetComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/DirectComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/DirectComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/DirectComponentAutoConfiguration.java&#010;index 07aa4d9..fd59a16 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/DirectComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/DirectComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.direct.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.direct.DirectComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(DirectComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class DirectComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/DirectComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/DirectComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/DirectComponentConfiguration.java&#010;index 5110239..4ba792c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/DirectComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/direct/springboot/DirectComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.direct.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.direct"")&#010; public class DirectComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/DirectVmComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/DirectVmComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/DirectVmComponentAutoConfiguration.java&#010;index 33a1e2a..bb636d1 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/DirectVmComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/DirectVmComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.directvm.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.directvm.DirectVmComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(DirectVmComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class DirectVmComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/DirectVmComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/DirectVmComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/DirectVmComponentConfiguration.java&#010;index 2f4383b..ae30a25 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/DirectVmComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/directvm/springboot/DirectVmComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.directvm.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.spi.HeaderFilterStrategy;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.direct-vm"")&#010; public class DirectVmComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/file/springboot/FileComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/file/springboot/FileComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/file/springboot/FileComponentAutoConfiguration.java&#010;index 8b82256..4558d3b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/file/springboot/FileComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/file/springboot/FileComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.file.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.file.FileComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(FileComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class FileComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/language/springboot/LanguageComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/language/springboot/LanguageComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/language/springboot/LanguageComponentAutoConfiguration.java&#010;index a67110a..6980be2 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/language/springboot/LanguageComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/language/springboot/LanguageComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.language.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.language.LanguageComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(LanguageComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class LanguageComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/LogComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/LogComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/LogComponentAutoConfiguration.java&#010;index 5a95fce..cb885fa 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/LogComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/LogComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.log.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.log.LogComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(LogComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class LogComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/LogComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/LogComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/LogComponentConfiguration.java&#010;index 22b2301..5318bc7 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/LogComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/log/springboot/LogComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.log.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.spi.ExchangeFormatter;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.log"")&#010; public class LogComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/mock/springboot/MockComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/mock/springboot/MockComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/mock/springboot/MockComponentAutoConfiguration.java&#010;index 73167f4..dc9389f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/mock/springboot/MockComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/mock/springboot/MockComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.mock.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.mock.MockComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(MockComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class MockComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/PropertiesComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/PropertiesComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/PropertiesComponentAutoConfiguration.java&#010;index a6ee450..b1d0e85 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/PropertiesComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/PropertiesComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.properties.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.properties.PropertiesComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(PropertiesComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class PropertiesComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/PropertiesComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/PropertiesComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/PropertiesComponentConfiguration.java&#010;index fcb8096..b62dc67 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/PropertiesComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/properties/springboot/PropertiesComponentConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.properties.springboot;&#010; &#010; import java.util.List;&#010; import java.util.Properties;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.properties.PropertiesLocation;&#010; import org.apache.camel.component.properties.PropertiesParser;&#010; import org.apache.camel.component.properties.PropertiesResolver;&#010;@@ -30,6 +31,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.properties"")&#010; public class PropertiesComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/ref/springboot/RefComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/ref/springboot/RefComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/ref/springboot/RefComponentAutoConfiguration.java&#010;index c30907a..270d960 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/ref/springboot/RefComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/ref/springboot/RefComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.ref.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.ref.RefComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(RefComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class RefComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/RestApiComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/RestApiComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/RestApiComponentAutoConfiguration.java&#010;index 2567fb7..c113cce 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/RestApiComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/RestApiComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.rest.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.rest.RestApiComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(RestApiComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class RestApiComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/RestComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/RestComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/RestComponentAutoConfiguration.java&#010;index 7fb213b..e99b813 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/RestComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/RestComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.rest.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.rest.RestComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(RestComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class RestComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/RestComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/RestComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/RestComponentConfiguration.java&#010;index 03c6870..ce06f5e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/RestComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/rest/springboot/RestComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.rest.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.rest"")&#010; public class RestComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/SchedulerComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/SchedulerComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/SchedulerComponentAutoConfiguration.java&#010;index 7521585..5ebf274 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/SchedulerComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/SchedulerComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.scheduler.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.scheduler.SchedulerComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SchedulerComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class SchedulerComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/SchedulerComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/SchedulerComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/SchedulerComponentConfiguration.java&#010;index f186f9c..60d0e61 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/SchedulerComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/scheduler/springboot/SchedulerComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.scheduler.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.scheduler"")&#010; public class SchedulerComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/SedaComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/SedaComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/SedaComponentAutoConfiguration.java&#010;index 60ce140..acd3d48 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/SedaComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/SedaComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.seda.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.seda.SedaComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SedaComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class SedaComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/SedaComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/SedaComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/SedaComponentConfiguration.java&#010;index 761d7af..456ad90 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/SedaComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/seda/springboot/SedaComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.seda.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.Exchange;&#010; import org.apache.camel.component.seda.BlockingQueueFactory;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -27,6 +28,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.seda"")&#010; public class SedaComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/StubComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/StubComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/StubComponentAutoConfiguration.java&#010;index 5b75ade..fe4dcf5 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/StubComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/StubComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.stub.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.stub.StubComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(StubComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class StubComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/StubComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/StubComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/StubComponentConfiguration.java&#010;index bf9a6d0..a3a027f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/StubComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/stub/springboot/StubComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.stub.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.Exchange;&#010; import org.apache.camel.component.seda.BlockingQueueFactory;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -27,6 +28,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.stub"")&#010; public class StubComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/test/springboot/TestComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/test/springboot/TestComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/test/springboot/TestComponentAutoConfiguration.java&#010;index fe4f022..12f253b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/test/springboot/TestComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/test/springboot/TestComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.test.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.test.TestComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(TestComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class TestComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/timer/springboot/TimerComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/timer/springboot/TimerComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/timer/springboot/TimerComponentAutoConfiguration.java&#010;index e65f565..e26ba57 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/timer/springboot/TimerComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/timer/springboot/TimerComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.timer.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.timer.TimerComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(TimerComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class TimerComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/ValidatorComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/ValidatorComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/ValidatorComponentAutoConfiguration.java&#010;index 0f0bf25..c97549c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/ValidatorComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/ValidatorComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.validator.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.validator.ValidatorComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ValidatorComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class ValidatorComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/ValidatorComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/ValidatorComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/ValidatorComponentConfiguration.java&#010;index 1e607af..49ee967 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/ValidatorComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/validator/springboot/ValidatorComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.validator.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.validator.ValidatorResourceResolverFactory;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.validator"")&#010; public class ValidatorComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/VmComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/VmComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/VmComponentAutoConfiguration.java&#010;index 4761f78..fb19cf1 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/VmComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/VmComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.vm.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.vm.VmComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(VmComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class VmComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/VmComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/VmComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/VmComponentConfiguration.java&#010;index 3ac9f03..c1ad19d 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/VmComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/vm/springboot/VmComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.vm.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.Exchange;&#010; import org.apache.camel.component.seda.BlockingQueueFactory;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -27,6 +28,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.vm"")&#010; public class VmComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/XsltComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/XsltComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/XsltComponentAutoConfiguration.java&#010;index ce4e9f7..10d3ba3 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/XsltComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/XsltComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.xslt.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.xslt.XsltComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(XsltComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class XsltComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/XsltComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/XsltComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/XsltComponentConfiguration.java&#010;index 040e229..2fbcb14 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/XsltComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/xslt/springboot/XsltComponentConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.xslt.springboot;&#010; &#010; import java.util.List;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import javax.xml.parsers.DocumentBuilderFactory;&#010; import javax.xml.transform.TransformerFactory;&#010; import javax.xml.transform.URIResolver;&#010;@@ -30,6 +31,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.xslt"")&#010; public class XsltComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/GzipDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/GzipDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/GzipDataFormatAutoConfiguration.java&#010;index 81c052e..229aaf3 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/GzipDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/GzipDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.impl.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(GzipDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class GzipDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/GzipDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/GzipDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/GzipDataFormatConfiguration.java&#010;index 4953a5c..3eee5db 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/GzipDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/GzipDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.impl.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.gzip"")&#010; public class GzipDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/SerializationDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/SerializationDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/SerializationDataFormatAutoConfiguration.java&#010;index 27f6dbb..149119f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/SerializationDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/SerializationDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.impl.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SerializationDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class SerializationDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/SerializationDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/SerializationDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/SerializationDataFormatConfiguration.java&#010;index 5cf28d4..4492282 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/SerializationDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/SerializationDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.impl.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.serialization"")&#010; public class SerializationDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/StringDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/StringDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/StringDataFormatAutoConfiguration.java&#010;index d699e97..087a643 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/StringDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/StringDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.impl.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(StringDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class StringDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/StringDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/StringDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/StringDataFormatConfiguration.java&#010;index aeccfac..64c4ed7 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/StringDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/StringDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.impl.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.string"")&#010; public class StringDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/ZipDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/ZipDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/ZipDataFormatAutoConfiguration.java&#010;index 26ea5fe..653b189 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/ZipDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/ZipDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.impl.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ZipDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class ZipDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/ZipDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/ZipDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/ZipDataFormatConfiguration.java&#010;index 401acb9..6a3a6ba 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/ZipDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/impl/springboot/ZipDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.impl.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.zip"")&#010; public class ZipDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/BeanLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/BeanLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/BeanLanguageAutoConfiguration.java&#010;index 6f93fd8..810bd2d 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/BeanLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/BeanLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.bean.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.bean.BeanLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BeanLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class BeanLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/BeanLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/BeanLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/BeanLanguageConfiguration.java&#010;index b39a7ac..aa65384 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/BeanLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/bean/springboot/BeanLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.bean.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.bean"")&#010; public class BeanLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/ConstantLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/ConstantLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/ConstantLanguageAutoConfiguration.java&#010;index 50a4b7a..a5a00d4 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/ConstantLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/ConstantLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.constant.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.constant.ConstantLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ConstantLanguageAutoConfiguration.Condition.class)&#010;@@ -71,6 +73,7 @@ public class ConstantLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/ConstantLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/ConstantLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/ConstantLanguageConfiguration.java&#010;index cec0509..7d0ad77 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/ConstantLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/constant/springboot/ConstantLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.constant.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.constant"")&#010; public class ConstantLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/HeaderLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/HeaderLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/HeaderLanguageAutoConfiguration.java&#010;index d49c098..0d75034 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/HeaderLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/HeaderLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.header.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.header.HeaderLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(HeaderLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class HeaderLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/HeaderLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/HeaderLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/HeaderLanguageConfiguration.java&#010;index bf00d3a..6a3d67a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/HeaderLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/header/springboot/HeaderLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.header.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.header"")&#010; public class HeaderLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/ExchangePropertyLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/ExchangePropertyLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/ExchangePropertyLanguageAutoConfiguration.java&#010;index e4456cb..15e1508 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/ExchangePropertyLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/ExchangePropertyLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.property.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.property.ExchangePropertyLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ExchangePropertyLanguageAutoConfiguration.Condition.class)&#010;@@ -73,6 +75,7 @@ public class ExchangePropertyLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/ExchangePropertyLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/ExchangePropertyLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/ExchangePropertyLanguageConfiguration.java&#010;index ef7a21c..8e58600 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/ExchangePropertyLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/property/springboot/ExchangePropertyLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.property.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.exchangeproperty"")&#010; public class ExchangePropertyLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/RefLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/RefLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/RefLanguageAutoConfiguration.java&#010;index 4c64f98..f73dffe 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/RefLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/RefLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.ref.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.ref.RefLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(RefLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class RefLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/RefLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/RefLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/RefLanguageConfiguration.java&#010;index 7893b91..f1fbc7e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/RefLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/ref/springboot/RefLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.ref.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.ref"")&#010; public class RefLanguageConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/FileLanguageAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/FileLanguageAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/FileLanguageAutoConfiguration.java&#010;index 4891f8a..1345dc8 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/FileLanguageAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/FileLanguageAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.language.simple.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.language.simple.FileLanguage;&#010;@@ -41,6 +42,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(FileLanguageAutoConfiguration.Condition.class)&#010;@@ -70,6 +72,7 @@ public class FileLanguageAutoConfiguration {&#010;         return language;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/FileLanguageConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/FileLanguageConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/FileLanguageConfiguration.java&#010;index f80a9e4..13f0756 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/FileLanguageConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/language/simple/springboot/FileLanguageConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.language.simple.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.language.file"")&#010; public class FileLanguageConfiguration {&#010; &#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cc306b1f3c4214122ace43dc8d3f23170%40git.apache.org%3E,2017-04-19 08:35:55,commits,394.0,  [10/13] camel git commit: CAMEL-11165 Add @Generated annotation to code g...
241,241,197.0,395.0,zregv...@apache.org,"http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/swf/springboot/SWFComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/swf/springboot/SWFComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/swf/springboot/SWFComponentAutoConfiguration.java&#010;index 41c5993..a2f24ce 100644&#010;--- a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/swf/springboot/SWFComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/swf/springboot/SWFComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.aws.swf.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.aws.swf.SWFComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SWFComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class SWFComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/blob/springboot/BlobServiceComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/blob/springboot/BlobServiceComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/blob/springboot/BlobServiceComponentAutoConfiguration.java&#010;index fdb4dfc..5e8ee71 100644&#010;--- a/platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/blob/springboot/BlobServiceComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/blob/springboot/BlobServiceComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.azure.blob.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.azure.blob.BlobServiceComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BlobServiceComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class BlobServiceComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/queue/springboot/QueueServiceComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/queue/springboot/QueueServiceComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/queue/springboot/QueueServiceComponentAutoConfiguration.java&#010;index a929af0..691ab09 100644&#010;--- a/platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/queue/springboot/QueueServiceComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-azure-starter/src/main/java/org/apache/camel/component/azure/queue/springboot/QueueServiceComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.azure.queue.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.azure.queue.QueueServiceComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(QueueServiceComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class QueueServiceComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/BarcodeDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/BarcodeDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/BarcodeDataFormatAutoConfiguration.java&#010;index ce76822..d7cafd9 100644&#010;--- a/platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/BarcodeDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/BarcodeDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.barcode.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BarcodeDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class BarcodeDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/BarcodeDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/BarcodeDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/BarcodeDataFormatConfiguration.java&#010;index 1cdb0c1..d8539be 100644&#010;--- a/platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/BarcodeDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-barcode-starter/src/main/java/org/apache/camel/dataformat/barcode/springboot/BarcodeDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.barcode.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.barcode"")&#010; public class BarcodeDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/Base64DataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/Base64DataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/Base64DataFormatAutoConfiguration.java&#010;index 11b6c7a..f0b1387 100644&#010;--- a/platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/Base64DataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/Base64DataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.base64.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(Base64DataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class Base64DataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/Base64DataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/Base64DataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/Base64DataFormatConfiguration.java&#010;index 26bda5e..e0d52d3 100644&#010;--- a/platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/Base64DataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-base64-starter/src/main/java/org/apache/camel/dataformat/base64/springboot/Base64DataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.base64.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.base64"")&#010; public class Base64DataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-bean-validator-starter/src/main/java/org/apache/camel/component/bean/validator/springboot/BeanValidatorComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-bean-validator-starter/src/main/java/org/apache/camel/component/bean/validator/springboot/BeanValidatorComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-bean-validator-starter/src/main/java/org/apache/camel/component/bean/validator/springboot/BeanValidatorComponentAutoConfiguration.java&#010;index 2aef002..731fb15 100644&#010;--- a/platforms/spring-boot/components-starter/camel-bean-validator-starter/src/main/java/org/apache/camel/component/bean/validator/springboot/BeanValidatorComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-bean-validator-starter/src/main/java/org/apache/camel/component/bean/validator/springboot/BeanValidatorComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.bean.validator.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.bean.validator.BeanValidatorComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BeanValidatorComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class BeanValidatorComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/BeanIODataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/BeanIODataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/BeanIODataFormatAutoConfiguration.java&#010;index dc93bab..04d3b3b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/BeanIODataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/BeanIODataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.beanio.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BeanIODataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class BeanIODataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/BeanIODataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/BeanIODataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/BeanIODataFormatConfiguration.java&#010;index 2f1922d..2a32468 100644&#010;--- a/platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/BeanIODataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-beanio-starter/src/main/java/org/apache/camel/dataformat/beanio/springboot/BeanIODataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.beanio.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.beanio"")&#010; public class BeanIODataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/BeanstalkComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/BeanstalkComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/BeanstalkComponentAutoConfiguration.java&#010;index 9f283d2..ed4684b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/BeanstalkComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/BeanstalkComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.beanstalk.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.beanstalk.BeanstalkComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BeanstalkComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class BeanstalkComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/BeanstalkComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/BeanstalkComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/BeanstalkComponentConfiguration.java&#010;index e4eaf7e..6aae498 100644&#010;--- a/platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/BeanstalkComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-beanstalk-starter/src/main/java/org/apache/camel/component/beanstalk/springboot/BeanstalkComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.beanstalk.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.beanstalk.ConnectionSettingsFactory;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.beanstalk"")&#010; public class BeanstalkComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/BindyCsvDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/BindyCsvDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/BindyCsvDataFormatAutoConfiguration.java&#010;index e2583ee..4ed920a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/BindyCsvDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/BindyCsvDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.bindy.csv.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BindyCsvDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class BindyCsvDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/BindyCsvDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/BindyCsvDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/BindyCsvDataFormatConfiguration.java&#010;index 8589bf0..5c3db44 100644&#010;--- a/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/BindyCsvDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/csv/springboot/BindyCsvDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.bindy.csv.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.model.dataformat.BindyType;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.bindy-csv"")&#010; public class BindyCsvDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/BindyFixedLengthDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/BindyFixedLengthDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/BindyFixedLengthDataFormatAutoConfiguration.java&#010;index 64a547a..50cd7cf 100644&#010;--- a/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/BindyFixedLengthDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/BindyFixedLengthDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.bindy.fixed.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BindyFixedLengthDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class BindyFixedLengthDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/BindyFixedLengthDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/BindyFixedLengthDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/BindyFixedLengthDataFormatConfiguration.java&#010;index 91ef2f5..0292d8f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/BindyFixedLengthDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/fixed/springboot/BindyFixedLengthDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.bindy.fixed.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.model.dataformat.BindyType;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.bindy-fixed"")&#010; public class BindyFixedLengthDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/BindyKeyValuePairDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/BindyKeyValuePairDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/BindyKeyValuePairDataFormatAutoConfiguration.java&#010;index 733e14c..77de985 100644&#010;--- a/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/BindyKeyValuePairDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/BindyKeyValuePairDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.bindy.kvp.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BindyKeyValuePairDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class BindyKeyValuePairDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/BindyKeyValuePairDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/BindyKeyValuePairDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/BindyKeyValuePairDataFormatConfiguration.java&#010;index a26c9fa..f812e60 100644&#010;--- a/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/BindyKeyValuePairDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-bindy-starter/src/main/java/org/apache/camel/dataformat/bindy/kvp/springboot/BindyKeyValuePairDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.bindy.kvp.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.model.dataformat.BindyType;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.bindy-kvp"")&#010; public class BindyKeyValuePairDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/BonitaComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/BonitaComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/BonitaComponentAutoConfiguration.java&#010;index 776f6b2..8bfa8d8 100644&#010;--- a/platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/BonitaComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/BonitaComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.bonita.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.bonita.BonitaComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BonitaComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class BonitaComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/BoonDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/BoonDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/BoonDataFormatAutoConfiguration.java&#010;index 5d6702f..e4b60ac 100644&#010;--- a/platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/BoonDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/BoonDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.boon.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BoonDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class BoonDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/BoonDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/BoonDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/BoonDataFormatConfiguration.java&#010;index 9832694..0531b94 100644&#010;--- a/platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/BoonDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-boon-starter/src/main/java/org/apache/camel/component/boon/springboot/BoonDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.boon.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.boon"")&#010; public class BoonDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/BoxComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/BoxComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/BoxComponentAutoConfiguration.java&#010;index c71e9e1..d5e4c15 100644&#010;--- a/platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/BoxComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/BoxComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.box.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.box.BoxComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BoxComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class BoxComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/BoxComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/BoxComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/BoxComponentConfiguration.java&#010;index d60ba98..e65b88f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/BoxComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-box-starter/src/main/java/org/apache/camel/component/box/springboot/BoxComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.box.springboot;&#010; &#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import com.box.sdk.IAccessTokenCache;&#010; import org.apache.camel.component.box.internal.BoxApiName;&#010; import org.apache.camel.util.jsse.SSLContextParameters;&#010;@@ -29,6 +30,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.box"")&#010; public class BoxComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/BraintreeComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/BraintreeComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/BraintreeComponentAutoConfiguration.java&#010;index 9136399..74c6170 100644&#010;--- a/platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/BraintreeComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/BraintreeComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.braintree.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.braintree.BraintreeComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BraintreeComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class BraintreeComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/BraintreeComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/BraintreeComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/BraintreeComponentConfiguration.java&#010;index a040f05..036509e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/BraintreeComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-braintree-starter/src/main/java/org/apache/camel/component/braintree/springboot/BraintreeComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.braintree.springboot;&#010; &#010; import java.util.logging.Level;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.braintree.internal.BraintreeApiName;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.braintree"")&#010; public class BraintreeComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/CacheComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/CacheComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/CacheComponentAutoConfiguration.java&#010;index e2f577e..cb42905 100644&#010;--- a/platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/CacheComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/CacheComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.cache.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.cache.CacheComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(CacheComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class CacheComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/CacheComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/CacheComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/CacheComponentConfiguration.java&#010;index 1872e64..57a9ae5 100644&#010;--- a/platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/CacheComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-cache-starter/src/main/java/org/apache/camel/component/cache/springboot/CacheComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.cache.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import net.sf.ehcache.store.MemoryStoreEvictionPolicy;&#010; import org.apache.camel.component.cache.CacheEventListenerRegistry;&#010; import org.apache.camel.component.cache.CacheLoaderRegistry;&#010;@@ -30,6 +31,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.cache"")&#010; public class CacheComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-cassandraql-starter/src/main/java/org/apache/camel/component/cassandra/springboot/CassandraComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-cassandraql-starter/src/main/java/org/apache/camel/component/cassandra/springboot/CassandraComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-cassandraql-starter/src/main/java/org/apache/camel/component/cassandra/springboot/CassandraComponentAutoConfiguration.java&#010;index 40cb722..041ba28 100644&#010;--- a/platforms/spring-boot/components-starter/camel-cassandraql-starter/src/main/java/org/apache/camel/component/cassandra/springboot/CassandraComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-cassandraql-starter/src/main/java/org/apache/camel/component/cassandra/springboot/CassandraComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.cassandra.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.cassandra.CassandraComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(CassandraComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class CassandraComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/CastorDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/CastorDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/CastorDataFormatAutoConfiguration.java&#010;index f4588e1..22c6cb0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/CastorDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/CastorDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.castor.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(CastorDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class CastorDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/CastorDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/CastorDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/CastorDataFormatConfiguration.java&#010;index 7f566af..5eac61a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/CastorDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-castor-starter/src/main/java/org/apache/camel/dataformat/castor/springboot/CastorDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.castor.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.castor"")&#010; public class CastorDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-chronicle-starter/src/main/java/org/apache/camel/component/chronicle/engine/springboot/ChronicleEngineComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-chronicle-starter/src/main/java/org/apache/camel/component/chronicle/engine/springboot/ChronicleEngineComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-chronicle-starter/src/main/java/org/apache/camel/component/chronicle/engine/springboot/ChronicleEngineComponentAutoConfiguration.java&#010;index 416b32f..1cc30ab 100644&#010;--- a/platforms/spring-boot/components-starter/camel-chronicle-starter/src/main/java/org/apache/camel/component/chronicle/engine/springboot/ChronicleEngineComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-chronicle-starter/src/main/java/org/apache/camel/component/chronicle/engine/springboot/ChronicleEngineComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.chronicle.engine.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.chronicle.engine.ChronicleEngineComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ChronicleEngineComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class ChronicleEngineComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-chunk-starter/src/main/java/org/apache/camel/component/chunk/springboot/ChunkComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-chunk-starter/src/main/java/org/apache/camel/component/chunk/springboot/ChunkComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-chunk-starter/src/main/java/org/apache/camel/component/chunk/springboot/ChunkComponentAutoConfiguration.java&#010;index 76a5ef4..6f90de0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-chunk-starter/src/main/java/org/apache/camel/component/chunk/springboot/ChunkComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-chunk-starter/src/main/java/org/apache/camel/component/chunk/springboot/ChunkComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.chunk.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.chunk.ChunkComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ChunkComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class ChunkComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-cm-sms-starter/src/main/java/org/apache/camel/component/cm/springboot/CMComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-cm-sms-starter/src/main/java/org/apache/camel/component/cm/springboot/CMComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-cm-sms-starter/src/main/java/org/apache/camel/component/cm/springboot/CMComponentAutoConfiguration.java&#010;index 96f44e6..0816d87 100644&#010;--- a/platforms/spring-boot/components-starter/camel-cm-sms-starter/src/main/java/org/apache/camel/component/cm/springboot/CMComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-cm-sms-starter/src/main/java/org/apache/camel/component/cm/springboot/CMComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.cm.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.cm.CMComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(CMComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class CMComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/CMISComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/CMISComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/CMISComponentAutoConfiguration.java&#010;index 484a69a..592c974 100644&#010;--- a/platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/CMISComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/CMISComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.cmis.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.cmis.CMISComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(CMISComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class CMISComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/CMISComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/CMISComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/CMISComponentConfiguration.java&#010;index 7922287..624fb09 100644&#010;--- a/platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/CMISComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-cmis-starter/src/main/java/org/apache/camel/component/cmis/springboot/CMISComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.cmis.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.cmis.CMISSessionFacadeFactory;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.cmis"")&#010; public class CMISComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-coap-starter/src/main/java/org/apache/camel/coap/springboot/CoAPComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-coap-starter/src/main/java/org/apache/camel/coap/springboot/CoAPComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-coap-starter/src/main/java/org/apache/camel/coap/springboot/CoAPComponentAutoConfiguration.java&#010;index 30eb83c..fa1ccfc 100644&#010;--- a/platforms/spring-boot/components-starter/camel-coap-starter/src/main/java/org/apache/camel/coap/springboot/CoAPComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-coap-starter/src/main/java/org/apache/camel/coap/springboot/CoAPComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.coap.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.coap.CoAPComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(CoAPComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class CoAPComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/CometdComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/CometdComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/CometdComponentAutoConfiguration.java&#010;index 5bfcdce..33a15ef 100644&#010;--- a/platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/CometdComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/CometdComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.cometd.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.cometd.CometdComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(CometdComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class CometdComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/CometdComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/CometdComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/CometdComponentConfiguration.java&#010;index eacf933..1ad2c2c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/CometdComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-cometd-starter/src/main/java/org/apache/camel/component/cometd/springboot/CometdComponentConfiguration.java&#010;@@ -17,6 +17,7 @@&#010; package org.apache.camel.component.cometd.springboot;&#010; &#010; import java.util.List;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.util.jsse.SSLContextParameters;&#010; import org.cometd.bayeux.server.BayeuxServer.Extension;&#010; import org.cometd.bayeux.server.SecurityPolicy;&#010;@@ -29,6 +30,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.cometd"")&#010; public class CometdComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/ConsulComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/ConsulComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/ConsulComponentAutoConfiguration.java&#010;index cd7fbbf..15c197b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/ConsulComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/ConsulComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.consul.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.consul.ConsulComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ConsulComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class ConsulComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/ConsulComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/ConsulComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/ConsulComponentConfiguration.java&#010;index 9e8b957..a763d9c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/ConsulComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-consul-starter/src/main/java/org/apache/camel/component/consul/springboot/ConsulComponentConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.consul.springboot;&#010; &#010; import java.util.List;&#010; import java.util.Set;&#010;+import javax.annotation.Generated;&#010; import com.orbitz.consul.option.ConsistencyMode;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.util.jsse.SSLContextParameters;&#010;@@ -31,6 +32,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.consul"")&#010; public class ConsulComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-context-starter/src/main/java/org/apache/camel/component/context/springboot/QualifiedContextComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-context-starter/src/main/java/org/apache/camel/component/context/springboot/QualifiedContextComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-context-starter/src/main/java/org/apache/camel/component/context/springboot/QualifiedContextComponentAutoConfiguration.java&#010;index c1ac8a6..b45987c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-context-starter/src/main/java/org/apache/camel/component/context/springboot/QualifiedContextComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-context-starter/src/main/java/org/apache/camel/component/context/springboot/QualifiedContextComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.context.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.context.QualifiedContextComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(QualifiedContextComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class QualifiedContextComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/bean/springboot/BeanComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/bean/springboot/BeanComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/bean/springboot/BeanComponentAutoConfiguration.java&#010;index 53abd7e..2387463 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/bean/springboot/BeanComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/bean/springboot/BeanComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.bean.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.bean.BeanComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BeanComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class BeanComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/beanclass/springboot/ClassComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/beanclass/springboot/ClassComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/beanclass/springboot/ClassComponentAutoConfiguration.java&#010;index d75da6f..3a77bc3 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/beanclass/springboot/ClassComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/beanclass/springboot/ClassComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.beanclass.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.beanclass.ClassComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ClassComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class ClassComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/binding/springboot/BindingNameComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/binding/springboot/BindingNameComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/binding/springboot/BindingNameComponentAutoConfiguration.java&#010;index ce78eb1..9be6807 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/binding/springboot/BindingNameComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/binding/springboot/BindingNameComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.binding.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.binding.BindingNameComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BindingNameComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class BindingNameComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/browse/springboot/BrowseComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/browse/springboot/BrowseComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/browse/springboot/BrowseComponentAutoConfiguration.java&#010;index 9aa85c0..1cbe088 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/browse/springboot/BrowseComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/browse/springboot/BrowseComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.browse.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.browse.BrowseComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BrowseComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class BrowseComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/controlbus/springboot/ControlBusComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/controlbus/springboot/ControlBusComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/controlbus/springboot/ControlBusComponentAutoConfiguration.java&#010;index d9a7aaa..1b572b5 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/controlbus/springboot/ControlBusComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/controlbus/springboot/ControlBusComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.controlbus.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.controlbus.ControlBusComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ControlBusComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class ControlBusComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataformat/springboot/DataFormatComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataformat/springboot/DataFormatComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataformat/springboot/DataFormatComponentAutoConfiguration.java&#010;index c574bdc..02091d5 100644&#010;--- a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataformat/springboot/DataFormatComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/dataformat/springboot/DataFormatComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.dataformat.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.dataformat.DataFormatComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(DataFormatComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class DataFormatComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C1416f95a4e8e40f0b5371c16ce2d83b1%40git.apache.org%3E,2017-04-19 08:35:56,commits,395.0,  [11/13] camel git commit: CAMEL-11165 Add @Generated annotation to code g...
242,242,198.0,396.0,zregv...@apache.org,"CAMEL-11165 Add @Generated annotation to code g...&#010;&#010;...enerated by SpringBootAutoConfigurationMojo&#010;&#010;This regenerates Spring Boot auto configuration source files to include&#010;`@Generated` annotation.&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/2297128f&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/2297128f&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/2297128f&#010;&#010;Branch: refs/heads/master&#010;Commit: 2297128fc16a93e08f9e09fc2c8e64bbfb5a8387&#010;Parents: 583d6dc&#010;Author: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Authored: Wed Apr 19 10:26:38 2017 +0200&#010;Committer: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Committed: Wed Apr 19 10:32:34 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../component/ahc/springboot/AhcComponentAutoConfiguration.java  | 3 +++&#010; .../component/ahc/springboot/AhcComponentConfiguration.java      | 2 ++&#010; .../ahc/ws/springboot/WsComponentAutoConfiguration.java          | 3 +++&#010; .../component/ahc/ws/springboot/WsComponentConfiguration.java    | 2 ++&#010; .../amqp/springboot/AMQPComponentAutoConfiguration.java          | 3 +++&#010; .../component/amqp/springboot/AMQPComponentConfiguration.java    | 2 ++&#010; .../apns/springboot/ApnsComponentAutoConfiguration.java          | 3 +++&#010; .../component/apns/springboot/ApnsComponentConfiguration.java    | 2 ++&#010; .../asterisk/springboot/AsteriskComponentAutoConfiguration.java  | 3 +++&#010; .../atmos/springboot/AtmosComponentAutoConfiguration.java        | 3 +++&#010; .../springboot/WebsocketComponentAutoConfiguration.java          | 3 +++&#010; .../websocket/springboot/WebsocketComponentConfiguration.java    | 2 ++&#010; .../atom/springboot/AtomComponentAutoConfiguration.java          | 3 +++&#010; .../avro/springboot/AvroComponentAutoConfiguration.java          | 3 +++&#010; .../component/avro/springboot/AvroComponentConfiguration.java    | 2 ++&#010; .../avro/springboot/AvroDataFormatAutoConfiguration.java         | 3 +++&#010; .../dataformat/avro/springboot/AvroDataFormatConfiguration.java  | 2 ++&#010; .../aws/cw/springboot/CwComponentAutoConfiguration.java          | 3 +++&#010; .../aws/ddb/springboot/DdbComponentAutoConfiguration.java        | 3 +++&#010; .../springboot/DdbStreamComponentAutoConfiguration.java          | 3 +++&#010; .../aws/ec2/springboot/EC2ComponentAutoConfiguration.java        | 3 +++&#010; .../springboot/KinesisFirehoseComponentAutoConfiguration.java    | 3 +++&#010; .../kinesis/springboot/KinesisComponentAutoConfiguration.java    | 3 +++&#010; .../aws/s3/springboot/S3ComponentAutoConfiguration.java          | 3 +++&#010; .../aws/sdb/springboot/SdbComponentAutoConfiguration.java        | 3 +++&#010; .../aws/ses/springboot/SesComponentAutoConfiguration.java        | 3 +++&#010; .../aws/sns/springboot/SnsComponentAutoConfiguration.java        | 3 +++&#010; .../aws/sqs/springboot/SqsComponentAutoConfiguration.java        | 3 +++&#010; .../aws/swf/springboot/SWFComponentAutoConfiguration.java        | 3 +++&#010; .../blob/springboot/BlobServiceComponentAutoConfiguration.java   | 3 +++&#010; .../queue/springboot/QueueServiceComponentAutoConfiguration.java | 3 +++&#010; .../barcode/springboot/BarcodeDataFormatAutoConfiguration.java   | 3 +++&#010; .../barcode/springboot/BarcodeDataFormatConfiguration.java       | 2 ++&#010; .../base64/springboot/Base64DataFormatAutoConfiguration.java     | 3 +++&#010; .../base64/springboot/Base64DataFormatConfiguration.java         | 2 ++&#010; .../springboot/BeanValidatorComponentAutoConfiguration.java      | 3 +++&#010; .../beanio/springboot/BeanIODataFormatAutoConfiguration.java     | 3 +++&#010; .../beanio/springboot/BeanIODataFormatConfiguration.java         | 2 ++&#010; .../springboot/BeanstalkComponentAutoConfiguration.java          | 3 +++&#010; .../beanstalk/springboot/BeanstalkComponentConfiguration.java    | 2 ++&#010; .../csv/springboot/BindyCsvDataFormatAutoConfiguration.java      | 3 +++&#010; .../bindy/csv/springboot/BindyCsvDataFormatConfiguration.java    | 2 ++&#010; .../springboot/BindyFixedLengthDataFormatAutoConfiguration.java  | 3 +++&#010; .../springboot/BindyFixedLengthDataFormatConfiguration.java      | 2 ++&#010; .../springboot/BindyKeyValuePairDataFormatAutoConfiguration.java | 3 +++&#010; .../kvp/springboot/BindyKeyValuePairDataFormatConfiguration.java | 2 ++&#010; .../bonita/springboot/BonitaComponentAutoConfiguration.java      | 3 +++&#010; .../boon/springboot/BoonDataFormatAutoConfiguration.java         | 3 +++&#010; .../component/boon/springboot/BoonDataFormatConfiguration.java   | 2 ++&#010; .../component/box/springboot/BoxComponentAutoConfiguration.java  | 3 +++&#010; .../component/box/springboot/BoxComponentConfiguration.java      | 2 ++&#010; .../springboot/BraintreeComponentAutoConfiguration.java          | 3 +++&#010; .../braintree/springboot/BraintreeComponentConfiguration.java    | 2 ++&#010; .../cache/springboot/CacheComponentAutoConfiguration.java        | 3 +++&#010; .../component/cache/springboot/CacheComponentConfiguration.java  | 2 ++&#010; .../springboot/CassandraComponentAutoConfiguration.java          | 3 +++&#010; .../castor/springboot/CastorDataFormatAutoConfiguration.java     | 3 +++&#010; .../castor/springboot/CastorDataFormatConfiguration.java         | 2 ++&#010; .../springboot/ChronicleEngineComponentAutoConfiguration.java    | 3 +++&#010; .../chunk/springboot/ChunkComponentAutoConfiguration.java        | 3 +++&#010; .../component/cm/springboot/CMComponentAutoConfiguration.java    | 3 +++&#010; .../cmis/springboot/CMISComponentAutoConfiguration.java          | 3 +++&#010; .../component/cmis/springboot/CMISComponentConfiguration.java    | 2 ++&#010; .../camel/coap/springboot/CoAPComponentAutoConfiguration.java    | 3 +++&#010; .../cometd/springboot/CometdComponentAutoConfiguration.java      | 3 +++&#010; .../cometd/springboot/CometdComponentConfiguration.java          | 2 ++&#010; .../consul/springboot/ConsulComponentAutoConfiguration.java      | 3 +++&#010; .../consul/springboot/ConsulComponentConfiguration.java          | 2 ++&#010; .../springboot/QualifiedContextComponentAutoConfiguration.java   | 3 +++&#010; .../bean/springboot/BeanComponentAutoConfiguration.java          | 3 +++&#010; .../beanclass/springboot/ClassComponentAutoConfiguration.java    | 3 +++&#010; .../springboot/BindingNameComponentAutoConfiguration.java        | 3 +++&#010; .../browse/springboot/BrowseComponentAutoConfiguration.java      | 3 +++&#010; .../springboot/ControlBusComponentAutoConfiguration.java         | 3 +++&#010; .../springboot/DataFormatComponentAutoConfiguration.java         | 3 +++&#010; .../dataset/springboot/DataSetComponentAutoConfiguration.java    | 3 +++&#010; .../direct/springboot/DirectComponentAutoConfiguration.java      | 3 +++&#010; .../direct/springboot/DirectComponentConfiguration.java          | 2 ++&#010; .../directvm/springboot/DirectVmComponentAutoConfiguration.java  | 3 +++&#010; .../directvm/springboot/DirectVmComponentConfiguration.java      | 2 ++&#010; .../file/springboot/FileComponentAutoConfiguration.java          | 3 +++&#010; .../language/springboot/LanguageComponentAutoConfiguration.java  | 3 +++&#010; .../component/log/springboot/LogComponentAutoConfiguration.java  | 3 +++&#010; .../component/log/springboot/LogComponentConfiguration.java      | 2 ++&#010; .../mock/springboot/MockComponentAutoConfiguration.java          | 3 +++&#010; .../springboot/PropertiesComponentAutoConfiguration.java         | 3 +++&#010; .../properties/springboot/PropertiesComponentConfiguration.java  | 2 ++&#010; .../component/ref/springboot/RefComponentAutoConfiguration.java  | 3 +++&#010; .../rest/springboot/RestApiComponentAutoConfiguration.java       | 3 +++&#010; .../rest/springboot/RestComponentAutoConfiguration.java          | 3 +++&#010; .../component/rest/springboot/RestComponentConfiguration.java    | 2 ++&#010; .../springboot/SchedulerComponentAutoConfiguration.java          | 3 +++&#010; .../scheduler/springboot/SchedulerComponentConfiguration.java    | 2 ++&#010; .../seda/springboot/SedaComponentAutoConfiguration.java          | 3 +++&#010; .../component/seda/springboot/SedaComponentConfiguration.java    | 2 ++&#010; .../stub/springboot/StubComponentAutoConfiguration.java          | 3 +++&#010; .../component/stub/springboot/StubComponentConfiguration.java    | 2 ++&#010; .../test/springboot/TestComponentAutoConfiguration.java          | 3 +++&#010; .../timer/springboot/TimerComponentAutoConfiguration.java        | 3 +++&#010; .../springboot/ValidatorComponentAutoConfiguration.java          | 3 +++&#010; .../validator/springboot/ValidatorComponentConfiguration.java    | 2 ++&#010; .../component/vm/springboot/VmComponentAutoConfiguration.java    | 3 +++&#010; .../camel/component/vm/springboot/VmComponentConfiguration.java  | 2 ++&#010; .../xslt/springboot/XsltComponentAutoConfiguration.java          | 3 +++&#010; .../component/xslt/springboot/XsltComponentConfiguration.java    | 2 ++&#010; .../camel/impl/springboot/GzipDataFormatAutoConfiguration.java   | 3 +++&#010; .../camel/impl/springboot/GzipDataFormatConfiguration.java       | 2 ++&#010; .../springboot/SerializationDataFormatAutoConfiguration.java     | 3 +++&#010; .../impl/springboot/SerializationDataFormatConfiguration.java    | 2 ++&#010; .../camel/impl/springboot/StringDataFormatAutoConfiguration.java | 3 +++&#010; .../camel/impl/springboot/StringDataFormatConfiguration.java     | 2 ++&#010; .../camel/impl/springboot/ZipDataFormatAutoConfiguration.java    | 3 +++&#010; .../apache/camel/impl/springboot/ZipDataFormatConfiguration.java | 2 ++&#010; .../language/bean/springboot/BeanLanguageAutoConfiguration.java  | 3 +++&#010; .../language/bean/springboot/BeanLanguageConfiguration.java      | 2 ++&#010; .../constant/springboot/ConstantLanguageAutoConfiguration.java   | 3 +++&#010; .../constant/springboot/ConstantLanguageConfiguration.java       | 2 ++&#010; .../header/springboot/HeaderLanguageAutoConfiguration.java       | 3 +++&#010; .../language/header/springboot/HeaderLanguageConfiguration.java  | 2 ++&#010; .../springboot/ExchangePropertyLanguageAutoConfiguration.java    | 3 +++&#010; .../springboot/ExchangePropertyLanguageConfiguration.java        | 2 ++&#010; .../language/ref/springboot/RefLanguageAutoConfiguration.java    | 3 +++&#010; .../camel/language/ref/springboot/RefLanguageConfiguration.java  | 2 ++&#010; .../simple/springboot/FileLanguageAutoConfiguration.java         | 3 +++&#010; .../language/simple/springboot/FileLanguageConfiguration.java    | 2 ++&#010; .../simple/springboot/SimpleLanguageAutoConfiguration.java       | 3 +++&#010; .../language/simple/springboot/SimpleLanguageConfiguration.java  | 2 ++&#010; .../tokenizer/springboot/TokenizeLanguageAutoConfiguration.java  | 3 +++&#010; .../tokenizer/springboot/TokenizeLanguageConfiguration.java      | 2 ++&#010; .../springboot/XMLTokenizeLanguageAutoConfiguration.java         | 3 +++&#010; .../tokenizer/springboot/XMLTokenizeLanguageConfiguration.java   | 2 ++&#010; .../xpath/springboot/XPathLanguageAutoConfiguration.java         | 3 +++&#010; .../language/xpath/springboot/XPathLanguageConfiguration.java    | 2 ++&#010; .../ConsulServiceCallServiceDiscoveryConfigurationCommon.java    | 2 ++&#010; ...ConsulServiceCallServiceDiscoveryConfigurationProperties.java | 2 ++&#010; .../DnsServiceCallServiceDiscoveryConfigurationCommon.java       | 2 ++&#010; .../DnsServiceCallServiceDiscoveryConfigurationProperties.java   | 2 ++&#010; .../EtcdServiceCallServiceDiscoveryConfigurationCommon.java      | 2 ++&#010; .../EtcdServiceCallServiceDiscoveryConfigurationProperties.java  | 2 ++&#010; ...KubernetesServiceCallServiceDiscoveryConfigurationCommon.java | 2 ++&#010; ...rnetesServiceCallServiceDiscoveryConfigurationProperties.java | 2 ++&#010; .../RibbonServiceCallLoadBalancerConfigurationCommon.java        | 2 ++&#010; .../RibbonServiceCallLoadBalancerConfigurationProperties.java    | 2 ++&#010; .../springboot/RestConfigurationDefinitionAutoConfiguration.java | 2 ++&#010; .../rest/springboot/RestConfigurationDefinitionProperties.java   | 2 ++&#010; .../model/springboot/HystrixConfigurationDefinitionCommon.java   | 4 ++++&#010; .../springboot/HystrixConfigurationDefinitionProperties.java     | 2 ++&#010; .../springboot/CouchbaseComponentAutoConfiguration.java          | 3 +++&#010; .../couchdb/springboot/CouchDbComponentAutoConfiguration.java    | 3 +++&#010; .../springboot/DigitalSignatureComponentAutoConfiguration.java   | 3 +++&#010; .../springboot/DigitalSignatureComponentConfiguration.java       | 2 ++&#010; .../crypto/springboot/CryptoDataFormatAutoConfiguration.java     | 3 +++&#010; .../crypto/springboot/CryptoDataFormatConfiguration.java         | 2 ++&#010; .../crypto/springboot/PGPDataFormatAutoConfiguration.java        | 3 +++&#010; .../converter/crypto/springboot/PGPDataFormatConfiguration.java  | 2 ++&#010; .../csv/springboot/CsvDataFormatAutoConfiguration.java           | 3 +++&#010; .../dataformat/csv/springboot/CsvDataFormatConfiguration.java    | 2 ++&#010; .../cxf/jaxrs/springboot/CxfRsComponentAutoConfiguration.java    | 3 +++&#010; .../cxf/jaxrs/springboot/CxfRsComponentConfiguration.java        | 2 ++&#010; .../component/cxf/springboot/CxfComponentAutoConfiguration.java  | 3 +++&#010; .../component/cxf/springboot/CxfComponentConfiguration.java      | 2 ++&#010; .../springboot/DigitalOceanComponentAutoConfiguration.java       | 3 +++&#010; .../springboot/DisruptorComponentAutoConfiguration.java          | 3 +++&#010; .../disruptor/springboot/DisruptorComponentConfiguration.java    | 2 ++&#010; .../vm/springboot/DisruptorVmComponentAutoConfiguration.java     | 3 +++&#010; .../vm/springboot/DisruptorVmComponentConfiguration.java         | 2 ++&#010; .../component/dns/springboot/DnsComponentAutoConfiguration.java  | 3 +++&#010; .../docker/springboot/DockerComponentAutoConfiguration.java      | 3 +++&#010; .../docker/springboot/DockerComponentConfiguration.java          | 2 ++&#010; .../dozer/springboot/DozerComponentAutoConfiguration.java        | 3 +++&#010; .../drill/springboot/DrillComponentAutoConfiguration.java        | 3 +++&#010; .../dropbox/springboot/DropboxComponentAutoConfiguration.java    | 3 +++&#010; .../ehcache/springboot/EhcacheComponentAutoConfiguration.java    | 3 +++&#010; .../springboot/ElasticsearchComponentAutoConfiguration.java      | 3 +++&#010; .../springboot/ElasticsearchComponentConfiguration.java          | 2 ++&#010; .../springboot/ElasticsearchComponentAutoConfiguration.java      | 3 +++&#010; .../elsql/springboot/ElsqlComponentAutoConfiguration.java        | 3 +++&#010; .../component/elsql/springboot/ElsqlComponentConfiguration.java  | 2 ++&#010; .../etcd/springboot/EtcdComponentAutoConfiguration.java          | 3 +++&#010; .../component/etcd/springboot/EtcdComponentConfiguration.java    | 2 ++&#010; .../exec/springboot/ExecComponentAutoConfiguration.java          | 3 +++&#010; .../facebook/springboot/FacebookComponentAutoConfiguration.java  | 3 +++&#010; .../facebook/springboot/FacebookComponentConfiguration.java      | 2 ++&#010; .../flatpack/springboot/FlatpackComponentAutoConfiguration.java  | 3 +++&#010; .../flatpack/springboot/FlatpackDataFormatAutoConfiguration.java | 3 +++&#010; .../flatpack/springboot/FlatpackDataFormatConfiguration.java     | 2 ++&#010; .../flink/springboot/FlinkComponentAutoConfiguration.java        | 3 +++&#010; .../component/flink/springboot/FlinkComponentConfiguration.java  | 2 ++&#010; .../component/fop/springboot/FopComponentAutoConfiguration.java  | 3 +++&#010; .../springboot/FreemarkerComponentAutoConfiguration.java         | 3 +++&#010; .../freemarker/springboot/FreemarkerComponentConfiguration.java  | 2 ++&#010; .../file/remote/springboot/FtpComponentAutoConfiguration.java    | 3 +++&#010; .../file/remote/springboot/FtpsComponentAutoConfiguration.java   | 3 +++&#010; .../file/remote/springboot/FtpsComponentConfiguration.java       | 2 ++&#010; .../file/remote/springboot/SftpComponentAutoConfiguration.java   | 3 +++&#010; .../ganglia/springboot/GangliaComponentAutoConfiguration.java    | 3 +++&#010; .../ganglia/springboot/GangliaComponentConfiguration.java        | 2 ++&#010; .../geocoder/springboot/GeoCoderComponentAutoConfiguration.java  | 3 +++&#010; .../component/git/springboot/GitComponentAutoConfiguration.java  | 3 +++&#010; .../github/springboot/GitHubComponentAutoConfiguration.java      | 3 +++&#010; .../springboot/GoogleCalendarComponentAutoConfiguration.java     | 3 +++&#010; .../springboot/GoogleCalendarComponentConfiguration.java         | 2 ++&#010; .../drive/springboot/GoogleDriveComponentAutoConfiguration.java  | 3 +++&#010; .../drive/springboot/GoogleDriveComponentConfiguration.java      | 2 ++&#010; .../mail/springboot/GoogleMailComponentAutoConfiguration.java    | 3 +++&#010; .../google/mail/springboot/GoogleMailComponentConfiguration.java | 2 ++&#010; .../springboot/GooglePubsubComponentAutoConfiguration.java       | 3 +++&#010; .../pubsub/springboot/GooglePubsubComponentConfiguration.java    | 2 ++&#010; .../gora/springboot/GoraComponentAutoConfiguration.java          | 3 +++&#010; .../groovy/springboot/GroovyLanguageAutoConfiguration.java       | 3 +++&#010; .../language/groovy/springboot/GroovyLanguageConfiguration.java  | 2 ++&#010; .../grpc/springboot/GrpcComponentAutoConfiguration.java          | 3 +++&#010; .../gson/springboot/GsonDataFormatAutoConfiguration.java         | 3 +++&#010; .../component/gson/springboot/GsonDataFormatConfiguration.java   | 2 ++&#010; .../springboot/GuavaEventBusComponentAutoConfiguration.java      | 3 +++&#010; .../eventbus/springboot/GuavaEventBusComponentConfiguration.java | 2 ++&#010; .../springboot/HazelcastComponentAutoConfiguration.java          | 3 +++&#010; .../hazelcast/springboot/HazelcastComponentConfiguration.java    | 2 ++&#010; .../hbase/springboot/HBaseComponentAutoConfiguration.java        | 3 +++&#010; .../component/hbase/springboot/HBaseComponentConfiguration.java  | 2 ++&#010; .../hdfs/springboot/HdfsComponentAutoConfiguration.java          | 3 +++&#010; .../component/hdfs/springboot/HdfsComponentConfiguration.java    | 2 ++&#010; .../hdfs2/springboot/HdfsComponentAutoConfiguration.java         | 4 ++--&#010; .../component/hdfs2/springboot/HdfsComponentConfiguration.java   | 2 +-&#010; .../hessian/springboot/HessianDataFormatAutoConfiguration.java   | 3 +++&#010; .../hessian/springboot/HessianDataFormatConfiguration.java       | 2 ++&#010; .../hipchat/springboot/HipchatComponentAutoConfiguration.java    | 3 +++&#010; .../component/hl7/springboot/HL7DataFormatAutoConfiguration.java | 3 +++&#010; .../component/hl7/springboot/HL7DataFormatConfiguration.java     | 2 ++&#010; .../hl7/springboot/TerserLanguageAutoConfiguration.java          | 3 +++&#010; .../component/hl7/springboot/TerserLanguageConfiguration.java    | 2 ++&#010; .../http/springboot/HttpComponentAutoConfiguration.java          | 3 +++&#010; .../component/http/springboot/HttpComponentConfiguration.java    | 2 ++&#010; .../http4/springboot/HttpComponentAutoConfiguration.java         | 3 +++&#010; .../component/http4/springboot/HttpComponentConfiguration.java   | 2 ++&#010; .../ical/springboot/ICalDataFormatAutoConfiguration.java         | 3 +++&#010; .../component/ical/springboot/ICalDataFormatConfiguration.java   | 2 ++&#010; .../springboot/InfinispanComponentAutoConfiguration.java         | 3 +++&#010; .../infinispan/springboot/InfinispanComponentConfiguration.java  | 2 ++&#010; .../influxdb/springboot/InfluxDbComponentAutoConfiguration.java  | 3 +++&#010; .../component/irc/springboot/IrcComponentAutoConfiguration.java  | 3 +++&#010; .../component/irc/springboot/IrcComponentConfiguration.java      | 2 ++&#010; .../ironmq/springboot/IronMQComponentAutoConfiguration.java      | 3 +++&#010; .../jackson/springboot/JacksonDataFormatAutoConfiguration.java   | 3 +++&#010; .../jackson/springboot/JacksonDataFormatConfiguration.java       | 2 ++&#010; .../springboot/JacksonXMLDataFormatAutoConfiguration.java        | 3 +++&#010; .../jacksonxml/springboot/JacksonXMLDataFormatConfiguration.java | 2 ++&#010; .../springboot/JavaSpaceComponentAutoConfiguration.java          | 3 +++&#010; .../jaxb/springboot/JaxbDataFormatAutoConfiguration.java         | 3 +++&#010; .../converter/jaxb/springboot/JaxbDataFormatConfiguration.java   | 2 ++&#010; .../jbpm/springboot/JBPMComponentAutoConfiguration.java          | 3 +++&#010; .../jcache/springboot/JCacheComponentAutoConfiguration.java      | 3 +++&#010; .../jcache/springboot/JCacheComponentConfiguration.java          | 2 ++&#010; .../component/jcr/springboot/JcrComponentAutoConfiguration.java  | 3 +++&#010; .../jdbc/springboot/JdbcComponentAutoConfiguration.java          | 3 +++&#010; .../component/jdbc/springboot/JdbcComponentConfiguration.java    | 2 ++&#010; .../jetty9/springboot/JettyHttpComponentAutoConfiguration9.java  | 3 +++&#010; .../jetty9/springboot/JettyHttpComponentConfiguration9.java      | 2 ++&#010; .../jgroups/springboot/JGroupsComponentAutoConfiguration.java    | 3 +++&#010; .../jgroups/springboot/JGroupsComponentConfiguration.java        | 2 ++&#010; .../jibx/springboot/JibxDataFormatAutoConfiguration.java         | 3 +++&#010; .../dataformat/jibx/springboot/JibxDataFormatConfiguration.java  | 2 ++&#010; .../jing/springboot/JingComponentAutoConfiguration.java          | 3 +++&#010; .../jira/springboot/JIRAComponentAutoConfiguration.java          | 3 +++&#010; .../component/jms/springboot/JmsComponentAutoConfiguration.java  | 3 +++&#010; .../component/jms/springboot/JmsComponentConfiguration.java      | 2 ++&#010; .../component/jmx/springboot/JMXComponentAutoConfiguration.java  | 3 +++&#010; .../johnzon/springboot/JohnzonDataFormatAutoConfiguration.java   | 3 +++&#010; .../johnzon/springboot/JohnzonDataFormatConfiguration.java       | 2 ++&#010; .../jolt/springboot/JoltComponentAutoConfiguration.java          | 3 +++&#010; .../component/jolt/springboot/JoltComponentConfiguration.java    | 2 ++&#010; .../language/sql/springboot/SqlLanguageAutoConfiguration.java    | 3 +++&#010; .../camel/language/sql/springboot/SqlLanguageConfiguration.java  | 2 ++&#010; .../component/jpa/springboot/JpaComponentAutoConfiguration.java  | 3 +++&#010; .../component/jpa/springboot/JpaComponentConfiguration.java      | 2 ++&#010; .../component/scp/springboot/ScpComponentAutoConfiguration.java  | 3 +++&#010; .../component/scp/springboot/ScpComponentConfiguration.java      | 2 ++&#010; .../jsonpath/springboot/JsonPathLanguageAutoConfiguration.java   | 3 +++&#010; .../camel/jsonpath/springboot/JsonPathLanguageConfiguration.java | 2 ++&#010; .../jt400/springboot/Jt400ComponentAutoConfiguration.java        | 3 +++&#010; .../component/jt400/springboot/Jt400ComponentConfiguration.java  | 2 ++&#010; .../language/juel/springboot/JuelLanguageAutoConfiguration.java  | 3 +++&#010; .../language/juel/springboot/JuelLanguageConfiguration.java      | 2 ++&#010; .../jxpath/springboot/JXPathLanguageAutoConfiguration.java       | 3 +++&#010; .../language/jxpath/springboot/JXPathLanguageConfiguration.java  | 2 ++&#010; .../kafka/springboot/KafkaComponentAutoConfiguration.java        | 3 +++&#010; .../component/kafka/springboot/KafkaComponentConfiguration.java  | 2 ++&#010; .../kestrel/springboot/KestrelComponentAutoConfiguration.java    | 3 +++&#010; .../kestrel/springboot/KestrelComponentConfiguration.java        | 2 ++&#010; .../krati/springboot/KratiComponentAutoConfiguration.java        | 3 +++&#010; .../springboot/KubernetesComponentAutoConfiguration.java         | 3 +++&#010; .../ldap/springboot/LdapComponentAutoConfiguration.java          | 3 +++&#010; .../linkedin/springboot/LinkedInComponentAutoConfiguration.java  | 3 +++&#010; .../linkedin/springboot/LinkedInComponentConfiguration.java      | 2 ++&#010; .../lucene/springboot/LuceneComponentAutoConfiguration.java      | 3 +++&#010; .../lucene/springboot/LuceneComponentConfiguration.java          | 2 ++&#010; .../springboot/LumberjackComponentAutoConfiguration.java         | 3 +++&#010; .../lumberjack/springboot/LumberjackComponentConfiguration.java  | 2 ++&#010; .../lzf/springboot/LZFDataFormatAutoConfiguration.java           | 3 +++&#010; .../dataformat/lzf/springboot/LZFDataFormatConfiguration.java    | 2 ++&#010; .../mail/springboot/MailComponentAutoConfiguration.java          | 3 +++&#010; .../component/mail/springboot/MailComponentConfiguration.java    | 2 ++&#010; .../springboot/MimeMultipartDataFormatAutoConfiguration.java     | 3 +++&#010; .../springboot/MimeMultipartDataFormatConfiguration.java         | 2 ++&#010; .../metrics/springboot/MetricsComponentAutoConfiguration.java    | 3 +++&#010; .../metrics/springboot/MetricsComponentConfiguration.java        | 2 ++&#010; .../client/springboot/MiloClientComponentAutoConfiguration.java  | 3 +++&#010; .../milo/client/springboot/MiloClientComponentConfiguration.java | 2 ++&#010; .../server/springboot/MiloServerComponentAutoConfiguration.java  | 3 +++&#010; .../milo/server/springboot/MiloServerComponentConfiguration.java | 2 ++&#010; .../mina2/springboot/Mina2ComponentAutoConfiguration.java        | 3 +++&#010; .../component/mina2/springboot/Mina2ComponentConfiguration.java  | 2 ++&#010; .../mllp/springboot/MllpComponentAutoConfiguration.java          | 3 +++&#010; .../gridfs/springboot/GridFsComponentAutoConfiguration.java      | 3 +++&#010; .../mongodb/springboot/MongoDbComponentAutoConfiguration.java    | 3 +++&#010; .../mongodb3/springboot/MongoDbComponentAutoConfiguration.java   | 3 +++&#010; .../mqtt/springboot/MQTTComponentAutoConfiguration.java          | 3 +++&#010; .../component/mqtt/springboot/MQTTComponentConfiguration.java    | 2 ++&#010; .../validator/msv/springboot/MsvComponentAutoConfiguration.java  | 3 +++&#010; .../validator/msv/springboot/MsvComponentConfiguration.java      | 2 ++&#010; .../mustache/springboot/MustacheComponentAutoConfiguration.java  | 3 +++&#010; .../mustache/springboot/MustacheComponentConfiguration.java      | 2 ++&#010; .../mvel/springboot/MvelComponentAutoConfiguration.java          | 3 +++&#010; .../language/mvel/springboot/MvelLanguageAutoConfiguration.java  | 3 +++&#010; .../language/mvel/springboot/MvelLanguageConfiguration.java      | 2 ++&#010; .../mybatis/springboot/MyBatisComponentAutoConfiguration.java    | 3 +++&#010; .../mybatis/springboot/MyBatisComponentConfiguration.java        | 2 ++&#010; .../nagios/springboot/NagiosComponentAutoConfiguration.java      | 3 +++&#010; .../nagios/springboot/NagiosComponentConfiguration.java          | 2 ++&#010; .../nats/springboot/NatsComponentAutoConfiguration.java          | 3 +++&#010; .../component/nats/springboot/NatsComponentConfiguration.java    | 2 ++&#010; .../http/springboot/NettyHttpComponentAutoConfiguration.java     | 3 +++&#010; .../netty/http/springboot/NettyHttpComponentConfiguration.java   | 2 ++&#010; .../netty/springboot/NettyComponentAutoConfiguration.java        | 3 +++&#010; .../component/netty/springboot/NettyComponentConfiguration.java  | 2 ++&#010; .../http/springboot/NettyHttpComponentAutoConfiguration.java     | 3 +++&#010; .../netty4/http/springboot/NettyHttpComponentConfiguration.java  | 2 ++&#010; .../netty4/springboot/NettyComponentAutoConfiguration.java       | 3 +++&#010; .../component/netty4/springboot/NettyComponentConfiguration.java | 2 ++&#010; .../language/ognl/springboot/OgnlLanguageAutoConfiguration.java  | 3 +++&#010; .../language/ognl/springboot/OgnlLanguageConfiguration.java      | 2 ++&#010; .../olingo2/springboot/Olingo2ComponentAutoConfiguration.java    | 3 +++&#010; .../olingo2/springboot/Olingo2ComponentConfiguration.java        | 2 ++&#010; .../olingo4/springboot/Olingo4ComponentAutoConfiguration.java    | 3 +++&#010; .../olingo4/springboot/Olingo4ComponentConfiguration.java        | 2 ++&#010; .../springboot/OpenShiftComponentAutoConfiguration.java          | 3 +++&#010; .../openshift/springboot/OpenShiftComponentConfiguration.java    | 2 ++&#010; .../cinder/springboot/CinderComponentAutoConfiguration.java      | 3 +++&#010; .../glance/springboot/GlanceComponentAutoConfiguration.java      | 3 +++&#010; .../keystone/springboot/KeystoneComponentAutoConfiguration.java  | 3 +++&#010; .../neutron/springboot/NeutronComponentAutoConfiguration.java    | 3 +++&#010; .../nova/springboot/NovaComponentAutoConfiguration.java          | 3 +++&#010; .../swift/springboot/SwiftComponentAutoConfiguration.java        | 3 +++&#010; .../springboot/OptaPlannerComponentAutoConfiguration.java        | 3 +++&#010; .../paho/springboot/PahoComponentAutoConfiguration.java          | 3 +++&#010; .../component/paho/springboot/PahoComponentConfiguration.java    | 2 ++&#010; .../component/pdf/springboot/PdfComponentAutoConfiguration.java  | 3 +++&#010; .../pgevent/springboot/PgEventComponentAutoConfiguration.java    | 3 +++&#010; .../printer/springboot/PrinterComponentAutoConfiguration.java    | 3 +++&#010; .../protobuf/springboot/ProtobufDataFormatAutoConfiguration.java | 3 +++&#010; .../protobuf/springboot/ProtobufDataFormatConfiguration.java     | 2 ++&#010; .../pubnub/springboot/PubNubComponentAutoConfiguration.java      | 3 +++&#010; .../quartz2/springboot/QuartzComponentAutoConfiguration.java     | 3 +++&#010; .../quartz2/springboot/QuartzComponentConfiguration.java         | 2 ++&#010; .../springboot/QuickfixjComponentAutoConfiguration.java          | 3 +++&#010; .../quickfixj/springboot/QuickfixjComponentConfiguration.java    | 2 ++&#010; .../rabbitmq/springboot/RabbitMQComponentAutoConfiguration.java  | 3 +++&#010; .../springboot/ReactiveStreamsComponentAutoConfiguration.java    | 3 +++&#010; .../springboot/ReactiveStreamsComponentConfiguration.java        | 2 ++&#010; .../springboot/RestSwaggerComponentAutoConfiguration.java        | 3 +++&#010; .../swagger/springboot/RestSwaggerComponentConfiguration.java    | 2 ++&#010; .../restlet/springboot/RestletComponentAutoConfiguration.java    | 3 +++&#010; .../restlet/springboot/RestletComponentConfiguration.java        | 2 ++&#010; .../component/rmi/springboot/RmiComponentAutoConfiguration.java  | 3 +++&#010; .../routebox/springboot/RouteboxComponentAutoConfiguration.java  | 3 +++&#010; .../component/rss/springboot/RssComponentAutoConfiguration.java  | 3 +++&#010; .../rss/springboot/RssDataFormatAutoConfiguration.java           | 3 +++&#010; .../dataformat/rss/springboot/RssDataFormatConfiguration.java    | 2 ++&#010; .../springboot/SalesforceComponentAutoConfiguration.java         | 3 +++&#010; .../salesforce/springboot/SalesforceComponentConfiguration.java  | 2 ++&#010; .../springboot/NetWeaverComponentAutoConfiguration.java          | 3 +++&#010; .../xquery/springboot/XQueryComponentAutoConfiguration.java      | 3 +++&#010; .../xquery/springboot/XQueryComponentConfiguration.java          | 2 ++&#010; .../xquery/springboot/XQueryLanguageAutoConfiguration.java       | 3 +++&#010; .../language/xquery/springboot/XQueryLanguageConfiguration.java  | 2 ++&#010; .../springboot/SchematronComponentAutoConfiguration.java         | 3 +++&#010; .../script/springboot/JavaScriptLanguageAutoConfiguration.java   | 3 +++&#010; .../script/springboot/JavaScriptLanguageConfiguration.java       | 2 ++&#010; .../builder/script/springboot/PhpLanguageAutoConfiguration.java  | 3 +++&#010; .../builder/script/springboot/PhpLanguageConfiguration.java      | 2 ++&#010; .../script/springboot/PythonLanguageAutoConfiguration.java       | 3 +++&#010; .../builder/script/springboot/PythonLanguageConfiguration.java   | 2 ++&#010; .../builder/script/springboot/RubyLanguageAutoConfiguration.java | 3 +++&#010; .../builder/script/springboot/RubyLanguageConfiguration.java     | 2 ++&#010; .../springboot/ServiceNowComponentAutoConfiguration.java         | 3 +++&#010; .../servicenow/springboot/ServiceNowComponentConfiguration.java  | 2 ++&#010; .../servlet/springboot/ServletComponentAutoConfiguration.java    | 3 +++&#010; .../servlet/springboot/ServletComponentConfiguration.java        | 2 ++&#010; .../component/sip/springboot/SipComponentAutoConfiguration.java  | 3 +++&#010; .../batch/springboot/SjmsBatchComponentAutoConfiguration.java    | 3 +++&#010; .../sjms/batch/springboot/SjmsBatchComponentConfiguration.java   | 2 ++&#010; .../sjms/springboot/SjmsComponentAutoConfiguration.java          | 3 +++&#010; .../component/sjms/springboot/SjmsComponentConfiguration.java    | 2 ++&#010; .../sjms2/springboot/Sjms2ComponentAutoConfiguration.java        | 3 +++&#010; .../component/sjms2/springboot/Sjms2ComponentConfiguration.java  | 2 ++&#010; .../slack/springboot/SlackComponentAutoConfiguration.java        | 3 +++&#010; .../component/slack/springboot/SlackComponentConfiguration.java  | 2 ++&#010; .../smpp/springboot/SmppComponentAutoConfiguration.java          | 3 +++&#010; .../component/smpp/springboot/SmppComponentConfiguration.java    | 2 ++&#010; .../springboot/SnakeYAMLDataFormatAutoConfiguration.java         | 3 +++&#010; .../snakeyaml/springboot/SnakeYAMLDataFormatConfiguration.java   | 2 ++&#010; .../snmp/springboot/SnmpComponentAutoConfiguration.java          | 3 +++&#010; .../soap/springboot/SoapJaxbDataFormatAutoConfiguration.java     | 3 +++&#010; .../soap/springboot/SoapJaxbDataFormatConfiguration.java         | 2 ++&#010; .../solr/springboot/SolrComponentAutoConfiguration.java          | 3 +++&#010; .../spark/springboot/SparkComponentAutoConfiguration.java        | 3 +++&#010; .../component/spark/springboot/SparkComponentConfiguration.java  | 2 ++&#010; .../splunk/springboot/SplunkComponentAutoConfiguration.java      | 3 +++&#010; .../splunk/springboot/SplunkComponentConfiguration.java          | 2 ++&#010; .../batch/springboot/SpringBatchComponentAutoConfiguration.java  | 3 +++&#010; .../batch/springboot/SpringBatchComponentConfiguration.java      | 2 ++&#010; .../springboot/SpringIntegrationComponentAutoConfiguration.java  | 3 +++&#010; .../springboot/SpringLdapComponentAutoConfiguration.java         | 3 +++&#010; .../redis/springboot/RedisComponentAutoConfiguration.java        | 3 +++&#010; .../event/springboot/EventComponentAutoConfiguration.java        | 3 +++&#010; .../language/spel/springboot/SpelLanguageAutoConfiguration.java  | 3 +++&#010; .../language/spel/springboot/SpelLanguageConfiguration.java      | 2 ++&#010; .../springboot/SpringWebserviceComponentAutoConfiguration.java   | 3 +++&#010; .../ws/springboot/SpringWebserviceComponentConfiguration.java    | 2 ++&#010; .../component/sql/springboot/SqlComponentAutoConfiguration.java  | 3 +++&#010; .../component/sql/springboot/SqlComponentConfiguration.java      | 2 ++&#010; .../stored/springboot/SqlStoredComponentAutoConfiguration.java   | 3 +++&#010; .../sql/stored/springboot/SqlStoredComponentConfiguration.java   | 2 ++&#010; .../component/ssh/springboot/SshComponentAutoConfiguration.java  | 3 +++&#010; .../component/ssh/springboot/SshComponentConfiguration.java      | 2 ++&#010; .../stax/springboot/StAXComponentAutoConfiguration.java          | 3 +++&#010; .../stomp/springboot/StompComponentAutoConfiguration.java        | 3 +++&#010; .../component/stomp/springboot/StompComponentConfiguration.java  | 2 ++&#010; .../stream/springboot/StreamComponentAutoConfiguration.java      | 3 +++&#010; .../springboot/StringTemplateComponentAutoConfiguration.java     | 3 +++&#010; .../syslog/springboot/SyslogDataFormatAutoConfiguration.java     | 3 +++&#010; .../syslog/springboot/SyslogDataFormatConfiguration.java         | 2 ++&#010; .../springboot/TidyMarkupDataFormatAutoConfiguration.java        | 3 +++&#010; .../tagsoup/springboot/TidyMarkupDataFormatConfiguration.java    | 2 ++&#010; .../tarfile/springboot/TarFileDataFormatAutoConfiguration.java   | 3 +++&#010; .../tarfile/springboot/TarFileDataFormatConfiguration.java       | 2 ++&#010; .../telegram/springboot/TelegramComponentAutoConfiguration.java  | 3 +++&#010; .../telegram/springboot/TelegramComponentConfiguration.java      | 2 ++&#010; .../tika/springboot/TikaComponentAutoConfiguration.java          | 3 +++&#010; .../twitter/springboot/TwitterComponentAutoConfiguration.java    | 3 +++&#010; .../twitter/springboot/TwitterComponentConfiguration.java        | 2 ++&#010; .../undertow/springboot/UndertowComponentAutoConfiguration.java  | 3 +++&#010; .../undertow/springboot/UndertowComponentConfiguration.java      | 2 ++&#010; .../springboot/UniVocityCsvDataFormatAutoConfiguration.java      | 3 +++&#010; .../springboot/UniVocityCsvDataFormatConfiguration.java          | 2 ++&#010; .../UniVocityFixedWidthDataFormatAutoConfiguration.java          | 3 +++&#010; .../springboot/UniVocityFixedWidthDataFormatConfiguration.java   | 2 ++&#010; .../springboot/UniVocityTsvDataFormatAutoConfiguration.java      | 3 +++&#010; .../springboot/UniVocityTsvDataFormatConfiguration.java          | 2 ++&#010; .../velocity/springboot/VelocityComponentAutoConfiguration.java  | 3 +++&#010; .../velocity/springboot/VelocityComponentConfiguration.java      | 2 ++&#010; .../vertx/springboot/VertxComponentAutoConfiguration.java        | 3 +++&#010; .../component/vertx/springboot/VertxComponentConfiguration.java  | 2 ++&#010; .../weather/springboot/WeatherComponentAutoConfiguration.java    | 3 +++&#010; .../springboot/WebsocketComponentAutoConfiguration.java          | 3 +++&#010; .../websocket/springboot/WebsocketComponentConfiguration.java    | 2 ++&#010; .../xmlbeans/springboot/XmlBeansDataFormatAutoConfiguration.java | 3 +++&#010; .../xmlbeans/springboot/XmlBeansDataFormatConfiguration.java     | 2 ++&#010; .../xmljson/springboot/XmlJsonDataFormatAutoConfiguration.java   | 3 +++&#010; .../xmljson/springboot/XmlJsonDataFormatConfiguration.java       | 2 ++&#010; .../xmlrpc/springboot/XmlRpcComponentAutoConfiguration.java      | 3 +++&#010; .../xmlrpc/springboot/XmlRpcDataFormatAutoConfiguration.java     | 3 +++&#010; .../xmlrpc/springboot/XmlRpcDataFormatConfiguration.java         | 2 ++&#010; .../springboot/XmlSignatureComponentAutoConfiguration.java       | 3 +++&#010; .../springboot/XmlSignatureComponentConfiguration.java           | 2 ++&#010; .../springboot/XMLSecurityDataFormatAutoConfiguration.java       | 3 +++&#010; .../springboot/XMLSecurityDataFormatConfiguration.java           | 2 ++&#010; .../xmpp/springboot/XmppComponentAutoConfiguration.java          | 3 +++&#010; .../xstream/springboot/JsonDataFormatAutoConfiguration.java      | 3 +++&#010; .../xstream/springboot/JsonDataFormatConfiguration.java          | 2 ++&#010; .../xstream/springboot/XStreamDataFormatAutoConfiguration.java   | 3 +++&#010; .../xstream/springboot/XStreamDataFormatConfiguration.java       | 2 ++&#010; .../yammer/springboot/YammerComponentAutoConfiguration.java      | 3 +++&#010; .../yammer/springboot/YammerComponentConfiguration.java          | 2 ++&#010; .../zendesk/springboot/ZendeskComponentAutoConfiguration.java    | 3 +++&#010; .../zendesk/springboot/ZendeskComponentConfiguration.java        | 2 ++&#010; .../zipfile/springboot/ZipFileDataFormatAutoConfiguration.java   | 3 +++&#010; .../zipfile/springboot/ZipFileDataFormatConfiguration.java       | 2 ++&#010; .../springboot/MasterComponentAutoConfiguration.java             | 3 +++&#010; .../zookeepermaster/springboot/MasterComponentConfiguration.java | 2 ++&#010; .../springboot/ZooKeeperComponentAutoConfiguration.java          | 3 +++&#010; .../zookeeper/springboot/ZooKeeperComponentConfiguration.java    | 2 ++&#010; 492 files changed, 1276 insertions(+), 3 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/AhcComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/AhcComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/AhcComponentAutoConfiguration.java&#010;index 9ecf975..671810a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/AhcComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/AhcComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.ahc.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.ahc.AhcComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(AhcComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class AhcComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/AhcComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/AhcComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/AhcComponentConfiguration.java&#010;index d48437f..b810679 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/AhcComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ahc-starter/src/main/java/org/apache/camel/component/ahc/springboot/AhcComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.ahc.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.ahc.AhcBinding;&#010; import org.apache.camel.spi.HeaderFilterStrategy;&#010; import org.apache.camel.util.jsse.SSLContextParameters;&#010;@@ -29,6 +30,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.ahc"")&#010; public class AhcComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/WsComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/WsComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/WsComponentAutoConfiguration.java&#010;index f63cc7c..d370983 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/WsComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/WsComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.ahc.ws.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.ahc.ws.WsComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(WsComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class WsComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/WsComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/WsComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/WsComponentConfiguration.java&#010;index 160a961..25dea26 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/WsComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ahc-ws-starter/src/main/java/org/apache/camel/component/ahc/ws/springboot/WsComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.ahc.ws.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.ahc.AhcBinding;&#010; import org.apache.camel.spi.HeaderFilterStrategy;&#010; import org.apache.camel.util.jsse.SSLContextParameters;&#010;@@ -29,6 +30,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.ahc-ws"")&#010; public class WsComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/AMQPComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/AMQPComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/AMQPComponentAutoConfiguration.java&#010;index d425353..1805ce2 100644&#010;--- a/platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/AMQPComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/AMQPComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.amqp.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.amqp.AMQPComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(AMQPComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class AMQPComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/AMQPComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/AMQPComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/AMQPComponentConfiguration.java&#010;index f30c727..ff88503 100644&#010;--- a/platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/AMQPComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-amqp-starter/src/main/java/org/apache/camel/component/amqp/springboot/AMQPComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.amqp.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import javax.jms.ConnectionFactory;&#010; import javax.jms.ExceptionListener;&#010; import org.apache.camel.LoggingLevel;&#010;@@ -42,6 +43,7 @@ import org.springframework.util.ErrorHandler;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.amqp"")&#010; public class AMQPComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/ApnsComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/ApnsComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/ApnsComponentAutoConfiguration.java&#010;index 4f7ba5b..c2233ce 100644&#010;--- a/platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/ApnsComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/ApnsComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.apns.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.apns.ApnsComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(ApnsComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class ApnsComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/ApnsComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/ApnsComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/ApnsComponentConfiguration.java&#010;index a5f9e0a..93fc197 100644&#010;--- a/platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/ApnsComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-apns-starter/src/main/java/org/apache/camel/component/apns/springboot/ApnsComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.apns.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import com.notnoop.apns.ApnsService;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;@@ -25,6 +26,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.apns"")&#010; public class ApnsComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-asterisk-starter/src/main/java/org/apache/camel/component/asterisk/springboot/AsteriskComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-asterisk-starter/src/main/java/org/apache/camel/component/asterisk/springboot/AsteriskComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-asterisk-starter/src/main/java/org/apache/camel/component/asterisk/springboot/AsteriskComponentAutoConfiguration.java&#010;index 1faa558..ce8b6f9 100644&#010;--- a/platforms/spring-boot/components-starter/camel-asterisk-starter/src/main/java/org/apache/camel/component/asterisk/springboot/AsteriskComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-asterisk-starter/src/main/java/org/apache/camel/component/asterisk/springboot/AsteriskComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.asterisk.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.asterisk.AsteriskComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(AsteriskComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class AsteriskComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-atmos-starter/src/main/java/org/apache/camel/component/atmos/springboot/AtmosComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-atmos-starter/src/main/java/org/apache/camel/component/atmos/springboot/AtmosComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-atmos-starter/src/main/java/org/apache/camel/component/atmos/springboot/AtmosComponentAutoConfiguration.java&#010;index c1d7b1f..faca500 100644&#010;--- a/platforms/spring-boot/components-starter/camel-atmos-starter/src/main/java/org/apache/camel/component/atmos/springboot/AtmosComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-atmos-starter/src/main/java/org/apache/camel/component/atmos/springboot/AtmosComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.atmos.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.atmos.AtmosComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(AtmosComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class AtmosComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/WebsocketComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/WebsocketComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/WebsocketComponentAutoConfiguration.java&#010;index 99a12f6..9b56ba1 100644&#010;--- a/platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/WebsocketComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/WebsocketComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.atmosphere.websocket.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.atmosphere.websocket.WebsocketComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(WebsocketComponentAutoConfiguration.Condition.class)&#010;@@ -84,6 +86,7 @@ public class WebsocketComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/WebsocketComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/WebsocketComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/WebsocketComponentConfiguration.java&#010;index af474e8..753dac0 100644&#010;--- a/platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/WebsocketComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-atmosphere-websocket-starter/src/main/java/org/apache/camel/component/atmosphere/websocket/springboot/WebsocketComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.atmosphere.websocket.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.component.servlet.HttpRegistry;&#010; import org.apache.camel.http.common.HttpBinding;&#010; import org.apache.camel.http.common.HttpConfiguration;&#010;@@ -28,6 +29,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.atmosphere-websocket"")&#010; public class WebsocketComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-atom-starter/src/main/java/org/apache/camel/component/atom/springboot/AtomComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-atom-starter/src/main/java/org/apache/camel/component/atom/springboot/AtomComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-atom-starter/src/main/java/org/apache/camel/component/atom/springboot/AtomComponentAutoConfiguration.java&#010;index c39a6c4..1d41386 100644&#010;--- a/platforms/spring-boot/components-starter/camel-atom-starter/src/main/java/org/apache/camel/component/atom/springboot/AtomComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-atom-starter/src/main/java/org/apache/camel/component/atom/springboot/AtomComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.atom.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.atom.AtomComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(AtomComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class AtomComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/AvroComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/AvroComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/AvroComponentAutoConfiguration.java&#010;index 1b60f16..7ce7934 100644&#010;--- a/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/AvroComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/AvroComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.avro.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.avro.AvroComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(AvroComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class AvroComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/AvroComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/AvroComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/AvroComponentConfiguration.java&#010;index ca10519..42a61fb 100644&#010;--- a/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/AvroComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/component/avro/springboot/AvroComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.avro.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.avro.Protocol;&#010; import org.apache.camel.component.avro.AvroTransport;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010;@@ -26,6 +27,7 @@ import org.springframework.boot.context.properties.NestedConfigurationProperty;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.avro"")&#010; public class AvroComponentConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/AvroDataFormatAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/AvroDataFormatAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/AvroDataFormatAutoConfiguration.java&#010;index f4e6093..4d5debf 100644&#010;--- a/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/AvroDataFormatAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/AvroDataFormatAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.dataformat.avro.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.CamelContextAware;&#010; import org.apache.camel.RuntimeCamelException;&#010;@@ -43,6 +44,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(AvroDataFormatAutoConfiguration.Condition.class)&#010;@@ -82,6 +84,7 @@ public class AvroDataFormatAutoConfiguration {&#010;         };&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/AvroDataFormatConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/AvroDataFormatConfiguration.java b/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/AvroDataFormatConfiguration.java&#010;index 2f5a6a0..54db754 100644&#010;--- a/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/AvroDataFormatConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-avro-starter/src/main/java/org/apache/camel/dataformat/avro/springboot/AvroDataFormatConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.dataformat.avro.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010; /**&#010;@@ -23,6 +24,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.dataformat.avro"")&#010; public class AvroDataFormatConfiguration {&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/cw/springboot/CwComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/cw/springboot/CwComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/cw/springboot/CwComponentAutoConfiguration.java&#010;index 6a1bc5d..4f195f6 100644&#010;--- a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/cw/springboot/CwComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/cw/springboot/CwComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.aws.cw.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.aws.cw.CwComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(CwComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class CwComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddb/springboot/DdbComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddb/springboot/DdbComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddb/springboot/DdbComponentAutoConfiguration.java&#010;index 4782566..b34ab33 100644&#010;--- a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddb/springboot/DdbComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddb/springboot/DdbComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.aws.ddb.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.aws.ddb.DdbComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(DdbComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class DdbComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddbstream/springboot/DdbStreamComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddbstream/springboot/DdbStreamComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddbstream/springboot/DdbStreamComponentAutoConfiguration.java&#010;index 51d8ef5..35cc24e 100644&#010;--- a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddbstream/springboot/DdbStreamComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ddbstream/springboot/DdbStreamComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.aws.ddbstream.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.aws.ddbstream.DdbStreamComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(DdbStreamComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class DdbStreamComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ec2/springboot/EC2ComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ec2/springboot/EC2ComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ec2/springboot/EC2ComponentAutoConfiguration.java&#010;index 5ec7a17..914b9f1 100644&#010;--- a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ec2/springboot/EC2ComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ec2/springboot/EC2ComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.aws.ec2.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.aws.ec2.EC2Component;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(EC2ComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class EC2ComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/firehose/springboot/KinesisFirehoseComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/firehose/springboot/KinesisFirehoseComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/firehose/springboot/KinesisFirehoseComponentAutoConfiguration.java&#010;index 7f60733..2f91996 100644&#010;--- a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/firehose/springboot/KinesisFirehoseComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/firehose/springboot/KinesisFirehoseComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.aws.firehose.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.aws.firehose.KinesisFirehoseComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(KinesisFirehoseComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class KinesisFirehoseComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/kinesis/springboot/KinesisComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/kinesis/springboot/KinesisComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/kinesis/springboot/KinesisComponentAutoConfiguration.java&#010;index 402f43d..043a07c 100644&#010;--- a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/kinesis/springboot/KinesisComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/kinesis/springboot/KinesisComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.aws.kinesis.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.aws.kinesis.KinesisComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(KinesisComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class KinesisComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/s3/springboot/S3ComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/s3/springboot/S3ComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/s3/springboot/S3ComponentAutoConfiguration.java&#010;index 192ebf0..eff632b 100644&#010;--- a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/s3/springboot/S3ComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/s3/springboot/S3ComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.aws.s3.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.aws.s3.S3Component;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(S3ComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class S3ComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sdb/springboot/SdbComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sdb/springboot/SdbComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sdb/springboot/SdbComponentAutoConfiguration.java&#010;index 784b48d..17de781 100644&#010;--- a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sdb/springboot/SdbComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sdb/springboot/SdbComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.aws.sdb.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.aws.sdb.SdbComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SdbComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class SdbComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ses/springboot/SesComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ses/springboot/SesComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ses/springboot/SesComponentAutoConfiguration.java&#010;index da577b8..472b4f8 100644&#010;--- a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ses/springboot/SesComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/ses/springboot/SesComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.aws.ses.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.aws.ses.SesComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SesComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class SesComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sns/springboot/SnsComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sns/springboot/SnsComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sns/springboot/SnsComponentAutoConfiguration.java&#010;index 3a89352..e7edf7f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sns/springboot/SnsComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sns/springboot/SnsComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.aws.sns.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.aws.sns.SnsComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SnsComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class SnsComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2297128f/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sqs/springboot/SqsComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sqs/springboot/SqsComponentAutoConfiguration.java b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sqs/springboot/SqsComponentAutoConfiguration.java&#010;index d898529..f8a6650 100644&#010;--- a/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sqs/springboot/SqsComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-aws-starter/src/main/java/org/apache/camel/component/aws/sqs/springboot/SqsComponentAutoConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.aws.sqs.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.aws.sqs.SqsComponent;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010;@@ -36,6 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(SqsComponentAutoConfiguration.Condition.class)&#010;@@ -53,6 +55,7 @@ public class SqsComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C6d252065a71e4141a84805e9335dda2f%40git.apache.org%3E,2017-04-19 08:35:57,commits,396.0,  [12/13] camel git commit: CAMEL-11165 Add @Generated annotation to code g...
245,245,211.0,400.0,zregv...@apache.org,"CAMEL-11165 Add @Generated annotation to code g...&#010;&#010;...enerated by SpringBootAutoConfigurationMojo&#010;&#010;This removes the `date` annotation member on additional components&#010;missed in the first run.&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/e1cc3a2c&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/e1cc3a2c&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/e1cc3a2c&#010;&#010;Branch: refs/heads/master&#010;Commit: e1cc3a2cf12ec08e84c3d0f5e9fb08f813980ae1&#010;Parents: 40c2a75&#010;Author: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Authored: Wed Apr 19 11:13:50 2017 +0200&#010;Committer: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Committed: Wed Apr 19 11:13:50 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../bonita/springboot/BonitaComponentAutoConfiguration.java      | 4 ++--&#010; .../pubnub/springboot/PubNubComponentAutoConfiguration.java      | 4 ++--&#010; .../springboot/RestSwaggerComponentAutoConfiguration.java        | 4 ++--&#010; .../swagger/springboot/RestSwaggerComponentConfiguration.java    | 2 +-&#010; 4 files changed, 7 insertions(+), 7 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/e1cc3a2c/platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/BonitaComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/BonitaComponentAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/BonitaComponentAutoConfiguration.java&#010;index deee612..8bfa8d8 100644&#010;--- a/platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/BonitaComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/BonitaComponentAutoConfiguration.java&#010;@@ -37,7 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;-@Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"", date&#010;= ""2017-04-19T08:39:00.866Z"")&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BonitaComponentAutoConfiguration.Condition.class)&#010;@@ -55,7 +55,7 @@ public class BonitaComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;-    @Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"",&#010;date = ""2017-04-19T08:39:00.940Z"")&#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/e1cc3a2c/platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/PubNubComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/PubNubComponentAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/PubNubComponentAutoConfiguration.java&#010;index c649698..671c1ce 100644&#010;--- a/platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/PubNubComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/PubNubComponentAutoConfiguration.java&#010;@@ -37,7 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;-@Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"", date&#010;= ""2017-04-19T08:39:35.390Z"")&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(PubNubComponentAutoConfiguration.Condition.class)&#010;@@ -55,7 +55,7 @@ public class PubNubComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;-    @Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"",&#010;date = ""2017-04-19T08:39:35.455Z"")&#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/e1cc3a2c/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentAutoConfiguration.java&#010;index 694bc3f..56064f2 100644&#010;--- a/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentAutoConfiguration.java&#010;@@ -41,7 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;-@Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"", date&#010;= ""2017-04-19T08:40:54.730Z"")&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(RestSwaggerComponentAutoConfiguration.Condition.class)&#010;@@ -86,7 +86,7 @@ public class RestSwaggerComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;-    @Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"",&#010;date = ""2017-04-19T08:40:54.785Z"")&#010;+    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/e1cc3a2c/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentConfiguration.java&#010;index 205fcfd..cf01faa 100644&#010;--- a/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentConfiguration.java&#010;@@ -25,7 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;-@Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"", date&#010;= ""2017-04-19T08:40:54.520Z"")&#010;+@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010; @ConfigurationProperties(prefix = ""camel.component.rest-swagger"")&#010; public class RestSwaggerComponentConfiguration {&#010; &#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cc5e172ece7e04f46bc0fbf0a0941c90d%40git.apache.org%3E,2017-04-19 09:14:38,commits,400.0,  [2/2] camel git commit: CAMEL-11165 Add @Generated annotation to code g...
246,246,151.0,379.0,lburgazz...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 110d1c9d6 -&gt; 567dff400&#010;&#010;&#010;Service Call : Allow to confgire ribbon load balancer using ribbon specific properties&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/567dff40&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/567dff40&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/567dff40&#010;&#010;Branch: refs/heads/master&#010;Commit: 567dff4003e146ae1b0364dca4fbc2d126ca219b&#010;Parents: 110d1c9&#010;Author: lburgazzoli &lt;lburgazzoli@gmail.com&gt;&#010;Authored: Tue Apr 18 16:52:53 2017 +0200&#010;Committer: lburgazzoli &lt;lburgazzoli@gmail.com&gt;&#010;Committed: Tue Apr 18 16:53:02 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../camel-ribbon/src/main/docs/ribbon.adoc      |  4 +-&#010; .../component/ribbon/RibbonConfiguration.java   | 19 +++--&#010; .../ribbon/cloud/RibbonLoadBalancer.java        | 71 +++++++++++-----&#010; .../ribbon/cloud/RibbonLoadBalancerFactory.java |  8 +-&#010; .../cloud/RibbonServiceCallUpdateRouteTest.java |  4 +-&#010; ...DslRibbonPropertiesServiceCallRouteTest.java | 31 +++++++&#010; ...gDslRibbonPropertiesServiceCallRouteTest.xml | 55 ++++++++++++&#010; ...viceCallLoadBalancerConfigurationCommon.java | 89 ++++++++++++++++++++&#010; ...CallLoadBalancerConfigurationProperties.java | 48 +++++++++++&#010; .../cloud/EtcdServiceDiscoveryDisabledTest.java |  2 +-&#010; .../cloud/RibbonCloudAutoConfiguration.java     | 53 ++++++++++--&#010; .../cloud/RibbonCloudConfiguration.java         | 45 ----------&#010; .../src/main/resources/application.properties   |  1 -&#010; .../cloud/RibbonLoadBalancerDisabledTest.java   | 64 ++++++++++++++&#010; .../cloud/RibbonLoadBalancerEnabledTest.java    | 65 ++++++++++++++&#010; .../src/test/resources/logback.xml              | 39 +++++++++&#010; .../SpringBootAutoConfigurationMojo.java        | 12 +++&#010; 17 files changed, 523 insertions(+), 87 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/567dff40/components/camel-ribbon/src/main/docs/ribbon.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-ribbon/src/main/docs/ribbon.adoc b/components/camel-ribbon/src/main/docs/ribbon.adoc&#010;index ceb2e0e..b4dc6c9 100644&#010;--- a/components/camel-ribbon/src/main/docs/ribbon.adoc&#010;+++ b/components/camel-ribbon/src/main/docs/ribbon.adoc&#010;@@ -26,7 +26,7 @@ This component helps applying load balancing feature at the client side&#010;when usi&#010; [source,java]&#010; ----&#010; RibbonConfiguration configuration = new RibbonConfiguration();&#010;-configuration.setClientConfig(Collections.singletonMap(""ServerListRefreshInterval"", ""250""));&#010;+configuration.addProperties(""ServerListRefreshInterval"", ""250"");&#010; &#010; RibbonLoadBalancer loadBalancer = new RibbonLoadBalancer(configuration);&#010; &#010;@@ -44,7 +44,7 @@ from(""direct:start"")&#010; [source,properties]&#010; .application.properties&#010; ----&#010;-camel.cloud.ribbon.client-config[ServerListRefreshInterval] = 250&#010;+camel.cloud.ribbon.properties[ServerListRefreshInterval] = 250&#010; ----&#010; +&#010; [source,java]&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/567dff40/components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/RibbonConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/RibbonConfiguration.java&#010;b/components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/RibbonConfiguration.java&#010;index 40bcb31..41ac473 100644&#010;--- a/components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/RibbonConfiguration.java&#010;+++ b/components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/RibbonConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.ribbon;&#010; &#010;+import java.util.HashMap;&#010; import java.util.Map;&#010; import java.util.function.Supplier;&#010; &#010;@@ -29,7 +30,7 @@ public class RibbonConfiguration {&#010;     private IRule rule;&#010;     private IPing ping;&#010;     private String clientName;&#010;-    private Map&lt;String, String&gt; clientConfig;&#010;+    private Map&lt;String, String&gt; properties;&#010; &#010;     public String getNamespace() {&#010;         return namespace;&#010;@@ -87,11 +88,19 @@ public class RibbonConfiguration {&#010;         this.clientName = clientName;&#010;     }&#010; &#010;-    public Map&lt;String, String&gt; getClientConfig() {&#010;-        return clientConfig;&#010;+    public Map&lt;String, String&gt; getProperties() {&#010;+        return properties;&#010;     }&#010; &#010;-    public void setClientConfig(Map&lt;String, String&gt; clientConfig) {&#010;-        this.clientConfig = clientConfig;&#010;+    public void setProperties(Map&lt;String, String&gt; clientConfig) {&#010;+        this.properties = clientConfig;&#010;+    }&#010;+&#010;+    public void addProperty(String key, String value) {&#010;+        if (this.properties == null) {&#010;+            this.properties = new HashMap&lt;&gt;();&#010;+        }&#010;+&#010;+        this.properties.put(key, value);&#010;     }&#010; }&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/567dff40/components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/RibbonLoadBalancer.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/RibbonLoadBalancer.java&#010;b/components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/RibbonLoadBalancer.java&#010;index b867eea..759a602 100644&#010;--- a/components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/RibbonLoadBalancer.java&#010;+++ b/components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/RibbonLoadBalancer.java&#010;@@ -30,6 +30,7 @@ import com.netflix.loadbalancer.DummyPing;&#010; import com.netflix.loadbalancer.ILoadBalancer;&#010; import com.netflix.loadbalancer.PollingServerListUpdater;&#010; import com.netflix.loadbalancer.RoundRobinRule;&#010;+import com.netflix.loadbalancer.Server;&#010; import com.netflix.loadbalancer.ServerList;&#010; import com.netflix.loadbalancer.ZoneAwareLoadBalancer;&#010; import org.apache.camel.CamelContext;&#010;@@ -103,12 +104,14 @@ public class RibbonLoadBalancer&#010;     protected void doStart() throws Exception {&#010;         ObjectHelper.notNull(configuration, ""configuration"");&#010;         ObjectHelper.notNull(camelContext, ""camel context"");&#010;-        ObjectHelper.notNull(serviceDiscovery, ""service discovery"");&#010;-        ObjectHelper.notNull(serviceFilter, ""service filter"");&#010; &#010;-        LOGGER.info(""ServiceCall is using ribbon load balancer with service discovery type:&#010;{} and service filter type: {}"",&#010;-            serviceDiscovery.getClass(),&#010;-            serviceFilter.getClass());&#010;+        if (serviceDiscovery != null) {&#010;+            LOGGER.info(""ServiceCall is using ribbon load balancer with service discovery&#010;type: {} and service filter: {}"",&#010;+                serviceDiscovery.getClass(),&#010;+                serviceDiscovery != null ? serviceFilter.getClass() : ""none"");&#010;+        } else {&#010;+            LOGGER.info(""ServiceCall is using ribbon load balancer"");&#010;+        }&#010; &#010;         ServiceHelper.startService(serviceDiscovery);&#010;     }&#010;@@ -127,28 +130,50 @@ public class RibbonLoadBalancer&#010; &#010;     @Override&#010;     public &lt;T&gt; T process(String serviceName, LoadBalancerFunction&lt;T&gt; request)&#010;throws Exception {&#010;-        ILoadBalancer loadBalancer = loadBalancers.computeIfAbsent(serviceName, key -&gt;&#010;createLoadBalancer(key, serviceDiscovery));&#010;-        RibbonServiceDefinition service = (RibbonServiceDefinition)loadBalancer.chooseServer(serviceName);&#010;+        ILoadBalancer loadBalancer = loadBalancers.computeIfAbsent(serviceName, key -&gt;&#010;createLoadBalancer(key));&#010;+        Server server = loadBalancer.chooseServer(serviceName);&#010; &#010;-        if (service == null) {&#010;+        if (server == null) {&#010;             throw new RejectedExecutionException(""No active services with name "" + serviceName);&#010;         }&#010; &#010;-        return request.apply(service);&#010;+        ServiceDefinition definition;&#010;+&#010;+        if (server instanceof ServiceDefinition) {&#010;+            // If the service discovery is one of camel provides, the definition&#010;+            // is already of the expected type.&#010;+            definition = (ServiceDefinition)server;&#010;+        } else {&#010;+            // If ribbon server list is configured through client config properties&#010;+            // i.e. with listOfServers property the instance provided by the load&#010;+            // balancer is of type Server so a conversion is needed&#010;+            definition = new RibbonServiceDefinition(&#010;+                serviceName,&#010;+                server.getHost(),&#010;+                server.getPort()&#010;+            );&#010;+&#010;+            String zone = server.getZone();&#010;+            if (zone != null) {&#010;+                server.setZone(zone);&#010;+            }&#010;+        }&#010;+&#010;+        return request.apply(definition);&#010;     }&#010; &#010;     // ************************&#010;     // Helpers&#010;     // ************************&#010; &#010;-    private ZoneAwareLoadBalancer&lt;RibbonServiceDefinition&gt; createLoadBalancer(String&#010;serviceName, ServiceDiscovery serviceDiscovery) {&#010;+    private ZoneAwareLoadBalancer&lt;RibbonServiceDefinition&gt; createLoadBalancer(String&#010;serviceName) {&#010;         // setup client config&#010;         IClientConfig config = configuration.getClientName() != null&#010;             ? IClientConfig.Builder.newBuilder(configuration.getClientName()).build()&#010;             : IClientConfig.Builder.newBuilder().build();&#010; &#010;-        if (configuration.getClientConfig() != null) {&#010;-            for (Map.Entry&lt;String, String&gt; entry : configuration.getClientConfig().entrySet())&#010;{&#010;+        if (configuration.getProperties() != null) {&#010;+            for (Map.Entry&lt;String, String&gt; entry : configuration.getProperties().entrySet())&#010;{&#010;                 IClientConfigKey key = IClientConfigKey.Keys.valueOf(entry.getKey());&#010;                 String value = entry.getValue();&#010; &#010;@@ -157,13 +182,21 @@ public class RibbonLoadBalancer&#010;             }&#010;         }&#010; &#010;-        return new ZoneAwareLoadBalancer&lt;&gt;(&#010;-            config,&#010;-            configuration.getRuleOrDefault(RoundRobinRule::new),&#010;-            configuration.getPingOrDefault(DummyPing::new),&#010;-            new RibbonServerList(serviceName, serviceDiscovery, serviceFilter),&#010;-            null,&#010;-            new PollingServerListUpdater(config));&#010;+        ZoneAwareLoadBalancer&lt;RibbonServiceDefinition&gt; loadBalancer;&#010;+&#010;+        if (serviceDiscovery != null) {&#010;+            loadBalancer = new ZoneAwareLoadBalancer&lt;&gt;(&#010;+                config,&#010;+                configuration.getRuleOrDefault(RoundRobinRule::new),&#010;+                configuration.getPingOrDefault(DummyPing::new),&#010;+                new RibbonServerList(serviceName, serviceDiscovery, serviceFilter),&#010;+                null,&#010;+                new PollingServerListUpdater(config));&#010;+        } else {&#010;+            loadBalancer = new ZoneAwareLoadBalancer&lt;&gt;(config);&#010;+        }&#010;+&#010;+        return loadBalancer;&#010;     }&#010; &#010;     static final class RibbonServerList implements ServerList&lt;RibbonServiceDefinition&gt;&#010; {&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/567dff40/components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/RibbonLoadBalancerFactory.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/RibbonLoadBalancerFactory.java&#010;b/components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/RibbonLoadBalancerFactory.java&#010;index 5a211fc..f166011 100644&#010;--- a/components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/RibbonLoadBalancerFactory.java&#010;+++ b/components/camel-ribbon/src/main/java/org/apache/camel/component/ribbon/cloud/RibbonLoadBalancerFactory.java&#010;@@ -70,12 +70,12 @@ public class RibbonLoadBalancerFactory implements LoadBalancerFactory&#010;{&#010;         configuration.setClientName(clientName);&#010;     }&#010; &#010;-    public Map&lt;String, String&gt; getClientConfig() {&#010;-        return configuration.getClientConfig();&#010;+    public Map&lt;String, String&gt; getProperties() {&#010;+        return configuration.getProperties();&#010;     }&#010; &#010;-    public void setClientConfig(Map&lt;String, String&gt; clientConfig) {&#010;-        configuration.setClientConfig(clientConfig);&#010;+    public void setProperties(Map&lt;String, String&gt; clientConfig) {&#010;+        configuration.setProperties(clientConfig);&#010;     }&#010; &#010;     // *************************************************************************&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/567dff40/components/camel-ribbon/src/test/java/org/apache/camel/component/ribbon/cloud/RibbonServiceCallUpdateRouteTest.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-ribbon/src/test/java/org/apache/camel/component/ribbon/cloud/RibbonServiceCallUpdateRouteTest.java&#010;b/components/camel-ribbon/src/test/java/org/apache/camel/component/ribbon/cloud/RibbonServiceCallUpdateRouteTest.java&#010;index c00f1c7..27aba3e 100644&#010;--- a/components/camel-ribbon/src/test/java/org/apache/camel/component/ribbon/cloud/RibbonServiceCallUpdateRouteTest.java&#010;+++ b/components/camel-ribbon/src/test/java/org/apache/camel/component/ribbon/cloud/RibbonServiceCallUpdateRouteTest.java&#010;@@ -17,8 +17,6 @@&#010; &#010; package org.apache.camel.component.ribbon.cloud;&#010; &#010;-import java.util.Collections;&#010;-&#010; import org.apache.camel.RoutesBuilder;&#010; import org.apache.camel.builder.RouteBuilder;&#010; import org.apache.camel.component.ribbon.RibbonConfiguration;&#010;@@ -76,7 +74,7 @@ public class RibbonServiceCallUpdateRouteTest extends CamelTestSupport {&#010;             public void configure() throws Exception {&#010;                 RibbonConfiguration configuration = new RibbonConfiguration();&#010;                 // lets update quick so we do not have to sleep so much in the tests&#010;-                configuration.setClientConfig(Collections.singletonMap(""ServerListRefreshInterval"",&#010;""250""));&#010;+                configuration.addProperty(""ServerListRefreshInterval"", ""250"");&#010;                 RibbonLoadBalancer loadBalancer = new RibbonLoadBalancer(configuration);&#010; &#010;                 from(""direct:start"")&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/567dff40/components/camel-ribbon/src/test/java/org/apache/camel/component/ribbon/cloud/SpringDslRibbonPropertiesServiceCallRouteTest.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-ribbon/src/test/java/org/apache/camel/component/ribbon/cloud/SpringDslRibbonPropertiesServiceCallRouteTest.java&#010;b/components/camel-ribbon/src/test/java/org/apache/camel/component/ribbon/cloud/SpringDslRibbonPropertiesServiceCallRouteTest.java&#010;new file mode 100644&#010;index 0000000..9456b7a&#010;--- /dev/null&#010;+++ b/components/camel-ribbon/src/test/java/org/apache/camel/component/ribbon/cloud/SpringDslRibbonPropertiesServiceCallRouteTest.java&#010;@@ -0,0 +1,31 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+&#010;+package org.apache.camel.component.ribbon.cloud;&#010;+&#010;+import org.springframework.context.support.AbstractApplicationContext;&#010;+import org.springframework.context.support.ClassPathXmlApplicationContext;&#010;+import org.springframework.test.annotation.DirtiesContext;&#010;+&#010;+@DirtiesContext&#010;+public class SpringDslRibbonPropertiesServiceCallRouteTest extends SpringRibbonServiceCallRouteTest&#010;{&#010;+    @Override&#010;+    protected AbstractApplicationContext createApplicationContext() {&#010;+        return new ClassPathXmlApplicationContext(""org/apache/camel/component/ribbon/cloud/SpringDslRibbonPropertiesServiceCallRouteTest.xml"");&#010;+    }&#010;+}&#010;+&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/567dff40/components/camel-ribbon/src/test/resources/org/apache/camel/component/ribbon/cloud/SpringDslRibbonPropertiesServiceCallRouteTest.xml&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-ribbon/src/test/resources/org/apache/camel/component/ribbon/cloud/SpringDslRibbonPropertiesServiceCallRouteTest.xml&#010;b/components/camel-ribbon/src/test/resources/org/apache/camel/component/ribbon/cloud/SpringDslRibbonPropertiesServiceCallRouteTest.xml&#010;new file mode 100644&#010;index 0000000..b182bc2&#010;--- /dev/null&#010;+++ b/components/camel-ribbon/src/test/resources/org/apache/camel/component/ribbon/cloud/SpringDslRibbonPropertiesServiceCallRouteTest.xml&#010;@@ -0,0 +1,55 @@&#010;+&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;&#010;+&lt;!--&#010;+  ~ Licensed to the Apache Software Foundation (ASF) under one or more&#010;+  ~ contributor license agreements.  See the NOTICE file distributed with&#010;+  ~ this work for additional information regarding copyright ownership.&#010;+  ~ The ASF licenses this file to You under the Apache License, Version 2.0&#010;+  ~ (the ""License""); you may not use this file except in compliance with&#010;+  ~ the License.  You may obtain a copy of the License at&#010;+  ~&#010;+  ~      http://www.apache.org/licenses/LICENSE-2.0&#010;+  ~&#010;+  ~ Unless required by applicable law or agreed to in writing, software&#010;+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+  ~ See the License for the specific language governing permissions and&#010;+  ~ limitations under the License.&#010;+  --&gt;&#010;+&lt;beans xmlns=""http://www.springframework.org/schema/beans""&#010;+       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#010;+       xsi:schemaLocation=""&#010;+         http://www.springframework.org/schema/beans&#010;+         http://www.springframework.org/schema/beans/spring-beans.xsd&#010;+         http://camel.apache.org/schema/spring&#010;+         http://camel.apache.org/schema/spring/camel-spring.xsd""&gt;&#010;+&#010;+  &lt;camelContext xmlns=""http://camel.apache.org/schema/spring""&gt;&#010;+    &lt;route&gt;&#010;+      &lt;from uri=""direct:start""/&gt;&#010;+      &lt;serviceCall name=""myService""&gt;&#010;+        &lt;!-- enable ribbon load balancer --&gt;&#010;+        &lt;ribbonLoadBalancer clientName=""myClient""&gt;&#010;+          &lt;properties key=""listOfServers"" value=""localhost:9090,localhost:9091""/&gt;&#010;+        &lt;/ribbonLoadBalancer&gt;&#010;+      &lt;/serviceCall&gt;&#010;+      &lt;to uri=""mock:result""/&gt;&#010;+    &lt;/route&gt;&#010;+&#010;+    &lt;route&gt;&#010;+      &lt;from uri=""jetty:http://localhost:9090""/&gt;&#010;+      &lt;to uri=""mock:9090""/&gt;&#010;+      &lt;transform&gt;&#010;+        &lt;constant&gt;9090&lt;/constant&gt;&#010;+      &lt;/transform&gt;&#010;+    &lt;/route&gt;&#010;+&#010;+    &lt;route&gt;&#010;+      &lt;from uri=""jetty:http://localhost:9091""/&gt;&#010;+      &lt;to uri=""mock:9091""/&gt;&#010;+      &lt;transform&gt;&#010;+        &lt;constant&gt;9091&lt;/constant&gt;&#010;+      &lt;/transform&gt;&#010;+    &lt;/route&gt;&#010;+  &lt;/camelContext&gt;&#010;+&#010;+&lt;/beans&gt;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/567dff40/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationCommon.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationCommon.java&#010;b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationCommon.java&#010;new file mode 100644&#010;index 0000000..d45c3cc&#010;--- /dev/null&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationCommon.java&#010;@@ -0,0 +1,89 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.model.cloud.springboot;&#010;+&#010;+import java.util.Map;&#010;+&#010;+/**&#010;+ * Generated by camel-package-maven-plugin - do not edit this file!&#010;+ */&#010;+public class RibbonServiceCallLoadBalancerConfigurationCommon {&#010;+&#010;+    /**&#010;+     * The namespace&#010;+     */&#010;+    private String namespace;&#010;+    /**&#010;+     * The username&#010;+     */&#010;+    private String username;&#010;+    /**&#010;+     * The password&#010;+     */&#010;+    private String password;&#010;+    /**&#010;+     * Sets the Ribbon client name&#010;+     */&#010;+    private String clientName;&#010;+    /**&#010;+     * Set client properties to use. These properties are specific to what&#010;+     * service call implementation are in use. For example if using ribbon then&#010;+     * the client properties are define in&#010;+     * com.netflix.client.config.CommonClientConfigKey.&#010;+     */&#010;+    private Map&lt;String, String&gt; properties;&#010;+&#010;+    public String getNamespace() {&#010;+        return namespace;&#010;+    }&#010;+&#010;+    public void setNamespace(String namespace) {&#010;+        this.namespace = namespace;&#010;+    }&#010;+&#010;+    public String getUsername() {&#010;+        return username;&#010;+    }&#010;+&#010;+    public void setUsername(String username) {&#010;+        this.username = username;&#010;+    }&#010;+&#010;+    public String getPassword() {&#010;+        return password;&#010;+    }&#010;+&#010;+    public void setPassword(String password) {&#010;+        this.password = password;&#010;+    }&#010;+&#010;+    public String getClientName() {&#010;+        return clientName;&#010;+    }&#010;+&#010;+    public void setClientName(String clientName) {&#010;+        this.clientName = clientName;&#010;+    }&#010;+&#010;+    public Map&lt;String, String&gt; getProperties() {&#010;+        return properties;&#010;+    }&#010;+&#010;+    public void setProperties(Map&lt;String, String&gt; properties) {&#010;+        this.properties = properties;&#010;+    }&#010;+}&#010;\ No newline at end of file&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/567dff40/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationProperties.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationProperties.java&#010;b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationProperties.java&#010;new file mode 100644&#010;index 0000000..a826984&#010;--- /dev/null&#010;+++ b/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/model/cloud/springboot/RibbonServiceCallLoadBalancerConfigurationProperties.java&#010;@@ -0,0 +1,48 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.model.cloud.springboot;&#010;+&#010;+import java.util.HashMap;&#010;+import java.util.Map;&#010;+import org.springframework.boot.context.properties.ConfigurationProperties;&#010;+&#010;+@ConfigurationProperties(prefix = ""camel.cloud.ribbon.load-balancer"")&#010;+public class RibbonServiceCallLoadBalancerConfigurationProperties&#010;+        extends&#010;+            RibbonServiceCallLoadBalancerConfigurationCommon {&#010;+&#010;+    /**&#010;+     * Enable the component&#010;+     */&#010;+    private boolean enabled = true;&#010;+    /**&#010;+     * Define additional configuration definitions&#010;+     */&#010;+    private Map&lt;String, RibbonServiceCallLoadBalancerConfigurationCommon&gt; configurations&#010;= new HashMap&lt;&gt;();&#010;+&#010;+    public Map&lt;String, RibbonServiceCallLoadBalancerConfigurationCommon&gt; getConfigurations()&#010;{&#010;+        return configurations;&#010;+    }&#010;+&#010;+    public boolean isEnabled() {&#010;+        return enabled;&#010;+    }&#010;+&#010;+    public void setEnabled(boolean enabled) {&#010;+        this.enabled = enabled;&#010;+    }&#010;+}&#010;\ No newline at end of file&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/567dff40/platforms/spring-boot/components-starter/camel-etcd-starter/src/test/java/org/apache/camel/component/etcd/springboot/cloud/EtcdServiceDiscoveryDisabledTest.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-etcd-starter/src/test/java/org/apache/camel/component/etcd/springboot/cloud/EtcdServiceDiscoveryDisabledTest.java&#010;b/platforms/spring-boot/components-starter/camel-etcd-starter/src/test/java/org/apache/camel/component/etcd/springboot/cloud/EtcdServiceDiscoveryDisabledTest.java&#010;index 5ca84bf..3d3548a 100644&#010;--- a/platforms/spring-boot/components-starter/camel-etcd-starter/src/test/java/org/apache/camel/component/etcd/springboot/cloud/EtcdServiceDiscoveryDisabledTest.java&#010;+++ b/platforms/spring-boot/components-starter/camel-etcd-starter/src/test/java/org/apache/camel/component/etcd/springboot/cloud/EtcdServiceDiscoveryDisabledTest.java&#010;@@ -36,7 +36,7 @@ import org.springframework.test.context.junit4.SpringRunner;&#010; @SpringBootApplication&#010; @SpringBootTest(&#010;     classes = {&#010;-        EtcdServiceDiscoveryEnabledTest.TestConfiguration.class&#010;+        EtcdServiceDiscoveryDisabledTest.TestConfiguration.class&#010;     },&#010;     properties = {&#010;         ""debug=false"",&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/567dff40/platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/java/org/apache/camel/component/ribbon/springboot/cloud/RibbonCloudAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/java/org/apache/camel/component/ribbon/springboot/cloud/RibbonCloudAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/java/org/apache/camel/component/ribbon/springboot/cloud/RibbonCloudAutoConfiguration.java&#010;index fc6a4fd..8a58108 100644&#010;--- a/platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/java/org/apache/camel/component/ribbon/springboot/cloud/RibbonCloudAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/java/org/apache/camel/component/ribbon/springboot/cloud/RibbonCloudAutoConfiguration.java&#010;@@ -18,13 +18,19 @@ package org.apache.camel.component.ribbon.springboot.cloud;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.PostConstruct;&#010; &#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.cloud.LoadBalancer;&#010; import org.apache.camel.component.ribbon.cloud.RibbonLoadBalancerFactory;&#010;+import org.apache.camel.model.cloud.springboot.RibbonServiceCallLoadBalancerConfigurationCommon;&#010;+import org.apache.camel.model.cloud.springboot.RibbonServiceCallLoadBalancerConfigurationProperties;&#010; import org.apache.camel.spring.boot.CamelAutoConfiguration;&#010; import org.apache.camel.spring.boot.util.GroupCondition;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;+import org.springframework.beans.factory.BeanCreationException;&#010;+import org.springframework.beans.factory.annotation.Autowired;&#010;+import org.springframework.beans.factory.config.ConfigurableBeanFactory;&#010; import org.springframework.boot.autoconfigure.AutoConfigureAfter;&#010; import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;&#010; import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;&#010;@@ -38,21 +44,54 @@ import org.springframework.context.annotation.Lazy;&#010; @ConditionalOnBean(CamelAutoConfiguration.class)&#010; @Conditional(RibbonCloudAutoConfiguration.Condition.class)&#010; @AutoConfigureAfter(CamelAutoConfiguration.class)&#010;-@EnableConfigurationProperties(RibbonCloudConfiguration.class)&#010;+@EnableConfigurationProperties(RibbonServiceCallLoadBalancerConfigurationProperties.class)&#010; public class RibbonCloudAutoConfiguration {&#010;+    @Autowired&#010;+    private CamelContext camelContext;&#010;+    @Autowired&#010;+    private RibbonServiceCallLoadBalancerConfigurationProperties configuration;&#010;+    @Autowired&#010;+    private ConfigurableBeanFactory beanFactory;&#010;+&#010;     @Lazy&#010;     @Bean(name = ""ribbon-load-balancer"")&#010;     @ConditionalOnClass(CamelContext.class)&#010;-    public LoadBalancer configureServiceDiscoveryFactory(CamelContext camelContext, RibbonCloudConfiguration&#010;configuration) throws Exception {&#010;+    public LoadBalancer configureLoadBalancerFactory() throws Exception {&#010;         RibbonLoadBalancerFactory factory = new RibbonLoadBalancerFactory();&#010; &#010;-        Map&lt;String, Object&gt; parameters = new HashMap&lt;&gt;();&#010;-        IntrospectionSupport.getProperties(configuration, parameters, null, false);&#010;-        IntrospectionSupport.setProperties(camelContext, camelContext.getTypeConverter(),&#010;factory, parameters);&#010;+        IntrospectionSupport.setProperties(&#010;+            camelContext,&#010;+            camelContext.getTypeConverter(),&#010;+            factory,&#010;+            IntrospectionSupport.getNonNullProperties(configuration));&#010; &#010;         return factory.newInstance(camelContext);&#010;     }&#010; &#010;+    @PostConstruct&#010;+    public void postConstruct() {&#010;+        if (beanFactory != null) {&#010;+            Map&lt;String, Object&gt; parameters = new HashMap&lt;&gt;();&#010;+&#010;+            for (Map.Entry&lt;String, RibbonServiceCallLoadBalancerConfigurationCommon&gt;&#010;entry : configuration.getConfigurations().entrySet()) {&#010;+                // clean up params&#010;+                parameters.clear();&#010;+&#010;+                // The instance factory&#010;+                RibbonLoadBalancerFactory factory = new RibbonLoadBalancerFactory();&#010;+&#010;+                try {&#010;+                    IntrospectionSupport.getProperties(entry.getValue(), parameters, null,&#010;false);&#010;+                    IntrospectionSupport.setProperties(camelContext, camelContext.getTypeConverter(),&#010;factory, parameters);&#010;+&#010;+                    beanFactory.registerSingleton(entry.getKey(), factory.newInstance(camelContext));&#010;+                } catch (Exception e) {&#010;+                    throw new BeanCreationException(entry.getKey(), e.getMessage(), e);&#010;+                }&#010;+            }&#010;+        }&#010;+    }&#010;+&#010;     // *******************************&#010;     // Condition&#010;     // *******************************&#010;@@ -60,8 +99,8 @@ public class RibbonCloudAutoConfiguration {&#010;     public static class Condition extends GroupCondition {&#010;         public Condition() {&#010;             super(&#010;-                ""camel.cloud"",&#010;-                ""camel.cloud.ribbon""&#010;+                ""camel.cloud.ribbon"",&#010;+                ""camel.cloud.ribbon.load-balancer""&#010;             );&#010;         }&#010;     }&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/567dff40/platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/java/org/apache/camel/component/ribbon/springboot/cloud/RibbonCloudConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/java/org/apache/camel/component/ribbon/springboot/cloud/RibbonCloudConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/java/org/apache/camel/component/ribbon/springboot/cloud/RibbonCloudConfiguration.java&#010;deleted file mode 100644&#010;index dd31bea..0000000&#010;--- a/platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/java/org/apache/camel/component/ribbon/springboot/cloud/RibbonCloudConfiguration.java&#010;+++ /dev/null&#010;@@ -1,45 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.component.ribbon.springboot.cloud;&#010;-&#010;-import org.apache.camel.component.ribbon.RibbonConfiguration;&#010;-import org.springframework.boot.context.properties.ConfigurationProperties;&#010;-&#010;-@ConfigurationProperties(prefix = ""camel.cloud.ribbon"")&#010;-public class RibbonCloudConfiguration {&#010;-    private boolean enabled = true;&#010;-    private LoadBalancerConfiguration loadBalancer = new LoadBalancerConfiguration();&#010;-&#010;-    public boolean isEnabled() {&#010;-        return enabled;&#010;-    }&#010;-&#010;-    public void setEnabled(boolean enabled) {&#010;-        this.enabled = enabled;&#010;-    }&#010;-&#010;-    public LoadBalancerConfiguration getLoadBalancer() {&#010;-        return loadBalancer;&#010;-    }&#010;-&#010;-    // *************************************************************************&#010;-    //&#010;-    // *************************************************************************&#010;-&#010;-    public class LoadBalancerConfiguration extends RibbonConfiguration {&#010;-    }&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/567dff40/platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/resources/application.properties&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/resources/application.properties&#010;b/platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/resources/application.properties&#010;deleted file mode 100644&#010;index 024710e..0000000&#010;--- a/platforms/spring-boot/components-starter/camel-ribbon-starter/src/main/resources/application.properties&#010;+++ /dev/null&#010;@@ -1 +0,0 @@&#010;-camel.cloud.ribbon.load-balancer.&#010;\ No newline at end of file&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/567dff40/platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/java/org/apache/camel/component/ribbon/springboot/cloud/RibbonLoadBalancerDisabledTest.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/java/org/apache/camel/component/ribbon/springboot/cloud/RibbonLoadBalancerDisabledTest.java&#010;b/platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/java/org/apache/camel/component/ribbon/springboot/cloud/RibbonLoadBalancerDisabledTest.java&#010;new file mode 100644&#010;index 0000000..e2e322f&#010;--- /dev/null&#010;+++ b/platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/java/org/apache/camel/component/ribbon/springboot/cloud/RibbonLoadBalancerDisabledTest.java&#010;@@ -0,0 +1,64 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.component.ribbon.springboot.cloud;&#010;+&#010;+import java.util.Map;&#010;+&#010;+import org.apache.camel.cloud.LoadBalancer;&#010;+import org.apache.camel.model.cloud.springboot.RibbonServiceCallLoadBalancerConfigurationProperties;&#010;+import org.junit.Assert;&#010;+import org.junit.Test;&#010;+import org.junit.runner.RunWith;&#010;+import org.springframework.beans.factory.annotation.Autowired;&#010;+import org.springframework.boot.autoconfigure.SpringBootApplication;&#010;+import org.springframework.boot.test.context.SpringBootTest;&#010;+import org.springframework.context.ApplicationContext;&#010;+import org.springframework.context.annotation.Configuration;&#010;+import org.springframework.test.annotation.DirtiesContext;&#010;+import org.springframework.test.context.junit4.SpringRunner;&#010;+&#010;+@RunWith(SpringRunner.class)&#010;+@DirtiesContext&#010;+@SpringBootApplication&#010;+@SpringBootTest(&#010;+    classes = {&#010;+        RibbonLoadBalancerDisabledTest.TestConfiguration.class&#010;+    },&#010;+    properties = {&#010;+        ""debug=false"",&#010;+        ""camel.cloud.ribbon.load-balancer.enabled=false""&#010;+})&#010;+public class RibbonLoadBalancerDisabledTest {&#010;+    @Autowired&#010;+    ApplicationContext context;&#010;+&#010;+    @Test&#010;+    public void testConfiguration() throws Exception {&#010;+        Map&lt;String, ?&gt; beans;&#010;+&#010;+        beans = context.getBeansOfType(RibbonServiceCallLoadBalancerConfigurationProperties.class);&#010;+        Assert.assertTrue(beans.isEmpty());&#010;+&#010;+        beans = context.getBeansOfType(LoadBalancer.class);&#010;+        Assert.assertTrue(beans.isEmpty());&#010;+        Assert.assertFalse(beans.containsKey(""ribbon-load-balancer""));&#010;+    }&#010;+&#010;+    @Configuration&#010;+    public static class TestConfiguration {&#010;+    }&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/567dff40/platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/java/org/apache/camel/component/ribbon/springboot/cloud/RibbonLoadBalancerEnabledTest.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/java/org/apache/camel/component/ribbon/springboot/cloud/RibbonLoadBalancerEnabledTest.java&#010;b/platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/java/org/apache/camel/component/ribbon/springboot/cloud/RibbonLoadBalancerEnabledTest.java&#010;new file mode 100644&#010;index 0000000..b7e2780&#010;--- /dev/null&#010;+++ b/platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/java/org/apache/camel/component/ribbon/springboot/cloud/RibbonLoadBalancerEnabledTest.java&#010;@@ -0,0 +1,65 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.component.ribbon.springboot.cloud;&#010;+&#010;+import java.util.Map;&#010;+&#010;+import org.apache.camel.cloud.LoadBalancer;&#010;+import org.apache.camel.model.cloud.springboot.RibbonServiceCallLoadBalancerConfigurationProperties;&#010;+import org.junit.Assert;&#010;+import org.junit.Test;&#010;+import org.junit.runner.RunWith;&#010;+import org.springframework.beans.factory.annotation.Autowired;&#010;+import org.springframework.boot.autoconfigure.SpringBootApplication;&#010;+import org.springframework.boot.test.context.SpringBootTest;&#010;+import org.springframework.context.ApplicationContext;&#010;+import org.springframework.context.annotation.Configuration;&#010;+import org.springframework.test.annotation.DirtiesContext;&#010;+import org.springframework.test.context.junit4.SpringRunner;&#010;+&#010;+@RunWith(SpringRunner.class)&#010;+@DirtiesContext&#010;+@SpringBootApplication&#010;+@SpringBootTest(&#010;+    classes = {&#010;+        RibbonLoadBalancerEnabledTest.TestConfiguration.class&#010;+    },&#010;+    properties = {&#010;+        ""debug=false"",&#010;+        ""camel.cloud.ribbon.load-balancer.enabled=true""&#010;+})&#010;+public class RibbonLoadBalancerEnabledTest {&#010;+    @Autowired&#010;+    ApplicationContext context;&#010;+&#010;+    @Test&#010;+    public void testConfiguration() throws Exception {&#010;+        Map&lt;String, ?&gt; beans;&#010;+&#010;+        beans = context.getBeansOfType(RibbonServiceCallLoadBalancerConfigurationProperties.class);&#010;+        Assert.assertFalse(beans.isEmpty());&#010;+        Assert.assertEquals(1, beans.size());&#010;+&#010;+        beans = context.getBeansOfType(LoadBalancer.class);&#010;+        Assert.assertFalse(beans.isEmpty());&#010;+        Assert.assertTrue(beans.containsKey(""ribbon-load-balancer""));&#010;+    }&#010;+&#010;+    @Configuration&#010;+    public static class TestConfiguration {&#010;+    }&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/567dff40/platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/resources/logback.xml&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/resources/logback.xml&#010;b/platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/resources/logback.xml&#010;new file mode 100644&#010;index 0000000..6fb40a6&#010;--- /dev/null&#010;+++ b/platforms/spring-boot/components-starter/camel-ribbon-starter/src/test/resources/logback.xml&#010;@@ -0,0 +1,39 @@&#010;+&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;&#010;+&lt;!--&#010;+  ~ Licensed to the Apache Software Foundation (ASF) under one or more&#010;+  ~ contributor license agreements.  See the NOTICE file distributed with&#010;+  ~ this work for additional information regarding copyright ownership.&#010;+  ~ The ASF licenses this file to You under the Apache License, Version 2.0&#010;+  ~ (the ""License""); you may not use this file except in compliance with&#010;+  ~ the License.  You may obtain a copy of the License at&#010;+  ~&#010;+  ~      http://www.apache.org/licenses/LICENSE-2.0&#010;+  ~&#010;+  ~ Unless required by applicable law or agreed to in writing, software&#010;+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+  ~ See the License for the specific language governing permissions and&#010;+  ~ limitations under the License.&#010;+  --&gt;&#010;+&lt;configuration&gt;&#010;+&#010;+  &lt;appender name=""STDOUT"" class=""ch.qos.logback.core.ConsoleAppender""&gt;&#010;+    &lt;!-- encoders are assigned the type&#010;+         ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;&#010;+    &lt;encoder&gt;&#010;+      &lt;pattern&gt;%d{HH:mm:ss.SSS} [%-15.15thread] %-5level %-30.30logger - %msg%n&lt;/pattern&gt;&#010;+    &lt;/encoder&gt;&#010;+  &lt;/appender&gt;&#010;+&#010;+  &lt;appender name=""FILE"" class=""ch.qos.logback.core.FileAppender""&gt;&#010;+    &lt;encoder&gt;&#010;+      &lt;pattern&gt;%d{HH:mm:ss.SSS} [%-15.15thread] %-5level %-30.30logger - %msg%n&lt;/pattern&gt;&#010;+    &lt;/encoder&gt;&#010;+    &lt;file&gt;target/camel-ribbon-starter-test.log&lt;/file&gt;&#010;+  &lt;/appender&gt;&#010;+&#010;+  &lt;root level=""INFO""&gt;&#010;+    &lt;appender-ref ref=""FILE""/&gt;&#010;+  &lt;/root&gt;&#010;+&#010;+&lt;/configuration&gt;&#010;\ No newline at end of file&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/567dff40/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java&#010;----------------------------------------------------------------------&#010;diff --git a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java&#010;b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java&#010;index a2f5fcd..bba8ecf 100644&#010;--- a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java&#010;+++ b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java&#010;@@ -263,6 +263,18 @@ public class SpringBootAutoConfigurationMojo extends AbstractMojo {&#010;             createOtherModelConfigurationSource(pkg, model, ""camel.cloud.kubernetes.service-discovery"",&#010;true);&#010;         }&#010; &#010;+        // Ribbon&#010;+        json = loadModelJson(files, ""ribbonLoadBalancer"");&#010;+        if (json != null) {&#010;+            OtherModel model = generateOtherModel(json);&#010;+&#010;+            int pos = model.getJavaType().lastIndexOf(""."");&#010;+            String pkg = model.getJavaType().substring(0, pos) + "".springboot"";&#010;+&#010;+            // Generate properties, auto-configuration happens in camel-kubernetes-starter&#010;+            createOtherModelConfigurationSource(pkg, model, ""camel.cloud.ribbon.load-balancer"",&#010;true);&#010;+        }&#010;+&#010;         // Rest&#010;         json = loadModelJson(files, ""restConfiguration"");&#010;         if (json != null) {&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cc8d0fd8998ec4abe846a29d9d1d99a06%40git.apache.org%3E,2017-04-18 14:53:26,commits,379.0,camel git commit: Service Call : Allow to confgire ribbon load balancer using ribbon specific properties
247,247,157.0,601.0,Lyuben Milev (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-10948?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15973525#comment-15973525&#010;] &#010;&#010;Lyuben Milev commented on CAMEL-10948:&#010;--------------------------------------&#010;&#010;Hello, we had an issue running hdfs test.&#010;Reportedly it also fails in CI, although sure-fire doesn't treat it as error.&#010;&#010;This is an irc log:&#010;&#010;zregvart&gt; OneOneOneOne: I think this line should be removed&#010;           https://github.com/apache/camel/blob/master/components/camel-hdfs2/s&#010;           rc/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java#L44&#010;&#010;&gt; Camel-hdfs2: initialDelay option is overwritten with default value&#010;&gt; ------------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-10948&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-10948&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Bug&#010;&gt;          Components: camel-hdfs2&#010;&gt;            Reporter: Andrea Cosentino&#010;&gt;            Assignee: Andrea Cosentino&#010;&gt;            Priority: Minor&#010;&gt;             Fix For: 2.17.7, 2.18.4, 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; We need to use the same trick as the mail component in the consumer side.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13048508.1488802579000.311106.1492550021739%40Atlassian.JIRA%3E,2017-04-18 21:13:41,issues,605.0,  [jira] [Commented] (CAMEL-10948) Camel-hdfs2: initialDelay option is overwritten with default value
248,248,158.0,602.0,Zoran Regvart (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-10948?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15973531#comment-15973531&#010;] &#010;&#010;Zoran Regvart commented on CAMEL-10948:&#010;---------------------------------------&#010;&#010;[~ancosen] This seems to overwrite the URI parameter value given with default value, I think&#010;this [HdfsEndpoint.java#L44|https://github.com/apache/camel/blob/master/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java#L44]&#010;line needs to be removed as the {{initialDelay}} is already set to {{HdfsConsumer.DEFAULT_CONSUMER_INITIAL_DELAY}}&#010;in field initialization at [HdfsConfiguration.java#L74|https://github.com/apache/camel/blob/master/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsConfiguration.java#L74].&#010;The tests actually fail on CI (see [Build #1288 Console output|https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.fulltest.java8/1288/org.apache.camel$camel-hdfs2/console])&#010;but are not reported as failed, which is strange.&#010;It fails with:  {{\[ERROR\] There was a timeout or other error in the fork}}&#010;&#010;&gt; Camel-hdfs2: initialDelay option is overwritten with default value&#010;&gt; ------------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-10948&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-10948&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Bug&#010;&gt;          Components: camel-hdfs2&#010;&gt;            Reporter: Andrea Cosentino&#010;&gt;            Assignee: Andrea Cosentino&#010;&gt;            Priority: Minor&#010;&gt;             Fix For: 2.17.7, 2.18.4, 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; We need to use the same trick as the mail component in the consumer side.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13048508.1488802579000.311151.1492550142188%40Atlassian.JIRA%3E,2017-04-18 21:15:42,issues,606.0,  [jira] [Commented] (CAMEL-10948) Camel-hdfs2: initialDelay option is overwritten with default value
249,249,159.0,603.0,Andrea Cosentino (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-10948?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15973536#comment-15973536&#010;] &#010;&#010;Andrea Cosentino commented on CAMEL-10948:&#010;------------------------------------------&#010;&#010;Thanks for spotting this. I will fix it tomorrow :-)&#010;&#010;&gt; Camel-hdfs2: initialDelay option is overwritten with default value&#010;&gt; ------------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-10948&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-10948&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Bug&#010;&gt;          Components: camel-hdfs2&#010;&gt;            Reporter: Andrea Cosentino&#010;&gt;            Assignee: Andrea Cosentino&#010;&gt;            Priority: Minor&#010;&gt;             Fix For: 2.17.7, 2.18.4, 2.19.0&#010;&gt;&#010;&gt;&#010;&gt; We need to use the same trick as the mail component in the consumer side.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13048508.1488802579000.311168.1492550321660%40Atlassian.JIRA%3E,2017-04-18 21:18:41,issues,607.0,  [jira] [Commented] (CAMEL-10948) Camel-hdfs2: initialDelay option is overwritten with default value
250,250,182.0,382.0,acosent...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 9f126aab7 -&gt; dd940e926&#010;&#010;&#010;CAMEL-10948: Camel-hdfs2: initialDelay option is overwritten with default value&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/dd940e92&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/dd940e92&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/dd940e92&#010;&#010;Branch: refs/heads/master&#010;Commit: dd940e926c947f1e9ab915a8e523b30fab65566e&#010;Parents: 9f126aa&#010;Author: Andrea Cosentino &lt;ancosen@gmail.com&gt;&#010;Authored: Wed Apr 19 10:03:49 2017 +0200&#010;Committer: Andrea Cosentino &lt;ancosen@gmail.com&gt;&#010;Committed: Wed Apr 19 10:04:56 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java  | 1 -&#010; .../hdfs2/springboot/HdfsComponentAutoConfiguration.java          | 3 +++&#010; .../component/hdfs2/springboot/HdfsComponentConfiguration.java    | 2 ++&#010; 3 files changed, 5 insertions(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/dd940e92/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java&#010;b/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java&#010;index 6b29475..7224d37 100644&#010;--- a/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java&#010;+++ b/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java&#010;@@ -41,7 +41,6 @@ public class HdfsEndpoint extends ScheduledPollEndpoint {&#010;         super(endpointUri, context);&#010;         this.config = new HdfsConfiguration();&#010;         this.config.parseURI(new URI(endpointUri));&#010;-        setInitialDelay(HdfsConsumer.DEFAULT_CONSUMER_INITIAL_DELAY);&#010;     }&#010; &#010;     @Override&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/dd940e92/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentAutoConfiguration.java&#010;index 47da1fc..88b86d2 100644&#010;--- a/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentAutoConfiguration.java&#010;@@ -18,6 +18,7 @@ package org.apache.camel.component.hdfs2.springboot;&#010; &#010; import java.util.HashMap;&#010; import java.util.Map;&#010;+import javax.annotation.Generated;&#010; import org.apache.camel.CamelContext;&#010; import org.apache.camel.component.hdfs2.HdfsComponent;&#010; import org.apache.camel.util.IntrospectionSupport;&#010;@@ -40,6 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"", date&#010;= ""2017-04-19T08:03:41.690Z"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(HdfsComponentAutoConfiguration.Condition.class)&#010;@@ -83,6 +85,7 @@ public class HdfsComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;+    @Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"",&#010;date = ""2017-04-19T08:03:41.738Z"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/dd940e92/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentConfiguration.java&#010;index d2cfd9d..29d8a56 100644&#010;--- a/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-hdfs2-starter/src/main/java/org/apache/camel/component/hdfs2/springboot/HdfsComponentConfiguration.java&#010;@@ -16,6 +16,7 @@&#010;  */&#010; package org.apache.camel.component.hdfs2.springboot;&#010; &#010;+import javax.annotation.Generated;&#010; import javax.security.auth.login.Configuration;&#010; import org.springframework.boot.context.properties.ConfigurationProperties;&#010; &#010;@@ -24,6 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;+@Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"", date&#010;= ""2017-04-19T08:03:41.545Z"")&#010; @ConfigurationProperties(prefix = ""camel.component.hdfs2"")&#010; public class HdfsComponentConfiguration {&#010; &#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C98d3b7827ccb49678f54bca9d6814bb8%40git.apache.org%3E,2017-04-19 08:05:09,commits,382.0,  camel git commit: CAMEL-10948: Camel-hdfs2: initialDelay option is overwritten with default value
251,251,183.0,383.0,acosent...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/camel-2.18.x 4765927aa -&gt; 4f1b6539e&#010;&#010;&#010;CAMEL-10948: Camel-hdfs2: initialDelay option is overwritten with default value&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/4f1b6539&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/4f1b6539&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/4f1b6539&#010;&#010;Branch: refs/heads/camel-2.18.x&#010;Commit: 4f1b6539e07f1069357947d432ffa5392e43ca57&#010;Parents: 4765927&#010;Author: Andrea Cosentino &lt;ancosen@gmail.com&gt;&#010;Authored: Wed Apr 19 10:03:49 2017 +0200&#010;Committer: Andrea Cosentino &lt;ancosen@gmail.com&gt;&#010;Committed: Wed Apr 19 10:05:56 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java    | 1 -&#010; 1 file changed, 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/4f1b6539/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java&#010;b/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java&#010;index 3e9d81d..baecdcc 100644&#010;--- a/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java&#010;+++ b/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java&#010;@@ -41,7 +41,6 @@ public class HdfsEndpoint extends ScheduledPollEndpoint {&#010;         super(endpointUri, context);&#010;         this.config = new HdfsConfiguration();&#010;         this.config.parseURI(new URI(endpointUri));&#010;-        setInitialDelay(HdfsConsumer.DEFAULT_CONSUMER_INITIAL_DELAY);&#010;     }&#010; &#010;     @Override&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C5032f17311004106b02fd4777e9fc6bb%40git.apache.org%3E,2017-04-19 08:08:27,commits,383.0,  camel git commit: CAMEL-10948: Camel-hdfs2: initialDelay option is overwritten with default value
254,254,185.0,384.0,acosent...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/camel-2.17.x 96fc48c3e -&gt; 82bf20aef&#010;&#010;&#010;CAMEL-10948: Camel-hdfs2: initialDelay option is overwritten with default value&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/82bf20ae&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/82bf20ae&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/82bf20ae&#010;&#010;Branch: refs/heads/camel-2.17.x&#010;Commit: 82bf20aef311af8611e5e62a4b759a21452716bd&#010;Parents: 96fc48c&#010;Author: Andrea Cosentino &lt;ancosen@gmail.com&gt;&#010;Authored: Wed Apr 19 10:03:49 2017 +0200&#010;Committer: Andrea Cosentino &lt;ancosen@gmail.com&gt;&#010;Committed: Wed Apr 19 10:08:58 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java    | 1 -&#010; 1 file changed, 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/82bf20ae/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java&#010;b/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java&#010;index 3e9d81d..baecdcc 100644&#010;--- a/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java&#010;+++ b/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java&#010;@@ -41,7 +41,6 @@ public class HdfsEndpoint extends ScheduledPollEndpoint {&#010;         super(endpointUri, context);&#010;         this.config = new HdfsConfiguration();&#010;         this.config.parseURI(new URI(endpointUri));&#010;-        setInitialDelay(HdfsConsumer.DEFAULT_CONSUMER_INITIAL_DELAY);&#010;     }&#010; &#010;     @Override&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cf39ca6e740e94fcc898efe0188ffb0d0%40git.apache.org%3E,2017-04-19 08:10:44,commits,384.0,  camel git commit: CAMEL-10948: Camel-hdfs2: initialDelay option is overwritten with default value
255,255,161.0,201.0,sadiq,"I'm experiencing a parsing issue using Bindy to unmarshal a CSV file into a&#010;List of POJOs (my POJO class is annotated with @CsvRecord).&#010;&#010;The CSV file contains the following:&#010;&#010;partNumber,longDescription,status&#010;123,""1970-84 Windshield Washer Jar, Multi Application"",Available&#010;234,""1967-75 6 Cyl/ Small Block 9"""" Clutch Bellcrank Assembly"",Available&#010;345,""1971-79 Fan Blade 19-1/2"""", 7 Blade"",Available&#010;&#010;It's the fourth line that is causing an issue:&#010;java.lang.IllegalArgumentException: No position 4 defined for the field:&#010;Available, line: 3 must be specified (it says line 3, but I believe that's&#010;because my CsvRecord class has the skipFirstLine=true)&#010;&#010;The CSV parsing seems to be handling commas within a field surrounded by&#010;double quotes since the 2nd line is okay. It's also handling escaping double&#010;quotes correctly within fields since the 3rd line is fine too.&#010;&#010;But the issue is when commas are present after an escaped double quote&#010;within a field that is surrounded by double quotes -- it seems to want to&#010;separate each comma into a new field when it should just be treating it as a&#010;single field.&#010;&#010;I'm using the latest version of Camel 2.18.3 and still observing this issue.&#010;&#010;My route is:&#010;&#010;from(""sftp://me@myhost.com?sortBy=file:modified&amp;antInclude=*.csv&amp;password=xxxx"")&#010;&#009;.unmarshal()&#010;&#009;.bindy(BindyType.Csv, ProductDeltaCsvDataModel.class) //throwing exception&#010;here&#010;&#009;.to(""direct:processCsv"");&#010;&#010;This is my CsvRecord POJO class:&#010;&#010;@CsvRecord(separator = "","", skipFirstLine = true, quote = ""\"""", quoting =&#010;true)&#010;public class ProductDeltaCsvDataModel {&#010;&#010;&#009;@DataField(pos = 1, required = true)&#010;&#009;private String partNumber;&#010;&#009;&#010;&#009;@DataField(pos = 2)&#010;&#009;private String longDescription;&#010;&#009;&#010;&#009;@DataField(pos = 3)&#010;&#009;private String status;&#010;&#010;&#009;//setters and getters&#010;&#009;...&#010;}&#010;&#010;I believe this to be a bug unless there is some configuration I need to set?&#010;&#010;Can someone confirm that this is a bug and how I go about logging this bug?&#010;&#010;Thanks!&#010;Sadiq&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Parsing-issue-with-unmarshal-and-bindy-csv-with-double-quotes-and-commas-in-a-single-field-tp5797871.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492578616894-5797871.post%40n5.nabble.com%3E,2017-04-19 05:10:16,users,202.0,Parsing issue with unmarshal and bindy.csv with double quotes and commas in a single field
256,256,230.0,621.0,onder sezgin (JIRA),"&#010;     [ https://issues.apache.org/jira/browse/CAMEL-7519?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&#010;]&#010;&#010;onder sezgin reassigned CAMEL-7519:&#010;-----------------------------------&#010;&#010;    Assignee: onder sezgin&#010;&#010;&gt; camel-bindy - CSV unbinding does not escape embedded quote character&#010;&gt; --------------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-7519&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-7519&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Improvement&#010;&gt;          Components: camel-bindy&#010;&gt;            Reporter: James Birchfield&#010;&gt;            Assignee: onder sezgin&#010;&gt;             Fix For: Future&#010;&gt;&#010;&gt;&#010;&gt; If you have String field that contains the same character (String) as the quote character,&#010;and quoting is set to true, the embedded character should be escaped.&#010;&gt; val s:String = ""\""foo\""""&#010;&gt; Bindy will unmarshal to the CSV stream """"foo"""",""..."",""..."",""..."",...&#010;&gt; it should be ""\""foo\"""",""..."",""..."",""..."",...&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.12721833.1403061820000.316732.1492601861573%40Atlassian.JIRA%3E,2017-04-19 11:37:41,issues,625.0,  [jira] [Assigned] (CAMEL-7519) camel-bindy - CSV unbinding does not escape embedded quote character
257,257,231.0,219.0,onders86,"GitHub user onders86 opened a pull request:&#010;&#010;    https://github.com/apache/camel/pull/1640&#010;&#010;    CAMEL-7519 - new option quotingEscaped added for marshalling/unmarsha…&#010;&#010;    …lling with escape char and fix some typo&#010;&#010;You can merge this pull request into a Git repository by running:&#010;&#010;    $ git pull https://github.com/onders86/camel CAMEL-7519&#010;&#010;Alternatively you can review and apply these changes as the patch at:&#010;&#010;    https://github.com/apache/camel/pull/1640.patch&#010;&#010;To close this pull request, make a commit to your master/trunk branch&#010;with (at least) the following in the commit message:&#010;&#010;    This closes #1640&#010;    &#010;----&#010;commit dea74cc06c6aca27102c8e4dfa0c3b5737892756&#010;Author: onders86 &lt;ondersezgin@gmail.com&gt;&#010;Date:   2017-04-19T11:34:05Z&#010;&#010;    CAMEL-7519 - new option quotingEscaped added for marshalling/unmarshalling with escape&#010;char and fix some typo&#010;&#010;----&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3Cgit-pr-1640-camel%40git.apache.org%3E,2017-04-19 11:38:12,mail,219.0,[GitHub] camel pull request #1640: CAMEL-7519 - new option quotingEscaped added for m...
258,258,232.0,622.0,ASF GitHub Bot (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-7519?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15974475#comment-15974475&#010;] &#010;&#010;ASF GitHub Bot commented on CAMEL-7519:&#010;---------------------------------------&#010;&#010;GitHub user onders86 opened a pull request:&#010;&#010;    https://github.com/apache/camel/pull/1640&#010;&#010;    CAMEL-7519 - new option quotingEscaped added for marshalling/unmarsha…&#010;&#010;    …lling with escape char and fix some typo&#010;&#010;You can merge this pull request into a Git repository by running:&#010;&#010;    $ git pull https://github.com/onders86/camel CAMEL-7519&#010;&#010;Alternatively you can review and apply these changes as the patch at:&#010;&#010;    https://github.com/apache/camel/pull/1640.patch&#010;&#010;To close this pull request, make a commit to your master/trunk branch&#010;with (at least) the following in the commit message:&#010;&#010;    This closes #1640&#010;    &#010;----&#010;commit dea74cc06c6aca27102c8e4dfa0c3b5737892756&#010;Author: onders86 &lt;ondersezgin@gmail.com&gt;&#010;Date:   2017-04-19T11:34:05Z&#010;&#010;    CAMEL-7519 - new option quotingEscaped added for marshalling/unmarshalling with escape&#010;char and fix some typo&#010;&#010;----&#010;&#010;&#010;&gt; camel-bindy - CSV unbinding does not escape embedded quote character&#010;&gt; --------------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-7519&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-7519&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Improvement&#010;&gt;          Components: camel-bindy&#010;&gt;            Reporter: James Birchfield&#010;&gt;            Assignee: onder sezgin&#010;&gt;             Fix For: Future&#010;&gt;&#010;&gt;&#010;&gt; If you have String field that contains the same character (String) as the quote character,&#010;and quoting is set to true, the embedded character should be escaped.&#010;&gt; val s:String = ""\""foo\""""&#010;&gt; Bindy will unmarshal to the CSV stream """"foo"""",""..."",""..."",""..."",...&#010;&gt; it should be ""\""foo\"""",""..."",""..."",""..."",...&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.12721833.1403061820000.316738.1492601921678%40Atlassian.JIRA%3E,2017-04-19 11:38:41,issues,626.0,  [jira] [Commented] (CAMEL-7519) camel-bindy - CSV unbinding does not escape embedded quote character
259,259,173.0,606.0,Claus Ibsen (JIRA),Claus Ibsen created CAMEL-11166:&#010;-----------------------------------&#010;&#010;             Summary: @Generated annotation and java 9 problem&#010;                 Key: CAMEL-11166&#010;                 URL: https://issues.apache.org/jira/browse/CAMEL-11166&#010;             Project: Camel&#010;          Issue Type: Task&#010;            Reporter: Claus Ibsen&#010;&#010;&#010;Just noticed this on the JDK9 build&#010;&#010;[ERROR] -&gt; [Help 1]&#010;org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.camel:camel-package-maven-plugin:2.19.0-SNAPSHOT:prepare-spring-boot-auto-configuration&#010;(validate) on project camel-core: Execution validate of goal org.apache.camel:camel-package-maven-plugin:2.19.0-SNAPSHOT:prepare-spring-boot-auto-configuration&#010;failed: A required class was missing while executing org.apache.camel:camel-package-maven-plugin:2.19.0-SNAPSHOT:prepare-spring-boot-auto-configuration:&#010;javax/annotation/Generated&#010;&#010;[~jpoth] do you have time to help look into this?&#010;&#010;It fails when building camel-core due a recent addition of adding `@generated` annotation&#010;to the generated source code for spring-boot starters and whatnot.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13065011.1492588059000.315416.1492588061900%40Atlassian.JIRA%3E,2017-04-19 07:47:41,issues,610.0,  [jira] [Created] (CAMEL-11166) @Generated annotation and java 9 problem
260,260,175.0,607.0,Zoran Regvart (JIRA),&#010;     [ https://issues.apache.org/jira/browse/CAMEL-11166?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&#010;]&#010;&#010;Zoran Regvart reassigned CAMEL-11166:&#010;-------------------------------------&#010;&#010;    Assignee: Zoran Regvart&#010;&#010;&gt; @Generated annotation and java 9 problem&#010;&gt; ----------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11166&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11166&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Task&#010;&gt;            Reporter: Claus Ibsen&#010;&gt;            Assignee: Zoran Regvart&#010;&gt;&#010;&gt; Just noticed this on the JDK9 build&#010;&gt; [ERROR] -&gt; [Help 1]&#010;&gt; org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.camel:camel-package-maven-plugin:2.19.0-SNAPSHOT:prepare-spring-boot-auto-configuration&#010;(validate) on project camel-core: Execution validate of goal org.apache.camel:camel-package-maven-plugin:2.19.0-SNAPSHOT:prepare-spring-boot-auto-configuration&#010;failed: A required class was missing while executing org.apache.camel:camel-package-maven-plugin:2.19.0-SNAPSHOT:prepare-spring-boot-auto-configuration:&#010;javax/annotation/Generated&#010;&gt; [~jpoth] do you have time to help look into this?&#010;&gt; It fails when building camel-core due a recent addition of adding `@generated` annotation&#010;to the generated source code for spring-boot starters and whatnot.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13065011.1492588059000.315466.1492588601548%40Atlassian.JIRA%3E,2017-04-19 07:56:41,issues,611.0,  [jira] [Assigned] (CAMEL-11166) @Generated annotation and java 9 problem
261,261,178.0,608.0,John Poth (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11166?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15974278#comment-15974278&#010;] &#010;&#010;John Poth commented on CAMEL-11166:&#010;-----------------------------------&#010;&#010;Sure, will try this out on the latest build.&#010;&#010;&gt; @Generated annotation and java 9 problem&#010;&gt; ----------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11166&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11166&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Task&#010;&gt;            Reporter: Claus Ibsen&#010;&gt;            Assignee: Zoran Regvart&#010;&gt;&#010;&gt; Just noticed this on the JDK9 build&#010;&gt; [ERROR] -&gt; [Help 1]&#010;&gt; org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.camel:camel-package-maven-plugin:2.19.0-SNAPSHOT:prepare-spring-boot-auto-configuration&#010;(validate) on project camel-core: Execution validate of goal org.apache.camel:camel-package-maven-plugin:2.19.0-SNAPSHOT:prepare-spring-boot-auto-configuration&#010;failed: A required class was missing while executing org.apache.camel:camel-package-maven-plugin:2.19.0-SNAPSHOT:prepare-spring-boot-auto-configuration:&#010;javax/annotation/Generated&#010;&gt; [~jpoth] do you have time to help look into this?&#010;&gt; It fails when building camel-core due a recent addition of adding `@generated` annotation&#010;to the generated source code for spring-boot starters and whatnot.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13065011.1492588059000.315526.1492588901781%40Atlassian.JIRA%3E,2017-04-19 08:01:41,issues,612.0,  [jira] [Commented] (CAMEL-11166) @Generated annotation and java 9 problem
262,262,220.0,217.0,johnpoth,"GitHub user johnpoth opened a pull request:&#010;&#010;    https://github.com/apache/camel/pull/1639&#010;&#010;    CAMEL-11166: make camel-package-maven-plugin work on Java 9&#010;&#010;    https://issues.apache.org/jira/browse/CAMEL-11166&#010;&#010;You can merge this pull request into a Git repository by running:&#010;&#010;    $ git pull https://github.com/johnpoth/camel CAMEL-11166&#010;&#010;Alternatively you can review and apply these changes as the patch at:&#010;&#010;    https://github.com/apache/camel/pull/1639.patch&#010;&#010;To close this pull request, make a commit to your master/trunk branch&#010;with (at least) the following in the commit message:&#010;&#010;    This closes #1639&#010;    &#010;----&#010;commit 4f415029d7fb58976264ce22654b290053a84949&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Date:   2017-04-19T10:32:06Z&#010;&#010;    CAMEL-11166: make camel-package-maven-plugin work on Java 9&#010;&#010;----&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3Cgit-pr-1639-camel%40git.apache.org%3E,2017-04-19 10:33:12,mail,217.0,[GitHub] camel pull request #1639: CAMEL-11166: make camel-package-maven-plugin work ...
263,263,221.0,609.0,ASF GitHub Bot (JIRA),"&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11166?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15974432#comment-15974432&#010;] &#010;&#010;ASF GitHub Bot commented on CAMEL-11166:&#010;----------------------------------------&#010;&#010;GitHub user johnpoth opened a pull request:&#010;&#010;    https://github.com/apache/camel/pull/1639&#010;&#010;    CAMEL-11166: make camel-package-maven-plugin work on Java 9&#010;&#010;    https://issues.apache.org/jira/browse/CAMEL-11166&#010;&#010;You can merge this pull request into a Git repository by running:&#010;&#010;    $ git pull https://github.com/johnpoth/camel CAMEL-11166&#010;&#010;Alternatively you can review and apply these changes as the patch at:&#010;&#010;    https://github.com/apache/camel/pull/1639.patch&#010;&#010;To close this pull request, make a commit to your master/trunk branch&#010;with (at least) the following in the commit message:&#010;&#010;    This closes #1639&#010;    &#010;----&#010;commit 4f415029d7fb58976264ce22654b290053a84949&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Date:   2017-04-19T10:32:06Z&#010;&#010;    CAMEL-11166: make camel-package-maven-plugin work on Java 9&#010;&#010;----&#010;&#010;&#010;&gt; @Generated annotation and java 9 problem&#010;&gt; ----------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11166&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11166&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Task&#010;&gt;            Reporter: Claus Ibsen&#010;&gt;            Assignee: Zoran Regvart&#010;&gt;&#010;&gt; Just noticed this on the JDK9 build&#010;&gt; [ERROR] -&gt; [Help 1]&#010;&gt; org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.camel:camel-package-maven-plugin:2.19.0-SNAPSHOT:prepare-spring-boot-auto-configuration&#010;(validate) on project camel-core: Execution validate of goal org.apache.camel:camel-package-maven-plugin:2.19.0-SNAPSHOT:prepare-spring-boot-auto-configuration&#010;failed: A required class was missing while executing org.apache.camel:camel-package-maven-plugin:2.19.0-SNAPSHOT:prepare-spring-boot-auto-configuration:&#010;javax/annotation/Generated&#010;&gt; [~jpoth] do you have time to help look into this?&#010;&gt; It fails when building camel-core due a recent addition of adding `@generated` annotation&#010;to the generated source code for spring-boot starters and whatnot.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13065011.1492588059000.316492.1492598021594%40Atlassian.JIRA%3E,2017-04-19 10:33:41,issues,613.0,  [jira] [Commented] (CAMEL-11166) @Generated annotation and java 9 problem
264,264,222.0,404.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master d9f4ff922 -&gt; 4f415029d&#010;&#010;&#010;CAMEL-11166: make camel-package-maven-plugin work on Java 9&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/4f415029&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/4f415029&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/4f415029&#010;&#010;Branch: refs/heads/master&#010;Commit: 4f415029d7fb58976264ce22654b290053a84949&#010;Parents: d9f4ff9&#010;Author: jpoth &lt;poth.john@gmail.com&gt;&#010;Authored: Wed Apr 19 12:32:06 2017 +0200&#010;Committer: jpoth &lt;poth.john@gmail.com&gt;&#010;Committed: Wed Apr 19 12:32:06 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; parent/pom.xml | 11 +++++++++++&#010; 1 file changed, 11 insertions(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/4f415029/parent/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/parent/pom.xml b/parent/pom.xml&#010;index 79bd2fa..578d968 100644&#010;--- a/parent/pom.xml&#010;+++ b/parent/pom.xml&#010;@@ -5239,6 +5239,17 @@&#010;               &lt;/dependencies&gt;&#010;             &lt;/plugin&gt;&#010;             &lt;plugin&gt;&#010;+              &lt;groupId&gt;org.apache.camel&lt;/groupId&gt;&#010;+              &lt;artifactId&gt;camel-package-maven-plugin&lt;/artifactId&gt;&#010;+              &lt;dependencies&gt;&#010;+                &lt;dependency&gt;&#010;+                  &lt;groupId&gt;javax.xml.ws&lt;/groupId&gt;&#010;+                  &lt;artifactId&gt;jaxws-api&lt;/artifactId&gt;&#010;+                  &lt;version&gt;2.2.11&lt;/version&gt;&#010;+                &lt;/dependency&gt;&#010;+              &lt;/dependencies&gt;&#010;+            &lt;/plugin&gt;&#010;+            &lt;plugin&gt;&#010;               &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#010;               &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#010;               &lt;version&gt;${maven-compiler-plugin-version}&lt;/version&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Ccdfe21ec3baf4e32bcbcaa34c6a0824f%40git.apache.org%3E,2017-04-19 10:52:10,commits,404.0,camel git commit: CAMEL-11166: make camel-package-maven-plugin work on Java 9
265,265,223.0,218.0,asfgit,"Github user asfgit closed the pull request at:&#010;&#010;    https://github.com/apache/camel/pull/1639&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170419105229.5050CDFC31%40git1-us-west.apache.org%3E,2017-04-19 10:52:29,mail,218.0,  [GitHub] camel pull request #1639: CAMEL-11166: make camel-package-maven-plugin work ...
266,266,224.0,610.0,ASF GitHub Bot (JIRA),&#010;    [ https://issues.apache.org/jira/browse/CAMEL-11166?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=15974443#comment-15974443&#010;] &#010;&#010;ASF GitHub Bot commented on CAMEL-11166:&#010;----------------------------------------&#010;&#010;Github user asfgit closed the pull request at:&#010;&#010;    https://github.com/apache/camel/pull/1639&#010;&#010;&#010;&gt; @Generated annotation and java 9 problem&#010;&gt; ----------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11166&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11166&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Task&#010;&gt;            Reporter: Claus Ibsen&#010;&gt;            Assignee: Zoran Regvart&#010;&gt;&#010;&gt; Just noticed this on the JDK9 build&#010;&gt; [ERROR] -&gt; [Help 1]&#010;&gt; org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.camel:camel-package-maven-plugin:2.19.0-SNAPSHOT:prepare-spring-boot-auto-configuration&#010;(validate) on project camel-core: Execution validate of goal org.apache.camel:camel-package-maven-plugin:2.19.0-SNAPSHOT:prepare-spring-boot-auto-configuration&#010;failed: A required class was missing while executing org.apache.camel:camel-package-maven-plugin:2.19.0-SNAPSHOT:prepare-spring-boot-auto-configuration:&#010;javax/annotation/Generated&#010;&gt; [~jpoth] do you have time to help look into this?&#010;&gt; It fails when building camel-core due a recent addition of adding `@generated` annotation&#010;to the generated source code for spring-boot starters and whatnot.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13065011.1492588059000.316528.1492599161616%40Atlassian.JIRA%3E,2017-04-19 10:52:41,issues,614.0,  [jira] [Commented] (CAMEL-11166) @Generated annotation and java 9 problem
271,271,186.0,212.0,Apache Jenkins Server,The Apache Jenkins build system has built Camel.2.17.x.notest (build #203)&#010;&#010;Status: Failure&#010;&#010;Check console output at https://builds.apache.org/job/Camel.2.17.x.notest/203/ to view the&#010;results.&#010;,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C1100248025.1350.1492590675219.JavaMail.jenkins%40crius%3E,2017-04-19 08:31:14,mail,212.0,Camel.2.17.x.notest - Build # 203 - Failure
274,274,180.0,211.0,asfgit,"Github user asfgit closed the pull request at:&#010;&#010;    https://github.com/apache/camel/pull/1527&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170419080244.DB02FDFC31%40git1-us-west.apache.org%3E,2017-04-19 08:02:44,mail,211.0,  [GitHub] camel pull request #1527: CAMEL-10988 - Improve performance of CaseInsensiti...
277,277,199.0,397.0,zregv...@apache.org,"Regenerate component documentation list&#010;&#010;This updates the component list in the documentation.&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/492bef34&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/492bef34&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/492bef34&#010;&#010;Branch: refs/heads/master&#010;Commit: 492bef3432349317f95622c0528e38f2e72ea866&#010;Parents: 2297128&#010;Author: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Authored: Wed Apr 19 10:27:50 2017 +0200&#010;Committer: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Committed: Wed Apr 19 10:32:35 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; components/readme.adoc         | 17 ++++++++++++++++-&#010; docs/user-manual/en/SUMMARY.md |  5 +++++&#010; 2 files changed, 21 insertions(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/492bef34/components/readme.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/components/readme.adoc b/components/readme.adoc&#010;index 09c9bf1..a3990e7 100644&#010;--- a/components/readme.adoc&#010;+++ b/components/readme.adoc&#010;@@ -2,7 +2,7 @@ Components&#010; ^^^^^^^^^^&#010; &#010; // components: START&#010;-Number of Components: 231 in 184 JAR artifacts (14 deprecated)&#010;+Number of Components: 236 in 185 JAR artifacts (14 deprecated)&#010; &#010; [width=""100%"",cols=""4,1,5"",options=""header""]&#010; |=======================================================================&#010;@@ -251,12 +251,27 @@ Number of Components: 231 in 184 JAR artifacts (14 deprecated)&#010; | link:camel-google-drive/src/main/docs/google-drive-component.adoc[Google Drive] (camel-google-drive)&#010;+&#010; `google-drive:apiName/methodName` | 2.14 | The google-drive component provides access to&#010;Google Drive file storage service.&#010; &#010;+| link:camel-gae/src/main/docs/gauth-component.adoc[Google GAuth] (camel-gae) +&#010;+`gauth:name` |  | The gauth component is used by web applications to implement a Google-specific&#010;OAuth consumer.&#010;+&#010;+| link:camel-gae/src/main/docs/ghttp-component.adoc[Google HTTP] (camel-gae) +&#010;+`ghttp:httpUri` |  | The ghttp component provides HTTP connectivity to the GAE.&#010;+&#010;+| link:camel-gae/src/main/docs/glogin-component.adoc[Google Login] (camel-gae) +&#010;+`glogin:hostName` |  | The glogin component is used by Camel applications outside Google&#010;App Engine (GAE) for programmatic login to GAE applications.&#010;+&#010;+| link:camel-gae/src/main/docs/gmail-component.adoc[Google mail] (camel-gae) +&#010;+`gmail:sender` |  | The gmail component is used for sending emails to GAE.&#010;+&#010; | link:camel-google-mail/src/main/docs/google-mail-component.adoc[Google Mail] (camel-google-mail)&#010;+&#010; `google-mail:apiName/methodName` | 2.15 | The google-mail component provides access to Google&#010;Mail.&#010; &#010; | link:camel-google-pubsub/src/main/docs/google-pubsub-component.adoc[Google Pubsub] (camel-google-pubsub)&#010;+&#010; `google-pubsub:projectId:destinationName` | 2.19 | Messaging client for Google Cloud Platform&#010;PubSub Service: https://cloud.google.com/pubsub/&#010; &#010;+| link:camel-gae/src/main/docs/gtask-component.adoc[Google Task] (camel-gae) +&#010;+`gtask:queueName` |  | The gtask component is used for sending messages to GAE task queue&#010;service.&#010;+&#010; | link:camel-gora/src/main/docs/gora-component.adoc[Gora] (camel-gora) +&#010; `gora:name` | 2.14 | The gora component allows you to work with NoSQL databases using the&#010;Apache Gora framework.&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/492bef34/docs/user-manual/en/SUMMARY.md&#010;----------------------------------------------------------------------&#010;diff --git a/docs/user-manual/en/SUMMARY.md b/docs/user-manual/en/SUMMARY.md&#010;index 25968df..62f43ac 100644&#010;--- a/docs/user-manual/en/SUMMARY.md&#010;+++ b/docs/user-manual/en/SUMMARY.md&#010;@@ -195,8 +195,13 @@&#010; &#009;* [GitHub](github-component.adoc)&#010; &#009;* [Google Calendar](google-calendar-component.adoc)&#010; &#009;* [Google Drive](google-drive-component.adoc)&#010;+&#009;* [Google GAuth](gauth-component.adoc)&#010;+&#009;* [Google HTTP](ghttp-component.adoc)&#010;+&#009;* [Google Login](glogin-component.adoc)&#010;+&#009;* [Google mail](gmail-component.adoc)&#010; &#009;* [Google Mail](google-mail-component.adoc)&#010; &#009;* [Google Pubsub](google-pubsub-component.adoc)&#010;+&#009;* [Google Task](gtask-component.adoc)&#010; &#009;* [Gora](gora-component.adoc)&#010; &#009;* [Grape](grape-component.adoc)&#010; &#009;* [gRPC](grpc-component.adoc)&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C67063c4f85164873b823bcc9de18e923%40git.apache.org%3E,2017-04-19 08:35:58,commits,397.0,  [13/13] camel git commit: Regenerate component documentation list
278,278,210.0,399.0,zregv...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 30308c9f9 -&gt; e1cc3a2cf&#010;&#010;&#010;Regenerate component documentation list&#010;&#010;This updates the component list in the documentation without the removed&#010;components.&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/40c2a759&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/40c2a759&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/40c2a759&#010;&#010;Branch: refs/heads/master&#010;Commit: 40c2a759b9ce534a96fe9ef572eec733914702cc&#010;Parents: 30308c9&#010;Author: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Authored: Wed Apr 19 11:11:17 2017 +0200&#010;Committer: Zoran Regvart &lt;zregvart@apache.org&gt;&#010;Committed: Wed Apr 19 11:11:17 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; components/readme.adoc         | 17 +----------------&#010; docs/user-manual/en/SUMMARY.md |  5 -----&#010; 2 files changed, 1 insertion(+), 21 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/40c2a759/components/readme.adoc&#010;----------------------------------------------------------------------&#010;diff --git a/components/readme.adoc b/components/readme.adoc&#010;index a3990e7..09c9bf1 100644&#010;--- a/components/readme.adoc&#010;+++ b/components/readme.adoc&#010;@@ -2,7 +2,7 @@ Components&#010; ^^^^^^^^^^&#010; &#010; // components: START&#010;-Number of Components: 236 in 185 JAR artifacts (14 deprecated)&#010;+Number of Components: 231 in 184 JAR artifacts (14 deprecated)&#010; &#010; [width=""100%"",cols=""4,1,5"",options=""header""]&#010; |=======================================================================&#010;@@ -251,27 +251,12 @@ Number of Components: 236 in 185 JAR artifacts (14 deprecated)&#010; | link:camel-google-drive/src/main/docs/google-drive-component.adoc[Google Drive] (camel-google-drive)&#010;+&#010; `google-drive:apiName/methodName` | 2.14 | The google-drive component provides access to&#010;Google Drive file storage service.&#010; &#010;-| link:camel-gae/src/main/docs/gauth-component.adoc[Google GAuth] (camel-gae) +&#010;-`gauth:name` |  | The gauth component is used by web applications to implement a Google-specific&#010;OAuth consumer.&#010;-&#010;-| link:camel-gae/src/main/docs/ghttp-component.adoc[Google HTTP] (camel-gae) +&#010;-`ghttp:httpUri` |  | The ghttp component provides HTTP connectivity to the GAE.&#010;-&#010;-| link:camel-gae/src/main/docs/glogin-component.adoc[Google Login] (camel-gae) +&#010;-`glogin:hostName` |  | The glogin component is used by Camel applications outside Google&#010;App Engine (GAE) for programmatic login to GAE applications.&#010;-&#010;-| link:camel-gae/src/main/docs/gmail-component.adoc[Google mail] (camel-gae) +&#010;-`gmail:sender` |  | The gmail component is used for sending emails to GAE.&#010;-&#010; | link:camel-google-mail/src/main/docs/google-mail-component.adoc[Google Mail] (camel-google-mail)&#010;+&#010; `google-mail:apiName/methodName` | 2.15 | The google-mail component provides access to Google&#010;Mail.&#010; &#010; | link:camel-google-pubsub/src/main/docs/google-pubsub-component.adoc[Google Pubsub] (camel-google-pubsub)&#010;+&#010; `google-pubsub:projectId:destinationName` | 2.19 | Messaging client for Google Cloud Platform&#010;PubSub Service: https://cloud.google.com/pubsub/&#010; &#010;-| link:camel-gae/src/main/docs/gtask-component.adoc[Google Task] (camel-gae) +&#010;-`gtask:queueName` |  | The gtask component is used for sending messages to GAE task queue&#010;service.&#010;-&#010; | link:camel-gora/src/main/docs/gora-component.adoc[Gora] (camel-gora) +&#010; `gora:name` | 2.14 | The gora component allows you to work with NoSQL databases using the&#010;Apache Gora framework.&#010; &#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/40c2a759/docs/user-manual/en/SUMMARY.md&#010;----------------------------------------------------------------------&#010;diff --git a/docs/user-manual/en/SUMMARY.md b/docs/user-manual/en/SUMMARY.md&#010;index 62f43ac..25968df 100644&#010;--- a/docs/user-manual/en/SUMMARY.md&#010;+++ b/docs/user-manual/en/SUMMARY.md&#010;@@ -195,13 +195,8 @@&#010; &#009;* [GitHub](github-component.adoc)&#010; &#009;* [Google Calendar](google-calendar-component.adoc)&#010; &#009;* [Google Drive](google-drive-component.adoc)&#010;-&#009;* [Google GAuth](gauth-component.adoc)&#010;-&#009;* [Google HTTP](ghttp-component.adoc)&#010;-&#009;* [Google Login](glogin-component.adoc)&#010;-&#009;* [Google mail](gmail-component.adoc)&#010; &#009;* [Google Mail](google-mail-component.adoc)&#010; &#009;* [Google Pubsub](google-pubsub-component.adoc)&#010;-&#009;* [Google Task](gtask-component.adoc)&#010; &#009;* [Gora](gora-component.adoc)&#010; &#009;* [Grape](grape-component.adoc)&#010; &#009;* [gRPC](grpc-component.adoc)&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C452caf51bc644dec9a1330ee14d0a092%40git.apache.org%3E,2017-04-19 09:14:37,commits,399.0,[1/2] camel git commit: Regenerate component documentation list
279,279,202.0,208.0,Nico159,"Hi everyone,&#010;&#010;I'm looking for a way to check, if a folder exists, after the route is&#010;started.&#010;&#010;While startup I usually use auteCreate for the inbound folder, so there is&#010;no problem if my inbound is not there yet, but if somebody (or something)&#010;delete this created inbound folder (while route is running), the route will&#010;check forever a non-existing folder (deadlock). &#010;&#010;I've tried to use auteCreate=false and startingDirectoryMustExist=true&#010;(while not having my input folder), therefore I get an error, but just at&#010;the start of my route. &#010;&#010;Is there any way to check periodically if the input folder is there and&#010;re-autocreate it if necessary (or throw an error?)&#010;&#010;Thx in advance for any kind of help&#010;&#010;&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/How-to-check-after-startup-if-folder-exists-tp5797895.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492591369447-5797895.post%40n5.nabble.com%3E,2017-04-19 08:42:49,users,209.0,How to check after startup if folder exists
280,280,207.0,209.0,Claus Ibsen,"No but you can write some code yourself to do that.&#010;&#010;On Wed, Apr 19, 2017 at 10:42 AM, Nico159 &lt;nicolas.gehling@adesso.de&gt; wrote:&#010;&gt; Hi everyone,&#010;&gt;&#010;&gt; I'm looking for a way to check, if a folder exists, after the route is&#010;&gt; started.&#010;&gt;&#010;&gt; While startup I usually use auteCreate for the inbound folder, so there is&#010;&gt; no problem if my inbound is not there yet, but if somebody (or something)&#010;&gt; delete this created inbound folder (while route is running), the route will&#010;&gt; check forever a non-existing folder (deadlock).&#010;&gt;&#010;&gt; I've tried to use auteCreate=false and startingDirectoryMustExist=true&#010;&gt; (while not having my input folder), therefore I get an error, but just at&#010;&gt; the start of my route.&#010;&gt;&#010;&gt; Is there any way to check periodically if the input folder is there and&#010;&gt; re-autocreate it if necessary (or throw an error?)&#010;&gt;&#010;&gt; Thx in advance for any kind of help&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt; --&#010;&gt; View this message in context: http://camel.465427.n5.nabble.com/How-to-check-after-startup-if-folder-exists-tp5797895.html&#010;&gt; Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;&#010;&#010;-- &#010;Claus Ibsen&#010;-----------------&#010;http://davsclaus.com @davsclaus&#010;Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yNmDgycu91-DSKM6pKx%2BWq62JM3-TTZ7J%3DPy2KRb8q49aw%40mail.gmail.com%3E,2017-04-19 09:05:02,users,210.0,  Re: How to check after startup if folder exists
281,281,243.0,210.0,Nico159,Thank you for the fast confirmation.&#010;&#010;I'll try to use a timer and a bean to solve the problem.&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/How-to-check-after-startup-if-folder-exists-tp5797895p5797922.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492605024646-5797922.post%40n5.nabble.com%3E,2017-04-19 12:30:24,users,211.0,    Re: How to check after startup if folder exists
282,282,203.0,398.0,acosent...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 492bef343 -&gt; 9cf875246&#010;&#010;&#010;Upgrade Wiremock to version 2.6.0&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/9cf87524&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/9cf87524&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/9cf87524&#010;&#010;Branch: refs/heads/master&#010;Commit: 9cf875246e91ee74baab2c78cc5d846c6e3ab8fb&#010;Parents: 492bef3&#010;Author: Andrea Cosentino &lt;ancosen@gmail.com&gt;&#010;Authored: Wed Apr 19 10:44:16 2017 +0200&#010;Committer: Andrea Cosentino &lt;ancosen@gmail.com&gt;&#010;Committed: Wed Apr 19 10:44:16 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; parent/pom.xml                                                   | 2 +-&#010; .../bonita/springboot/BonitaComponentAutoConfiguration.java      | 4 ++--&#010; .../pubnub/springboot/PubNubComponentAutoConfiguration.java      | 4 ++--&#010; .../springboot/RestSwaggerComponentAutoConfiguration.java        | 4 ++--&#010; .../swagger/springboot/RestSwaggerComponentConfiguration.java    | 2 +-&#010; 5 files changed, 8 insertions(+), 8 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/9cf87524/parent/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/parent/pom.xml b/parent/pom.xml&#010;index b3284be..79bd2fa 100644&#010;--- a/parent/pom.xml&#010;+++ b/parent/pom.xml&#010;@@ -661,7 +661,7 @@&#010;     &lt;weld2-version&gt;2.4.2.Final&lt;/weld2-version&gt;&#010;     &lt;weld3-version&gt;3.0.0.CR2&lt;/weld3-version&gt;&#010;     &lt;werken-xpath-bundle-version&gt;0.9.4_5&lt;/werken-xpath-bundle-version&gt;&#010;-    &lt;wiremock-version&gt;2.5.1&lt;/wiremock-version&gt;&#010;+    &lt;wiremock-version&gt;2.6.0&lt;/wiremock-version&gt;&#010;     &lt;woodstox-version&gt;4.4.1&lt;/woodstox-version&gt;&#010;     &lt;ws-commons-util-bundle-version&gt;1.0.2_2&lt;/ws-commons-util-bundle-version&gt;&#010;     &lt;wsdl4j-bundle-version&gt;1.6.2_6&lt;/wsdl4j-bundle-version&gt;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/9cf87524/platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/BonitaComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/BonitaComponentAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/BonitaComponentAutoConfiguration.java&#010;index 8bfa8d8..deee612 100644&#010;--- a/platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/BonitaComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-bonita-starter/src/main/java/org/apache/camel/component/bonita/springboot/BonitaComponentAutoConfiguration.java&#010;@@ -37,7 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;-@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;+@Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"", date&#010;= ""2017-04-19T08:39:00.866Z"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(BonitaComponentAutoConfiguration.Condition.class)&#010;@@ -55,7 +55,7 @@ public class BonitaComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;-    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;+    @Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"",&#010;date = ""2017-04-19T08:39:00.940Z"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/9cf87524/platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/PubNubComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/PubNubComponentAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/PubNubComponentAutoConfiguration.java&#010;index 671c1ce..c649698 100644&#010;--- a/platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/PubNubComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-pubnub-starter/src/main/java/org/apache/camel/component/pubnub/springboot/PubNubComponentAutoConfiguration.java&#010;@@ -37,7 +37,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;-@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;+@Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"", date&#010;= ""2017-04-19T08:39:35.390Z"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(PubNubComponentAutoConfiguration.Condition.class)&#010;@@ -55,7 +55,7 @@ public class PubNubComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;-    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;+    @Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"",&#010;date = ""2017-04-19T08:39:35.455Z"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/9cf87524/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentAutoConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentAutoConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentAutoConfiguration.java&#010;index 56064f2..694bc3f 100644&#010;--- a/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentAutoConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentAutoConfiguration.java&#010;@@ -41,7 +41,7 @@ import org.springframework.core.type.AnnotatedTypeMetadata;&#010; /**&#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;-@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;+@Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"", date&#010;= ""2017-04-19T08:40:54.730Z"")&#010; @Configuration&#010; @ConditionalOnBean(type = ""org.apache.camel.spring.boot.CamelAutoConfiguration"")&#010; @Conditional(RestSwaggerComponentAutoConfiguration.Condition.class)&#010;@@ -86,7 +86,7 @@ public class RestSwaggerComponentAutoConfiguration {&#010;         return component;&#010;     }&#010; &#010;-    @Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;+    @Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"",&#010;date = ""2017-04-19T08:40:54.785Z"")&#010;     public static class Condition extends SpringBootCondition {&#010;         @Override&#010;         public ConditionOutcome getMatchOutcome(&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/9cf87524/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentConfiguration.java&#010;----------------------------------------------------------------------&#010;diff --git a/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentConfiguration.java&#010;b/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentConfiguration.java&#010;index cf01faa..205fcfd 100644&#010;--- a/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentConfiguration.java&#010;+++ b/platforms/spring-boot/components-starter/camel-rest-swagger-starter/src/main/java/org/apache/camel/component/rest/swagger/springboot/RestSwaggerComponentConfiguration.java&#010;@@ -25,7 +25,7 @@ import org.springframework.boot.context.properties.ConfigurationProperties;&#010;  * &#010;  * Generated by camel-package-maven-plugin - do not edit this file!&#010;  */&#010;-@Generated(""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"")&#010;+@Generated(value = ""org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo"", date&#010;= ""2017-04-19T08:40:54.520Z"")&#010; @ConfigurationProperties(prefix = ""camel.component.rest-swagger"")&#010; public class RestSwaggerComponentConfiguration {&#010; &#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C06f2b9c6afc34951a730ca0c74f1f1a6%40git.apache.org%3E,2017-04-19 08:44:54,commits,398.0,camel git commit: Upgrade Wiremock to version 2.6.0
283,283,206.0,214.0,Apache Jenkins Server,The Apache Jenkins build system has built Camel.2.18.x.notest (build #113)&#010;&#010;Status: Failure&#010;&#010;Check console output at https://builds.apache.org/job/Camel.2.18.x.notest/113/ to view the&#010;results.&#010;,http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C2077918246.1360.1492591909964.JavaMail.jenkins%40crius%3E,2017-04-19 08:51:49,mail,214.0,Camel.2.18.x.notest - Build # 113 - Failure
284,284,208.0,616.0,Claus Ibsen (JIRA),"Claus Ibsen created CAMEL-11167:&#010;-----------------------------------&#010;&#010;             Summary: Include Camel name in spring boot health check&#010;                 Key: CAMEL-11167&#010;                 URL: https://issues.apache.org/jira/browse/CAMEL-11167&#010;             Project: Camel&#010;          Issue Type: Improvement&#010;          Components: camel-spring-boot&#010;            Reporter: Claus Ibsen&#010;            Assignee: Claus Ibsen&#010;             Fix For: 2.19.0&#010;&#010;&#010;It can help see which Camel is being checked, currently we only see the version.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13065026.1492592863000.315923.1492592921617%40Atlassian.JIRA%3E,2017-04-19 09:08:41,issues,620.0,  [jira] [Created] (CAMEL-11167) Include Camel name in spring boot health check
285,285,212.0,401.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master e1cc3a2cf -&gt; e09180940&#010;&#010;&#010;CAMEL-11167: Include Camel name in spring boot health check&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/e0918094&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/e0918094&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/e0918094&#010;&#010;Branch: refs/heads/master&#010;Commit: e09180940d967164f509e85e83f5eab04f24444b&#010;Parents: e1cc3a2&#010;Author: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Authored: Wed Apr 19 11:14:46 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Wed Apr 19 11:15:47 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../org/apache/camel/spring/boot/health/CamelHealthIndicator.java   | 1 +&#010; 1 file changed, 1 insertion(+)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/e0918094/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/health/CamelHealthIndicator.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/health/CamelHealthIndicator.java&#010;b/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/health/CamelHealthIndicator.java&#010;index 7a9feb9..67ca02d 100644&#010;--- a/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/health/CamelHealthIndicator.java&#010;+++ b/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/health/CamelHealthIndicator.java&#010;@@ -37,6 +37,7 @@ public class CamelHealthIndicator extends AbstractHealthIndicator {&#010;         if (camelContext == null) {&#010;             builder.unknown();&#010;         } else {&#010;+            builder.withDetail(""name"", camelContext.getName());&#010;             builder.withDetail(""version"", camelContext.getVersion());&#010;             builder.withDetail(""contextStatus"", camelContext.getStatus().name());&#010;             if (camelContext.getStatus().isStarted()) {&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C48ddebc7cb2244a18482e1c9ea9c4121%40git.apache.org%3E,2017-04-19 09:15:57,commits,401.0,camel git commit: CAMEL-11167: Include Camel name in spring boot health check
288,288,219.0,399.0,Tomohisa Igarashi (JIRA),"&#010;     [ https://issues.apache.org/jira/browse/CAMEL-10798?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&#010;]&#010;&#010;Tomohisa Igarashi reassigned CAMEL-10798:&#010;-----------------------------------------&#010;&#010;    Assignee: Tomohisa Igarashi&#010;&#010;&gt; camel-twitter, camel-ignite - Make the uri endpoints separated&#010;&gt; --------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-10798&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-10798&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Improvement&#010;&gt;            Reporter: Claus Ibsen&#010;&gt;            Assignee: Tomohisa Igarashi&#010;&gt;             Fix For: 3.0.0&#010;&gt;&#010;&gt;&#010;&gt; They currently have the same @UriEndpoint that represents all of their possible endpoint&#010;combinations. This usually works fine for Camel components. But some components such as twitter,&#010;ignite, hazelcast etc do have to many different endpoints that have very specific options&#010;per different endpoint.&#010;&gt; We should split up this in different components so they are separated.&#010;&gt; So we have&#010;&gt; twitter-status&#010;&gt; twitter-search&#010;&gt; twitter-direct&#010;&gt; Or something.&#010;&gt; This will also help tooling, documentation, et all so they are clearly separated and&#010;there are no confusion. For example twitter mention do not support the delay option which&#010;only twitter search uses etc.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13040956.1486469339000.316436.1492597121554%40Atlassian.JIRA%3E,2017-04-19 10:18:41,issues,402.0,"  [jira] [Assigned] (CAMEL-10798) camel-twitter, camel-ignite - Make the uri endpoints separated"
289,289,228.0,491.0,Claus Ibsen (JIRA),&#010;     [ https://issues.apache.org/jira/browse/CAMEL-11146?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&#010;]&#010;&#010;Claus Ibsen updated CAMEL-11146:&#010;--------------------------------&#010;    Estimated Complexity: Novice  (was: Unknown)&#010;&#010;&gt; Update description for all data formats and languages on big readme file&#010;&gt; ------------------------------------------------------------------------&#010;&gt;&#010;&gt;                 Key: CAMEL-11146&#010;&gt;                 URL: https://issues.apache.org/jira/browse/CAMEL-11146&#010;&gt;             Project: Camel&#010;&gt;          Issue Type: Task&#010;&gt;          Components: documentation&#010;&gt;            Reporter: Claus Ibsen&#010;&gt;             Fix For: 2.20.0&#010;&gt;&#010;&gt;&#010;&gt; This page&#010;&gt; https://github.com/apache/camel/tree/master/components&#010;&gt; We should improve description for all those data formats and languages as they are not&#010;very informative. They should have a short description like we do for components.&#010;&#010;&#010;&#010;--&#010;This message was sent by Atlassian JIRA&#010;(v6.3.15#6346)&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-issues/201704.mbox/ajax/%3CJIRA.13063766.1492083402000.316625.1492600301528%40Atlassian.JIRA%3E,2017-04-19 11:11:41,issues,494.0,  [jira] [Updated] (CAMEL-11146) Update description for all data formats and languages on big readme file
292,292,235.0,405.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 1d1daefe8 -&gt; db2556580&#010;&#010;&#010;Upgrade Spring&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/f31abac1&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/f31abac1&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/f31abac1&#010;&#010;Branch: refs/heads/master&#010;Commit: f31abac1d1203dc02e3a527ecd790db6318ad8ca&#010;Parents: 1d1daef&#010;Author: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Authored: Wed Apr 19 13:37:34 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Wed Apr 19 13:37:34 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; parent/pom.xml | 4 ++--&#010; 1 file changed, 2 insertions(+), 2 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/f31abac1/parent/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/parent/pom.xml b/parent/pom.xml&#010;index 578d968..24069e4 100644&#010;--- a/parent/pom.xml&#010;+++ b/parent/pom.xml&#010;@@ -610,8 +610,8 @@&#010;     &lt;spring40-version&gt;4.0.9.RELEASE&lt;/spring40-version&gt;&#010;     &lt;spring41-version&gt;4.1.9.RELEASE&lt;/spring41-version&gt;&#010;     &lt;spring42-version&gt;4.2.9.RELEASE&lt;/spring42-version&gt;&#010;-    &lt;spring43-version&gt;4.3.7.RELEASE&lt;/spring43-version&gt;&#010;-    &lt;spring4-version&gt;4.3.7.RELEASE&lt;/spring4-version&gt;&#010;+    &lt;spring43-version&gt;4.3.8.RELEASE&lt;/spring43-version&gt;&#010;+    &lt;spring4-version&gt;4.3.8.RELEASE&lt;/spring4-version&gt;&#010;     &lt;spring-osgi-version&gt;1.2.1&lt;/spring-osgi-version&gt;&#010;     &lt;spring-security-version&gt;4.1.4.RELEASE&lt;/spring-security-version&gt;&#010;     &lt;spring-security-bundle-version&gt;4.1.4.RELEASE_1&lt;/spring-security-bundle-version&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C87f507e3493c4bd384bdb1fd73fdceba%40git.apache.org%3E,2017-04-19 11:53:09,commits,405.0,[1/2] camel git commit: Upgrade Spring
295,295,237.0,408.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master db2556580 -&gt; 28fa5cf61&#010;&#010;&#010;Upgrade CXF&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/28fa5cf6&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/28fa5cf6&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/28fa5cf6&#010;&#010;Branch: refs/heads/master&#010;Commit: 28fa5cf61e8ff9f8ed298af00815d952129059b7&#010;Parents: db25565&#010;Author: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Authored: Wed Apr 19 13:56:35 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Wed Apr 19 13:56:35 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; parent/pom.xml | 2 +-&#010; 1 file changed, 1 insertion(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/28fa5cf6/parent/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/parent/pom.xml b/parent/pom.xml&#010;index 2f9ee7a..9b9013b 100644&#010;--- a/parent/pom.xml&#010;+++ b/parent/pom.xml&#010;@@ -156,7 +156,7 @@&#010;     &lt;cobertura-maven-plugin-version&gt;2.7&lt;/cobertura-maven-plugin-version&gt;&#010;     &lt;couchbase-client-version&gt;1.4.12&lt;/couchbase-client-version&gt;&#010;     &lt;curator-version&gt;2.11.1&lt;/curator-version&gt;&#010;-    &lt;cxf-version&gt;3.1.10&lt;/cxf-version&gt;&#010;+    &lt;cxf-version&gt;3.1.11&lt;/cxf-version&gt;&#010;     &lt;cxf-version-range&gt;[3.0,4.0)&lt;/cxf-version-range&gt;&#010;     &lt;cxf-xjc-plugin-version&gt;3.0.5&lt;/cxf-xjc-plugin-version&gt;&#010;     &lt;cxf-xjc-utils-version&gt;3.0.5&lt;/cxf-xjc-utils-version&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cda3c1ad4ffe3491dbb246b87ca5280b5%40git.apache.org%3E,2017-04-19 11:57:57,commits,408.0,  camel git commit: Upgrade CXF
296,296,240.0,409.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/camel-2.18.x 4f1b6539e -&gt; 2964c72b7&#010;&#010;&#010;Upgrade CXF&#010;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/2964c72b&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/2964c72b&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/2964c72b&#010;&#010;Branch: refs/heads/camel-2.18.x&#010;Commit: 2964c72b70471c18872fc57c9b908f7d0b611891&#010;Parents: 4f1b653&#010;Author: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Authored: Wed Apr 19 14:26:47 2017 +0200&#010;Committer: Claus Ibsen &lt;davsclaus@apache.org&gt;&#010;Committed: Wed Apr 19 14:26:47 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; parent/pom.xml | 2 +-&#010; 1 file changed, 1 insertion(+), 1 deletion(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/2964c72b/parent/pom.xml&#010;----------------------------------------------------------------------&#010;diff --git a/parent/pom.xml b/parent/pom.xml&#010;index c3c52d1..5beab1d 100644&#010;--- a/parent/pom.xml&#010;+++ b/parent/pom.xml&#010;@@ -147,7 +147,7 @@&#010;     &lt;consul-client-version&gt;0.12.4&lt;/consul-client-version&gt;&#010;     &lt;consul-client-bundle-version&gt;0.12.4_1&lt;/consul-client-bundle-version&gt;&#010;     &lt;cobertura-maven-plugin-version&gt;2.7&lt;/cobertura-maven-plugin-version&gt;&#010;-    &lt;cxf-version&gt;3.1.10&lt;/cxf-version&gt;&#010;+    &lt;cxf-version&gt;3.1.11&lt;/cxf-version&gt;&#010;     &lt;cxf-version-range&gt;[3.0,4.0)&lt;/cxf-version-range&gt;&#010;     &lt;cxf-xjc-plugin-version&gt;3.0.5&lt;/cxf-xjc-plugin-version&gt;&#010;     &lt;cxf-xjc-utils-version&gt;3.0.5&lt;/cxf-xjc-utils-version&gt;&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3C9cbb82ef817f42dd959e07ed7e84b41b%40git.apache.org%3E,2017-04-19 12:26:53,commits,409.0,  camel git commit: Upgrade CXF
297,297,238.0,223.0,ctron,"GitHub user ctron opened a pull request:&#010;&#010;    https://github.com/apache/camel/pull/1641&#010;&#010;    Clean up example applications&#010;&#010;    This change cleans the example applications provided to show&#010;    some simple routes with camel-milo.&#010;    &#010;    Signed-off-by: Jens Reimann &lt;jreimann@redhat.com&gt;&#010;&#010;You can merge this pull request into a Git repository by running:&#010;&#010;    $ git pull https://github.com/ctron/camel feature/milo_cleanup_samples_1&#010;&#010;Alternatively you can review and apply these changes as the patch at:&#010;&#010;    https://github.com/apache/camel/pull/1641.patch&#010;&#010;To close this pull request, make a commit to your master/trunk branch&#010;with (at least) the following in the commit message:&#010;&#010;    This closes #1641&#010;    &#010;----&#010;commit 56f2b24a2d4dbb408b71610bfe90fbfa2e9f7147&#010;Author: Jens Reimann &lt;jreimann@redhat.com&gt;&#010;Date:   2017-04-19T12:14:54Z&#010;&#010;    Clean up example applications&#010;    &#010;    This change cleans the example applications provided to show&#010;    some simple routes with camel-milo.&#010;    &#010;    Signed-off-by: Jens Reimann &lt;jreimann@redhat.com&gt;&#010;&#010;----&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3Cgit-pr-1641-camel%40git.apache.org%3E,2017-04-19 12:21:29,mail,223.0,[GitHub] camel pull request #1641: Clean up example applications
298,298,245.0,410.0,davscl...@apache.org,"Repository: camel&#010;Updated Branches:&#010;  refs/heads/master 28fa5cf61 -&gt; 56f2b24a2&#010;&#010;&#010;Clean up example applications&#010;&#010;This change cleans the example applications provided to show&#010;some simple routes with camel-milo.&#010;&#010;Signed-off-by: Jens Reimann &lt;jreimann@redhat.com&gt;&#010;&#010;Project: http://git-wip-us.apache.org/repos/asf/camel/repo&#010;Commit: http://git-wip-us.apache.org/repos/asf/camel/commit/56f2b24a&#010;Tree: http://git-wip-us.apache.org/repos/asf/camel/tree/56f2b24a&#010;Diff: http://git-wip-us.apache.org/repos/asf/camel/diff/56f2b24a&#010;&#010;Branch: refs/heads/master&#010;Commit: 56f2b24a2d4dbb408b71610bfe90fbfa2e9f7147&#010;Parents: 28fa5cf&#010;Author: Jens Reimann &lt;jreimann@redhat.com&gt;&#010;Authored: Wed Apr 19 14:14:54 2017 +0200&#010;Committer: Jens Reimann &lt;jreimann@redhat.com&gt;&#010;Committed: Wed Apr 19 14:19:16 2017 +0200&#010;&#010;----------------------------------------------------------------------&#010; .../component/milo/testing/Application.java     | 73 ----------------&#010; .../milo/testing/Application2Client.java        | 62 -------------&#010; .../milo/testing/Application2Server.java        | 72 ----------------&#010; .../component/milo/testing/ExampleClient.java   | 62 +++++++++++++&#010; .../component/milo/testing/ExampleServer.java   | 91 ++++++++++++++++++++&#010; 5 files changed, 153 insertions(+), 207 deletions(-)&#010;----------------------------------------------------------------------&#010;&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/56f2b24a/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/Application.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/Application.java&#010;b/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/Application.java&#010;deleted file mode 100644&#010;index a78efbf..0000000&#010;--- a/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/Application.java&#010;+++ /dev/null&#010;@@ -1,73 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.component.milo.testing;&#010;-&#010;-import org.apache.camel.CamelContext;&#010;-import org.apache.camel.builder.RouteBuilder;&#010;-import org.apache.camel.impl.DefaultCamelContext;&#010;-&#010;-public final class Application {&#010;-&#010;-    private Application() {&#010;-    }&#010;-&#010;-    public static void main(final String[] args) throws Exception {&#010;-&#010;-        // camel conext&#010;-&#010;-        final CamelContext context = new DefaultCamelContext();&#010;-&#010;-        // add paho&#010;-&#010;-        // no need to register, gets auto detected&#010;-        // context.addComponent(""paho"", new PahoComponent());&#010;-&#010;-        // no need to register, gets auto detected&#010;-        // context.addComponent(""milo-server"", new MiloClientComponent());&#010;-        // context.addComponent(""milo-client"", new MiloClientComponent());&#010;-&#010;-        // add routes&#010;-&#010;-        context.addRoutes(new RouteBuilder() {&#010;-&#010;-            @Override&#010;-            public void configure() throws Exception {&#010;-                from(""paho:javaonedemo/eclipse-greenhouse-9home/sensors/temperature?brokerUrl=tcp://iot.eclipse.org:1883"").log(""Temp&#010;update: ${body}"").convertBodyTo(String.class)&#010;-                    .to(""milo-server:MyItem"");&#010;-&#010;-                from(""milo-server:MyItem"").log(""MyItem: ${body}"");&#010;-&#010;-                from(""milo-server:MyItem2"").log(""MyItem2 : ${body}"").to(""paho:de/dentrassi/camel/milo/test1?brokerUrl=tcp://iot.eclipse.org:1883"");&#010;-&#010;-                from(""milo-client:tcp://foo:bar@localhost:12685?nodeId=items-MyItem&amp;namespaceUri=urn:camel"").log(""From&#010;OPC UA: ${body}"")&#010;-                    .to(""milo-client:tcp://localhost:12685?nodeId=items-MyItem2&amp;namespaceUri=urn:camel"");&#010;-&#010;-                from(""paho:de/dentrassi/camel/milo/test1?brokerUrl=tcp://iot.eclipse.org:1883"").log(""Back&#010;from MQTT: ${body}"");&#010;-            }&#010;-        });&#010;-&#010;-        // start&#010;-&#010;-        context.start();&#010;-&#010;-        // sleep&#010;-&#010;-        while (true) {&#010;-            Thread.sleep(Long.MAX_VALUE);&#010;-        }&#010;-    }&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/56f2b24a/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/Application2Client.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/Application2Client.java&#010;b/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/Application2Client.java&#010;deleted file mode 100644&#010;index d613a18..0000000&#010;--- a/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/Application2Client.java&#010;+++ /dev/null&#010;@@ -1,62 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.component.milo.testing;&#010;-&#010;-import org.apache.camel.CamelContext;&#010;-import org.apache.camel.builder.RouteBuilder;&#010;-import org.apache.camel.impl.DefaultCamelContext;&#010;-&#010;-public final class Application2Client {&#010;-&#010;-    private Application2Client() {&#010;-    }&#010;-&#010;-    public static void main(final String[] args) throws Exception {&#010;-&#010;-        // camel conext&#010;-&#010;-        final CamelContext context = new DefaultCamelContext();&#010;-&#010;-        // add paho&#010;-&#010;-        // no need to register, gets auto detected&#010;-        // context.addComponent(""paho"", new PahoComponent());&#010;-&#010;-        // add OPC UA&#010;-&#010;-        // add routes&#010;-&#010;-        context.addRoutes(new RouteBuilder() {&#010;-&#010;-            @Override&#010;-            public void configure() throws Exception {&#010;-                from(""milo-client:tcp://foo:bar@localhost:12685?nodeId=items-MyItem&amp;namespaceUri=urn:org:apache:camel"").log(""From&#010;OPC UA: ${body}"")&#010;-                    .to(""milo-client:tcp://foo:bar@localhost:12685?nodeId=items-MyItem2&amp;namespaceUri=urn:org:apache:camel"");&#010;-            }&#010;-        });&#010;-&#010;-        // start&#010;-&#010;-        context.start();&#010;-&#010;-        // sleep&#010;-&#010;-        while (true) {&#010;-            Thread.sleep(Long.MAX_VALUE);&#010;-        }&#010;-    }&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/56f2b24a/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/Application2Server.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/Application2Server.java&#010;b/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/Application2Server.java&#010;deleted file mode 100644&#010;index ae85890..0000000&#010;--- a/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/Application2Server.java&#010;+++ /dev/null&#010;@@ -1,72 +0,0 @@&#010;-/**&#010;- * Licensed to the Apache Software Foundation (ASF) under one or more&#010;- * contributor license agreements.  See the NOTICE file distributed with&#010;- * this work for additional information regarding copyright ownership.&#010;- * The ASF licenses this file to You under the Apache License, Version 2.0&#010;- * (the ""License""); you may not use this file except in compliance with&#010;- * the License.  You may obtain a copy of the License at&#010;- *&#010;- *      http://www.apache.org/licenses/LICENSE-2.0&#010;- *&#010;- * Unless required by applicable law or agreed to in writing, software&#010;- * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;- * See the License for the specific language governing permissions and&#010;- * limitations under the License.&#010;- */&#010;-package org.apache.camel.component.milo.testing;&#010;-&#010;-import org.apache.camel.CamelContext;&#010;-import org.apache.camel.builder.RouteBuilder;&#010;-import org.apache.camel.component.milo.server.MiloServerComponent;&#010;-import org.apache.camel.impl.DefaultCamelContext;&#010;-&#010;-public final class Application2Server {&#010;-    private Application2Server() {&#010;-    }&#010;-&#010;-    public static void main(final String[] args) throws Exception {&#010;-&#010;-        // camel conext&#010;-&#010;-        final CamelContext context = new DefaultCamelContext();&#010;-&#010;-        // add paho&#010;-&#010;-        // no need to register, gets auto detected&#010;-        // context.addComponent(""paho"", new PahoComponent());&#010;-        ((MiloServerComponent)context.getComponent(""milo-server"")).setUserAuthenticationCredentials(""foo:bar"");&#010;-&#010;-        // add routes&#010;-&#010;-        context.addRoutes(new RouteBuilder() {&#010;-&#010;-            @Override&#010;-            public void configure() throws Exception {&#010;-                /*&#010;-                 * from(&#010;-                 * ""paho:javaonedemo/eclipse-greenhouse-9home/sensors/temperature?brokerUrl=tcp://iot.eclipse.org:1883"")&#010;-                 * .log(""Temp update: ${body}"").convertBodyTo(String.class).to(&#010;-                 * ""milo-server:MyItem"");&#010;-                 */&#010;-&#010;-                from(""paho:my/foo/bar?brokerUrl=tcp://iot.eclipse.org:1883"").log(""Temp update:&#010;${body}"").convertBodyTo(String.class).to(""milo-server:MyItem"");&#010;-&#010;-                from(""milo-server:MyItem"").log(""MyItem: ${body}"");&#010;-                from(""milo-server:MyItem2"").log(""MyItem2: ${body}"").convertBodyTo(String.class).to(""paho:de/dentrassi/camel/milo/temperature?brokerUrl=tcp://iot.eclipse.org:1883"");&#010;-&#010;-                from(""paho:de/dentrassi/camel/milo/temperature?brokerUrl=tcp://iot.eclipse.org:1883"").log(""Back&#010;from MQTT: ${body}"");&#010;-            }&#010;-        });&#010;-&#010;-        // start&#010;-&#010;-        context.start();&#010;-&#010;-        // sleep&#010;-&#010;-        while (true) {&#010;-            Thread.sleep(Long.MAX_VALUE);&#010;-        }&#010;-    }&#010;-}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/56f2b24a/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/ExampleClient.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/ExampleClient.java&#010;b/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/ExampleClient.java&#010;new file mode 100644&#010;index 0000000..38c0a06&#010;--- /dev/null&#010;+++ b/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/ExampleClient.java&#010;@@ -0,0 +1,62 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.component.milo.testing;&#010;+&#010;+import org.apache.camel.CamelContext;&#010;+import org.apache.camel.builder.RouteBuilder;&#010;+import org.apache.camel.component.milo.NodeIds;&#010;+import org.apache.camel.impl.DefaultCamelContext;&#010;+&#010;+/**&#010;+ * An example application focusing on the OPC UA client endpoint&#010;+ */&#010;+public final class ExampleClient {&#010;+&#010;+    private ExampleClient() {&#010;+    }&#010;+&#010;+    public static void main(final String[] args) throws Exception {&#010;+&#010;+        // camel conext&#010;+&#010;+        final CamelContext context = new DefaultCamelContext();&#010;+&#010;+        // add routes&#010;+&#010;+        context.addRoutes(new RouteBuilder() {&#010;+&#010;+            @Override&#010;+            public void configure() throws Exception {&#010;+                // bridge item1 to item2&#010;+                final String item1 = NodeIds.nodeValue(""urn:org:apache:camel"", ""items-MyItem"");&#010;+                final String item2 = NodeIds.nodeValue(""urn:org:apache:camel"", ""items-MyItem2"");&#010;+                from(""milo-client:tcp://foo:bar@localhost:12685?node="" + item1).log(""From&#010;OPC UA: ${body}"")&#010;+                    .to(""milo-client:tcp://foo:bar@localhost:12685?node"" + item2);&#010;+            }&#010;+        });&#010;+&#010;+        // start&#010;+&#010;+        context.start();&#010;+&#010;+        // sleep&#010;+&#010;+        while (true) {&#010;+            Thread.sleep(Long.MAX_VALUE);&#010;+        }&#010;+    }&#010;+}&#010;&#010;http://git-wip-us.apache.org/repos/asf/camel/blob/56f2b24a/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/ExampleServer.java&#010;----------------------------------------------------------------------&#010;diff --git a/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/ExampleServer.java&#010;b/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/ExampleServer.java&#010;new file mode 100644&#010;index 0000000..2f39a91&#010;--- /dev/null&#010;+++ b/components/camel-milo/src/test/java/org/apache/camel/component/milo/testing/ExampleServer.java&#010;@@ -0,0 +1,91 @@&#010;+/**&#010;+ * Licensed to the Apache Software Foundation (ASF) under one or more&#010;+ * contributor license agreements.  See the NOTICE file distributed with&#010;+ * this work for additional information regarding copyright ownership.&#010;+ * The ASF licenses this file to You under the Apache License, Version 2.0&#010;+ * (the ""License""); you may not use this file except in compliance with&#010;+ * the License.  You may obtain a copy of the License at&#010;+ *&#010;+ *      http://www.apache.org/licenses/LICENSE-2.0&#010;+ *&#010;+ * Unless required by applicable law or agreed to in writing, software&#010;+ * distributed under the License is distributed on an ""AS IS"" BASIS,&#010;+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#010;+ * See the License for the specific language governing permissions and&#010;+ * limitations under the License.&#010;+ */&#010;+package org.apache.camel.component.milo.testing;&#010;+&#010;+import org.apache.camel.CamelContext;&#010;+import org.apache.camel.builder.RouteBuilder;&#010;+import org.apache.camel.component.milo.server.MiloServerComponent;&#010;+import org.apache.camel.impl.DefaultCamelContext;&#010;+&#010;+/**&#010;+ * This is a simple example application which tests a few ways of mapping data&#010;+ * to an OPC UA server instance.&#010;+ */&#010;+public final class ExampleServer {&#010;+    private ExampleServer() {&#010;+    }&#010;+&#010;+    public static void main(final String[] args) throws Exception {&#010;+&#010;+        // camel conext&#010;+&#010;+        final CamelContext context = new DefaultCamelContext();&#010;+&#010;+        // configure milo&#010;+&#010;+        ((MiloServerComponent)context.getComponent(""milo-server""))&#010;+            .setUserAuthenticationCredentials(""foo:bar"");&#010;+&#010;+        // add routes&#010;+&#010;+        context.addRoutes(new RouteBuilder() {&#010;+&#010;+            @Override&#010;+            public void configure() throws Exception {&#010;+                /*&#010;+                 * Take an MQTT topic and forward its content to an OPC UA&#010;+                 * server item. You can e.g. take some MQTT application and an&#010;+                 * OPC UA client, connect with both applications to their&#010;+                 * topics/items. When you write on the MQTT item it will pop up&#010;+                 * on the OPC UA item.&#010;+                 */&#010;+                from(""paho:my/foo/bar?brokerUrl=tcp://iot.eclipse.org:1883"").log(""Temp update:&#010;${body}"")&#010;+                    .convertBodyTo(String.class).to(""milo-server:MyItem"");&#010;+&#010;+                /*&#010;+                 * Creating a simple item which has not data but logs anything&#010;+                 * which gets written to by an OPC UA write call&#010;+                 */&#010;+                from(""milo-server:MyItem"").log(""MyItem: ${body}"");&#010;+&#010;+                /*&#010;+                 * Creating an item which takes write command and forwards them&#010;+                 * to an MQTT topic&#010;+                 */&#010;+                from(""milo-server:MyItem2"").log(""MyItem2: ${body}"").convertBodyTo(String.class)&#010;+                    .to(""paho:de/dentrassi/camel/milo/temperature?brokerUrl=tcp://iot.eclipse.org:1883"");&#010;+&#010;+                /*&#010;+                 * Re-read the output from the previous route from MQTT to the&#010;+                 * local logging&#010;+                 */&#010;+                from(""paho:de/dentrassi/camel/milo/temperature?brokerUrl=tcp://iot.eclipse.org:1883"")&#010;+                    .log(""Back from MQTT: ${body}"");&#010;+            }&#010;+        });&#010;+&#010;+        // start&#010;+&#010;+        context.start();&#010;+&#010;+        // sleep&#010;+&#010;+        while (true) {&#010;+            Thread.sleep(Long.MAX_VALUE);&#010;+        }&#010;+    }&#010;+}&#010;&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-commits/201704.mbox/ajax/%3Cbb45a03b62f84179bfa0c9459c595698%40git.apache.org%3E,2017-04-19 12:31:03,commits,410.0,camel git commit: Clean up example applications
299,299,246.0,224.0,asfgit,"Github user asfgit closed the pull request at:&#010;&#010;    https://github.com/apache/camel/pull/1641&#010;&#010;&#010;---&#010;If your project is set up for it, you can reply to this email and have your&#010;reply appear on GitHub as well. If your project does not have this feature&#010;enabled and wishes so, or if the feature is enabled but not working, please&#010;contact infrastructure at infrastructure@apache.org or file a JIRA ticket&#010;with INFRA.&#010;---&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3C20170419123117.C3A25DFBB7%40git1-us-west.apache.org%3E,2017-04-19 12:31:17,mail,224.0,  [GitHub] camel pull request #1641: Clean up example applications
300,300,241.0,211.0,Thomas Weinschenk,"Hi,&#010;&#010;I tried to update the spring boot web service example to 1.5.2.RELEASE but&#010;it fails when camel-swagger-java is in place.&#010;&#010;...&#010;Caused by: org.springframework.beans.BeanInstantiationException: Failed to&#010;instantiate [javax.validation.Validator]: Factory method 'jsr303Validator'&#010;threw exception; nested exception is java.lang.NoClassDefFoundError: Could&#010;not initialize class&#010;org.hibernate.validator.internal.engine.ConfigurationImpl&#010;&#009;at&#010;org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189)&#010;&#009;at&#010;org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)&#010;&#009;... 38 more&#010;Caused by: java.lang.NoClassDefFoundError: Could not initialize class&#010;org.hibernate.validator.internal.engine.ConfigurationImpl&#010;&#009;at&#010;org.hibernate.validator.HibernateValidator.createGenericConfiguration(HibernateValidator.java:33)&#010;&#009;at&#010;javax.validation.Validation$GenericBootstrapImpl.configure(Validation.java:276)&#010;&#009;at&#010;org.springframework.boot.validation.MessageInterpolatorFactory.getObject(MessageInterpolatorFactory.java:53)&#010;...&#010;&#010;If I exclude the camel-swagger-java dependency it works.&#010;&#010;It seems that camel-swagger-java includes some jsr303 validation that causes&#010;the problem.&#010;Spring boot uses the hibernate-validator 5.3.4.Final (JSR 349).&#010;This might cause the failure but I am not an expert on Bean Validation.&#010;&#010;Any idea how to solve this issue?&#010;&#010;Regards,&#010;Thomas&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Spring-Boot-1-5-fails-when-camel-swagger-java-in-place-tp5797920.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492604855885-5797920.post%40n5.nabble.com%3E,2017-04-19 12:27:35,users,212.0,Spring Boot > 1.5 fails when camel-swagger-java in place
301,301,242.0,212.0,Claus Ibsen,"What Camel version do you use?&#010;&#010;On Wed, Apr 19, 2017 at 2:27 PM, Thomas Weinschenk&#010;&lt;thomas.weinschenk@infoserve.endress.com&gt; wrote:&#010;&gt; Hi,&#010;&gt;&#010;&gt; I tried to update the spring boot web service example to 1.5.2.RELEASE but&#010;&gt; it fails when camel-swagger-java is in place.&#010;&gt;&#010;&gt; ...&#010;&gt; Caused by: org.springframework.beans.BeanInstantiationException: Failed to&#010;&gt; instantiate [javax.validation.Validator]: Factory method 'jsr303Validator'&#010;&gt; threw exception; nested exception is java.lang.NoClassDefFoundError: Could&#010;&gt; not initialize class&#010;&gt; org.hibernate.validator.internal.engine.ConfigurationImpl&#010;&gt;         at&#010;&gt; org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189)&#010;&gt;         at&#010;&gt; org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)&#010;&gt;         ... 38 more&#010;&gt; Caused by: java.lang.NoClassDefFoundError: Could not initialize class&#010;&gt; org.hibernate.validator.internal.engine.ConfigurationImpl&#010;&gt;         at&#010;&gt; org.hibernate.validator.HibernateValidator.createGenericConfiguration(HibernateValidator.java:33)&#010;&gt;         at&#010;&gt; javax.validation.Validation$GenericBootstrapImpl.configure(Validation.java:276)&#010;&gt;         at&#010;&gt; org.springframework.boot.validation.MessageInterpolatorFactory.getObject(MessageInterpolatorFactory.java:53)&#010;&gt; ...&#010;&gt;&#010;&gt; If I exclude the camel-swagger-java dependency it works.&#010;&gt;&#010;&gt; It seems that camel-swagger-java includes some jsr303 validation that causes&#010;&gt; the problem.&#010;&gt; Spring boot uses the hibernate-validator 5.3.4.Final (JSR 349).&#010;&gt; This might cause the failure but I am not an expert on Bean Validation.&#010;&gt;&#010;&gt; Any idea how to solve this issue?&#010;&gt;&#010;&gt; Regards,&#010;&gt; Thomas&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt; --&#010;&gt; View this message in context: http://camel.465427.n5.nabble.com/Spring-Boot-1-5-fails-when-camel-swagger-java-in-place-tp5797920.html&#010;&gt; Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;&#010;&#010;-- &#010;Claus Ibsen&#010;-----------------&#010;http://davsclaus.com @davsclaus&#010;Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yNmRaOEs3y%2BoEja9V_OAM3pzPZVz2cV1NB6t-sip1oJdxg%40mail.gmail.com%3E,2017-04-19 12:29:00,users,213.0,  Re: Spring Boot > 1.5 fails when camel-swagger-java in place
302,302,244.0,213.0,Thomas Weinschenk,You are right I forgot to mention the version...&#010;&#010;2.18.3&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Spring-Boot-1-5-fails-when-camel-swagger-java-in-place-tp5797920p5797923.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;,http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492605059042-5797923.post%40n5.nabble.com%3E,2017-04-19 12:30:59,users,214.0,    Re: Spring Boot > 1.5 fails when camel-swagger-java in place
303,303,247.0,216.0,Zoran Regvart,"Hi Thomas,&#010;the exception you quoted is a NoClassDefFoundError can you look in the&#010;logs for the first exception you that might be related to this,&#010;perhaps a ClassNotFoundException preceeding it? If you don't need JSR&#010;303 validations you can turn them off by setting&#010;`javax.persistence.validation.mode` to `none`,&#010;&#010;&#010;zoran&#010;&#010;On Wed, Apr 19, 2017 at 2:27 PM, Thomas Weinschenk&#010;&lt;thomas.weinschenk@infoserve.endress.com&gt; wrote:&#010;&gt; Hi,&#010;&gt;&#010;&gt; I tried to update the spring boot web service example to 1.5.2.RELEASE but&#010;&gt; it fails when camel-swagger-java is in place.&#010;&gt;&#010;&gt; ...&#010;&gt; Caused by: org.springframework.beans.BeanInstantiationException: Failed to&#010;&gt; instantiate [javax.validation.Validator]: Factory method 'jsr303Validator'&#010;&gt; threw exception; nested exception is java.lang.NoClassDefFoundError: Could&#010;&gt; not initialize class&#010;&gt; org.hibernate.validator.internal.engine.ConfigurationImpl&#010;&gt;         at&#010;&gt; org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189)&#010;&gt;         at&#010;&gt; org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)&#010;&gt;         ... 38 more&#010;&gt; Caused by: java.lang.NoClassDefFoundError: Could not initialize class&#010;&gt; org.hibernate.validator.internal.engine.ConfigurationImpl&#010;&gt;         at&#010;&gt; org.hibernate.validator.HibernateValidator.createGenericConfiguration(HibernateValidator.java:33)&#010;&gt;         at&#010;&gt; javax.validation.Validation$GenericBootstrapImpl.configure(Validation.java:276)&#010;&gt;         at&#010;&gt; org.springframework.boot.validation.MessageInterpolatorFactory.getObject(MessageInterpolatorFactory.java:53)&#010;&gt; ...&#010;&gt;&#010;&gt; If I exclude the camel-swagger-java dependency it works.&#010;&gt;&#010;&gt; It seems that camel-swagger-java includes some jsr303 validation that causes&#010;&gt; the problem.&#010;&gt; Spring boot uses the hibernate-validator 5.3.4.Final (JSR 349).&#010;&gt; This might cause the failure but I am not an expert on Bean Validation.&#010;&gt;&#010;&gt; Any idea how to solve this issue?&#010;&gt;&#010;&gt; Regards,&#010;&gt; Thomas&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt; --&#010;&gt; View this message in context: http://camel.465427.n5.nabble.com/Spring-Boot-1-5-fails-when-camel-swagger-java-in-place-tp5797920.html&#010;&gt; Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;&#010;&#010;-- &#010;Zoran Regvart&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCABD_Zr8C3y7Zn_kGomKOJimCpfTjj24HJyPGqR3pZ87MjH1tnA%40mail.gmail.com%3E,2017-04-19 12:35:40,users,217.0,  Re: Spring Boot > 1.5 fails when camel-swagger-java in place
304,304,248.0,217.0,Thomas Weinschenk,"Hi Zoran,&#010;&#010;where do I have to put the validation mode setting, property of the pom,&#010;application.yml or as an environment variable? I tried all three but I still&#010;get the same error.&#010;&#010;The log ouptut related to the failure is:&#010;&#010;Exception encountered during context initialization - cancelling refresh&#010;attempt: org.springframework.beans.factory.UnsatisfiedDependencyException:&#010;Error creating bean with name 'methodValidationPostProcessor' defined in&#010;class path resource&#010;[org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.class]:&#010;Unsatisfied dependency expressed through method&#010;'methodValidationPostProcessor' parameter 0; nested exception is&#010;org.springframework.beans.factory.BeanCreationException: Error creating bean&#010;with name 'jsr303Validator' defined in class path resource&#010;[org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.class]:&#010;Bean instantiation via factory method failed; nested exception is&#010;org.springframework.beans.BeanInstantiationException: Failed to instantiate&#010;[javax.validation.Validator]: Factory method 'jsr303Validator' threw&#010;exception; nested exception is java.lang.NoClassDefFoundError: Could not&#010;initialize class org.hibernate.validator.internal.engine.ConfigurationImpl&#010;&#010;&#010;And to be really verbose...the complete stack trace...&#010;&#010;2017-04-19 15:02:49.179  INFO 222576 --- [           main]&#010;ationConfigEmbeddedWebApplicationContext : Refreshing&#010;org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6e083721:&#010;startup date [Wed Apr 19 15:02:49 CEST 2017]; root of context hierarchy&#010;2017-04-19 15:02:51.425  WARN 222576 --- [           main]&#010;ationConfigEmbeddedWebApplicationContext : Exception encountered during&#010;context initialization - cancelling refresh attempt:&#010;org.springframework.beans.factory.UnsatisfiedDependencyException: Error&#010;creating bean with name 'methodValidationPostProcessor' defined in class&#010;path resource&#010;[org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.class]:&#010;Unsatisfied dependency expressed through method&#010;'methodValidationPostProcessor' parameter 0; nested exception is&#010;org.springframework.beans.factory.BeanCreationException: Error creating bean&#010;with name 'jsr303Validator' defined in class path resource&#010;[org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.class]:&#010;Bean instantiation via factory method failed; nested exception is&#010;org.springframework.beans.BeanInstantiationException: Failed to instantiate&#010;[javax.validation.Validator]: Factory method 'jsr303Validator' threw&#010;exception; nested exception is java.lang.NoClassDefFoundError: Could not&#010;initialize class org.hibernate.validator.internal.engine.ConfigurationImpl&#010;2017-04-19 15:02:51.441 ERROR 222576 --- [           main]&#010;o.s.b.f.s.DefaultListableBeanFactory     : Destroy method on bean with name&#010;'org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor'&#010;threw an exception&#010;&#010;java.lang.IllegalStateException: ApplicationEventMulticaster not initialized&#010;- call 'refresh' before multicasting events via the context:&#010;org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6e083721:&#010;startup date [Wed Apr 19 15:02:49 CEST 2017]; root of context hierarchy&#010;&#009;at&#010;org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:404)&#010;[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.context.support.ApplicationListenerDetector.postProcessBeforeDestruction(ApplicationListenerDetector.java:97)&#010;~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:253)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578)&#010;[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554)&#010;[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961)&#010;[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523)&#010;[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968)&#010;[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1033)&#010;[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:555)&#010;[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)&#010;[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at&#010;org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737)&#010;[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at&#010;org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370)&#010;[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at&#010;org.springframework.boot.SpringApplication.run(SpringApplication.java:314)&#010;[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at&#010;org.springframework.boot.SpringApplication.run(SpringApplication.java:1162)&#010;[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at&#010;org.springframework.boot.SpringApplication.run(SpringApplication.java:1151)&#010;[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at sample.camel.Application.main(Application.java:19) [classes/:na]&#010;&#009;at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#010;~[na:1.8.0_112]&#010;&#009;at&#010;sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#010;~[na:1.8.0_112]&#010;&#009;at&#010;sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#010;~[na:1.8.0_112]&#010;&#009;at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_112]&#010;&#009;at&#010;org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:527)&#010;[spring-boot-maven-plugin-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at java.lang.Thread.run(Thread.java:745) [na:1.8.0_112]&#010;&#010;2017-04-19 15:02:51.442 ERROR 222576 --- [           main]&#010;o.s.b.f.s.DefaultListableBeanFactory     : Destroy method on bean with name&#010;'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory'&#010;threw an exception&#010;&#010;java.lang.IllegalStateException: ApplicationEventMulticaster not initialized&#010;- call 'refresh' before multicasting events via the context:&#010;org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6e083721:&#010;startup date [Wed Apr 19 15:02:49 CEST 2017]; root of context hierarchy&#010;&#009;at&#010;org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:404)&#010;[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.context.support.ApplicationListenerDetector.postProcessBeforeDestruction(ApplicationListenerDetector.java:97)&#010;~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:253)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578)&#010;[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554)&#010;[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961)&#010;[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523)&#010;[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968)&#010;[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1033)&#010;[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:555)&#010;[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)&#010;[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at&#010;org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737)&#010;[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at&#010;org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370)&#010;[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at&#010;org.springframework.boot.SpringApplication.run(SpringApplication.java:314)&#010;[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at&#010;org.springframework.boot.SpringApplication.run(SpringApplication.java:1162)&#010;[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at&#010;org.springframework.boot.SpringApplication.run(SpringApplication.java:1151)&#010;[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at sample.camel.Application.main(Application.java:19) [classes/:na]&#010;&#009;at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#010;~[na:1.8.0_112]&#010;&#009;at&#010;sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#010;~[na:1.8.0_112]&#010;&#009;at&#010;sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#010;~[na:1.8.0_112]&#010;&#009;at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_112]&#010;&#009;at&#010;org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:527)&#010;[spring-boot-maven-plugin-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at java.lang.Thread.run(Thread.java:745) [na:1.8.0_112]&#010;&#010;2017-04-19 15:02:51.455 ERROR 222576 --- [           main]&#010;o.s.boot.SpringApplication               : Application startup failed&#010;&#010;org.springframework.beans.factory.UnsatisfiedDependencyException: Error&#010;creating bean with name 'methodValidationPostProcessor' defined in class&#010;path resource&#010;[org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.class]:&#010;Unsatisfied dependency expressed through method&#010;'methodValidationPostProcessor' parameter 0; nested exception is&#010;org.springframework.beans.factory.BeanCreationException: Error creating bean&#010;with name 'jsr303Validator' defined in class path resource&#010;[org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.class]:&#010;Bean instantiation via factory method failed; nested exception is&#010;org.springframework.beans.BeanInstantiationException: Failed to instantiate&#010;[javax.validation.Validator]: Factory method 'jsr303Validator' threw&#010;exception; nested exception is java.lang.NoClassDefFoundError: Could not&#010;initialize class org.hibernate.validator.internal.engine.ConfigurationImpl&#010;&#009;at&#010;org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:223)&#010;~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:702)&#010;~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:527)&#010;~[spring-context-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)&#010;~[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at&#010;org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737)&#010;[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at&#010;org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370)&#010;[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at&#010;org.springframework.boot.SpringApplication.run(SpringApplication.java:314)&#010;[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at&#010;org.springframework.boot.SpringApplication.run(SpringApplication.java:1162)&#010;[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at&#010;org.springframework.boot.SpringApplication.run(SpringApplication.java:1151)&#010;[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at sample.camel.Application.main(Application.java:19) [classes/:na]&#010;&#009;at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#010;~[na:1.8.0_112]&#010;&#009;at&#010;sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#010;~[na:1.8.0_112]&#010;&#009;at&#010;sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#010;~[na:1.8.0_112]&#010;&#009;at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_112]&#010;&#009;at&#010;org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:527)&#010;[spring-boot-maven-plugin-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at java.lang.Thread.run(Thread.java:745) [na:1.8.0_112]&#010;Caused by: org.springframework.beans.factory.BeanCreationException: Error&#010;creating bean with name 'jsr303Validator' defined in class path resource&#010;[org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.class]:&#010;Bean instantiation via factory method failed; nested exception is&#010;org.springframework.beans.BeanInstantiationException: Failed to instantiate&#010;[javax.validation.Validator]: Factory method 'jsr303Validator' threw&#010;exception; nested exception is java.lang.NoClassDefFoundError: Could not&#010;initialize class org.hibernate.validator.internal.engine.ConfigurationImpl&#010;&#009;at&#010;org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:208)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;... 25 common frames omitted&#010;Caused by: org.springframework.beans.BeanInstantiationException: Failed to&#010;instantiate [javax.validation.Validator]: Factory method 'jsr303Validator'&#010;threw exception; nested exception is java.lang.NoClassDefFoundError: Could&#010;not initialize class&#010;org.hibernate.validator.internal.engine.ConfigurationImpl&#010;&#009;at&#010;org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;at&#010;org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;... 38 common frames omitted&#010;Caused by: java.lang.NoClassDefFoundError: Could not initialize class&#010;org.hibernate.validator.internal.engine.ConfigurationImpl&#010;&#009;at&#010;org.hibernate.validator.HibernateValidator.createGenericConfiguration(HibernateValidator.java:33)&#010;~[hibernate-validator-5.3.4.Final.jar:5.3.4.Final]&#010;&#009;at&#010;javax.validation.Validation$GenericBootstrapImpl.configure(Validation.java:276)&#010;~[validation-api-1.1.0.Final.jar:na]&#010;&#009;at&#010;org.springframework.boot.validation.MessageInterpolatorFactory.getObject(MessageInterpolatorFactory.java:53)&#010;~[spring-boot-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at&#010;org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration.jsr303Validator(ValidationAutoConfiguration.java:52)&#010;~[spring-boot-autoconfigure-1.5.2.RELEASE.jar:1.5.2.RELEASE]&#010;&#009;at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#010;~[na:1.8.0_112]&#010;&#009;at&#010;sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#010;~[na:1.8.0_112]&#010;&#009;at&#010;sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#010;~[na:1.8.0_112]&#010;&#009;at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_112]&#010;&#009;at&#010;org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)&#010;~[spring-beans-4.3.7.RELEASE.jar:4.3.7.RELEASE]&#010;&#009;... 39 common frames omitted&#010;&#010;[WARNING] &#010;java.lang.reflect.InvocationTargetException&#010;&#009;at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#010;&#009;at&#010;sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#010;&#009;at&#010;sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#010;&#009;at java.lang.reflect.Method.invoke(Method.java:498)&#010;&#009;at&#010;org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:527)&#010;&#009;at java.lang.Thread.run(Thread.java:745)&#010;Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException:&#010;Error creating bean with name 'methodValidationPostProcessor' defined in&#010;class path resource&#010;[org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.class]:&#010;Unsatisfied dependency expressed through method&#010;'methodValidationPostProcessor' parameter 0; nested exception is&#010;org.springframework.beans.factory.BeanCreationException: Error creating bean&#010;with name 'jsr303Validator' defined in class path resource&#010;[org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.class]:&#010;Bean instantiation via factory method failed; nested exception is&#010;org.springframework.beans.BeanInstantiationException: Failed to instantiate&#010;[javax.validation.Validator]: Factory method 'jsr303Validator' threw&#010;exception; nested exception is java.lang.NoClassDefFoundError: Could not&#010;initialize class org.hibernate.validator.internal.engine.ConfigurationImpl&#010;&#009;at&#010;org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749)&#010;&#009;at&#010;org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467)&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173)&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067)&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513)&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)&#010;&#009;at&#010;org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:223)&#010;&#009;at&#010;org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:702)&#010;&#009;at&#010;org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:527)&#010;&#009;at&#010;org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)&#010;&#009;at&#010;org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737)&#010;&#009;at&#010;org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370)&#010;&#009;at&#010;org.springframework.boot.SpringApplication.run(SpringApplication.java:314)&#010;&#009;at&#010;org.springframework.boot.SpringApplication.run(SpringApplication.java:1162)&#010;&#009;at&#010;org.springframework.boot.SpringApplication.run(SpringApplication.java:1151)&#010;&#009;at sample.camel.Application.main(Application.java:19)&#010;&#009;... 6 more&#010;Caused by: org.springframework.beans.factory.BeanCreationException: Error&#010;creating bean with name 'jsr303Validator' defined in class path resource&#010;[org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.class]:&#010;Bean instantiation via factory method failed; nested exception is&#010;org.springframework.beans.BeanInstantiationException: Failed to instantiate&#010;[javax.validation.Validator]: Factory method 'jsr303Validator' threw&#010;exception; nested exception is java.lang.NoClassDefFoundError: Could not&#010;initialize class org.hibernate.validator.internal.engine.ConfigurationImpl&#010;&#009;at&#010;org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599)&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173)&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067)&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513)&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)&#010;&#009;at&#010;org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)&#010;&#009;at&#010;org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:208)&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)&#010;&#009;at&#010;org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066)&#010;&#009;at&#010;org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:835)&#010;&#009;at&#010;org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741)&#010;&#009;... 25 more&#010;Caused by: org.springframework.beans.BeanInstantiationException: Failed to&#010;instantiate [javax.validation.Validator]: Factory method 'jsr303Validator'&#010;threw exception; nested exception is java.lang.NoClassDefFoundError: Could&#010;not initialize class&#010;org.hibernate.validator.internal.engine.ConfigurationImpl&#010;&#009;at&#010;org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189)&#010;&#009;at&#010;org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)&#010;&#009;... 38 more&#010;Caused by: java.lang.NoClassDefFoundError: Could not initialize class&#010;org.hibernate.validator.internal.engine.ConfigurationImpl&#010;&#009;at&#010;org.hibernate.validator.HibernateValidator.createGenericConfiguration(HibernateValidator.java:33)&#010;&#009;at&#010;javax.validation.Validation$GenericBootstrapImpl.configure(Validation.java:276)&#010;&#009;at&#010;org.springframework.boot.validation.MessageInterpolatorFactory.getObject(MessageInterpolatorFactory.java:53)&#010;&#009;at&#010;org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration.jsr303Validator(ValidationAutoConfiguration.java:52)&#010;&#009;at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#010;&#009;at&#010;sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&#010;&#009;at&#010;sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#010;&#009;at java.lang.reflect.Method.invoke(Method.java:498)&#010;&#009;at&#010;org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)&#010;&#009;... 39 more&#010;&#010;&#010;&#010;--&#010;View this message in context: http://camel.465427.n5.nabble.com/Spring-Boot-1-5-fails-when-camel-swagger-java-in-place-tp5797920p5797927.html&#010;Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3C1492607304155-5797927.post%40n5.nabble.com%3E,2017-04-19 13:08:24,users,218.0,    Re: Spring Boot > 1.5 fails when camel-swagger-java in place
305,305,249.0,214.0,Claus Ibsen,"There is this ticket related&#010;https://issues.apache.org/jira/browse/CAMEL-10373&#010;&#010;the swagger-java-starter do have the hibernate-validate as dependency&#010;https://github.com/apache/camel/blob/master/platforms/spring-boot/components-starter/camel-swagger-java-starter/pom.xml#L49&#010;&#010;And so does 2.18.x&#010;https://github.com/apache/camel/blob/camel-2.18.x/components-starter/camel-swagger-java-starter/pom.xml#L48&#010;&#010;So do we need some additional dependency besides hibernate-validator?&#010;&#010;&#010;On Wed, Apr 19, 2017 at 2:30 PM, Thomas Weinschenk&#010;&lt;thomas.weinschenk@solutions.endress.com&gt; wrote:&#010;&gt; You are right I forgot to mention the version...&#010;&gt;&#010;&gt; 2.18.3&#010;&gt;&#010;&gt;&#010;&gt;&#010;&gt; --&#010;&gt; View this message in context: http://camel.465427.n5.nabble.com/Spring-Boot-1-5-fails-when-camel-swagger-java-in-place-tp5797920p5797923.html&#010;&gt; Sent from the Camel - Users mailing list archive at Nabble.com.&#010;&#010;&#010;&#010;-- &#010;Claus Ibsen&#010;-----------------&#010;http://davsclaus.com @davsclaus&#010;Camel in Action 2: https://www.manning.com/ibsen2&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-users/201704.mbox/ajax/%3CCAGB5yN%3DYijbdMGNv1tL1YhCpoQn4aE9QyahmsEdzcFy02C1r%2Bg%40mail.gmail.com%3E,2017-04-19 13:27:36,users,215.0,      Re: Spring Boot > 1.5 fails when camel-swagger-java in place
306,306,250.0,167.0,Zoran Regvart,"Hi Cameleers,&#010;just a quick reminder and an offer to help, if you're interested and&#010;don't have the time to negotiate the taping date let me know I can&#010;contact the show host and arrange something for you.&#010;&#010;I think it would be super awesome if we could arrange a slot in the&#010;late June early July to coincide with 10 year anniversary of Camel&#010;1.0.0 release.&#010;&#010;As I follow the show quite regularly I can help you with notes for the&#010;typical questions the hosts will inquire about.&#010;&#010;(I don't think I should put myself in front of others that have been&#010;with Camel much longer than I, and being non-native English speaker it&#010;would be best if someone else took up the mantle)&#010;&#010;thank you, and sorry for all the prodding :)&#010;&#010;zoran&#010;&#010;On Thu, Apr 13, 2017 at 10:04 AM, Zoran Regvart &lt;zoran@regvart.com&gt; wrote:&#010;&gt; Hi Cameleers,&#010;&gt; I'm a big fan of the FLOSS Weekly podcast[1] on TWiT network, it would&#010;&gt; be really cool if Camel would be featured in one of the episodes. It&#010;&gt; airs on Tuesdays at 16:30 UTC and the way you get on the show is to&#010;&gt; contact Randal at merlyn@stonehenge.com, there is a list of upcoming&#010;&gt; guests and slots that need filling at[2]&#010;&gt;&#010;&gt; Anyone up for it?&#010;&gt;&#010;&gt; zoran&#010;&gt;&#010;&gt; [1] https://twit.tv/shows/floss-weekly&#010;&gt; [2] http://bit.ly/flossweeklyguests&#010;&gt; --&#010;&gt; Zoran Regvart&#010;&#010;&#010;&#010;-- &#010;Zoran Regvart&#010;&#010;",http://mail-archives.apache.org/mod_mbox/camel-dev/201704.mbox/ajax/%3CCABD_Zr87rhzR0DrckzdqcfnP6aRepJw9Yv%3DvACw261h8fu8TLA%40mail.gmail.com%3E,2017-04-19 13:27:37,mail,167.0,  Re: FLOSS Weekly podcast
